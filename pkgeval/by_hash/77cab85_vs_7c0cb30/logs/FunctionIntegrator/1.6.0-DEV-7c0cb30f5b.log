Julia Version 1.6.0-DEV.603
Commit 7c0cb30f5b (2020-08-07 05:02 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_LaN9uK/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_LaN9uK/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  1.024789 seconds (1.34 M allocations: 70.662 MiB, 9.84% gc time)
Running: chebyshev_quadrature with k=1
  1.803824 seconds (2.25 M allocations: 128.856 MiB, 4.64% gc time)
Running: chebyshev_quadrature with k=2
  0.289671 seconds (425.40 k allocations: 24.397 MiB)
Running: chebyshev_quadrature with k=3
  0.360282 seconds (545.35 k allocations: 29.892 MiB, 4.01% gc time)
Running: chebyshev_quadrature with k=4
  0.315539 seconds (488.16 k allocations: 26.422 MiB)
Running: jacobi_quadrature with α=β=1
 40.723520 seconds (39.41 M allocations: 3.139 GiB, 10.70% gc time)
Running: laguerre_quadrature with k=1
  3.208196 seconds (3.34 M allocations: 185.948 MiB, 3.40% gc time)
Running: legendre_quadrature
  0.227046 seconds (215.36 k allocations: 12.339 MiB)
Running: lobatto_quadrature
  0.333941 seconds (344.02 k allocations: 20.597 MiB)
Running: radau_quadrature
  0.328790 seconds (326.33 k allocations: 19.597 MiB, 8.73% gc time)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 82.949711 seconds (100.02 M allocations: 1.491 GiB, 0.25% gc time)
Running: rectangle_rule_midpoint.
  0.172514 seconds (173.78 k allocations: 3.889 MiB, 15.13% gc time)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 79.836365 seconds (100.02 M allocations: 1.491 GiB, 0.22% gc time)
Running: rombergs_method
  0.543981 seconds (753.79 k allocations: 43.374 MiB, 5.58% gc time)
Running: simpsons_rule
  0.043613 seconds (47.41 k allocations: 2.123 MiB)
Running: simpsons38_rule
  0.095823 seconds (113.25 k allocations: 5.981 MiB)
Running: trapezoidal_rule
  0.324867 seconds (1.52 M allocations: 25.801 MiB)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.089001 seconds (32.69 k allocations: 1.945 MiB)
Running: chebyshev_quadrature with k=1
  0.398252 seconds (275.82 k allocations: 13.985 MiB)
Running: chebyshev_quadrature with k=2
  0.147974 seconds (115.76 k allocations: 3.795 MiB)
Running: chebyshev_quadrature with k=3
  0.149799 seconds (105.11 k allocations: 3.641 MiB)
Running: chebyshev_quadrature with k=4
  0.155094 seconds (87.72 k allocations: 3.287 MiB)
Running: jacobi_quadrature with α=β=1
  2.496271 seconds (536.60 k allocations: 163.520 MiB, 6.19% gc time)
Running: legendre_quadrature
  0.150099 seconds (62.37 k allocations: 3.480 MiB)
Running: lobatto_quadrature
  0.021036 seconds (16.81 k allocations: 1.037 MiB)
Running: radau_quadrature
  0.021104 seconds (16.79 k allocations: 1.037 MiB)
Running: rectangle_rule_left
 31.612526 seconds (471.41 M allocations: 7.025 GiB, 3.27% gc time)
Running: rectangle_rule_midpoint
  0.000018 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 31.375344 seconds (476.96 M allocations: 7.107 GiB, 3.18% gc time)
Running: rombergs_method
  0.346685 seconds (360.77 k allocations: 20.338 MiB)
Running: simpsons_rule
  0.000031 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.051932 seconds (19.94 k allocations: 1.196 MiB)
Running: trapezoidal_rule
  0.056467 seconds (18.38 k allocations: 1.101 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.029454 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.096080 seconds (2.40 k allocations: 113.453 KiB)
Running: chebyshev_quadrature with k=2
  0.093618 seconds (2.65 k allocations: 121.469 KiB)
Running: chebyshev_quadrature with k=3
  0.097669 seconds (3.08 k allocations: 133.688 KiB)
Running: chebyshev_quadrature with k=4
  0.099196 seconds (3.08 k allocations: 133.750 KiB)
Running: jacobi_quadrature with α=β=1
  0.307631 seconds (379.29 k allocations: 19.806 MiB)
Running: legendre_quadrature
  0.061379 seconds (1.24 k allocations: 63.609 KiB)
Running: lobatto_quadrature
  0.000089 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000052 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000542 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000370 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000515 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.069071 seconds (1.01 k allocations: 54.109 KiB)
Running: simpsons_rule
  0.000036 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.024316 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.021821 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.062922 seconds (75.98 k allocations: 4.409 MiB)
Running: chebyshev_quadrature with k=1
  0.390502 seconds (240.48 k allocations: 13.497 MiB, 48.45% gc time)
Running: chebyshev_quadrature with k=2
  0.204356 seconds (295.72 k allocations: 16.587 MiB)
Running: chebyshev_quadrature with k=3
  0.186430 seconds (275.63 k allocations: 14.992 MiB)
Running: chebyshev_quadrature with k=4
  0.186352 seconds (275.67 k allocations: 14.894 MiB)
Running: jacobi_quadrature with α=β=1
  2.401004 seconds (466.15 k allocations: 164.260 MiB, 10.22% gc time)
Running: legendre_quadrature
  0.140258 seconds (193.22 k allocations: 11.134 MiB)
Running: lobatto_quadrature
  0.214581 seconds (204.45 k allocations: 11.822 MiB, 8.57% gc time)
Running: radau_quadrature
  0.174359 seconds (204.45 k allocations: 11.825 MiB)
Running: rectangle_rule_left
  1.282564 seconds (19.80 k allocations: 1.195 MiB)
Running: rectangle_rule_midpoint
  0.022679 seconds (25.98 k allocations: 1.617 MiB)
Running: rectangle_rule_right
  1.170569 seconds (18.30 k allocations: 1.107 MiB)
Running: rombergs_method
  0.133967 seconds (140.08 k allocations: 8.067 MiB)
Running: simpsons_rule
  0.031672 seconds (29.08 k allocations: 1.804 MiB)
Running: simpsons38_rule
  0.036899 seconds (44.73 k allocations: 2.791 MiB)
Running: trapezoidal_rule
  0.027761 seconds (45.24 k allocations: 1.826 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.041880 seconds (101.48 k allocations: 3.079 MiB)
Running: chebyshev_quadrature with k=1
  0.207125 seconds (247.58 k allocations: 13.597 MiB, 8.47% gc time)
Running: chebyshev_quadrature with k=2
  0.222719 seconds (303.35 k allocations: 16.596 MiB)
Running: chebyshev_quadrature with k=3
  0.214831 seconds (283.05 k allocations: 15.016 MiB)
Running: chebyshev_quadrature with k=4
  0.238329 seconds (283.09 k allocations: 15.084 MiB, 7.69% gc time)
Running: hermite_quadrature with k=2
 14.857754 seconds (22.14 M allocations: 1.148 GiB, 7.86% gc time)
Running: jacobi_quadrature with α=β=1
  0.456043 seconds (476.19 k allocations: 50.462 MiB, 8.43% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.239605 seconds (288.63 k allocations: 15.911 MiB, 12.06% gc time)
Running: legendre_quadrature
  0.166738 seconds (200.30 k allocations: 11.533 MiB)
Running: lobatto_quadrature
  0.248038 seconds (225.97 k allocations: 37.640 MiB, 9.81% gc time)
Running: radau_quadrature
  0.242037 seconds (222.56 k allocations: 30.302 MiB)
Running: rectangle_rule_left
  0.029687 seconds (22.96 k allocations: 1.356 MiB)
Running: rectangle_rule_midpoint
  0.029035 seconds (27.93 k allocations: 1.714 MiB)
Running: rectangle_rule_right
  0.026180 seconds (19.52 k allocations: 1.168 MiB)
Running: rombergs_method
  0.147968 seconds (142.90 k allocations: 8.131 MiB, 15.26% gc time)
Running: simpsons_rule
  0.039836 seconds (41.33 k allocations: 2.160 MiB)
Running: simpsons38_rule
  0.048586 seconds (60.12 k allocations: 3.201 MiB)
Running: trapezoidal_rule
  0.031724 seconds (31.62 k allocations: 1.772 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.042321 seconds (61.58 k allocations: 2.363 MiB)
Running: chebyshev_quadrature with k=1
  0.195286 seconds (242.71 k allocations: 13.362 MiB)
Running: chebyshev_quadrature with k=2
  0.239876 seconds (298.07 k allocations: 16.327 MiB)
Running: chebyshev_quadrature with k=3
  0.239834 seconds (277.91 k allocations: 14.780 MiB, 11.12% gc time)
Running: chebyshev_quadrature with k=4
  0.221987 seconds (277.94 k allocations: 14.795 MiB)
Running: hermite_quadrature with k=2
  0.156227 seconds (177.91 k allocations: 10.166 MiB)
Running: jacobi_quadrature with α=β=1
  7.840435 seconds (468.75 k allocations: 1.176 GiB, 11.78% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.204646 seconds (283.49 k allocations: 15.706 MiB)
Running: legendre_quadrature
  0.151356 seconds (195.46 k allocations: 11.246 MiB)
Running: lobatto_quadrature
  0.224216 seconds (216.33 k allocations: 23.344 MiB)
Running: radau_quadrature
  0.212790 seconds (215.48 k allocations: 21.274 MiB)
Running: rectangle_rule_left
  0.189446 seconds (20.51 k allocations: 1.237 MiB, 88.08% gc time)
Running: rectangle_rule_midpoint
  0.018165 seconds (26.71 k allocations: 1.655 MiB)
Running: rectangle_rule_right
  0.027578 seconds (18.28 k allocations: 1.107 MiB)
Running: rombergs_method
  0.098084 seconds (138.37 k allocations: 7.933 MiB)
Running: simpsons_rule
  0.034721 seconds (33.56 k allocations: 1.934 MiB)
Running: simpsons38_rule
  0.039348 seconds (50.64 k allocations: 2.943 MiB)
Running: trapezoidal_rule
  0.036483 seconds (26.29 k allocations: 1.595 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.032872 seconds (32.54 k allocations: 1.960 MiB)
Running: chebyshev_quadrature with k=1
  0.225487 seconds (241.04 k allocations: 13.578 MiB)
Running: chebyshev_quadrature with k=2
  0.234323 seconds (296.30 k allocations: 16.664 MiB)
Running: chebyshev_quadrature with k=3
  0.205822 seconds (276.23 k allocations: 14.992 MiB)
Running: chebyshev_quadrature with k=4
  0.242387 seconds (276.27 k allocations: 14.823 MiB, 10.91% gc time)
Running: jacobi_quadrature with α=β=1
  1.791537 seconds (466.80 k allocations: 195.266 MiB, 6.29% gc time)
Running: legendre_quadrature
  0.168478 seconds (193.79 k allocations: 11.144 MiB)
Running: lobatto_quadrature
  0.177932 seconds (205.02 k allocations: 11.865 MiB)
Running: radau_quadrature
  0.201379 seconds (205.02 k allocations: 11.860 MiB, 8.66% gc time)
Running: rectangle_rule_left
  0.324813 seconds (20.37 k allocations: 1.224 MiB)
Running: rectangle_rule_midpoint
  0.024823 seconds (26.35 k allocations: 1.637 MiB)
Running: rectangle_rule_right
  0.115519 seconds (18.68 k allocations: 1.127 MiB)
Running: rombergs_method
  0.131155 seconds (151.46 k allocations: 8.820 MiB)
Running: simpsons_rule
  0.030307 seconds (29.83 k allocations: 1.838 MiB)
Running: simpsons38_rule
  0.034006 seconds (45.51 k allocations: 2.825 MiB)
Running: trapezoidal_rule
  0.026563 seconds (46.24 k allocations: 1.863 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.024510 seconds (33.30 k allocations: 1.908 MiB)
Running: chebyshev_quadrature with k=1
  0.264992 seconds (241.60 k allocations: 13.526 MiB, 6.77% gc time)
Running: chebyshev_quadrature with k=2
  0.247557 seconds (296.90 k allocations: 16.578 MiB)
Running: chebyshev_quadrature with k=3
  0.194632 seconds (276.77 k allocations: 14.975 MiB)
Running: chebyshev_quadrature with k=4
  0.213128 seconds (276.81 k allocations: 14.996 MiB, 8.74% gc time)
Running: jacobi_quadrature with α=β=1
  1.741636 seconds (467.46 k allocations: 149.937 MiB, 2.93% gc time)
Running: legendre_quadrature
  0.153926 seconds (194.36 k allocations: 11.161 MiB)
Running: lobatto_quadrature
  0.206713 seconds (205.60 k allocations: 11.870 MiB, 9.65% gc time)
Running: radau_quadrature
  0.200004 seconds (205.59 k allocations: 11.932 MiB)
Running: rectangle_rule_left
  1.193692 seconds (20.64 k allocations: 1.238 MiB)
Running: rectangle_rule_midpoint
  0.026883 seconds (26.34 k allocations: 1.637 MiB)
Running: rectangle_rule_right
  1.135823 seconds (18.65 k allocations: 1.125 MiB)
Running: rombergs_method
  0.139419 seconds (141.39 k allocations: 8.144 MiB)
Running: simpsons_rule
  0.034123 seconds (30.58 k allocations: 1.866 MiB)
Running: simpsons38_rule
  0.037970 seconds (46.26 k allocations: 2.854 MiB)
Running: trapezoidal_rule
  0.026456 seconds (58.50 k allocations: 2.064 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.186871 seconds (153.19 k allocations: 9.099 MiB)
Running: chebyshev_quadrature with k=1
  0.196442 seconds (91.28 k allocations: 3.297 MiB)
Running: chebyshev_quadrature with k=2
  0.214552 seconds (127.05 k allocations: 3.990 MiB, 14.24% gc time)
Running: chebyshev_quadrature with k=3
  0.154440 seconds (115.62 k allocations: 3.819 MiB)
Running: chebyshev_quadrature with k=4
  0.145293 seconds (95.16 k allocations: 3.413 MiB)
Running: jacobi_quadrature with α=β=1
  2.264796 seconds (510.17 k allocations: 169.325 MiB, 8.82% gc time)
Running: legendre_quadrature
  0.176976 seconds (38.38 k allocations: 2.109 MiB)
Running: lobatto_quadrature
  0.000173 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000084 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 51.337379 seconds (590.00 M allocations: 8.792 GiB, 3.55% gc time)
Running: rectangle_rule_midpoint
  0.000060 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 49.978023 seconds (592.75 M allocations: 8.833 GiB, 3.61% gc time)
Running: rombergs_method
  0.130837 seconds (41.92 k allocations: 2.259 MiB)
Running: simpsons_rule
  0.000047 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.028452 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.023052 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 34.971851 seconds (629.34 M allocations: 9.388 GiB, 5.39% gc time)
Running: chebyshev_quadrature with k=1
  0.483512 seconds (439.69 k allocations: 24.286 MiB)
Running: chebyshev_quadrature with k=2
 12.695685 seconds (497.10 k allocations: 4.042 GiB, 4.43% gc time)
Running: chebyshev_quadrature with k=3
  5.848889 seconds (290.74 k allocations: 1.643 GiB, 4.28% gc time)
Running: chebyshev_quadrature with k=4
  8.363860 seconds (290.77 k allocations: 2.262 GiB, 2.49% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 56.376624 seconds (505.71 k allocations: 13.255 GiB, 4.51% gc time)
Running: legendre_quadrature.
  6.124710 seconds (233.15 k allocations: 1.976 GiB, 2.93% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 58.810937 seconds (8.24 M allocations: 13.384 GiB, 4.35% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 49.849096 seconds (7.24 M allocations: 13.369 GiB, 2.64% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.964961 seconds (23.40 k allocations: 1.405 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.305667 seconds (32.03 k allocations: 1.962 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.962666 seconds (23.62 k allocations: 1.416 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.439082 seconds (457.28 k allocations: 153.731 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 40.623485 seconds (600.04 M allocations: 8.943 GiB, 8.57% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 41.204859 seconds (600.05 M allocations: 8.944 GiB, 7.79% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 41.638758 seconds (600.04 M allocations: 8.943 GiB, 8.12% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.064276 seconds (182.59 k allocations: 4.522 MiB)
Running: chebyshev_quadrature with k=1
  0.218625 seconds (258.20 k allocations: 14.029 MiB)
Running: chebyshev_quadrature with k=2
  0.214141 seconds (284.36 k allocations: 15.189 MiB)
Running: chebyshev_quadrature with k=3
  0.209290 seconds (260.81 k allocations: 13.485 MiB)
Running: chebyshev_quadrature with k=4
  0.204149 seconds (260.84 k allocations: 13.528 MiB)
Running: jacobi_quadrature with α=β=1
  0.363726 seconds (405.67 k allocations: 35.876 MiB)
Running: laguerre_quadrature with k=2
  0.183483 seconds (188.19 k allocations: 10.881 MiB)
Running: legendre_quadrature
  0.139501 seconds (151.89 k allocations: 8.414 MiB)
Running: lobatto_quadrature
  0.036209 seconds (10.88 k allocations: 15.109 MiB)
Running: radau_quadrature
  0.032506 seconds (9.66 k allocations: 13.183 MiB)
Running: rectangle_rule_left
  0.058852 seconds (19.85 k allocations: 1.172 MiB)
Running: rectangle_rule_midpoint
  0.046492 seconds (26.82 k allocations: 1.642 MiB)
Running: rectangle_rule_right
  0.050201 seconds (18.40 k allocations: 1.096 MiB)
Running: rombergs_method
  0.229941 seconds (171.03 k allocations: 9.983 MiB)
Running: simpsons_rule
  0.001882 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.053426 seconds (81.54 k allocations: 3.524 MiB)
Running: trapezoidal_rule
  0.204255 seconds (2.39 M allocations: 37.759 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002539 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.130440 seconds (2.58 k allocations: 1.696 MiB)
Running: chebyshev_quadrature with k=2
  0.103766 seconds (2.84 k allocations: 2.359 MiB)
Running: chebyshev_quadrature with k=3
  0.108893 seconds (3.26 k allocations: 2.060 MiB)
Running: chebyshev_quadrature with k=4
  0.104154 seconds (3.26 k allocations: 1.501 MiB)
Running: jacobi_quadrature with α=β=1
  6.802233 seconds (402.46 k allocations: 906.578 MiB, 3.50% gc time)
Running: legendre_quadrature
  0.067710 seconds (1.33 k allocations: 72.281 KiB)
Running: lobatto_quadrature
  0.000174 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000124 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  3.491091 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000517 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.122685 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.076933 seconds (1.16 k allocations: 66.734 KiB)
Running: simpsons_rule
  0.000055 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000052 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000809 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000762 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.117120 seconds (2.48 k allocations: 576.609 KiB)
Running: chebyshev_quadrature with k=2
  0.105074 seconds (2.73 k allocations: 777.391 KiB)
Running: chebyshev_quadrature with k=3
  0.110495 seconds (3.15 k allocations: 685.641 KiB)
Running: chebyshev_quadrature with k=4
  0.108209 seconds (3.16 k allocations: 516.203 KiB)
Running: jacobi_quadrature with α=β=1
  4.113791 seconds (388.73 k allocations: 253.822 MiB)
Running: legendre_quadrature
  0.061561 seconds (1.28 k allocations: 65.438 KiB)
Running: lobatto_quadrature
  0.000091 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000047 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 10.786587 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001067 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 10.654791 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.087650 seconds (1.18 k allocations: 62.562 KiB)
Running: simpsons_rule
  0.000071 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000076 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001691 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
