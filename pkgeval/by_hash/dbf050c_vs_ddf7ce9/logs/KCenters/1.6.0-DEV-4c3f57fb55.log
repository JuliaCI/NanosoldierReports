Julia Version 1.6.0-DEV.2
Commit 4c3f57fb55 (2020-05-08 16:58 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed DataValueInterfaces ───────── v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataAPI ───────────────────── v1.3.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.3
  Installed DataStructures ────────────── v0.17.15
  Installed JSON ──────────────────────── v0.21.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed MappedArrays ──────────────── v0.2.2
  Installed Missings ──────────────────── v0.4.3
  Installed Reexport ──────────────────── v0.2.0
  Installed Compat ────────────────────── v3.9.0
  Installed OrderedCollections ────────── v1.2.0
  Installed Tables ────────────────────── v1.0.4
  Installed MLDataUtils ───────────────── v0.5.1
  Installed SimilaritySearch ──────────── v0.3.19
  Installed TableTraits ───────────────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataPattern ─────────────── v0.5.3
  Installed InvertedIndices ───────────── v1.0.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.9.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.3
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_K2UQZz/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_K2UQZz/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.9.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.3
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9323044313987097
[ Info: 0.8326150393486023
[ Info: 0.5547140726943811
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3415029693643252
mean(cdnet.distances) = 0.3763099698225657
mean(crand.distances) = 0.3259004581222932
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1884765625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1884765625,"f1":null,"seconds":3.937631845474243e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.0625,"distances_sum":586.9370852900191}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1962890625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1962890625,"f1":null,"seconds":3.930181264877319e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.140625,"distances_sum":623.3303771458612}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1962890625,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.1962890625,"f1":null,"seconds":3.930181264877319e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.140625,"distances_sum":623.3303771458612}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.8013970404595413,"seconds":2.896413207054138e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.90625,"distances_sum":2062.904236085229}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8486268939393948,"seconds":3.5353004932403564e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.3984375,"distances_sum":2415.733928428904}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2021484375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2021484375,"f1":null,"seconds":3.4458935260772705e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.3125,"distances_sum":643.157638223569}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7490234375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7490234375,"f1":0.8486268939393948,"seconds":3.5353004932403564e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.3984375,"distances_sum":2415.733928428904}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.902344010156511,"seconds":5.478039383888245e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.359375,"distances_sum":2833.790755670525}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9526842948717955,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.796875,"distances_sum":3291.821934077442}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8561906843156851,"seconds":4.079192876815796e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.328125,"distances_sum":2468.0264142553306}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9526842948717955,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.796875,"distances_sum":3291.821934077442}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9169921875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9526842948717955,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.796875,"distances_sum":3291.821934077442}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8074637168387178,"seconds":3.6265701055526733e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":7.078125,"distances_sum":2026.068402997404}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6904296875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6904296875,"f1":0.8074637168387178,"seconds":3.6265701055526733e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":7.078125,"distances_sum":2026.068402997404}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7099609375, conf: {"ssize":9,"bsize":4}, perf: {"precision":1.0,"recall":0.7099609375,"f1":0.8240306568431578,"seconds":2.9671937227249146e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":7.2109375,"distances_sum":2076.1949774080463}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7099609375,"state":{"ssize":9,"bsize":4},"perf":{"precision":1.0,"recall":0.7099609375,"f1":0.8240306568431578,"seconds":2.9671937227249146e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":7.2109375,"distances_sum":2076.1949774080463}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8876696220446227,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.0625,"distances_sum":2600.2440487622453}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8663690476190485,"seconds":5.304813385009766e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.1796875,"distances_sum":2408.0143150900412}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9068056943056951,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.2265625,"distances_sum":2706.1812352508596}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8388671875,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.8388671875,"f1":0.9068056943056951,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.2265625,"distances_sum":2706.1812352508596}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8388671875,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.8388671875,"f1":0.9068056943056951,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.2265625,"distances_sum":2706.1812352508596}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5615234375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5615234375,"f1":0.7071952353202358,"seconds":4.624947905540466e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":6.7421875,"distances_sum":1545.4892910465571}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5615234375,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.5615234375,"f1":0.7071952353202358,"seconds":4.624947905540466e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":6.7421875,"distances_sum":1545.4892910465571}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5869140625, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.5869140625,"f1":0.7263297466422471,"seconds":4.881992936134338e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":6.96875,"distances_sum":1651.1185606347035}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8996139277389286,"seconds":4.7031790018081665e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.34375,"distances_sum":2603.237839316662}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.572265625, conf: {"ssize":9,"bsize":3}, perf: {"precision":1.0,"recall":0.572265625,"f1":0.7132775210900217,"seconds":4.818663001060486e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":6.625,"distances_sum":1589.4436411414001}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9163607226107232,"seconds":4.7888606786727905e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.4296875,"distances_sum":2763.1608153439056}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.79093978937729,"seconds":4.075467586517334e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":7.4921875,"distances_sum":1916.9513316814841}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8556329087579095,"seconds":4.546716809272766e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.25,"distances_sum":2358.7547148922486}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7294921875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7294921875,"f1":0.8350482850482858,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.2109375,"distances_sum":2154.301693098748}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.85546875,"state":{"ssize":9,"bsize":6},"perf":{"precision":1.0,"recall":0.85546875,"f1":0.9163607226107232,"seconds":4.7888606786727905e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.4296875,"distances_sum":2763.1608153439056}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":13,"bsize":8}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9644917582417586,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.78125,"distances_sum":3231.3785628521246}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.921852106227107,"seconds":4.559755325317383e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.453125,"distances_sum":2773.1462567666626}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9617960164835169,"seconds":6.901100277900696e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.8125,"distances_sum":3169.1431150277876}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9529819139194147,"seconds":6.387010216712952e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.796875,"distances_sum":3052.30476115676}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9337886072261078,"seconds":7.016584277153015e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.4921875,"distances_sum":2896.867688889769}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9527758699633706,"seconds":6.750226020812988e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.7890625,"distances_sum":3119.4342625495897}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9406021062271068,"seconds":5.6158751249313354e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.7265625,"distances_sum":2987.1970613431567}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":13,"bsize":8},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9644917582417586,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.78125,"distances_sum":3231.3785628521246}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":13,"bsize":8},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9644917582417586,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.78125,"distances_sum":3231.3785628521246}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4990234375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.4990234375,"f1":0.6524246586746593,"seconds":4.647299647331238e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":6.625,"distances_sum":764.9596808976886}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1669921875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1669921875,"f1":null,"seconds":2.5276094675064087e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":4.390625,"distances_sum":278.58292375939}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6181640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6181640625,"f1":0.7511446886446892,"seconds":4.453584551811218e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":7.75,"distances_sum":943.0112788661096}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6181640625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6181640625,"f1":0.7511446886446892,"seconds":4.453584551811218e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":7.75,"distances_sum":943.0112788661096}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9345154845154852,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.6171875,"distances_sum":1477.1045052219727}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8574269480519487,"seconds":4.665926098823547e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.390625,"distances_sum":1201.407588404953}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8857421875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8857421875,"f1":0.9345154845154852,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.6171875,"distances_sum":1477.1045052219727}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9651785714285718,"seconds":4.516914486885071e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.875,"distances_sum":1587.0093154945087}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9522149725274731,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.734375,"distances_sum":1533.0001660913222}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9443171411921417,"seconds":5.016103386878967e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.7109375,"distances_sum":1511.4455619390883}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9651785714285718,"seconds":4.516914486885071e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.875,"distances_sum":1587.0093154945087}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9651785714285718,"seconds":4.516914486885071e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.875,"distances_sum":1587.0093154945087}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.55078125,"f1":null,"seconds":5.016103386878967e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.4375,"distances_sum":845.3153285490786}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8740306568431575,"seconds":6.3087791204452515e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.53125,"distances_sum":1287.2873527365048}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.791015625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.791015625,"f1":0.8740306568431575,"seconds":6.3087791204452515e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.53125,"distances_sum":1287.2873527365048}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9528159340659343,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.796875,"distances_sum":1646.9658473261304}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.927784715284716,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.7109375,"distances_sum":1503.4547159250549}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.937025474525475,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.7109375,"distances_sum":1581.070204892652}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8828416375291382,"seconds":5.114823579788208e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.6171875,"distances_sum":1356.868799430526}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9528159340659343,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.796875,"distances_sum":1646.9658473261304}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9790579212454217,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.9453125,"distances_sum":1760.4642807268956}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9713942307692313,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.921875,"distances_sum":1714.3563255978142}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9714114010989015,"seconds":6.070360541343689e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.9140625,"distances_sum":1723.014877022149}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9628548534798539,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.90625,"distances_sum":1652.9620817296136}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9619619963369967,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.875,"distances_sum":1662.7225983895705}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9533768315018322,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.890625,"distances_sum":1642.2575798568091}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9790579212454217,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.9453125,"distances_sum":1760.4642807268956}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9790579212454217,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.9453125,"distances_sum":1760.4642807268956}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8053358100233108,"seconds":4.7441571950912476e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.03125,"distances_sum":1134.1121787590016}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.805193244255745,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.046875,"distances_sum":1149.0699295789132}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3876953125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3876953125,"f1":null,"seconds":3.295019268989563e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":6.078125,"distances_sum":610.2442520108094}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69140625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.69140625,"f1":0.8053358100233108,"seconds":4.7441571950912476e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.03125,"distances_sum":1134.1121787590016}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9036697677322685,"seconds":5.058944225311279e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.625,"distances_sum":1458.4443623641216}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9340981934731943,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.765625,"distances_sum":1571.2352004922463}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9220243298368306,"seconds":5.21540641784668e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.703125,"distances_sum":1510.6614000155216}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9340981934731943,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.765625,"distances_sum":1571.2352004922463}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9492273351648357,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.7890625,"distances_sum":1645.647670456574}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9411343864468871,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.78125,"distances_sum":1583.1503527821285}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9735119047619049,"seconds":6.4782798290252686e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8671875,"distances_sum":1777.5490189898874}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9717090201465205,"seconds":5.4817646741867065e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.890625,"distances_sum":1760.859138814841}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9735119047619049,"seconds":6.4782798290252686e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8671875,"distances_sum":1777.5490189898874}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9735119047619049,"seconds":6.4782798290252686e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8671875,"distances_sum":1777.5490189898874}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2138671875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2138671875,"f1":null,"seconds":2.907589077949524e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":5.8203125,"distances_sum":350.0290018115393}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2138671875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2138671875,"f1":null,"seconds":2.907589077949524e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":5.8203125,"distances_sum":350.0290018115393}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.357421875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.357421875,"f1":null,"seconds":3.17208468914032e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":5.8203125,"distances_sum":492.7336438871349}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9750093005952379,"recall":0.7353515625,"f1":0.8315874880328009,"seconds":4.900619387626648e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.453125,"distances_sum":1129.9049288792319}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7353515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":0.9750093005952379,"recall":0.7353515625,"f1":0.8315874880328009,"seconds":4.900619387626648e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.453125,"distances_sum":1129.9049288792319}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.9732793898809525,"recall":0.78515625,"f1":0.862314053134366,"seconds":5.025416612625122e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.703125,"distances_sum":1233.3250043025046}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":5,"bsize":5}, perf: {"precision":0.9840215773809522,"recall":0.748046875,"f1":0.8425242726023979,"seconds":4.911795258522034e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.3515625,"distances_sum":1145.8335267169723}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":1,"bsize":6},"perf":{"precision":0.9732793898809525,"recall":0.78515625,"f1":0.862314053134366,"seconds":5.025416612625122e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.703125,"distances_sum":1233.3250043025046}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":7,"bsize":6}, perf: {"precision":0.9851097470238095,"recall":0.7900390625,"f1":0.8694280329045961,"seconds":5.2247196435928345e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.5546875,"distances_sum":1230.4306313677153}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7900390625,"state":{"ssize":7,"bsize":6},"perf":{"precision":0.9851097470238095,"recall":0.7900390625,"f1":0.8694280329045961,"seconds":5.2247196435928345e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.5546875,"distances_sum":1230.4306313677153}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7900390625,"state":{"ssize":7,"bsize":6},"perf":{"precision":0.9851097470238095,"recall":0.7900390625,"f1":0.8694280329045961,"seconds":5.2247196435928345e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.5546875,"distances_sum":1230.4306313677153}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.548828125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.548828125,"f1":0.6923304126429133,"seconds":3.900378942489624e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.546875,"distances_sum":807.1619130315262}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5439453125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5439453125,"f1":0.6855304417804424,"seconds":3.935769200325012e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.5625,"distances_sum":801.1245424555036}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.548828125,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.548828125,"f1":0.6923304126429133,"seconds":3.900378942489624e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.546875,"distances_sum":807.1619130315262}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7856572247197254,"seconds":4.410743713378906e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.2265625,"distances_sum":967.8504239347734}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5712890625, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.5712890625,"f1":0.7141462703962708,"seconds":4.0084123611450195e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.75,"distances_sum":837.7089238798126}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9047390109890117,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7109375,"distances_sum":1348.5557180504675}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9279678654678664,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.78125,"distances_sum":1423.235036375409}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8740234375,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8740234375,"f1":0.9279678654678664,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.78125,"distances_sum":1423.235036375409}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9369505494505499,"seconds":5.403533577919006e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.859375,"distances_sum":1453.764846070318}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9534512362637368,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.875,"distances_sum":1511.620562663645}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9678628663003667,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8828125,"distances_sum":1615.1978814735119}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9399839743589747,"seconds":5.694106221199036e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.65625,"distances_sum":1514.1656516635135}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9662087912087919,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8828125,"distances_sum":1605.9751567867447}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9678628663003667,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8828125,"distances_sum":1615.1978814735119}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9678628663003667,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8828125,"distances_sum":1615.1978814735119}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3642578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3642578125,"f1":null,"seconds":3.831461071968079e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":6.1640625,"distances_sum":602.9759291266909}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7109375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.7109375,"f1":0.8193565115440122,"seconds":4.8782676458358765e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.9765625,"distances_sum":1151.0400167926232}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7109375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.7109375,"f1":0.8193565115440122,"seconds":4.8782676458358765e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.9765625,"distances_sum":1151.0400167926232}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9434065934065938,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.78125,"distances_sum":1614.8301749916502}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.71484375,"f1":0.822901057276058,"seconds":5.071982741355896e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.984375,"distances_sum":1160.2022744697877}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9574092574092578,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.7890625,"distances_sum":1718.9845527711855}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9070257867132873,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.65625,"distances_sum":1469.9792095422506}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9574092574092578,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.7890625,"distances_sum":1718.9845527711855}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9668555402930408,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9375,"distances_sum":1713.5367036366222}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9657738095238099,"seconds":6.087124347686768e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.921875,"distances_sum":1704.136694427124}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9714686355311359,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9296875,"distances_sum":1746.3350538987863}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9714686355311359,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9296875,"distances_sum":1746.3350538987863}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9714686355311359,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9296875,"distances_sum":1746.3350538987863}}, n: 9
mean(cfft.distances) = 0.3651314967736747
mean(cdnet.distances) = 0.7142253005606669
mean(crand.distances) = 0.3906501392705923
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8799999999999999
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8911111111111111
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8888888888888888
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8888888888888888
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9199999999999999
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9177777777777778
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8822222222222221
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9377777777777778
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.88
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9199999999999999
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9266666666666667
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8111111111111112
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.88
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9222222222222222
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8933333333333332
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.88
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8822222222222221
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8488888888888889
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 1, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 10, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 2, 3, 1, 2, 3, 3, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 1, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 10, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 2, 3, 1, 2, 3, 3, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 1, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 10, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 2, 3, 1, 2, 3, 3, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 1, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 10, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 2, 3, 1, 2, 3, 3, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 1, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 10, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 2, 3, 1, 2, 3, 3, 3]
acc = 0.96
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 1, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 10, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 2, 3, 1, 2, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 1, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 10, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 2, 3, 1, 2, 3, 3, 3]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5257430661718051] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 1, 1]]
** centroid: 3, normalized-entropy: 1.0, [(2, 1), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 14, 10]]
** centroid: 11, normalized-entropy: 0.9798687566511527, [(2, 14), (3, 10)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
finished with 15 centroids; started with 12
acc = 0.9666666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.5504884655313292] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5504884655313292, 0.3610411586492342] ***
*** starting iteration: 2; err: [Inf, 0.5504884655313292, 0.3610411586492342] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714] ***
*** starting iteration: 3; err: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714, 0.34057574049295586] ***
*** starting iteration: 4; err: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714, 0.34057574049295586] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714, 0.34057574049295586, 0.33616982739105505] ***
*** starting iteration: 5; err: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714, 0.34057574049295586, 0.33616982739105505] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714, 0.34057574049295586, 0.33616982739105505, 0.33371027010876136] ***
*** starting iteration: 6; err: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714, 0.34057574049295586, 0.33616982739105505, 0.33371027010876136] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714, 0.34057574049295586, 0.33616982739105505, 0.33371027010876136, 0.3307905855753624] ***
*** starting iteration: 7; err: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714, 0.34057574049295586, 0.33616982739105505, 0.33371027010876136, 0.3307905855753624] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714, 0.34057574049295586, 0.33616982739105505, 0.33371027010876136, 0.3307905855753624, 0.327016451871498] ***
*** starting iteration: 8; err: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714, 0.34057574049295586, 0.33616982739105505, 0.33371027010876136, 0.3307905855753624, 0.327016451871498] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714, 0.34057574049295586, 0.33616982739105505, 0.33371027010876136, 0.3307905855753624, 0.327016451871498, 0.29980449945674287] ***
*** starting iteration: 9; err: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714, 0.34057574049295586, 0.33616982739105505, 0.33371027010876136, 0.3307905855753624, 0.327016451871498, 0.29980449945674287] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714, 0.34057574049295586, 0.33616982739105505, 0.33371027010876136, 0.3307905855753624, 0.327016451871498, 0.29980449945674287, 0.29863825461242693] ***
*** starting iteration: 10; err: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714, 0.34057574049295586, 0.33616982739105505, 0.33371027010876136, 0.3307905855753624, 0.327016451871498, 0.29980449945674287, 0.29863825461242693] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714, 0.34057574049295586, 0.33616982739105505, 0.33371027010876136, 0.3307905855753624, 0.327016451871498, 0.29980449945674287, 0.29863825461242693, 0.29855184433506327] ***
*** finished computation of 3 references, err: [Inf, 0.5504884655313292, 0.3610411586492342, 0.34641970673648714, 0.34057574049295586, 0.33616982739105505, 0.33371027010876136, 0.3307905855753624, 0.327016451871498, 0.29980449945674287, 0.29863825461242693, 0.29855184433506327] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 180, 26]]
** centroid: 1, normalized-entropy: 0.5469617407220055, [(2, 180), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [208, 21, 0]]
** centroid: 2, normalized-entropy: 0.4421289966047993, [(1, 208), (2, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [187, 44, 0]]
** centroid: 3, normalized-entropy: 0.7024665512903904, [(1, 187), (2, 44)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2594819997336615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2594819997336615, 0.1983331369443072] ***
*** starting iteration: 2; err: [Inf, 0.2594819997336615, 0.1983331369443072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2594819997336615, 0.1983331369443072, 0.19352871195522245] ***
*** starting iteration: 3; err: [Inf, 0.2594819997336615, 0.1983331369443072, 0.19352871195522245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2594819997336615, 0.1983331369443072, 0.19352871195522245, 0.19266251836939752] ***
*** finished computation of 7 references, err: [Inf, 0.2594819997336615, 0.1983331369443072, 0.19352871195522245, 0.19266251836939752] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [89, 11, 0]]
** centroid: 1, normalized-entropy: 0.49991595816452816, [(1, 89), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [72, 2, 0]]
** centroid: 2, normalized-entropy: 0.1792560669283214, [(1, 72), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 86, 26]]
** centroid: 3, normalized-entropy: 0.7817281222714539, [(2, 86), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [75, 6, 0]]
** centroid: 5, normalized-entropy: 0.38094658570539014, [(1, 75), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [41, 51, 0]]
** centroid: 6, normalized-entropy: 0.9914606013843205, [(1, 41), (2, 51)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 89, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5519175617362203] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5519175617362203, 0.3277742096154519] ***
*** starting iteration: 2; err: [Inf, 0.5519175617362203, 0.3277742096154519] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5519175617362203, 0.3277742096154519, 0.3080299117922157] ***
*** starting iteration: 3; err: [Inf, 0.5519175617362203, 0.3277742096154519, 0.3080299117922157] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5519175617362203, 0.3277742096154519, 0.3080299117922157, 0.3021961217732176] ***
*** starting iteration: 4; err: [Inf, 0.5519175617362203, 0.3277742096154519, 0.3080299117922157, 0.3021961217732176] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5519175617362203, 0.3277742096154519, 0.3080299117922157, 0.3021961217732176, 0.3002145744307243] ***
*** starting iteration: 5; err: [Inf, 0.5519175617362203, 0.3277742096154519, 0.3080299117922157, 0.3021961217732176, 0.3002145744307243] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5519175617362203, 0.3277742096154519, 0.3080299117922157, 0.3021961217732176, 0.3002145744307243, 0.2995259606236148] ***
*** finished computation of 3 references, err: [Inf, 0.5519175617362203, 0.3277742096154519, 0.3080299117922157, 0.3021961217732176, 0.3002145744307243, 0.2995259606236148] ***
*** center 1: selecting labels [1] (freq >= 1) [from [215, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [118, 66, 0]]
** centroid: 2, normalized-entropy: 0.9415951533268216, [(1, 118), (2, 66)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [74, 171, 23]]
** centroid: 3, normalized-entropy: 0.776226399257574, [(1, 74), (2, 171), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3896828208626925] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3896828208626925, 0.34931184551462174] ***
*** starting iteration: 2; err: [Inf, 0.3896828208626925, 0.34931184551462174] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3896828208626925, 0.34931184551462174, 0.30855933831784055] ***
*** starting iteration: 3; err: [Inf, 0.3896828208626925, 0.34931184551462174, 0.30855933831784055] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3896828208626925, 0.34931184551462174, 0.30855933831784055, 0.304763814570547] ***
*** starting iteration: 4; err: [Inf, 0.3896828208626925, 0.34931184551462174, 0.30855933831784055, 0.304763814570547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3896828208626925, 0.34931184551462174, 0.30855933831784055, 0.304763814570547, 0.3042088222858877] ***
*** finished computation of 3 references, err: [Inf, 0.3896828208626925, 0.34931184551462174, 0.30855933831784055, 0.304763814570547, 0.3042088222858877] ***
*** center 1: selecting labels [1] (freq >= 1) [from [182, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [76, 176, 27]]
** centroid: 2, normalized-entropy: 0.7927223663564399, [(1, 76), (2, 176), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [140, 66, 0]]
** centroid: 3, normalized-entropy: 0.904803273542669, [(1, 140), (2, 66)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.24257554293287614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24257554293287614, 0.19893756695161538] ***
*** starting iteration: 2; err: [Inf, 0.24257554293287614, 0.19893756695161538] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24257554293287614, 0.19893756695161538, 0.1921601627989654] ***
*** starting iteration: 3; err: [Inf, 0.24257554293287614, 0.19893756695161538, 0.1921601627989654] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24257554293287614, 0.19893756695161538, 0.1921601627989654, 0.19080740495513696] ***
*** starting iteration: 4; err: [Inf, 0.24257554293287614, 0.19893756695161538, 0.1921601627989654, 0.19080740495513696] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24257554293287614, 0.19893756695161538, 0.1921601627989654, 0.19080740495513696, 0.19011528183729842] ***
*** finished computation of 7 references, err: [Inf, 0.24257554293287614, 0.19893756695161538, 0.1921601627989654, 0.19080740495513696, 0.19011528183729842] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [25, 72, 0]]
** centroid: 1, normalized-entropy: 0.8233045447828534, [(1, 25), (2, 72)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [72, 14, 0]]
** centroid: 2, normalized-entropy: 0.6409441847875289, [(1, 72), (2, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 79, 23]]
** centroid: 4, normalized-entropy: 0.7700664782920602, [(2, 79), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [16, 69, 0]]
** centroid: 5, normalized-entropy: 0.6977652006354232, [(1, 16), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [79, 3, 0]]
** centroid: 6, normalized-entropy: 0.22641094842107634, [(1, 79), (2, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2568874481026603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2568874481026603, 0.19241594261806766] ***
*** starting iteration: 2; err: [Inf, 0.2568874481026603, 0.19241594261806766] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2568874481026603, 0.19241594261806766, 0.18900265666129795] ***
*** starting iteration: 3; err: [Inf, 0.2568874481026603, 0.19241594261806766, 0.18900265666129795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2568874481026603, 0.19241594261806766, 0.18900265666129795, 0.18871625406441392] ***
*** finished computation of 7 references, err: [Inf, 0.2568874481026603, 0.19241594261806766, 0.18900265666129795, 0.18871625406441392] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 30, 0]]
** centroid: 1, normalized-entropy: 0.8488687562058559, [(1, 79), (2, 30)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 77, 27]]
** centroid: 2, normalized-entropy: 0.826165427834159, [(2, 77), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 9, 0]]
** centroid: 3, normalized-entropy: 0.5586293734521991, [(1, 60), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [67, 27, 0]]
** centroid: 4, normalized-entropy: 0.8651214227512075, [(1, 67), (2, 27)]
*** center 5: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 98, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [91, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2060837655568736] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2060837655568736, 0.1660956181893433] ***
*** starting iteration: 2; err: [Inf, 0.2060837655568736, 0.1660956181893433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2060837655568736, 0.1660956181893433, 0.1531366038754269] ***
*** starting iteration: 3; err: [Inf, 0.2060837655568736, 0.1660956181893433, 0.1531366038754269] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2060837655568736, 0.1660956181893433, 0.1531366038754269, 0.1506990831276799] ***
*** starting iteration: 4; err: [Inf, 0.2060837655568736, 0.1660956181893433, 0.1531366038754269, 0.1506990831276799] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2060837655568736, 0.1660956181893433, 0.1531366038754269, 0.1506990831276799, 0.14933348833107846] ***
*** starting iteration: 5; err: [Inf, 0.2060837655568736, 0.1660956181893433, 0.1531366038754269, 0.1506990831276799, 0.14933348833107846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2060837655568736, 0.1660956181893433, 0.1531366038754269, 0.1506990831276799, 0.14933348833107846, 0.14760208148061782] ***
*** starting iteration: 6; err: [Inf, 0.2060837655568736, 0.1660956181893433, 0.1531366038754269, 0.1506990831276799, 0.14933348833107846, 0.14760208148061782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2060837655568736, 0.1660956181893433, 0.1531366038754269, 0.1506990831276799, 0.14933348833107846, 0.14760208148061782, 0.14658225871770791] ***
*** starting iteration: 7; err: [Inf, 0.2060837655568736, 0.1660956181893433, 0.1531366038754269, 0.1506990831276799, 0.14933348833107846, 0.14760208148061782, 0.14658225871770791] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2060837655568736, 0.1660956181893433, 0.1531366038754269, 0.1506990831276799, 0.14933348833107846, 0.14760208148061782, 0.14658225871770791, 0.1462329621440745] ***
*** finished computation of 7 references, err: [Inf, 0.2060837655568736, 0.1660956181893433, 0.1531366038754269, 0.1506990831276799, 0.14933348833107846, 0.14760208148061782, 0.14658225871770791, 0.1462329621440745] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 33, 0]]
** centroid: 3, normalized-entropy: 0.9014296082981941, [(1, 71), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [7, 71, 0]]
** centroid: 4, normalized-entropy: 0.4356133734874324, [(1, 7), (2, 71)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 74, 26]]
** centroid: 5, normalized-entropy: 0.8267463724926181, [(2, 74), (3, 26)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [90, 17, 0]]
** centroid: 6, normalized-entropy: 0.6316198184485629, [(1, 90), (2, 17)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [42, 50, 0]]
** centroid: 7, normalized-entropy: 0.9945386816500111, [(1, 42), (2, 50)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1986400756281221] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1986400756281221, 0.16747420500388657] ***
*** starting iteration: 2; err: [Inf, 0.1986400756281221, 0.16747420500388657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1986400756281221, 0.16747420500388657, 0.1576356764022691] ***
*** starting iteration: 3; err: [Inf, 0.1986400756281221, 0.16747420500388657, 0.1576356764022691] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1986400756281221, 0.16747420500388657, 0.1576356764022691, 0.15306993669689237] ***
*** starting iteration: 4; err: [Inf, 0.1986400756281221, 0.16747420500388657, 0.1576356764022691, 0.15306993669689237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1986400756281221, 0.16747420500388657, 0.1576356764022691, 0.15306993669689237, 0.15055143850264902] ***
*** starting iteration: 5; err: [Inf, 0.1986400756281221, 0.16747420500388657, 0.1576356764022691, 0.15306993669689237, 0.15055143850264902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1986400756281221, 0.16747420500388657, 0.1576356764022691, 0.15306993669689237, 0.15055143850264902, 0.14895291432160243] ***
*** starting iteration: 6; err: [Inf, 0.1986400756281221, 0.16747420500388657, 0.1576356764022691, 0.15306993669689237, 0.15055143850264902, 0.14895291432160243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1986400756281221, 0.16747420500388657, 0.1576356764022691, 0.15306993669689237, 0.15055143850264902, 0.14895291432160243, 0.14809970936083097] ***
*** finished computation of 7 references, err: [Inf, 0.1986400756281221, 0.16747420500388657, 0.1576356764022691, 0.15306993669689237, 0.15055143850264902, 0.14895291432160243, 0.14809970936083097] ***
*** center 1: selecting labels [1] (freq >= 2) [from [115, 1, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [35, 62, 0]]
** centroid: 3, normalized-entropy: 0.94336565829991, [(1, 35), (2, 62)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 67, 23]]
** centroid: 4, normalized-entropy: 0.8199653102187632, [(2, 67), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 15, 0]]
** centroid: 5, normalized-entropy: 0.6816559115981193, [(1, 68), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 92, 0]]
** centroid: 6, normalized-entropy: 0.4021791902022729, [(1, 8), (2, 92)]
*** center 7: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22820204619117182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22820204619117182, 0.1656433049361801] ***
*** starting iteration: 2; err: [Inf, 0.22820204619117182, 0.1656433049361801] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22820204619117182, 0.1656433049361801, 0.15845280664873826] ***
*** starting iteration: 3; err: [Inf, 0.22820204619117182, 0.1656433049361801, 0.15845280664873826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22820204619117182, 0.1656433049361801, 0.15845280664873826, 0.15646649834126056] ***
*** starting iteration: 4; err: [Inf, 0.22820204619117182, 0.1656433049361801, 0.15845280664873826, 0.15646649834126056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22820204619117182, 0.1656433049361801, 0.15845280664873826, 0.15646649834126056, 0.15534674193824585] ***
*** starting iteration: 5; err: [Inf, 0.22820204619117182, 0.1656433049361801, 0.15845280664873826, 0.15646649834126056, 0.15534674193824585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22820204619117182, 0.1656433049361801, 0.15845280664873826, 0.15646649834126056, 0.15534674193824585, 0.15372557234370904] ***
*** starting iteration: 6; err: [Inf, 0.22820204619117182, 0.1656433049361801, 0.15845280664873826, 0.15646649834126056, 0.15534674193824585, 0.15372557234370904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22820204619117182, 0.1656433049361801, 0.15845280664873826, 0.15646649834126056, 0.15534674193824585, 0.15372557234370904, 0.15225213194737905] ***
*** starting iteration: 7; err: [Inf, 0.22820204619117182, 0.1656433049361801, 0.15845280664873826, 0.15646649834126056, 0.15534674193824585, 0.15372557234370904, 0.15225213194737905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22820204619117182, 0.1656433049361801, 0.15845280664873826, 0.15646649834126056, 0.15534674193824585, 0.15372557234370904, 0.15225213194737905, 0.15154216458079875] ***
*** finished computation of 7 references, err: [Inf, 0.22820204619117182, 0.1656433049361801, 0.15845280664873826, 0.15646649834126056, 0.15534674193824585, 0.15372557234370904, 0.15225213194737905, 0.15154216458079875] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [115, 42, 0]]
** centroid: 1, normalized-entropy: 0.8378775156730851, [(1, 115), (2, 42)]
*** center 2: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 53, 0]]
** centroid: 3, normalized-entropy: 0.9937811379408324, [(1, 44), (2, 53)]
*** center 4: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 104, 27]]
** centroid: 6, normalized-entropy: 0.7339749614986165, [(2, 104), (3, 27)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 43, 0]]
** centroid: 7, normalized-entropy: 0.6987003526563345, [(1, 10), (2, 43)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20905600923712034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20905600923712034, 0.15012573387177364] ***
*** starting iteration: 2; err: [Inf, 0.20905600923712034, 0.15012573387177364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20905600923712034, 0.15012573387177364, 0.1463623612045168] ***
*** starting iteration: 3; err: [Inf, 0.20905600923712034, 0.15012573387177364, 0.1463623612045168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20905600923712034, 0.15012573387177364, 0.1463623612045168, 0.14615586651181495] ***
*** finished computation of 7 references, err: [Inf, 0.20905600923712034, 0.15012573387177364, 0.1463623612045168, 0.14615586651181495] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [88, 5, 0]]
** centroid: 1, normalized-entropy: 0.30217361847879526, [(1, 88), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 37, 0]]
** centroid: 2, normalized-entropy: 0.9361764916347493, [(1, 68), (2, 37)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 75, 26]]
** centroid: 3, normalized-entropy: 0.8228368841492258, [(2, 75), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 58, 0]]
** centroid: 5, normalized-entropy: 0.9863676072907089, [(1, 44), (2, 58)]
*** center 6: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 70, 0]]
** centroid: 7, normalized-entropy: 0.18312206830137262, [(1, 2), (2, 70)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19403343850598745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19403343850598745, 0.15383706680628872] ***
*** starting iteration: 2; err: [Inf, 0.19403343850598745, 0.15383706680628872] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19403343850598745, 0.15383706680628872, 0.14968015175212224] ***
*** starting iteration: 3; err: [Inf, 0.19403343850598745, 0.15383706680628872, 0.14968015175212224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19403343850598745, 0.15383706680628872, 0.14968015175212224, 0.14905721367988875] ***
*** finished computation of 7 references, err: [Inf, 0.19403343850598745, 0.15383706680628872, 0.14968015175212224, 0.14905721367988875] ***
*** center 1: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 66, 23]]
** centroid: 2, normalized-entropy: 0.8243633538094403, [(2, 66), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 16, 0]]
** centroid: 3, normalized-entropy: 0.7269625813353975, [(1, 63), (2, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [97, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 85, 0]]
** centroid: 5, normalized-entropy: 0.6098403047164005, [(1, 15), (2, 85)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [15, 69, 0]]
** centroid: 6, normalized-entropy: 0.6769418697808861, [(1, 15), (2, 69)]
*** center 7: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19240993412555024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19240993412555024, 0.15204474919599884] ***
*** starting iteration: 2; err: [Inf, 0.19240993412555024, 0.15204474919599884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19240993412555024, 0.15204474919599884, 0.1479524859632861] ***
*** starting iteration: 3; err: [Inf, 0.19240993412555024, 0.15204474919599884, 0.1479524859632861] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19240993412555024, 0.15204474919599884, 0.1479524859632861, 0.14682598431445268] ***
*** starting iteration: 4; err: [Inf, 0.19240993412555024, 0.15204474919599884, 0.1479524859632861, 0.14682598431445268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19240993412555024, 0.15204474919599884, 0.1479524859632861, 0.14682598431445268, 0.14635791964137806] ***
*** finished computation of 7 references, err: [Inf, 0.19240993412555024, 0.15204474919599884, 0.1479524859632861, 0.14682598431445268, 0.14635791964137806] ***
*** center 1: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 76, 27]]
** centroid: 2, normalized-entropy: 0.829952434172285, [(2, 76), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [79, 9, 0]]
** centroid: 3, normalized-entropy: 0.4761588445580706, [(1, 79), (2, 9)]
*** center 4: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 70, 0]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(1, 40), (2, 70)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 83, 0]]
** centroid: 6, normalized-entropy: 0.4620663276355394, [(1, 9), (2, 83)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [60, 4, 0]]
** centroid: 7, normalized-entropy: 0.3372900666170139, [(1, 60), (2, 4)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4129685129216584] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4129685129216584, 0.32708468966957954] ***
*** finished computation of 3 references, err: [Inf, 0.4129685129216584, 0.32708468966957954] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [267, 21, 0]]
** centroid: 1, normalized-entropy: 0.3767150026960246, [(1, 267), (2, 21)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [23, 122, 26]]
** centroid: 2, normalized-entropy: 0.7255672507696679, [(1, 23), (2, 122), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [105, 102, 0]]
** centroid: 3, normalized-entropy: 0.9998484829291058, [(1, 105), (2, 102)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3185714782904024] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3185714782904024, 0.2967988130848749] ***
*** finished computation of 3 references, err: [Inf, 0.3185714782904024, 0.2967988130848749] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [154, 41, 0]]
** centroid: 1, normalized-entropy: 0.7419725729477837, [(1, 154), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [253, 17, 0]]
** centroid: 2, normalized-entropy: 0.3390961796474375, [(1, 253), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 179, 23]]
** centroid: 3, normalized-entropy: 0.5114543088923236, [(2, 179), (3, 23)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5518430471580861] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5518430471580861, 0.3360200643077258] ***
*** finished computation of 3 references, err: [Inf, 0.5518430471580861, 0.3360200643077258] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [122, 26, 0]]
** centroid: 1, normalized-entropy: 0.6705250693158382, [(1, 122), (2, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [147, 216, 27]]
** centroid: 3, normalized-entropy: 0.8009076076909912, [(1, 147), (2, 216), (3, 27)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26086639208920503] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26086639208920503, 0.24442932536991946] ***
*** starting iteration: 2; err: [Inf, 0.26086639208920503, 0.24442932536991946] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26086639208920503, 0.24442932536991946, 0.23851747936205575] ***
*** starting iteration: 3; err: [Inf, 0.26086639208920503, 0.24442932536991946, 0.23851747936205575] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26086639208920503, 0.24442932536991946, 0.23851747936205575, 0.23713802540739132] ***
*** finished computation of 3 references, err: [Inf, 0.26086639208920503, 0.24442932536991946, 0.23851747936205575, 0.23713802540739132] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [125, 56, 0]]
** centroid: 1, normalized-entropy: 0.8924706869838313, [(1, 125), (2, 56)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [20, 189, 26]]
** centroid: 2, normalized-entropy: 0.5720456695109567, [(1, 20), (2, 189), (3, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [250, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2741098866101237] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2741098866101237, 0.23950869702724278] ***
*** starting iteration: 2; err: [Inf, 0.2741098866101237, 0.23950869702724278] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2741098866101237, 0.23950869702724278, 0.23557776727642435] ***
*** starting iteration: 3; err: [Inf, 0.2741098866101237, 0.23950869702724278, 0.23557776727642435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2741098866101237, 0.23950869702724278, 0.23557776727642435, 0.23466545260459676] ***
*** finished computation of 3 references, err: [Inf, 0.2741098866101237, 0.23950869702724278, 0.23557776727642435, 0.23466545260459676] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [192, 28, 0]]
** centroid: 1, normalized-entropy: 0.54991090463341, [(1, 192), (2, 28)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 192, 23]]
** centroid: 2, normalized-entropy: 0.4907290117858637, [(2, 192), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [215, 17, 0]]
** centroid: 3, normalized-entropy: 0.3780312927008923, [(1, 215), (2, 17)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2696208737363321] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2696208737363321, 0.24703885918703752] ***
*** starting iteration: 2; err: [Inf, 0.2696208737363321, 0.24703885918703752] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2696208737363321, 0.24703885918703752, 0.24514729621494818] ***
*** starting iteration: 3; err: [Inf, 0.2696208737363321, 0.24703885918703752, 0.24514729621494818] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2696208737363321, 0.24703885918703752, 0.24514729621494818, 0.24442598224105103] ***
*** finished computation of 3 references, err: [Inf, 0.2696208737363321, 0.24703885918703752, 0.24514729621494818, 0.24442598224105103] ***
*** center 1: selecting labels [1] (freq >= 2) [from [201, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [89, 165, 26]]
** centroid: 2, normalized-entropy: 0.816162552745278, [(1, 89), (2, 165), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [108, 77, 1]]
** centroid: 3, normalized-entropy: 0.9796494936667879, [(1, 108), (2, 77)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23340431542776235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23340431542776235, 0.19260344725429407] ***
*** starting iteration: 2; err: [Inf, 0.23340431542776235, 0.19260344725429407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23340431542776235, 0.19260344725429407, 0.18866714269381474] ***
*** starting iteration: 3; err: [Inf, 0.23340431542776235, 0.19260344725429407, 0.18866714269381474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23340431542776235, 0.19260344725429407, 0.18866714269381474, 0.1873768948147202] ***
*** starting iteration: 4; err: [Inf, 0.23340431542776235, 0.19260344725429407, 0.18866714269381474, 0.1873768948147202] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23340431542776235, 0.19260344725429407, 0.18866714269381474, 0.1873768948147202, 0.1867466261911041] ***
*** finished computation of 7 references, err: [Inf, 0.23340431542776235, 0.19260344725429407, 0.18866714269381474, 0.1873768948147202, 0.1867466261911041] ***
*** center 1: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 79, 26]]
** centroid: 2, normalized-entropy: 0.8074825483550796, [(2, 79), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [73, 23, 0]]
** centroid: 3, normalized-entropy: 0.7943466904341503, [(1, 73), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 3, 0]]
** centroid: 4, normalized-entropy: 0.2580186686648155, [(1, 66), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 86, 0]]
** centroid: 5, normalized-entropy: 0.7434073165779199, [(1, 23), (2, 86)]
*** center 6: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [37, 54, 0]]
** centroid: 7, normalized-entropy: 0.974677061681131, [(1, 37), (2, 54)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23493786126715893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23493786126715893, 0.193126006999976] ***
*** starting iteration: 2; err: [Inf, 0.23493786126715893, 0.193126006999976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23493786126715893, 0.193126006999976, 0.19000890391223926] ***
*** starting iteration: 3; err: [Inf, 0.23493786126715893, 0.193126006999976, 0.19000890391223926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23493786126715893, 0.193126006999976, 0.19000890391223926, 0.1889719086108559] ***
*** starting iteration: 4; err: [Inf, 0.23493786126715893, 0.193126006999976, 0.19000890391223926, 0.1889719086108559] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23493786126715893, 0.193126006999976, 0.19000890391223926, 0.1889719086108559, 0.18848207075221426] ***
*** finished computation of 7 references, err: [Inf, 0.23493786126715893, 0.193126006999976, 0.19000890391223926, 0.1889719086108559, 0.18848207075221426] ***
*** center 1: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 69, 23]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 69), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [63, 24, 0]]
** centroid: 3, normalized-entropy: 0.8497511372532974, [(1, 63), (2, 24)]
*** center 4: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [24, 82, 0]]
** centroid: 5, normalized-entropy: 0.7717094696953635, [(1, 24), (2, 82)]
*** center 6: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [16, 62, 0]]
** centroid: 7, normalized-entropy: 0.7320666900931937, [(1, 16), (2, 62)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24490751745458553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24490751745458553, 0.1983071836926367] ***
*** starting iteration: 2; err: [Inf, 0.24490751745458553, 0.1983071836926367] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24490751745458553, 0.1983071836926367, 0.19240926388606452] ***
*** starting iteration: 3; err: [Inf, 0.24490751745458553, 0.1983071836926367, 0.19240926388606452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24490751745458553, 0.1983071836926367, 0.19240926388606452, 0.1906991358211116] ***
*** starting iteration: 4; err: [Inf, 0.24490751745458553, 0.1983071836926367, 0.19240926388606452, 0.1906991358211116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24490751745458553, 0.1983071836926367, 0.19240926388606452, 0.1906991358211116, 0.18985499624467303] ***
*** finished computation of 7 references, err: [Inf, 0.24490751745458553, 0.1983071836926367, 0.19240926388606452, 0.1906991358211116, 0.18985499624467303] ***
*** center 1: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 63, 27]]
** centroid: 2, normalized-entropy: 0.8812908992306927, [(2, 63), (3, 27)]
*** center 3: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [74, 14, 0]]
** centroid: 4, normalized-entropy: 0.6321302781219708, [(1, 74), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [7, 92, 0]]
** centroid: 5, normalized-entropy: 0.3685567775377064, [(1, 7), (2, 92)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [29, 73, 0]]
** centroid: 6, normalized-entropy: 0.8612621884720756, [(1, 29), (2, 73)]
*** center 7: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3421016663408002] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3421016663408002, 0.24395965758358706] ***
*** starting iteration: 2; err: [Inf, 0.3421016663408002, 0.24395965758358706] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3421016663408002, 0.24395965758358706, 0.23806680267111766] ***
*** starting iteration: 3; err: [Inf, 0.3421016663408002, 0.24395965758358706, 0.23806680267111766] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3421016663408002, 0.24395965758358706, 0.23806680267111766, 0.23675094769188054] ***
*** finished computation of 3 references, err: [Inf, 0.3421016663408002, 0.24395965758358706, 0.23806680267111766, 0.23675094769188054] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [216, 16, 0]]
** centroid: 1, normalized-entropy: 0.36205125173399805, [(1, 216), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [179, 59, 0]]
** centroid: 2, normalized-entropy: 0.8079313597673952, [(1, 179), (2, 59)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 170, 26]]
** centroid: 3, normalized-entropy: 0.5646695797525669, [(2, 170), (3, 26)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3668824349051115] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3668824349051115, 0.24115509241875233] ***
*** starting iteration: 2; err: [Inf, 0.3668824349051115, 0.24115509241875233] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3668824349051115, 0.24115509241875233, 0.2374656559442864] ***
*** starting iteration: 3; err: [Inf, 0.3668824349051115, 0.24115509241875233, 0.2374656559442864] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3668824349051115, 0.24115509241875233, 0.2374656559442864, 0.23634876391111775] ***
*** finished computation of 3 references, err: [Inf, 0.3668824349051115, 0.24115509241875233, 0.2374656559442864, 0.23634876391111775] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [247, 6, 0]]
** centroid: 1, normalized-entropy: 0.16182171222102035, [(1, 247), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 175, 23]]
** centroid: 2, normalized-entropy: 0.5182259657363326, [(2, 175), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [160, 56, 0]]
** centroid: 3, normalized-entropy: 0.8256265261578954, [(1, 160), (2, 56)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39672709297670844] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39672709297670844, 0.23912821592682082] ***
*** starting iteration: 2; err: [Inf, 0.39672709297670844, 0.23912821592682082] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39672709297670844, 0.23912821592682082, 0.23574346374522062] ***
*** starting iteration: 3; err: [Inf, 0.39672709297670844, 0.23912821592682082, 0.23574346374522062] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39672709297670844, 0.23912821592682082, 0.23574346374522062, 0.23465630236030116] ***
*** finished computation of 3 references, err: [Inf, 0.39672709297670844, 0.23912821592682082, 0.23574346374522062, 0.23465630236030116] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [235, 3, 0]]
** centroid: 1, normalized-entropy: 0.09760612488383245, [(1, 235), (2, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [4, 186, 27]]
** centroid: 2, normalized-entropy: 0.4233076817978496, [(1, 4), (2, 186), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [159, 53, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 159), (2, 53)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22348636707889516] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22348636707889516, 0.1606409733824141] ***
*** starting iteration: 2; err: [Inf, 0.22348636707889516, 0.1606409733824141] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22348636707889516, 0.1606409733824141, 0.15500519657227863] ***
*** starting iteration: 3; err: [Inf, 0.22348636707889516, 0.1606409733824141, 0.15500519657227863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22348636707889516, 0.1606409733824141, 0.15500519657227863, 0.1516852331747701] ***
*** finished computation of 7 references, err: [Inf, 0.22348636707889516, 0.1606409733824141, 0.15500519657227863, 0.1516852331747701] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [78, 6, 0]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(1, 78), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [103, 26, 0]]
** centroid: 2, normalized-entropy: 0.7250180540934875, [(1, 103), (2, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 35, 0]]
** centroid: 3, normalized-entropy: 0.9494520153879484, [(1, 60), (2, 35)]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 63, 26]]
** centroid: 5, normalized-entropy: 0.8714630056611941, [(2, 63), (3, 26)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 115, 0]]
** centroid: 6, normalized-entropy: 0.37548114206764976, [(1, 9), (2, 115)]
*** center 7: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.17167251319010118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17167251319010118, 0.1577329280579566] ***
*** starting iteration: 2; err: [Inf, 0.17167251319010118, 0.1577329280579566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17167251319010118, 0.1577329280579566, 0.156198194522042] ***
*** starting iteration: 3; err: [Inf, 0.17167251319010118, 0.1577329280579566, 0.156198194522042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17167251319010118, 0.1577329280579566, 0.156198194522042, 0.15346303728696747] ***
*** finished computation of 7 references, err: [Inf, 0.17167251319010118, 0.1577329280579566, 0.156198194522042, 0.15346303728696747] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 50, 0]]
** centroid: 2, normalized-entropy: 0.9960383613659186, [(1, 58), (2, 50)]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 68, 0]]
** centroid: 5, normalized-entropy: 0.7401470427139037, [(1, 18), (2, 68)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [97, 10, 0]]
** centroid: 6, normalized-entropy: 0.447907858914932, [(1, 97), (2, 10)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 109, 23]]
** centroid: 7, normalized-entropy: 0.6673182376160576, [(2, 109), (3, 23)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.169992601404014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.169992601404014, 0.153461374613321] ***
*** starting iteration: 2; err: [Inf, 0.169992601404014, 0.153461374613321] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.169992601404014, 0.153461374613321, 0.15144162580323428] ***
*** starting iteration: 3; err: [Inf, 0.169992601404014, 0.153461374613321, 0.15144162580323428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.169992601404014, 0.153461374613321, 0.15144162580323428, 0.15072802509595898] ***
*** finished computation of 7 references, err: [Inf, 0.169992601404014, 0.153461374613321, 0.15144162580323428, 0.15072802509595898] ***
*** center 1: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 58, 0]]
** centroid: 3, normalized-entropy: 0.9814538950336533, [(1, 42), (2, 58)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 112, 27]]
** centroid: 4, normalized-entropy: 0.7102668725158433, [(2, 112), (3, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 9, 0]]
** centroid: 5, normalized-entropy: 0.44569317772256106, [(1, 88), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [52, 18, 0]]
** centroid: 6, normalized-entropy: 0.8224042259549892, [(1, 52), (2, 18)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [37, 45, 0]]
** centroid: 7, normalized-entropy: 0.9931231770192241, [(1, 37), (2, 45)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.179556600059391] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.179556600059391, 0.1531093883490352] ***
*** starting iteration: 2; err: [Inf, 0.179556600059391, 0.1531093883490352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.179556600059391, 0.1531093883490352, 0.1509905746849897] ***
*** starting iteration: 3; err: [Inf, 0.179556600059391, 0.1531093883490352, 0.1509905746849897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.179556600059391, 0.1531093883490352, 0.1509905746849897, 0.15020180584068546] ***
*** finished computation of 7 references, err: [Inf, 0.179556600059391, 0.1531093883490352, 0.1509905746849897, 0.15020180584068546] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 35, 0]]
** centroid: 1, normalized-entropy: 0.940285958670631, [(1, 63), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 26, 0]]
** centroid: 2, normalized-entropy: 0.8798813089176428, [(1, 61), (2, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 115, 26]]
** centroid: 4, normalized-entropy: 0.6896024975741727, [(2, 115), (3, 26)]
*** center 5: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [34, 37, 0]]
** centroid: 6, normalized-entropy: 0.9987117514654895, [(1, 34), (2, 37)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [77, 32, 0]]
** centroid: 7, normalized-entropy: 0.8732984198823629, [(1, 77), (2, 32)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18141054837563741] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18141054837563741, 0.15983439378183464] ***
*** starting iteration: 2; err: [Inf, 0.18141054837563741, 0.15983439378183464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18141054837563741, 0.15983439378183464, 0.15388791246138614] ***
*** starting iteration: 3; err: [Inf, 0.18141054837563741, 0.15983439378183464, 0.15388791246138614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18141054837563741, 0.15983439378183464, 0.15388791246138614, 0.14988199647549524] ***
*** starting iteration: 4; err: [Inf, 0.18141054837563741, 0.15983439378183464, 0.15388791246138614, 0.14988199647549524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18141054837563741, 0.15983439378183464, 0.15388791246138614, 0.14988199647549524, 0.14783635229253486] ***
*** starting iteration: 5; err: [Inf, 0.18141054837563741, 0.15983439378183464, 0.15388791246138614, 0.14988199647549524, 0.14783635229253486] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18141054837563741, 0.15983439378183464, 0.15388791246138614, 0.14988199647549524, 0.14783635229253486, 0.1470690391025041] ***
*** finished computation of 7 references, err: [Inf, 0.18141054837563741, 0.15983439378183464, 0.15388791246138614, 0.14988199647549524, 0.14783635229253486, 0.1470690391025041] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 29, 0]]
** centroid: 1, normalized-entropy: 0.8687212463394044, [(1, 71), (2, 29)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [35, 50, 0]]
** centroid: 3, normalized-entropy: 0.9774178175281716, [(1, 35), (2, 50)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [71, 49, 0]]
** centroid: 5, normalized-entropy: 0.975617030221205, [(1, 71), (2, 49)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 109, 23]]
** centroid: 6, normalized-entropy: 0.6673182376160576, [(2, 109), (3, 23)]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20906078695868333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20906078695868333, 0.16670368239213748] ***
*** starting iteration: 2; err: [Inf, 0.20906078695868333, 0.16670368239213748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20906078695868333, 0.16670368239213748, 0.15461528776674302] ***
*** starting iteration: 3; err: [Inf, 0.20906078695868333, 0.16670368239213748, 0.15461528776674302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20906078695868333, 0.16670368239213748, 0.15461528776674302, 0.15044396406254623] ***
*** starting iteration: 4; err: [Inf, 0.20906078695868333, 0.16670368239213748, 0.15461528776674302, 0.15044396406254623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20906078695868333, 0.16670368239213748, 0.15461528776674302, 0.15044396406254623, 0.14934703013042863] ***
*** starting iteration: 5; err: [Inf, 0.20906078695868333, 0.16670368239213748, 0.15461528776674302, 0.15044396406254623, 0.14934703013042863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20906078695868333, 0.16670368239213748, 0.15461528776674302, 0.15044396406254623, 0.14934703013042863, 0.14841765423432396] ***
*** finished computation of 7 references, err: [Inf, 0.20906078695868333, 0.16670368239213748, 0.15461528776674302, 0.15044396406254623, 0.14934703013042863, 0.14841765423432396] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 19, 0]]
** centroid: 1, normalized-entropy: 0.785889583138768, [(1, 62), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 6, 0]]
** centroid: 2, normalized-entropy: 0.4220005168831531, [(1, 64), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 99, 27]]
** centroid: 3, normalized-entropy: 0.7495952572594798, [(2, 99), (3, 27)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [7, 96, 0]]
** centroid: 4, normalized-entropy: 0.35826863860424546, [(1, 7), (2, 96)]
*** center 5: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [88, 22, 0]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(1, 88), (2, 22)]
*** center 7: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9349798900697105, 0.9109828391265516, 0.9049918181654708, 0.9049738361115606, 0.8919877961794129, 0.8909778041514569, 0.886994779210348, 0.8709847572123022, 0.8629887372402343, 0.8509887132641625, 0.8129237021452589, 0.786987586388784]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9349798900697105
finished with 12
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9349798900697105, 0.9109828391265516, 0.9049918181654708, 0.9049738361115606, 0.8919877961794129, 0.8909778041514569, 0.886994779210348, 0.8709847572123022, 0.8629887372402343, 0.8509887132641625, 0.8129237021452589, 0.786987586388784]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9349798900697105
finished with 13
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.2537682952734085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2537682952734085, 0.2049935894526049] ***
*** starting iteration: 2; err: [Inf, 0.2537682952734085, 0.2049935894526049] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2537682952734085, 0.2049935894526049, 0.19766844978609174] ***
*** starting iteration: 3; err: [Inf, 0.2537682952734085, 0.2049935894526049, 0.19766844978609174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2537682952734085, 0.2049935894526049, 0.19766844978609174, 0.19506824369522724] ***
*** starting iteration: 4; err: [Inf, 0.2537682952734085, 0.2049935894526049, 0.19766844978609174, 0.19506824369522724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2537682952734085, 0.2049935894526049, 0.19766844978609174, 0.19506824369522724, 0.19217506818565633] ***
*** starting iteration: 5; err: [Inf, 0.2537682952734085, 0.2049935894526049, 0.19766844978609174, 0.19506824369522724, 0.19217506818565633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2537682952734085, 0.2049935894526049, 0.19766844978609174, 0.19506824369522724, 0.19217506818565633, 0.1897333475017176] ***
*** starting iteration: 6; err: [Inf, 0.2537682952734085, 0.2049935894526049, 0.19766844978609174, 0.19506824369522724, 0.19217506818565633, 0.1897333475017176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2537682952734085, 0.2049935894526049, 0.19766844978609174, 0.19506824369522724, 0.19217506818565633, 0.1897333475017176, 0.18752557985126614] ***
*** starting iteration: 7; err: [Inf, 0.2537682952734085, 0.2049935894526049, 0.19766844978609174, 0.19506824369522724, 0.19217506818565633, 0.1897333475017176, 0.18752557985126614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2537682952734085, 0.2049935894526049, 0.19766844978609174, 0.19506824369522724, 0.19217506818565633, 0.1897333475017176, 0.18752557985126614, 0.18659283187766154] ***
*** finished computation of 7 references, err: [Inf, 0.2537682952734085, 0.2049935894526049, 0.19766844978609174, 0.19506824369522724, 0.19217506818565633, 0.1897333475017176, 0.18752557985126614, 0.18659283187766154] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [78, 20, 0]]
** centroid: 1, normalized-entropy: 0.7300166301457938, [(1, 78), (2, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [78, 8, 0]]
** centroid: 3, normalized-entropy: 0.446481346896803, [(1, 78), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [18, 82, 0]]
** centroid: 4, normalized-entropy: 0.6800770457282798, [(1, 18), (2, 82)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 65, 26]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(2, 65), (3, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [34, 70, 0]]
** centroid: 7, normalized-entropy: 0.9117517586347538, [(1, 34), (2, 70)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23682166275469171] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23682166275469171, 0.2003100791309347] ***
*** starting iteration: 2; err: [Inf, 0.23682166275469171, 0.2003100791309347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23682166275469171, 0.2003100791309347, 0.1935485798519627] ***
*** starting iteration: 3; err: [Inf, 0.23682166275469171, 0.2003100791309347, 0.1935485798519627] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23682166275469171, 0.2003100791309347, 0.1935485798519627, 0.19033947870459245] ***
*** starting iteration: 4; err: [Inf, 0.23682166275469171, 0.2003100791309347, 0.1935485798519627, 0.19033947870459245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23682166275469171, 0.2003100791309347, 0.1935485798519627, 0.19033947870459245, 0.18835228877602847] ***
*** starting iteration: 5; err: [Inf, 0.23682166275469171, 0.2003100791309347, 0.1935485798519627, 0.19033947870459245, 0.18835228877602847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23682166275469171, 0.2003100791309347, 0.1935485798519627, 0.19033947870459245, 0.18835228877602847, 0.18756314165048257] ***
*** finished computation of 7 references, err: [Inf, 0.23682166275469171, 0.2003100791309347, 0.1935485798519627, 0.19033947870459245, 0.18835228877602847, 0.18756314165048257] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 90, 23]]
** centroid: 1, normalized-entropy: 0.7289514964064973, [(2, 90), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [2, 95, 0]]
** centroid: 3, normalized-entropy: 0.14489961753310668, [(1, 2), (2, 95)]
*** center 4: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 5, 0]]
** centroid: 5, normalized-entropy: 0.3750514064240124, [(1, 64), (2, 5)]
*** center 6: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [41, 47, 0]]
** centroid: 7, normalized-entropy: 0.99664402524877, [(1, 41), (2, 47)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2528840216411476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2528840216411476, 0.20114043322873526] ***
*** starting iteration: 2; err: [Inf, 0.2528840216411476, 0.20114043322873526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2528840216411476, 0.20114043322873526, 0.1972524235855838] ***
*** starting iteration: 3; err: [Inf, 0.2528840216411476, 0.20114043322873526, 0.1972524235855838] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2528840216411476, 0.20114043322873526, 0.1972524235855838, 0.19424498438865861] ***
*** starting iteration: 4; err: [Inf, 0.2528840216411476, 0.20114043322873526, 0.1972524235855838, 0.19424498438865861] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2528840216411476, 0.20114043322873526, 0.1972524235855838, 0.19424498438865861, 0.19206981256749409] ***
*** starting iteration: 5; err: [Inf, 0.2528840216411476, 0.20114043322873526, 0.1972524235855838, 0.19424498438865861, 0.19206981256749409] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2528840216411476, 0.20114043322873526, 0.1972524235855838, 0.19424498438865861, 0.19206981256749409, 0.19060422094591867] ***
*** starting iteration: 6; err: [Inf, 0.2528840216411476, 0.20114043322873526, 0.1972524235855838, 0.19424498438865861, 0.19206981256749409, 0.19060422094591867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2528840216411476, 0.20114043322873526, 0.1972524235855838, 0.19424498438865861, 0.19206981256749409, 0.19060422094591867, 0.18991923720870485] ***
*** finished computation of 7 references, err: [Inf, 0.2528840216411476, 0.20114043322873526, 0.1972524235855838, 0.19424498438865861, 0.19206981256749409, 0.19060422094591867, 0.18991923720870485] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 100, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [78, 24, 0]]
** centroid: 3, normalized-entropy: 0.787126586201269, [(1, 78), (2, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [104, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 25, 0]]
** centroid: 5, normalized-entropy: 0.8609652558547648, [(1, 63), (2, 25)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 73, 27]]
** centroid: 6, normalized-entropy: 0.8414646362081756, [(2, 73), (3, 27)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [59, 19, 0]]
** centroid: 7, normalized-entropy: 0.8009591077369054, [(1, 59), (2, 19)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9349798900697105, 0.9109828391265516, 0.9049918181654708, 0.9049738361115606, 0.8919877961794129, 0.8909778041514569, 0.886994779210348, 0.8809887732043421, 0.8709847572123022, 0.8629887372402343, 0.8509887132641625, 0.8129237021452589, 0.786987586388784]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9349798900697105
finished with 13
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9349798900697105, 0.9109828391265516, 0.9049918181654708, 0.9049738361115606, 0.8919877961794129, 0.8909778041514569, 0.886994779210348, 0.8809887732043421, 0.8709847572123022, 0.8629887372402343, 0.8509887132641625, 0.8129237021452589, 0.786987586388784]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9349798900697105
finished with 13
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9349798900697105, 0.9109828391265516, 0.9049918181654708, 0.9049738361115606, 0.8919877961794129, 0.8909778041514569, 0.886994779210348, 0.8809887732043421, 0.8709847572123022, 0.8629887372402343, 0.8509887132641625, 0.8129237021452589, 0.786987586388784]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9349798900697105
finished with 14
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.2503991429442288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2503991429442288, 0.1960405513151988] ***
*** starting iteration: 2; err: [Inf, 0.2503991429442288, 0.1960405513151988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2503991429442288, 0.1960405513151988, 0.18866043711114708] ***
*** starting iteration: 3; err: [Inf, 0.2503991429442288, 0.1960405513151988, 0.18866043711114708] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2503991429442288, 0.1960405513151988, 0.18866043711114708, 0.18682190667269416] ***
*** finished computation of 7 references, err: [Inf, 0.2503991429442288, 0.1960405513151988, 0.18866043711114708, 0.18682190667269416] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [32, 79, 0]]
** centroid: 1, normalized-entropy: 0.8664998383682039, [(1, 32), (2, 79)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 4, 0]]
** centroid: 2, normalized-entropy: 0.2837689703721877, [(1, 77), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [14, 74, 0]]
** centroid: 3, normalized-entropy: 0.6321302781219708, [(1, 14), (2, 74)]
*** center 4: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 72, 26]]
** centroid: 6, normalized-entropy: 0.834648285181383, [(2, 72), (3, 26)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [97, 16, 0]]
** centroid: 7, normalized-entropy: 0.5883953722191577, [(1, 97), (2, 16)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2289349335724714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2289349335724714, 0.1956678158624553] ***
*** starting iteration: 2; err: [Inf, 0.2289349335724714, 0.1956678158624553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2289349335724714, 0.1956678158624553, 0.1902450722735794] ***
*** starting iteration: 3; err: [Inf, 0.2289349335724714, 0.1956678158624553, 0.1902450722735794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2289349335724714, 0.1956678158624553, 0.1902450722735794, 0.1880895686747766] ***
*** finished computation of 7 references, err: [Inf, 0.2289349335724714, 0.1956678158624553, 0.1902450722735794, 0.1880895686747766] ***
*** center 1: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 92, 23]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 92), (3, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 2, 0]]
** centroid: 4, normalized-entropy: 0.2192973081321754, [(1, 55), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [8, 79, 0]]
** centroid: 5, normalized-entropy: 0.4429586785384856, [(1, 8), (2, 79)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 49, 0]]
** centroid: 6, normalized-entropy: 0.9830605548016024, [(1, 36), (2, 49)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [97, 15, 0]]
** centroid: 7, normalized-entropy: 0.5681147021801115, [(1, 97), (2, 15)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24342965944830713] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24342965944830713, 0.21403605664481243] ***
*** starting iteration: 2; err: [Inf, 0.24342965944830713, 0.21403605664481243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24342965944830713, 0.21403605664481243, 0.20292483512284248] ***
*** starting iteration: 3; err: [Inf, 0.24342965944830713, 0.21403605664481243, 0.20292483512284248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24342965944830713, 0.21403605664481243, 0.20292483512284248, 0.19636557657534126] ***
*** finished computation of 7 references, err: [Inf, 0.24342965944830713, 0.21403605664481243, 0.20292483512284248, 0.19636557657534126] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [86, 23, 0]]
** centroid: 1, normalized-entropy: 0.7434073165779199, [(1, 86), (2, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [60, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 49, 0]]
** centroid: 3, normalized-entropy: 0.9958873114590912, [(1, 57), (2, 49)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 108, 27]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 108), (3, 27)]
*** center 5: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 61, 0]]
** centroid: 7, normalized-entropy: 0.4782501641071144, [(1, 7), (2, 61)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9349798900697105, 0.9109828391265516, 0.9049918181654708, 0.9049738361115606, 0.8919877961794129, 0.8909778041514569, 0.886994779210348, 0.8840127552702404, 0.8809887732043421, 0.8709847572123022, 0.8629887372402343, 0.8509887132641625, 0.8129237021452589, 0.786987586388784]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9349798900697105
finished with 15
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.3955748338803269] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3955748338803269, 0.3121581972050886] ***
*** starting iteration: 2; err: [Inf, 0.3955748338803269, 0.3121581972050886] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3955748338803269, 0.3121581972050886, 0.3032060474850931] ***
*** starting iteration: 3; err: [Inf, 0.3955748338803269, 0.3121581972050886, 0.3032060474850931] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3955748338803269, 0.3121581972050886, 0.3032060474850931, 0.30190783755031525] ***
*** finished computation of 3 references, err: [Inf, 0.3955748338803269, 0.3121581972050886, 0.3032060474850931, 0.30190783755031525] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [92, 146, 26]]
** centroid: 1, normalized-entropy: 0.8403471192087898, [(1, 92), (2, 146), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [110, 99, 0]]
** centroid: 2, normalized-entropy: 0.9980008838722993, [(1, 110), (2, 99)]
*** center 3: selecting labels [1] (freq >= 2) [from [193, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.45265261278204294] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45265261278204294, 0.3089607993512229] ***
*** starting iteration: 2; err: [Inf, 0.45265261278204294, 0.3089607993512229] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45265261278204294, 0.3089607993512229, 0.3072154049739253] ***
*** starting iteration: 3; err: [Inf, 0.45265261278204294, 0.3089607993512229, 0.3072154049739253] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45265261278204294, 0.3089607993512229, 0.3072154049739253, 0.3073953091204613] ***
*** finished computation of 3 references, err: [Inf, 0.45265261278204294, 0.3089607993512229, 0.3072154049739253, 0.3073953091204613] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [65, 157, 23]]
** centroid: 1, normalized-entropy: 0.7821597646253177, [(1, 65), (2, 157), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [143, 80, 0]]
** centroid: 2, normalized-entropy: 0.941636004179055, [(1, 143), (2, 80)]
*** center 3: selecting labels [1] (freq >= 2) [from [199, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.43491071210741283] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43491071210741283, 0.3317457039350423] ***
*** starting iteration: 2; err: [Inf, 0.43491071210741283, 0.3317457039350423] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43491071210741283, 0.3317457039350423, 0.313710023938068] ***
*** starting iteration: 3; err: [Inf, 0.43491071210741283, 0.3317457039350423, 0.313710023938068] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43491071210741283, 0.3317457039350423, 0.313710023938068, 0.30869960074481934] ***
*** finished computation of 3 references, err: [Inf, 0.43491071210741283, 0.3317457039350423, 0.313710023938068, 0.30869960074481934] ***
*** center 1: selecting labels [1] (freq >= 2) [from [224, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [73, 154, 27]]
** centroid: 2, normalized-entropy: 0.8192191329358459, [(1, 73), (2, 154), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [101, 88, 0]]
** centroid: 3, normalized-entropy: 0.9965845289934886, [(1, 101), (2, 88)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9349798900697105, 0.9109828391265516, 0.9049918181654708, 0.9049738361115606, 0.8919877961794129, 0.8909778041514569, 0.886994779210348, 0.8840127552702404, 0.8809887732043421, 0.8709847572123022, 0.8629887372402343, 0.8509887132641625, 0.8250166333998669, 0.8129237021452589, 0.786987586388784]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9349798900697105
finished with 15
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9349798900697105, 0.9109828391265516, 0.9049918181654708, 0.9049738361115606, 0.8919877961794129, 0.8909778041514569, 0.886994779210348, 0.8840127552702404, 0.8809887732043421, 0.8709847572123022, 0.8629887372402343, 0.8509887132641625, 0.8250166333998669, 0.8129237021452589, 0.786987586388784]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9349798900697105
finished with 15
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.20036258999537676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20036258999537676, 0.1523673282470554] ***
*** starting iteration: 2; err: [Inf, 0.20036258999537676, 0.1523673282470554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20036258999537676, 0.1523673282470554, 0.14714617770956828] ***
*** starting iteration: 3; err: [Inf, 0.20036258999537676, 0.1523673282470554, 0.14714617770956828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20036258999537676, 0.1523673282470554, 0.14714617770956828, 0.14677371008321644] ***
*** finished computation of 7 references, err: [Inf, 0.20036258999537676, 0.1523673282470554, 0.14714617770956828, 0.14677371008321644] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [61, 87, 0]]
** centroid: 1, normalized-entropy: 0.9776218674520889, [(1, 61), (2, 87)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [99, 8, 0]]
** centroid: 2, normalized-entropy: 0.3834641323087979, [(1, 99), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [164, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 121, 38]]
** centroid: 4, normalized-entropy: 0.7933628469756624, [(2, 121), (3, 38)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [127, 18, 0]]
** centroid: 5, normalized-entropy: 0.5411393986630263, [(1, 127), (2, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [139, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 128, 0]]
** centroid: 7, normalized-entropy: 0.3750514064240124, [(1, 10), (2, 128)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20076187656819822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20076187656819822, 0.15508752915076912] ***
*** starting iteration: 2; err: [Inf, 0.20076187656819822, 0.15508752915076912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20076187656819822, 0.15508752915076912, 0.1482162305880338] ***
*** starting iteration: 3; err: [Inf, 0.20076187656819822, 0.15508752915076912, 0.1482162305880338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20076187656819822, 0.15508752915076912, 0.1482162305880338, 0.1461785328872502] ***
*** starting iteration: 4; err: [Inf, 0.20076187656819822, 0.15508752915076912, 0.1482162305880338, 0.1461785328872502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20076187656819822, 0.15508752915076912, 0.1482162305880338, 0.1461785328872502, 0.14563388159312307] ***
*** finished computation of 7 references, err: [Inf, 0.20076187656819822, 0.15508752915076912, 0.1482162305880338, 0.1461785328872502, 0.14563388159312307] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [15, 48, 0]]
** centroid: 1, normalized-entropy: 0.7918583525674836, [(1, 15), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 32, 0]]
** centroid: 2, normalized-entropy: 0.9766349114440099, [(1, 46), (2, 32)]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 74, 17]]
** centroid: 4, normalized-entropy: 0.6947570868163001, [(2, 74), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 25, 0]]
** centroid: 5, normalized-entropy: 0.9831491282282879, [(1, 34), (2, 25)]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19299574390426277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19299574390426277, 0.15715592946484686] ***
*** starting iteration: 2; err: [Inf, 0.19299574390426277, 0.15715592946484686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19299574390426277, 0.15715592946484686, 0.15240133173158393] ***
*** starting iteration: 3; err: [Inf, 0.19299574390426277, 0.15715592946484686, 0.15240133173158393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19299574390426277, 0.15715592946484686, 0.15240133173158393, 0.15109687286615373] ***
*** starting iteration: 4; err: [Inf, 0.19299574390426277, 0.15715592946484686, 0.15240133173158393, 0.15109687286615373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19299574390426277, 0.15715592946484686, 0.15240133173158393, 0.15109687286615373, 0.15043971633724867] ***
*** finished computation of 7 references, err: [Inf, 0.19299574390426277, 0.15715592946484686, 0.15240133173158393, 0.15109687286615373, 0.15043971633724867] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [15, 69, 0]]
** centroid: 1, normalized-entropy: 0.6769418697808861, [(1, 15), (2, 69)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 4, 0]]
** centroid: 3, normalized-entropy: 0.4138168503036336, [(1, 44), (2, 4)]
*** center 4: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [66, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 65, 0]]
** centroid: 6, normalized-entropy: 0.3712323266408756, [(1, 5), (2, 65)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 54, 18]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 54), (3, 18)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18369845745898783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18369845745898783, 0.15093726337142288] ***
*** starting iteration: 2; err: [Inf, 0.18369845745898783, 0.15093726337142288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18369845745898783, 0.15093726337142288, 0.14726466899737717] ***
*** starting iteration: 3; err: [Inf, 0.18369845745898783, 0.15093726337142288, 0.14726466899737717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18369845745898783, 0.15093726337142288, 0.14726466899737717, 0.14645856320299208] ***
*** finished computation of 7 references, err: [Inf, 0.18369845745898783, 0.15093726337142288, 0.14726466899737717, 0.14645856320299208] ***
*** center 1: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 18]]
** centroid: 2, normalized-entropy: 0.8512243352621381, [(2, 47), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 8, 0]]
** centroid: 3, normalized-entropy: 0.5079353563991225, [(1, 63), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 65, 0]]
** centroid: 4, normalized-entropy: 0.260862909647207, [(1, 3), (2, 65)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 62, 0]]
** centroid: 5, normalized-entropy: 0.7691928290130138, [(1, 18), (2, 62)]
*** center 6: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [48, 1, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1988901261407882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1988901261407882, 0.1489585808478296] ***
*** starting iteration: 2; err: [Inf, 0.1988901261407882, 0.1489585808478296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1988901261407882, 0.1489585808478296, 0.14516600159369408] ***
*** starting iteration: 3; err: [Inf, 0.1988901261407882, 0.1489585808478296, 0.14516600159369408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1988901261407882, 0.1489585808478296, 0.14516600159369408, 0.1440996826607734] ***
*** starting iteration: 4; err: [Inf, 0.1988901261407882, 0.1489585808478296, 0.14516600159369408, 0.1440996826607734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1988901261407882, 0.1489585808478296, 0.14516600159369408, 0.1440996826607734, 0.14384275033138694] ***
*** finished computation of 7 references, err: [Inf, 0.1988901261407882, 0.1489585808478296, 0.14516600159369408, 0.1440996826607734, 0.14384275033138694] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [56, 39, 0]]
** centroid: 1, normalized-entropy: 0.9767760065324896, [(1, 56), (2, 39)]
*** center 2: selecting labels [1] (freq >= 2) [from [63, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 67, 16]]
** centroid: 4, normalized-entropy: 0.7072324944713736, [(2, 67), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 29, 0]]
** centroid: 5, normalized-entropy: 0.9786961448300948, [(1, 41), (2, 29)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18584442292153835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18584442292153835, 0.15009539725305512] ***
*** starting iteration: 2; err: [Inf, 0.18584442292153835, 0.15009539725305512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18584442292153835, 0.15009539725305512, 0.14666246836073696] ***
*** starting iteration: 3; err: [Inf, 0.18584442292153835, 0.15009539725305512, 0.14666246836073696] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18584442292153835, 0.15009539725305512, 0.14666246836073696, 0.14674854624271394] ***
*** finished computation of 7 references, err: [Inf, 0.18584442292153835, 0.15009539725305512, 0.14666246836073696, 0.14674854624271394] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 83, 0]]
** centroid: 1, normalized-entropy: 0.16082302082246946, [(1, 2), (2, 83)]
*** center 2: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 28, 0]]
** centroid: 3, normalized-entropy: 0.9605187074766162, [(1, 45), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [53, 10, 0]]
** centroid: 4, normalized-entropy: 0.6312630180916119, [(1, 53), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 13, 0]]
** centroid: 5, normalized-entropy: 0.6084002154765848, [(1, 74), (2, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 39, 18]]
** centroid: 7, normalized-entropy: 0.8997437586982626, [(2, 39), (3, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18585374987497927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18585374987497927, 0.15516870222706347] ***
*** starting iteration: 2; err: [Inf, 0.18585374987497927, 0.15516870222706347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18585374987497927, 0.15516870222706347, 0.1503664729082957] ***
*** starting iteration: 3; err: [Inf, 0.18585374987497927, 0.15516870222706347, 0.1503664729082957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18585374987497927, 0.15516870222706347, 0.1503664729082957, 0.1495870140362531] ***
*** finished computation of 7 references, err: [Inf, 0.18585374987497927, 0.15516870222706347, 0.1503664729082957, 0.1495870140362531] ***
*** center 1: selecting labels [1] (freq >= 2) [from [80, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 65, 16]]
** centroid: 2, normalized-entropy: 0.7169622516889513, [(2, 65), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 12, 0]]
** centroid: 3, normalized-entropy: 0.7024665512903904, [(1, 51), (2, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 45, 0]]
** centroid: 5, normalized-entropy: 0.985969027451193, [(1, 34), (2, 45)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 62, 0]]
** centroid: 6, normalized-entropy: 0.5127091420308771, [(1, 8), (2, 62)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19208696270920336] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19208696270920336, 0.1529611798170954] ***
*** starting iteration: 2; err: [Inf, 0.19208696270920336, 0.1529611798170954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19208696270920336, 0.1529611798170954, 0.1495097462479025] ***
*** starting iteration: 3; err: [Inf, 0.19208696270920336, 0.1529611798170954, 0.1495097462479025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19208696270920336, 0.1529611798170954, 0.1495097462479025, 0.14860214403178543] ***
*** finished computation of 7 references, err: [Inf, 0.19208696270920336, 0.1529611798170954, 0.1495097462479025, 0.14860214403178543] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [52, 58, 0]]
** centroid: 1, normalized-entropy: 0.9978527766088781, [(1, 52), (2, 58)]
*** center 2: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 78, 18]]
** centroid: 4, normalized-entropy: 0.6962122601251459, [(2, 78), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [59, 10, 0]]
** centroid: 5, normalized-entropy: 0.5969995167604553, [(1, 59), (2, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 52, 0]]
** centroid: 7, normalized-entropy: 0.30540057087920036, [(1, 3), (2, 52)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19458917992189526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19458917992189526, 0.14568762362841517] ***
*** starting iteration: 2; err: [Inf, 0.19458917992189526, 0.14568762362841517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19458917992189526, 0.14568762362841517, 0.14223813839186913] ***
*** starting iteration: 3; err: [Inf, 0.19458917992189526, 0.14568762362841517, 0.14223813839186913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19458917992189526, 0.14568762362841517, 0.14223813839186913, 0.14198770016338677] ***
*** finished computation of 7 references, err: [Inf, 0.19458917992189526, 0.14568762362841517, 0.14223813839186913, 0.14198770016338677] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [14, 73, 0]]
** centroid: 1, normalized-entropy: 0.6365048555378351, [(1, 14), (2, 73)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [39, 38, 0]]
** centroid: 2, normalized-entropy: 0.9998783322990061, [(1, 39), (2, 38)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 10, 0]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(1, 50), (2, 10)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 53, 16]]
** centroid: 5, normalized-entropy: 0.7812812090702043, [(2, 53), (3, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [82, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19576212449930608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19576212449930608, 0.14943169105425477] ***
*** starting iteration: 2; err: [Inf, 0.19576212449930608, 0.14943169105425477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19576212449930608, 0.14943169105425477, 0.14597520648874343] ***
*** starting iteration: 3; err: [Inf, 0.19576212449930608, 0.14943169105425477, 0.14597520648874343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19576212449930608, 0.14943169105425477, 0.14597520648874343, 0.14549681743420662] ***
*** finished computation of 7 references, err: [Inf, 0.19576212449930608, 0.14943169105425477, 0.14597520648874343, 0.14549681743420662] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 70, 0]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(1, 7), (2, 70)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 15, 0]]
** centroid: 2, normalized-entropy: 0.7732266742876346, [(1, 51), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 63, 20]]
** centroid: 4, normalized-entropy: 0.7966394665488286, [(2, 63), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 21, 0]]
** centroid: 5, normalized-entropy: 0.912999213585247, [(1, 43), (2, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [41, 4, 0]]
** centroid: 7, normalized-entropy: 0.43275015878875417, [(1, 41), (2, 4)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18668548071896657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18668548071896657, 0.15372549859853463] ***
*** starting iteration: 2; err: [Inf, 0.18668548071896657, 0.15372549859853463] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18668548071896657, 0.15372549859853463, 0.15053025048226118] ***
*** starting iteration: 3; err: [Inf, 0.18668548071896657, 0.15372549859853463, 0.15053025048226118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18668548071896657, 0.15372549859853463, 0.15053025048226118, 0.14953673850744964] ***
*** finished computation of 7 references, err: [Inf, 0.18668548071896657, 0.15372549859853463, 0.15053025048226118, 0.14953673850744964] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 86, 23]]
** centroid: 1, normalized-entropy: 0.7434073165779199, [(2, 86), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 22, 0]]
** centroid: 4, normalized-entropy: 0.8533728188427888, [(1, 57), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 8, 0]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(1, 56), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 56, 0]]
** centroid: 6, normalized-entropy: 0.3533593350214213, [(1, 4), (2, 56)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [64, 2, 0]]
** centroid: 7, normalized-entropy: 0.19590927087360496, [(1, 64), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21877007764950396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21877007764950396, 0.15174846572522074] ***
*** starting iteration: 2; err: [Inf, 0.21877007764950396, 0.15174846572522074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21877007764950396, 0.15174846572522074, 0.1468490330837667] ***
*** starting iteration: 3; err: [Inf, 0.21877007764950396, 0.15174846572522074, 0.1468490330837667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21877007764950396, 0.15174846572522074, 0.1468490330837667, 0.14645683216862382] ***
*** finished computation of 7 references, err: [Inf, 0.21877007764950396, 0.15174846572522074, 0.1468490330837667, 0.14645683216862382] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [33, 36, 0]]
** centroid: 1, normalized-entropy: 0.9986359641585719, [(1, 33), (2, 36)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 20]]
** centroid: 3, normalized-entropy: 0.787126586201269, [(2, 65), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 26, 0]]
** centroid: 5, normalized-entropy: 0.8926230133850988, [(1, 58), (2, 26)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 57, 0]]
** centroid: 6, normalized-entropy: 0.21357981533827744, [(1, 2), (2, 57)]
*** center 7: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1801140914876014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1801140914876014, 0.15474213095754386] ***
*** starting iteration: 2; err: [Inf, 0.1801140914876014, 0.15474213095754386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1801140914876014, 0.15474213095754386, 0.1499803056139499] ***
*** starting iteration: 3; err: [Inf, 0.1801140914876014, 0.15474213095754386, 0.1499803056139499] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1801140914876014, 0.15474213095754386, 0.1499803056139499, 0.1494074791315943] ***
*** finished computation of 7 references, err: [Inf, 0.1801140914876014, 0.15474213095754386, 0.1499803056139499, 0.1494074791315943] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 87, 18]]
** centroid: 1, normalized-entropy: 0.6609623351442084, [(2, 87), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [55, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [53, 15, 0]]
** centroid: 4, normalized-entropy: 0.7612401496918493, [(1, 53), (2, 15)]
*** center 5: selecting labels [1] (freq >= 2) [from [65, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [69, 8, 0]]
** centroid: 6, normalized-entropy: 0.481225663841737, [(1, 69), (2, 8)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 70, 0]]
** centroid: 7, normalized-entropy: 0.30337483608641397, [(1, 4), (2, 70)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17828057133965194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17828057133965194, 0.14902196216490118] ***
*** starting iteration: 2; err: [Inf, 0.17828057133965194, 0.14902196216490118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17828057133965194, 0.14902196216490118, 0.14627706443704663] ***
*** starting iteration: 3; err: [Inf, 0.17828057133965194, 0.14902196216490118, 0.14627706443704663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17828057133965194, 0.14902196216490118, 0.14627706443704663, 0.14596902441233398] ***
*** finished computation of 7 references, err: [Inf, 0.17828057133965194, 0.14902196216490118, 0.14627706443704663, 0.14596902441233398] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 43, 18]]
** centroid: 2, normalized-entropy: 0.8751957887407251, [(2, 43), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 9, 0]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(1, 54), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 7, 0]]
** centroid: 4, normalized-entropy: 0.47357292491745173, [(1, 62), (2, 7)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [16, 64, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 16), (2, 64)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [14, 58, 0]]
** centroid: 6, normalized-entropy: 0.710676853856123, [(1, 14), (2, 58)]
*** center 7: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18995298714004458] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18995298714004458, 0.15055721679423004] ***
*** starting iteration: 2; err: [Inf, 0.18995298714004458, 0.15055721679423004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18995298714004458, 0.15055721679423004, 0.14407975677400828] ***
*** starting iteration: 3; err: [Inf, 0.18995298714004458, 0.15055721679423004, 0.14407975677400828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18995298714004458, 0.15055721679423004, 0.14407975677400828, 0.1431533333156258] ***
*** finished computation of 7 references, err: [Inf, 0.18995298714004458, 0.15055721679423004, 0.14407975677400828, 0.1431533333156258] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [72, 2, 0]]
** centroid: 1, normalized-entropy: 0.1792560669283214, [(1, 72), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 21]]
** centroid: 2, normalized-entropy: 0.8918107543797084, [(2, 47), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 12, 0]]
** centroid: 3, normalized-entropy: 0.708835673332196, [(1, 50), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 37, 0]]
** centroid: 4, normalized-entropy: 0.9838333347337009, [(1, 50), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 76, 0]]
** centroid: 5, normalized-entropy: 0.5475844288749033, [(1, 11), (2, 76)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18464927753806115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18464927753806115, 0.147945228446275] ***
*** starting iteration: 2; err: [Inf, 0.18464927753806115, 0.147945228446275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18464927753806115, 0.147945228446275, 0.14504174487944693] ***
*** starting iteration: 3; err: [Inf, 0.18464927753806115, 0.147945228446275, 0.14504174487944693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18464927753806115, 0.147945228446275, 0.14504174487944693, 0.14407789744576438] ***
*** finished computation of 7 references, err: [Inf, 0.18464927753806115, 0.147945228446275, 0.14504174487944693, 0.14407789744576438] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [48, 41, 0]]
** centroid: 1, normalized-entropy: 0.995533068899466, [(1, 48), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 6, 0]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(1, 48), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 57, 25]]
** centroid: 4, normalized-entropy: 0.8871723027673716, [(2, 57), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 74, 0]]
** centroid: 5, normalized-entropy: 0.5830194167347007, [(1, 12), (2, 74)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20880592460930347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20880592460930347, 0.15124089549016206] ***
*** starting iteration: 2; err: [Inf, 0.20880592460930347, 0.15124089549016206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20880592460930347, 0.15124089549016206, 0.1461453198194504] ***
*** starting iteration: 3; err: [Inf, 0.20880592460930347, 0.15124089549016206, 0.1461453198194504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20880592460930347, 0.15124089549016206, 0.1461453198194504, 0.14567284390795976] ***
*** finished computation of 7 references, err: [Inf, 0.20880592460930347, 0.15124089549016206, 0.1461453198194504, 0.14567284390795976] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 67, 16]]
** centroid: 1, normalized-entropy: 0.7072324944713736, [(2, 67), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 3, 0]]
** centroid: 3, normalized-entropy: 0.3274449191544762, [(1, 47), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 18, 0]]
** centroid: 4, normalized-entropy: 0.7691928290130138, [(1, 62), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 23, 0]]
** centroid: 5, normalized-entropy: 0.8892881527272397, [(1, 52), (2, 23)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 62, 0]]
** centroid: 6, normalized-entropy: 0.3829576722723533, [(1, 5), (2, 62)]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1849549857545644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1849549857545644, 0.15562499842047692] ***
*** starting iteration: 2; err: [Inf, 0.1849549857545644, 0.15562499842047692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1849549857545644, 0.15562499842047692, 0.15243561844527723] ***
*** starting iteration: 3; err: [Inf, 0.1849549857545644, 0.15562499842047692, 0.15243561844527723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1849549857545644, 0.15562499842047692, 0.15243561844527723, 0.1512113920599222] ***
*** starting iteration: 4; err: [Inf, 0.1849549857545644, 0.15562499842047692, 0.15243561844527723, 0.1512113920599222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1849549857545644, 0.15562499842047692, 0.15243561844527723, 0.1512113920599222, 0.15025232526427135] ***
*** finished computation of 7 references, err: [Inf, 0.1849549857545644, 0.15562499842047692, 0.15243561844527723, 0.1512113920599222, 0.15025232526427135] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [73, 9, 0]]
** centroid: 1, normalized-entropy: 0.49917983618854633, [(1, 73), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 11, 0]]
** centroid: 2, normalized-entropy: 0.6873150928309273, [(1, 49), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 58, 16]]
** centroid: 3, normalized-entropy: 0.7531979910695015, [(2, 58), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 55, 0]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(1, 22), (2, 55)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19400852005742492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19400852005742492, 0.1542018994735554] ***
*** starting iteration: 2; err: [Inf, 0.19400852005742492, 0.1542018994735554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19400852005742492, 0.1542018994735554, 0.1501701397523284] ***
*** starting iteration: 3; err: [Inf, 0.19400852005742492, 0.1542018994735554, 0.1501701397523284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19400852005742492, 0.1542018994735554, 0.1501701397523284, 0.14899923304654658] ***
*** starting iteration: 4; err: [Inf, 0.19400852005742492, 0.1542018994735554, 0.1501701397523284, 0.14899923304654658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19400852005742492, 0.1542018994735554, 0.1501701397523284, 0.14899923304654658, 0.14884909329377113] ***
*** finished computation of 7 references, err: [Inf, 0.19400852005742492, 0.1542018994735554, 0.1501701397523284, 0.14899923304654658, 0.14884909329377113] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 79, 23]]
** centroid: 1, normalized-entropy: 0.7700664782920602, [(2, 79), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 2, 0]]
** centroid: 3, normalized-entropy: 0.21357981533827744, [(1, 57), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 5, 0]]
** centroid: 4, normalized-entropy: 0.3912435636292556, [(1, 60), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 13, 0]]
** centroid: 5, normalized-entropy: 0.6402569436810504, [(1, 67), (2, 13)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [40, 14, 0]]
** centroid: 7, normalized-entropy: 0.8256265261578954, [(1, 40), (2, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19958873633667826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19958873633667826, 0.149735584422946] ***
*** starting iteration: 2; err: [Inf, 0.19958873633667826, 0.149735584422946] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19958873633667826, 0.149735584422946, 0.1481609275750816] ***
*** starting iteration: 3; err: [Inf, 0.19958873633667826, 0.149735584422946, 0.1481609275750816] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19958873633667826, 0.149735584422946, 0.1481609275750816, 0.14805398881062865] ***
*** finished computation of 7 references, err: [Inf, 0.19958873633667826, 0.149735584422946, 0.1481609275750816, 0.14805398881062865] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 51, 0]]
** centroid: 1, normalized-entropy: 0.9999292854321659, [(1, 50), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 15, 0]]
** centroid: 2, normalized-entropy: 0.7982441335646697, [(1, 47), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 74, 19]]
** centroid: 4, normalized-entropy: 0.7304472862481346, [(2, 74), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 45, 0]]
** centroid: 5, normalized-entropy: 0.9132401614300725, [(1, 22), (2, 45)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20110315562784672] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20110315562784672, 0.15256123128533364] ***
*** starting iteration: 2; err: [Inf, 0.20110315562784672, 0.15256123128533364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20110315562784672, 0.15256123128533364, 0.14876847258210182] ***
*** starting iteration: 3; err: [Inf, 0.20110315562784672, 0.15256123128533364, 0.14876847258210182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20110315562784672, 0.15256123128533364, 0.14876847258210182, 0.14820816236548126] ***
*** finished computation of 7 references, err: [Inf, 0.20110315562784672, 0.15256123128533364, 0.14876847258210182, 0.14820816236548126] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [29, 44, 0]]
** centroid: 1, normalized-entropy: 0.9693253797191861, [(1, 29), (2, 44)]
*** center 2: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 71, 12]]
** centroid: 4, normalized-entropy: 0.5961045458832345, [(2, 71), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 22, 0]]
** centroid: 5, normalized-entropy: 0.8980587934501658, [(1, 48), (2, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 55, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19148535308614373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19148535308614373, 0.15104140627756715] ***
*** starting iteration: 2; err: [Inf, 0.19148535308614373, 0.15104140627756715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19148535308614373, 0.15104140627756715, 0.14721036943607033] ***
*** starting iteration: 3; err: [Inf, 0.19148535308614373, 0.15104140627756715, 0.14721036943607033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19148535308614373, 0.15104140627756715, 0.14721036943607033, 0.14626577597111465] ***
*** finished computation of 7 references, err: [Inf, 0.19148535308614373, 0.15104140627756715, 0.14721036943607033, 0.14626577597111465] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 75, 17]]
** centroid: 1, normalized-entropy: 0.6904285855304167, [(2, 75), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 7, 0]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(1, 49), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [52, 30, 0]]
** centroid: 4, normalized-entropy: 0.9474351361840305, [(1, 52), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 7, 0]]
** centroid: 5, normalized-entropy: 0.4645149440905521, [(1, 64), (2, 7)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [69, 2, 0]]
** centroid: 7, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19451317944657057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19451317944657057, 0.15158438020548784] ***
*** starting iteration: 2; err: [Inf, 0.19451317944657057, 0.15158438020548784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19451317944657057, 0.15158438020548784, 0.14811714967153966] ***
*** starting iteration: 3; err: [Inf, 0.19451317944657057, 0.15158438020548784, 0.14811714967153966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19451317944657057, 0.15158438020548784, 0.14811714967153966, 0.1478821754269302] ***
*** finished computation of 7 references, err: [Inf, 0.19451317944657057, 0.15158438020548784, 0.14811714967153966, 0.1478821754269302] ***
*** center 1: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 10, 0]]
** centroid: 2, normalized-entropy: 0.6436394131461666, [(1, 51), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 53, 23]]
** centroid: 3, normalized-entropy: 0.8844839729019952, [(2, 53), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 78, 0]]
** centroid: 5, normalized-entropy: 0.6373874992221911, [(1, 15), (2, 78)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 51, 0]]
** centroid: 6, normalized-entropy: 0.23181305002459035, [(1, 2), (2, 51)]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19587217748723923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19587217748723923, 0.16097227277327328] ***
*** starting iteration: 2; err: [Inf, 0.19587217748723923, 0.16097227277327328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19587217748723923, 0.16097227277327328, 0.1557202752130106] ***
*** starting iteration: 3; err: [Inf, 0.19587217748723923, 0.16097227277327328, 0.1557202752130106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19587217748723923, 0.16097227277327328, 0.1557202752130106, 0.15381268273293972] ***
*** starting iteration: 4; err: [Inf, 0.19587217748723923, 0.16097227277327328, 0.1557202752130106, 0.15381268273293972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19587217748723923, 0.16097227277327328, 0.1557202752130106, 0.15381268273293972, 0.15279045501165092] ***
*** starting iteration: 5; err: [Inf, 0.19587217748723923, 0.16097227277327328, 0.1557202752130106, 0.15381268273293972, 0.15279045501165092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19587217748723923, 0.16097227277327328, 0.1557202752130106, 0.15381268273293972, 0.15279045501165092, 0.1524657434914261] ***
*** finished computation of 7 references, err: [Inf, 0.19587217748723923, 0.16097227277327328, 0.1557202752130106, 0.15381268273293972, 0.15279045501165092, 0.1524657434914261] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [16, 62, 0]]
** centroid: 1, normalized-entropy: 0.7320666900931937, [(1, 16), (2, 62)]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 6, 0]]
** centroid: 3, normalized-entropy: 0.48546076074591343, [(1, 51), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [67, 6, 0]]
** centroid: 4, normalized-entropy: 0.4098553703184051, [(1, 67), (2, 6)]
*** center 5: selecting labels [1] (freq >= 2) [from [79, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 66, 0]]
** centroid: 6, normalized-entropy: 0.1914332548141934, [(1, 2), (2, 66)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 42, 22]]
** centroid: 7, normalized-entropy: 0.9283620723948678, [(2, 42), (3, 22)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19585298003163187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19585298003163187, 0.15789532270655035] ***
*** starting iteration: 2; err: [Inf, 0.19585298003163187, 0.15789532270655035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19585298003163187, 0.15789532270655035, 0.1515250486228615] ***
*** starting iteration: 3; err: [Inf, 0.19585298003163187, 0.15789532270655035, 0.1515250486228615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19585298003163187, 0.15789532270655035, 0.1515250486228615, 0.1498127816878259] ***
*** starting iteration: 4; err: [Inf, 0.19585298003163187, 0.15789532270655035, 0.1515250486228615, 0.1498127816878259] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19585298003163187, 0.15789532270655035, 0.1515250486228615, 0.1498127816878259, 0.1484937279652804] ***
*** starting iteration: 5; err: [Inf, 0.19585298003163187, 0.15789532270655035, 0.1515250486228615, 0.1498127816878259, 0.1484937279652804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19585298003163187, 0.15789532270655035, 0.1515250486228615, 0.1498127816878259, 0.1484937279652804, 0.14813627213798464] ***
*** finished computation of 7 references, err: [Inf, 0.19585298003163187, 0.15789532270655035, 0.1515250486228615, 0.1498127816878259, 0.1484937279652804, 0.14813627213798464] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 71, 0]]
** centroid: 1, normalized-entropy: 0.5392163432092415, [(1, 10), (2, 71)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [56, 16, 0]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(1, 56), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [48, 26, 0]]
** centroid: 4, normalized-entropy: 0.9352691398683568, [(1, 48), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 5, 0]]
** centroid: 5, normalized-entropy: 0.4044483864864384, [(1, 57), (2, 5)]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 68, 14]]
** centroid: 7, normalized-entropy: 0.6593758812786991, [(2, 68), (3, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2024844919582829] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2024844919582829, 0.1514486000686884] ***
*** starting iteration: 2; err: [Inf, 0.2024844919582829, 0.1514486000686884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2024844919582829, 0.1514486000686884, 0.14731566853262484] ***
*** starting iteration: 3; err: [Inf, 0.2024844919582829, 0.1514486000686884, 0.14731566853262484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2024844919582829, 0.1514486000686884, 0.14731566853262484, 0.14650900131464004] ***
*** finished computation of 7 references, err: [Inf, 0.2024844919582829, 0.1514486000686884, 0.14731566853262484, 0.14650900131464004] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [38, 31, 0]]
** centroid: 1, normalized-entropy: 0.992563136012236, [(1, 38), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [35, 38, 0]]
** centroid: 2, normalized-entropy: 0.998781393072756, [(1, 35), (2, 38)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 82, 25]]
** centroid: 4, normalized-entropy: 0.7843112002044088, [(2, 82), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 36, 0]]
** centroid: 5, normalized-entropy: 0.9811522341999134, [(1, 26), (2, 36)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20059994047600777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20059994047600777, 0.15275221260637045] ***
*** starting iteration: 2; err: [Inf, 0.20059994047600777, 0.15275221260637045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20059994047600777, 0.15275221260637045, 0.1491753432555124] ***
*** starting iteration: 3; err: [Inf, 0.20059994047600777, 0.15275221260637045, 0.1491753432555124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20059994047600777, 0.15275221260637045, 0.1491753432555124, 0.14893709580227732] ***
*** finished computation of 7 references, err: [Inf, 0.20059994047600777, 0.15275221260637045, 0.1491753432555124, 0.14893709580227732] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 68, 19]]
** centroid: 1, normalized-entropy: 0.7572182549240017, [(2, 68), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 4, 0]]
** centroid: 3, normalized-entropy: 0.33352200393097675, [(1, 61), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [46, 23, 0]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(1, 46), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 26, 0]]
** centroid: 5, normalized-entropy: 0.9140185106642174, [(1, 53), (2, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21077545291371644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21077545291371644, 0.15350568936299533] ***
*** starting iteration: 2; err: [Inf, 0.21077545291371644, 0.15350568936299533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21077545291371644, 0.15350568936299533, 0.14877865218464284] ***
*** starting iteration: 3; err: [Inf, 0.21077545291371644, 0.15350568936299533, 0.14877865218464284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21077545291371644, 0.15350568936299533, 0.14877865218464284, 0.14811587196588516] ***
*** finished computation of 7 references, err: [Inf, 0.21077545291371644, 0.15350568936299533, 0.14877865218464284, 0.14811587196588516] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 4, 0]]
** centroid: 1, normalized-entropy: 0.32984607020714635, [(1, 62), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 19]]
** centroid: 2, normalized-entropy: 0.8659653498997099, [(2, 47), (3, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [75, 2, 0]]
** centroid: 4, normalized-entropy: 0.17378132267943294, [(1, 75), (2, 2)]
*** center 5: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 59, 0]]
** centroid: 6, normalized-entropy: 0.48791799258948565, [(1, 7), (2, 59)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 58, 0]]
** centroid: 7, normalized-entropy: 0.5328350630342235, [(1, 8), (2, 58)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18466086808778345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18466086808778345, 0.15290879227221013] ***
*** starting iteration: 2; err: [Inf, 0.18466086808778345, 0.15290879227221013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18466086808778345, 0.15290879227221013, 0.14752805813541636] ***
*** starting iteration: 3; err: [Inf, 0.18466086808778345, 0.15290879227221013, 0.14752805813541636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18466086808778345, 0.15290879227221013, 0.14752805813541636, 0.1452502632169053] ***
*** starting iteration: 4; err: [Inf, 0.18466086808778345, 0.15290879227221013, 0.14752805813541636, 0.1452502632169053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18466086808778345, 0.15290879227221013, 0.14752805813541636, 0.1452502632169053, 0.1447108084564097] ***
*** finished computation of 7 references, err: [Inf, 0.18466086808778345, 0.15290879227221013, 0.14752805813541636, 0.1452502632169053, 0.1447108084564097] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 66, 19]]
** centroid: 1, normalized-entropy: 0.7665599404543365, [(2, 66), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 3, 0]]
** centroid: 3, normalized-entropy: 0.3182152976832332, [(1, 49), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 4, 0]]
** centroid: 4, normalized-entropy: 0.3159971329784246, [(1, 66), (2, 4)]
*** center 5: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 56, 0]]
** centroid: 6, normalized-entropy: 0.5032583347756457, [(1, 7), (2, 56)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [28, 41, 0]]
** centroid: 7, normalized-entropy: 0.9742408334889756, [(1, 28), (2, 41)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1915947687700391] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1915947687700391, 0.15534124524705112] ***
*** starting iteration: 2; err: [Inf, 0.1915947687700391, 0.15534124524705112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1915947687700391, 0.15534124524705112, 0.1492038526777178] ***
*** starting iteration: 3; err: [Inf, 0.1915947687700391, 0.15534124524705112, 0.1492038526777178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1915947687700391, 0.15534124524705112, 0.1492038526777178, 0.14771343703754247] ***
*** starting iteration: 4; err: [Inf, 0.1915947687700391, 0.15534124524705112, 0.1492038526777178, 0.14771343703754247] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1915947687700391, 0.15534124524705112, 0.1492038526777178, 0.14771343703754247, 0.1470766292186454] ***
*** finished computation of 7 references, err: [Inf, 0.1915947687700391, 0.15534124524705112, 0.1492038526777178, 0.14771343703754247, 0.1470766292186454] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 61, 0]]
** centroid: 1, normalized-entropy: 0.43497348007474274, [(1, 6), (2, 61)]
*** center 2: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 3, 0]]
** centroid: 3, normalized-entropy: 0.3182152976832332, [(1, 49), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 2, 0]]
** centroid: 4, normalized-entropy: 0.17203694935311387, [(1, 76), (2, 2)]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 70, 0]]
** centroid: 6, normalized-entropy: 0.24729443986205674, [(1, 3), (2, 70)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 46, 19]]
** centroid: 7, normalized-entropy: 0.871683617119982, [(2, 46), (3, 19)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1949092977643013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1949092977643013, 0.16133078790642322] ***
*** starting iteration: 2; err: [Inf, 0.1949092977643013, 0.16133078790642322] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1949092977643013, 0.16133078790642322, 0.15637668038113042] ***
*** starting iteration: 3; err: [Inf, 0.1949092977643013, 0.16133078790642322, 0.15637668038113042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1949092977643013, 0.16133078790642322, 0.15637668038113042, 0.15491868992708624] ***
*** starting iteration: 4; err: [Inf, 0.1949092977643013, 0.16133078790642322, 0.15637668038113042, 0.15491868992708624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1949092977643013, 0.16133078790642322, 0.15637668038113042, 0.15491868992708624, 0.1543375806454569] ***
*** finished computation of 7 references, err: [Inf, 0.1949092977643013, 0.16133078790642322, 0.15637668038113042, 0.15491868992708624, 0.1543375806454569] ***
*** center 1: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [79, 16, 0]]
** centroid: 2, normalized-entropy: 0.6540800387941991, [(1, 79), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 62, 15]]
** centroid: 3, normalized-entropy: 0.7114160189012126, [(2, 62), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 73, 0]]
** centroid: 5, normalized-entropy: 0.6365048555378351, [(1, 14), (2, 73)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [30, 33, 0]]
** centroid: 6, normalized-entropy: 0.998363672593813, [(1, 30), (2, 33)]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 362,3 => 38,1 => 600), Dict(2 => 366,3 => 38,1 => 596))
[ Info: ===== scores for single classifier: {"micro_f1":0.938,"precision":0.938,"recall":0.938,"macro_recall":0.947751249984719,"macro_f1":0.9081108222724454,"accuracy":0.938,"class_f1":{"2":0.9106628242074928,"3":0.8539325842696629,"1":0.9597370583401809},"class_precision":{"2":0.9634146341463414,"3":0.7450980392156863,"1":0.9404186795491143},"class_recall":{"2":0.8633879781420765,"3":1.0,"1":0.9798657718120806}}
[ Info: ===== scores for 1: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9803303138103446,"macro_f1":0.9721659923544639,"accuracy":0.973,"class_f1":{"2":0.9631650750341064,"3":0.9743589743589743,"1":0.9789739276703111},"class_precision":{"2":0.9618528610354223,"3":0.95,"1":0.9814502529510961},"class_recall":{"2":0.9644808743169399,"3":1.0,"1":0.9765100671140939}}
[ Info: ===== scores for 5: {"micro_f1":0.962,"precision":0.962,"recall":0.962,"macro_recall":0.9731238004425373,"macro_f1":0.9565815598934332,"accuracy":0.962,"class_f1":{"2":0.9485094850948509,"3":0.9500000000000001,"1":0.9712351945854484},"class_precision":{"2":0.9408602150537635,"3":0.9047619047619048,"1":0.9795221843003413},"class_recall":{"2":0.9562841530054644,"3":1.0,"1":0.9630872483221476}}
[ Info: ===== scores for 7: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9729159790222613,"macro_f1":0.9596284209773523,"accuracy":0.961,"class_f1":{"2":0.9473684210526315,"3":0.9620253164556963,"1":0.9694915254237289},"class_precision":{"2":0.936,"3":0.926829268292683,"1":0.9794520547945206},"class_recall":{"2":0.9590163934426229,"3":1.0,"1":0.959731543624161}}
[ Info: ===== scores for 9: {"micro_f1":0.962,"precision":0.962,"recall":0.962,"macro_recall":0.9734752631385925,"macro_f1":0.9603460211087302,"accuracy":0.962,"class_f1":{"2":0.9486486486486486,"3":0.9620253164556963,"1":0.9703640982218458},"class_precision":{"2":0.9385026737967914,"3":0.926829268292683,"1":0.9794871794871794},"class_recall":{"2":0.9590163934426229,"3":1.0,"1":0.9614093959731543}}
[ Info: ===== scores for 11: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9725645163262063,"macro_f1":0.9558633597591087,"accuracy":0.961,"class_f1":{"2":0.9472259810554804,"3":0.9500000000000001,"1":0.9703640982218458},"class_precision":{"2":0.938337801608579,"3":0.9047619047619048,"1":0.9794871794871794},"class_recall":{"2":0.9562841530054644,"3":1.0,"1":0.9614093959731543}}
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.962, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.962, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.973,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9803303138103446,"macro_f1":0.9721659923544639,"accuracy":0.973,"class_f1":{"2":0.9631650750341064,"3":0.9743589743589743,"1":0.9789739276703111},"class_precision":{"2":0.9618528610354223,"3":0.95,"1":0.9814502529510961},"class_recall":{"2":0.9644808743169399,"3":1.0,"1":0.9765100671140939}}
Test Summary: | Pass  Total
AKNC          |    8      8
[250, 1, 1, 5, 2, 9, 2, 8, 6, 1, 4, 8, 6, 14, 3, 5, 4, 6, 2, 4, 3, 7, 9, 3, 2, 1, 5, 16, 4, 33, 2, 22, 7, 13, 15, 8, 3, 4, 36, 7, 7, 5, 4, 5, 14, 1, 16, 5, 35, 19, 2, 17, 4, 10, 6, 10, 26, 9, 9, 20, 54, 2, 5, 31, 2, 33, 24, 16, 10, 3, 15, 33, 152, 13, 23, 7, 69, 53, 59, 27, 36, 14, 6, 39, 3, 49, 16, 10, 30, 5, 90, 2, 34, 11, 43, 1, 1, 29, 5, 23, 53, 14, 30, 35, 11, 8, 50, 35, 76, 5, 23, 14, 2, 189, 4, 13, 5, 88, 3, 4, 22, 1, 25, 1, 8, 8, 21, 51, 14, 66, 8, 5, 26, 211, 5, 45, 76, 10, 19, 24, 32, 33, 2, 22, 4, 23, 10, 4, 13, 102, 7, 12, 7, 45, 10, 30, 18, 20, 17, 7, 8, 95, 31, 15, 6, 14, 66, 25, 6, 6, 18, 17, 18, 9, 60, 18, 35, 40, 46, 3, 85, 7, 79, 3, 13, 28, 28, 19, 22, 27, 1201, 36, 15, 8, 7, 606, 19, 15, 8, 58, 19, 4, 102, 81, 4, 24, 50, 21, 21, 15, 99, 7, 7, 8, 90, 4, 38, 12, 3, 76, 7, 39, 13, 27, 53, 17, 18, 33, 12, 8, 13, 8, 70, 19, 13, 32, 41, 34, 12, 20, 11, 3, 192, 59, 9, 17, 82, 32, 3, 159, 11, 45, 100, 48, 2, 46, 34, 10, 46, 54, 4, 10, 3, 33, 16, 19, 28, 25, 10, 236, 1, 50, 17, 20, 4, 49, 9, 46, 18, 13, 6, 20, 4, 12, 12, 25, 5, 5, 14, 50, 12, 39, 37, 33, 5, 171, 21, 5, 354, 33]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6799999999999998, speedup = 0.2952327272797705, eval_ratio = 0.095502)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.41154513888888883,"recall":0.40538194444444436,"f1":null,"seconds":0.00020907260477542877,"exhaustive_search_seconds":0.00037403032183647156,"evaluations":548.34375,"distances_sum":1740.881857330903}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5980902777777777,"recall":0.5980902777777777,"f1":null,"seconds":0.00027519650757312775,"exhaustive_search_seconds":0.00037403032183647156,"evaluations":735.03125,"distances_sum":1656.9049290220344}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6987847222222217,"recall":0.6987847222222217,"f1":0.6987847222222217,"seconds":0.000597028061747551,"exhaustive_search_seconds":0.00037403032183647156,"evaluations":875.875,"distances_sum":1605.959438324944}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7690972222222217,"recall":0.7690972222222217,"f1":0.7690972222222217,"seconds":0.0005042776465415955,"exhaustive_search_seconds":0.00037403032183647156,"evaluations":1007.1484375,"distances_sum":1578.9593693670647}
KCenters.DeloneInvIndex> reached performance {"precision":0.8211805555555548,"recall":0.8211805555555548,"f1":0.8211805555555548,"seconds":0.0005796495825052261,"exhaustive_search_seconds":0.00037403032183647156,"evaluations":1167.4453125,"distances_sum":1562.9785802363908}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.792, speedup = 0.5389410412799435, eval_ratio = 0.11816800000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
