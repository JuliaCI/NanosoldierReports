Current time is 2020-10-25T16:21:41.250
Julia Version 1.6.0-DEV.1240
Commit 47d6067ffe (2020-10-15 19:02 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807
  JULIA_PKG_SERVER = 

Starting installation at 2020-10-25T16:21:44.848
  Resolving package versions...
  Installed Lz4_jll ────────────────────── v1.9.2+2
  Installed CpuId ──────────────────────── v0.2.2
  Installed TimerOutputs ───────────────── v0.5.6
  Installed Requires ───────────────────── v1.1.0
  Installed OffsetArrays ───────────────── v1.3.1
  Installed Tullio ─────────────────────── v0.2.8
  Installed DocStringExtensions ────────── v0.8.3
  Installed Trixi ──────────────────────── v0.2.6
  Installed OpenSpecFun_jll ────────────── v0.5.3+4
  Installed Zlib_jll ───────────────────── v1.2.11+18
  Installed Blosc_jll ──────────────────── v1.14.3+1
  Installed DiffRules ──────────────────── v1.0.1
  Installed VectorizationBase ──────────── v0.12.33
  Installed LinearMaps ─────────────────── v2.7.0
  Installed StaticArrays ───────────────── v0.12.4
  Installed CompilerSupportLibraries_jll ─ v0.3.4+0
  Installed EllipsisNotation ───────────── v1.0.0
  Installed Blosc ──────────────────────── v0.7.0
  Installed SLEEFPirates ───────────────── v0.5.5
  Installed LoopVectorization ──────────── v0.8.26
  Installed HDF5 ───────────────────────── v0.13.6
  Installed SpecialFunctions ───────────── v0.10.3
  Installed JLLWrappers ────────────────── v1.1.3
  Installed Zstd_jll ───────────────────── v1.4.5+2
  Installed HDF5_jll ───────────────────── v1.10.5+6
  Installed UnPack ─────────────────────── v1.0.2
  Installed NaNMath ────────────────────── v0.3.4
  Installed SIMDPirates ────────────────── v0.8.25
Updating `~/.julia/environments/v1.6/Project.toml`
  [a7f1ee26] + Trixi v0.2.6
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [a74b3585] + Blosc v0.7.0
  [0b7ba130] + Blosc_jll v1.14.3+1
  [e66e0078] + CompilerSupportLibraries_jll v0.3.4+0
  [adafc99b] + CpuId v0.2.2
  [b552c78f] + DiffRules v1.0.1
  [ffbed154] + DocStringExtensions v0.8.3
  [da5c29d0] + EllipsisNotation v1.0.0
  [f67ccb44] + HDF5 v0.13.6
  [0234f1f7] + HDF5_jll v1.10.5+6
  [692b3bcd] + JLLWrappers v1.1.3
  [7a12625a] + LinearMaps v2.7.0
  [bdcacae8] + LoopVectorization v0.8.26
  [5ced341a] + Lz4_jll v1.9.2+2
  [77ba4419] + NaNMath v0.3.4
  [6fe1bfb0] + OffsetArrays v1.3.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+4
  [ae029012] + Requires v1.1.0
  [21efa798] + SIMDPirates v0.8.25
  [476501e8] + SLEEFPirates v0.5.5
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [a759f4b9] + TimerOutputs v0.5.6
  [a7f1ee26] + Trixi v0.2.6
  [bc48ee85] + Tullio v0.2.8
  [3a884ed6] + UnPack v1.0.2
  [3d5dd08c] + VectorizationBase v0.12.33
  [83775a58] + Zlib_jll v1.2.11+18
  [3161d3a3] + Zstd_jll v1.4.5+2
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [9abbd945] + Profile
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building SLEEFPirates → `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/67ae90a18aa8c22bf159318300e765fbd89ddf6e/build.log`
   Building HDF5 ────────→ `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/0713cbabdf855852dfab3ce6447c87145f3d9ea8/build.log`
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[90m[32m  ✓ [39mUnPack[39m
[90m[32m  ✓ [39mEllipsisNotation[39m
[90m[32m  ✓ [39mNaNMath[39m
[90m[32m  ✓ [39mTimerOutputs[39m
[90m[32m  ✓ [39mJLLWrappers[39m
[90m[32m  ✓ [39mRequires[39m
[90m[32m  ✓ [39mDocStringExtensions[39m
[90m[32m  ✓ [39mOffsetArrays[39m
[90m[32m  ✓ [39mLz4_jll[39m
[90m[32m  ✓ [39mZstd_jll[39m
[90m[32m  ✓ [39mZlib_jll[39m
[90m[32m  ✓ [39mCompilerSupportLibraries_jll[39m
[90m[32m  ✓ [39mLinearMaps[39m
[90m[32m  ✓ [39mHDF5_jll[39m
[90m[32m  ✓ [39mSIMDPirates[39m
[90m[32m  ✓ [39mBlosc_jll[39m
[90m[32m  ✓ [39mStaticArrays[39m
[90m[32m  ✓ [39mOpenSpecFun_jll[39m
[90m[32m  ✓ [39mBlosc[39m
[90m[32m  ✓ [39mSLEEFPirates[39m
[90m[32m  ✓ [39mSpecialFunctions[39m
[90m[32m  ✓ [39mDiffRules[39m
[90m[32m  ✓ [39mHDF5[39m
[90m[32m  ✓ [39mLoopVectorization[39m
[90m[32m  ✓ [39mTullio[39m
[32m  ✓ [39mTrixi
26 dependencies successfully precompiled (2 already precompiled)
Starting tests at 2020-10-25T16:23:31.499
    Testing Trixi
Status `/tmp/jl_xDlTpZ/Project.toml`
  [a7f1ee26] Trixi v0.2.6
  [37e2e46d] LinearAlgebra
  [8dfed614] Test
Status `/tmp/jl_xDlTpZ/Manifest.toml`
  [a74b3585] Blosc v0.7.0
  [0b7ba130] Blosc_jll v1.14.3+1
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [adafc99b] CpuId v0.2.2
  [b552c78f] DiffRules v1.0.1
  [ffbed154] DocStringExtensions v0.8.3
  [da5c29d0] EllipsisNotation v1.0.0
  [f67ccb44] HDF5 v0.13.6
  [0234f1f7] HDF5_jll v1.10.5+6
  [692b3bcd] JLLWrappers v1.1.3
  [7a12625a] LinearMaps v2.7.0
  [bdcacae8] LoopVectorization v0.8.26
  [5ced341a] Lz4_jll v1.9.2+2
  [77ba4419] NaNMath v0.3.4
  [6fe1bfb0] OffsetArrays v1.3.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+4
  [ae029012] Requires v1.1.0
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [a759f4b9] TimerOutputs v0.5.6
  [a7f1ee26] Trixi v0.2.6
  [bc48ee85] Tullio v0.2.8
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.33
  [83775a58] Zlib_jll v1.2.11+18
  [3161d3a3] Zstd_jll v1.4.5+2
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [9abbd945] Profile
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters.toml
| equations:          LinearScalarAdvectionEquation1D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.2
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        16
| | #interfaces:      16
| | #boundaries:      0
| | #l2mortars:       -1
| | #DOFs:            64
|
| Mesh
| | #cells:           31
| | #leaf cells:      16
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation1D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
parameters.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:603
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:708
   [12] analyze_solution(dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:656
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:18
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:18
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters_amr.toml
| equations:          LinearScalarAdvectionEquation1D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_gauss
| t_start:            0.0
| t_end:              10.0
| AMR:                yes
| | AMR interval:     5
| | adapt ICs:        yes
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        28
| | #interfaces:      28
| | #boundaries:      0
| | #l2mortars:       -1
| | #DOFs:            112
|
| Mesh
| | #cells:           55
| | #leaf cells:      28
| | minimum level:    4
| | maximum level:    6
| | domain center:    0.0
| | domain length:    10.0
| | minimum dx:       0.15625
| | maximum dx:       0.625


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation1D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #elements:                  28
 ├── level 6:                12
 ├── level 5:                 6
 └── level 4:                10

 Variable:       scalar        
parameters_amr.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:22
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_gauss), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:603
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_gauss), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:708
   [12] analyze_solution(dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_gauss), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:656
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:23
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:23
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters_amr_nonperiodic.toml
| equations:          LinearScalarAdvectionEquation1D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_gauss
| t_start:            0.0
| t_end:              5.0
| AMR:                yes
| | AMR interval:     5
| | adapt ICs:        yes
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        26
| | #interfaces:      25
| | #boundaries:      2
| | #l2mortars:       -1
| | #DOFs:            104
|
| Mesh
| | #cells:           51
| | #leaf cells:      26
| | minimum level:    4
| | maximum level:    6
| | domain center:    2.5
| | domain length:    5.0
| | minimum dx:       0.078125
| | maximum dx:       0.3125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation1D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #elements:                  26
 ├── level 6:                10
 ├── level 5:                 5
 └── level 4:                11

 Variable:       scalar        
parameters_amr_nonperiodic.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:27
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_gauss), Nothing, Tuple{typeof(Trixi.boundary_conditions_gauss), typeof(Trixi.boundary_conditions_gauss)}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:603
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_gauss), Nothing, Tuple{typeof(Trixi.boundary_conditions_gauss), typeof(Trixi.boundary_conditions_gauss)}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:708
   [12] analyze_solution(dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_gauss), Nothing, Tuple{typeof(Trixi.boundary_conditions_gauss), typeof(Trixi.boundary_conditions_gauss)}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:656
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:28
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:28
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters_nonperiodic.toml
| equations:          CompressibleEulerEquations1D
| | #variables:       3
| | variable names:   rho, rho_v1, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              2.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.2
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        16
| | #interfaces:      15
| | #boundaries:      2
| | #l2mortars:       -1
| | #DOFs:            64
|
| Mesh
| | #cells:           31
| | #leaf cells:      16
| | minimum level:    4
| | maximum level:    4
| | domain center:    1.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations1D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_e         
parameters_nonperiodic.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:32
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), Tuple{typeof(Trixi.boundary_conditions_convergence_test), typeof(Trixi.boundary_conditions_convergence_test)}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:603
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), Tuple{typeof(Trixi.boundary_conditions_convergence_test), typeof(Trixi.boundary_conditions_convergence_test)}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:708
   [12] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), Tuple{typeof(Trixi.boundary_conditions_convergence_test), typeof(Trixi.boundary_conditions_convergence_test)}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:656
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:33
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:33
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters_blast_wave_shockcapturing.toml
| equations:          CompressibleEulerEquations1D
| | #variables:       3
| | variable names:   rho, rho_v1, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_blast_wave
| t_start:            0.0
| t_end:              12.5
| AMR:                no
| n_steps_max:        30
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   0
| solution interval:  10
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  shock_capturing
| | volume flux:      flux_chandrashekar
| | surface flux:     flux_lax_friedrichs
| | #elements:        64
| | #interfaces:      64
| | #boundaries:      0
| | #l2mortars:       -1
| | #DOFs:            256
|
| Mesh
| | #cells:           127
| | #leaf cells:      64
| | minimum level:    6
| | maximum level:    6
| | domain center:    0.0
| | domain length:    4.0
| | minimum dx:       0.0625
| | maximum dx:       0.0625

parameters_blast_wave_shockcapturing.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:37
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] threading_run(func::Function)
      @ Base.Threads ./threadingconstructs.jl:34
    [3] macro expansion
      @ ./threadingconstructs.jl:93 [inlined]
    [4] calc_blending_factors!(alpha::Vector{Float64}, alpha_pre_smooth::Vector{Float64}, u::Array{Float64, 3}, alpha_max::Float64, alpha_min::Float64, do_smoothing::Bool, indicator_variable::Function, thread_cache::NamedTuple{(:f1_threaded, :fstar1_threaded, :indicator_threaded, :modal_threaded), Tuple{Vector{Array{Float64, 3}}, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}}}, dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:1315
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [6] calc_volume_integral!(u_t::Array{Float64, 3}, #unused#::Val{:shock_capturing}, alpha::Vector{Float64}, alpha_tmp::Vector{Float64}, element_ids_dg::Vector{Int64}, element_ids_dgfv::Vector{Int64}, thread_cache::NamedTuple{(:f1_threaded, :fstar1_threaded, :indicator_threaded, :modal_threaded), Tuple{Vector{Array{Float64, 3}}, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}}}, dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:1077
    [7] calc_volume_integral!(u_t::Array{Float64, 3}, #unused#::Val{:shock_capturing}, dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:1064
    [8] calc_volume_integral!
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:980 [inlined]
    [9] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
   [10] rhs!(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t_stage::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:950
   [11] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:347 [inlined]
   [12] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:244
   [13] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:n_steps_max,), Tuple{Int64}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [14] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [15] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:n_steps_max,), Tuple{Int64}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [16] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [17] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:n_steps_max,), Tuple{Int64}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [18] open
      @ ./io.jl:328 [inlined]
   [19] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [20] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:n_steps_max,), Tuple{Int64}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [21] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:38
   [22] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:38
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [26] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [27] macro expansion
      @ ./timing.jl:192 [inlined]
   [28] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [29] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [31] top-level scope
      @ ./timing.jl:192
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] top-level scope
      @ none:6
   [34] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [35] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [36] _start()
      @ Base ./client.jl:485
  
      nested task error: Module IR does not contain specified entry function
      Stacktrace:
        [1] assume
          @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
        [2] macro expansion
          @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
        [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
          @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
        [4] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
        [5] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
        [6] threader
          @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
        [7] macro expansion
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
        [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::Matrix{Float64})
          @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
        [9] macro expansion
          @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:1323 [inlined]
       [10] (::Trixi.var"#504#threadsfor_fun#90"{Vector{Float64}, Array{Float64, 3}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}, UnitRange{Int64}})(onethread::Bool)
          @ Trixi ./threadingconstructs.jl:81
       [11] (::Trixi.var"#504#threadsfor_fun#90"{Vector{Float64}, Array{Float64, 3}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}, UnitRange{Int64}})()
          @ Trixi ./threadingconstructs.jl:48

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters_ec.toml
| equations:          CompressibleEulerEquations1D
| | #variables:       3
| | variable names:   rho, rho_v1, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_weak_blast_wave
| t_start:            0.0
| t_end:              0.4
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  split_form
| | volume flux:      flux_chandrashekar
| | surface flux:     flux_chandrashekar
| | #elements:        32
| | #interfaces:      32
| | #boundaries:      0
| | #l2mortars:       -1
| | #DOFs:            128
|
| Mesh
| | #cells:           63
| | #leaf cells:      32
| | minimum level:    5
| | maximum level:    5
| | domain center:    0.0
| | domain length:    4.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations1D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_e         
parameters_ec.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:43
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_chandrashekar), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:603
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_chandrashekar), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:708
   [12] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_chandrashekar), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:656
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:44
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:44
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters_ec.toml
| equations:          CompressibleEulerEquations1D
| | #variables:       3
| | variable names:   rho, rho_v1, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_weak_blast_wave
| t_start:            0.0
| t_end:              0.4
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  split_form
| | volume flux:      flux_chandrashekar
| | surface flux:     flux_chandrashekar
| | #elements:        32
| | #interfaces:      32
| | #boundaries:      0
| | #l2mortars:       -1
| | #DOFs:            128
|
| Mesh
| | #cells:           63
| | #leaf cells:      32
| | minimum level:    5
| | maximum level:    5
| | domain center:    0.0
| | domain length:    4.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations1D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_e         
parameters_ec.toml with extra_analysis_quantities: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:48
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_chandrashekar), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:603
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_chandrashekar), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:708
   [12] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_chandrashekar), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:656
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:extra_analysis_quantities, :save_analysis), Tuple{Vector{String}, Bool}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:extra_analysis_quantities, :save_analysis), Tuple{Vector{String}, Bool}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:extra_analysis_quantities, :save_analysis), Tuple{Vector{String}, Bool}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:extra_analysis_quantities, :save_analysis), Tuple{Vector{String}, Bool}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:49
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:49
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters_ec.toml
| equations:          CompressibleEulerEquations1D
| | #variables:       3
| | variable names:   rho, rho_v1, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_weak_blast_wave
| t_start:            0.0
| t_end:              0.4
| AMR:                no
| n_steps_max:        10
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  split_form
| | volume flux:      flux_shima_etal
| | surface flux:     flux_shima_etal
| | #elements:        32
| | #interfaces:      32
| | #boundaries:      0
| | #l2mortars:       -1
| | #DOFs:            128
|
| Mesh
| | #cells:           63
| | #leaf cells:      32
| | minimum level:    5
| | maximum level:    5
| | domain center:    0.0
| | domain length:    4.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations1D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_e         
parameters_ec.toml with flux_shima_etal: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:56
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_shima_etal), typeof(Trixi.flux_shima_etal), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:603
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_shima_etal), typeof(Trixi.flux_shima_etal), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:708
   [12] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_shima_etal), typeof(Trixi.flux_shima_etal), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:656
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:n_steps_max, :surface_flux, :volume_flux), Tuple{Int64, String, String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:n_steps_max, :surface_flux, :volume_flux), Tuple{Int64, String, String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:n_steps_max, :surface_flux, :volume_flux), Tuple{Int64, String, String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:n_steps_max, :surface_flux, :volume_flux), Tuple{Int64, String, String}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:57
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:57
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters_ec.toml
| equations:          CompressibleEulerEquations1D
| | #variables:       3
| | variable names:   rho, rho_v1, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_weak_blast_wave
| t_start:            0.0
| t_end:              0.4
| AMR:                no
| n_steps_max:        10
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  split_form
| | volume flux:      flux_ranocha
| | surface flux:     flux_ranocha
| | #elements:        32
| | #interfaces:      32
| | #boundaries:      0
| | #l2mortars:       -1
| | #DOFs:            128
|
| Mesh
| | #cells:           63
| | #leaf cells:      32
| | minimum level:    5
| | maximum level:    5
| | domain center:    0.0
| | domain length:    4.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations1D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_e         
parameters_ec.toml with flux_ranocha: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:64
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_ranocha), typeof(Trixi.flux_ranocha), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:603
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_ranocha), typeof(Trixi.flux_ranocha), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:708
   [12] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_ranocha), typeof(Trixi.flux_ranocha), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:656
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:n_steps_max, :surface_flux, :volume_flux), Tuple{Int64, String, String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:n_steps_max, :surface_flux, :volume_flux), Tuple{Int64, String, String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:n_steps_max, :surface_flux, :volume_flux), Tuple{Int64, String, String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:n_steps_max, :surface_flux, :volume_flux), Tuple{Int64, String, String}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:65
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:65
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters_ec.toml
| equations:          CompressibleEulerEquations1D
| | #variables:       3
| | variable names:   rho, rho_v1, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_weak_blast_wave
| t_start:            0.0
| t_end:              0.4
| AMR:                no
| n_steps_max:        10
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  split_form
| | volume flux:      flux_hll
| | surface flux:     flux_hll
| | #elements:        32
| | #interfaces:      32
| | #boundaries:      0
| | #l2mortars:       -1
| | #DOFs:            128
|
| Mesh
| | #cells:           63
| | #leaf cells:      32
| | minimum level:    5
| | maximum level:    5
| | domain center:    0.0
| | domain length:    4.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations1D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_e         
parameters_ec.toml with flux_hll: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:72
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_hll), typeof(Trixi.flux_hll), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:603
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_hll), typeof(Trixi.flux_hll), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:708
   [12] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_hll), typeof(Trixi.flux_hll), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:656
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:n_steps_max, :surface_flux, :volume_flux), Tuple{Int64, String, String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:n_steps_max, :surface_flux, :volume_flux), Tuple{Int64, String, String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:n_steps_max, :surface_flux, :volume_flux), Tuple{Int64, String, String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:n_steps_max, :surface_flux, :volume_flux), Tuple{Int64, String, String}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:73
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:73
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done
parameters_sedov_blast_wave_shockcapturing.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:80
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] threading_run(func::Function)
      @ Base.Threads ./threadingconstructs.jl:34
    [3] macro expansion
      @ ./threadingconstructs.jl:93 [inlined]
    [4] calc_blending_factors!(alpha::Vector{Float64}, alpha_pre_smooth::Vector{Float64}, u::Array{Float64, 3}, alpha_max::Float64, alpha_min::Float64, do_smoothing::Bool, indicator_variable::Function, thread_cache::NamedTuple{(:f1_threaded, :fstar1_threaded, :indicator_threaded, :modal_threaded), Tuple{Vector{Array{Float64, 3}}, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}}}, dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:1315
    [5] calc_amr_indicator(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/amr.jl:263
    [6] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [7] adapt!(mesh::Trixi.TreeMesh{1}, solver::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, time::Float64; only_refine::Bool, only_coarsen::Bool, passive_solvers::Vector{Any})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/amr/amr.jl:18
    [8] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [9] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:138
   [10] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [11] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [12] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [13] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [14] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [15] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [16] open
      @ ./io.jl:328 [inlined]
   [17] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [18] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [19] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:81
   [20] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [21] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:81
   [22] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [24] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [25] macro expansion
      @ ./timing.jl:192 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [27] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [29] top-level scope
      @ ./timing.jl:192
   [30] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [31] top-level scope
      @ none:6
   [32] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [33] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [34] _start()
      @ Base ./client.jl:485
  
      nested task error: Module IR does not contain specified entry function
      Stacktrace:
        [1] assume
          @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
        [2] macro expansion
          @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
        [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
          @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
        [4] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
        [5] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
        [6] threader
          @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
        [7] macro expansion
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
        [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::Matrix{Float64})
          @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
        [9] macro expansion
          @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:1323 [inlined]
       [10] (::Trixi.var"#504#threadsfor_fun#90"{Vector{Float64}, Array{Float64, 3}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}, UnitRange{Int64}})(onethread::Bool)
          @ Trixi ./threadingconstructs.jl:81
       [11] (::Trixi.var"#504#threadsfor_fun#90"{Vector{Float64}, Array{Float64, 3}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}, UnitRange{Int64}})()
          @ Trixi ./threadingconstructs.jl:48

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done
parameters_sedov_blast_wave_shockcapturing.toml with pressure: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:85
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] threading_run(func::Function)
      @ Base.Threads ./threadingconstructs.jl:34
    [3] macro expansion
      @ ./threadingconstructs.jl:93 [inlined]
    [4] calc_blending_factors!(alpha::Vector{Float64}, alpha_pre_smooth::Vector{Float64}, u::Array{Float64, 3}, alpha_max::Float64, alpha_min::Float64, do_smoothing::Bool, indicator_variable::Function, thread_cache::NamedTuple{(:f1_threaded, :fstar1_threaded, :indicator_threaded, :modal_threaded), Tuple{Vector{Array{Float64, 3}}, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}}}, dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:1315
    [5] calc_amr_indicator(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/amr.jl:263
    [6] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [7] adapt!(mesh::Trixi.TreeMesh{1}, solver::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, time::Float64; only_refine::Bool, only_coarsen::Bool, passive_solvers::Vector{Any})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/amr/amr.jl:18
    [8] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [9] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:138
   [10] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:shock_indicator_variable,), Tuple{String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [11] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [12] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:shock_indicator_variable,), Tuple{String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [13] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [14] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:shock_indicator_variable,), Tuple{String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [15] open
      @ ./io.jl:328 [inlined]
   [16] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [17] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:shock_indicator_variable,), Tuple{String}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [18] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:86
   [19] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [20] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:86
   [21] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [23] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [24] macro expansion
      @ ./timing.jl:192 [inlined]
   [25] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [26] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [27] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [28] top-level scope
      @ ./timing.jl:192
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] top-level scope
      @ none:6
   [31] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [32] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [33] _start()
      @ Base ./client.jl:485
  
      nested task error: Module IR does not contain specified entry function
      Stacktrace:
        [1] assume
          @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
        [2] macro expansion
          @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
        [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
          @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
        [4] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
        [5] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
        [6] threader
          @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
        [7] macro expansion
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
        [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::Matrix{Float64})
          @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
        [9] macro expansion
          @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:1323 [inlined]
       [10] (::Trixi.var"#504#threadsfor_fun#90"{Vector{Float64}, Array{Float64, 3}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}, UnitRange{Int64}})(onethread::Bool)
          @ Trixi ./threadingconstructs.jl:81
       [11] (::Trixi.var"#504#threadsfor_fun#90"{Vector{Float64}, Array{Float64, 3}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}, UnitRange{Int64}})()
          @ Trixi ./threadingconstructs.jl:48

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done
parameters_sedov_blast_wave_shockcapturing.toml with density: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:91
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] threading_run(func::Function)
      @ Base.Threads ./threadingconstructs.jl:34
    [3] macro expansion
      @ ./threadingconstructs.jl:93 [inlined]
    [4] calc_blending_factors!(alpha::Vector{Float64}, alpha_pre_smooth::Vector{Float64}, u::Array{Float64, 3}, alpha_max::Float64, alpha_min::Float64, do_smoothing::Bool, indicator_variable::Function, thread_cache::NamedTuple{(:f1_threaded, :fstar1_threaded, :indicator_threaded, :modal_threaded), Tuple{Vector{Array{Float64, 3}}, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}}}, dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:1315
    [5] calc_amr_indicator(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/amr.jl:263
    [6] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [7] adapt!(mesh::Trixi.TreeMesh{1}, solver::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, time::Float64; only_refine::Bool, only_coarsen::Bool, passive_solvers::Vector{Any})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/amr/amr.jl:18
    [8] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [9] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:138
   [10] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:shock_indicator_variable,), Tuple{String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [11] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [12] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:shock_indicator_variable,), Tuple{String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [13] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [14] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:shock_indicator_variable,), Tuple{String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [15] open
      @ ./io.jl:328 [inlined]
   [16] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [17] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:shock_indicator_variable,), Tuple{String}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [18] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:92
   [19] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [20] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:92
   [21] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [23] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [24] macro expansion
      @ ./timing.jl:192 [inlined]
   [25] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [26] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [27] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [28] top-level scope
      @ ./timing.jl:192
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] top-level scope
      @ none:6
   [31] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [32] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [33] _start()
      @ Base ./client.jl:485
  
      nested task error: Module IR does not contain specified entry function
      Stacktrace:
        [1] assume
          @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
        [2] macro expansion
          @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
        [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
          @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
        [4] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
        [5] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
        [6] threader
          @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
        [7] macro expansion
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
        [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::Matrix{Float64})
          @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
        [9] macro expansion
          @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:1323 [inlined]
       [10] (::Trixi.var"#504#threadsfor_fun#90"{Vector{Float64}, Array{Float64, 3}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}, UnitRange{Int64}})(onethread::Bool)
          @ Trixi ./threadingconstructs.jl:81
       [11] (::Trixi.var"#504#threadsfor_fun#90"{Vector{Float64}, Array{Float64, 3}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}, UnitRange{Int64}})()
          @ Trixi ./threadingconstructs.jl:48

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters_weak_blast_wave_shockcapturing.toml
| equations:          CompressibleEulerEquations1D
| | #variables:       3
| | variable names:   rho, rho_v1, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_weak_blast_wave
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   0
| solution interval:  10
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  shock_capturing
| | volume flux:      flux_kennedy_gruber
| | surface flux:     flux_lax_friedrichs
| | #elements:        32
| | #interfaces:      32
| | #boundaries:      0
| | #l2mortars:       -1
| | #DOFs:            128
|
| Mesh
| | #cells:           63
| | #leaf cells:      32
| | minimum level:    5
| | maximum level:    5
| | domain center:    0.0
| | domain length:    4.0
| | minimum dx:       0.125
| | maximum dx:       0.125

parameters_weak_blast_wave_shockcapturing.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:97
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] threading_run(func::Function)
      @ Base.Threads ./threadingconstructs.jl:34
    [3] macro expansion
      @ ./threadingconstructs.jl:93 [inlined]
    [4] calc_blending_factors!(alpha::Vector{Float64}, alpha_pre_smooth::Vector{Float64}, u::Array{Float64, 3}, alpha_max::Float64, alpha_min::Float64, do_smoothing::Bool, indicator_variable::Function, thread_cache::NamedTuple{(:f1_threaded, :fstar1_threaded, :indicator_threaded, :modal_threaded), Tuple{Vector{Array{Float64, 3}}, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}}}, dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:1315
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [6] calc_volume_integral!(u_t::Array{Float64, 3}, #unused#::Val{:shock_capturing}, alpha::Vector{Float64}, alpha_tmp::Vector{Float64}, element_ids_dg::Vector{Int64}, element_ids_dgfv::Vector{Int64}, thread_cache::NamedTuple{(:f1_threaded, :fstar1_threaded, :indicator_threaded, :modal_threaded), Tuple{Vector{Array{Float64, 3}}, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}}}, dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:1077
    [7] calc_volume_integral!(u_t::Array{Float64, 3}, #unused#::Val{:shock_capturing}, dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:1064
    [8] calc_volume_integral!
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:980 [inlined]
    [9] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
   [10] rhs!(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t_stage::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:950
   [11] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:347 [inlined]
   [12] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:244
   [13] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [14] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:98
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:98
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485
  
      nested task error: Module IR does not contain specified entry function
      Stacktrace:
        [1] assume
          @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
        [2] macro expansion
          @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
        [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
          @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
        [4] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
        [5] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
        [6] threader
          @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
        [7] macro expansion
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
        [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::Matrix{Float64})
          @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
        [9] macro expansion
          @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:1323 [inlined]
       [10] (::Trixi.var"#504#threadsfor_fun#90"{Vector{Float64}, Array{Float64, 3}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}, UnitRange{Int64}})(onethread::Bool)
          @ Trixi ./threadingconstructs.jl:81
       [11] (::Trixi.var"#504#threadsfor_fun#90"{Vector{Float64}, Array{Float64, 3}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, Tuple{Nothing, Nothing}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Matrix{Float64}}, Vector{Matrix{Float64}}, UnitRange{Int64}})()
          @ Trixi ./threadingconstructs.jl:48

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters_source_terms.toml
| equations:          CompressibleEulerEquations1D
| | #variables:       3
| | variable names:   rho, rho_v1, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              2.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          4
| | CFL:              0.6
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        16
| | #interfaces:      16
| | #boundaries:      0
| | #l2mortars:       -1
| | #DOFs:            80
|
| Mesh
| | #cells:           31
| | #leaf cells:      16
| | minimum level:    4
| | maximum level:    4
| | domain center:    1.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations1D' with POLYDEG = 4
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_e         
parameters_source_terms.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:102
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 4, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:603
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 4, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:708
   [12] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 4, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:656
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:103
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:103
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters_density_wave.toml
| equations:          CompressibleEulerEquations1D
| | #variables:       3
| | variable names:   rho, rho_v1, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_density_wave
| t_start:            0.0
| t_end:              2.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          5
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_central
| | #elements:        4
| | #interfaces:      4
| | #boundaries:      0
| | #l2mortars:       -1
| | #DOFs:            24
|
| Mesh
| | #cells:           7
| | #leaf cells:      4
| | minimum level:    2
| | maximum level:    2
| | domain center:    0.0
| | domain length:    2.0
| | minimum dx:       0.5
| | maximum dx:       0.5


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations1D' with POLYDEG = 5
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_e         
parameters_density_wave.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:107
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 5, typeof(Trixi.flux_central), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_wave), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{6, Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SMatrix{6, 2, Float64, 12}, Matrix{Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SVector{12, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:603
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 5, typeof(Trixi.flux_central), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_wave), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{6, Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SMatrix{6, 2, Float64, 12}, Matrix{Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SVector{12, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:708
   [12] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 5, typeof(Trixi.flux_central), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_wave), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{6, Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SMatrix{6, 2, Float64, 12}, Matrix{Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SVector{12, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:656
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:108
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:108
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters_density_wave.toml
| equations:          CompressibleEulerEquations1D
| | #variables:       3
| | variable names:   rho, rho_v1, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_density_pulse
| t_start:            0.0
| t_end:              2.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          5
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_central
| | #elements:        4
| | #interfaces:      4
| | #boundaries:      0
| | #l2mortars:       -1
| | #DOFs:            24
|
| Mesh
| | #cells:           7
| | #leaf cells:      4
| | minimum level:    2
| | maximum level:    2
| | domain center:    0.0
| | domain length:    2.0
| | minimum dx:       0.5
| | maximum dx:       0.5


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations1D' with POLYDEG = 5
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_e         
parameters_density_wave.toml with initial_conditions_density_pulse: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:112
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 5, typeof(Trixi.flux_central), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_pulse), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{6, Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SMatrix{6, 2, Float64, 12}, Matrix{Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SVector{12, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:603
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 5, typeof(Trixi.flux_central), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_pulse), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{6, Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SMatrix{6, 2, Float64, 12}, Matrix{Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SVector{12, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:708
   [12] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 5, typeof(Trixi.flux_central), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_pulse), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{6, Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SMatrix{6, 2, Float64, 12}, Matrix{Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SVector{12, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:656
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:initial_conditions,), Tuple{String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:initial_conditions,), Tuple{String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:initial_conditions,), Tuple{String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:initial_conditions,), Tuple{String}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:113
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:113
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters_density_wave.toml
| equations:          CompressibleEulerEquations1D
| | #variables:       3
| | variable names:   rho, rho_v1, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_constant
| t_start:            0.0
| t_end:              2.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          5
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_central
| | #elements:        4
| | #interfaces:      4
| | #boundaries:      0
| | #l2mortars:       -1
| | #DOFs:            24
|
| Mesh
| | #cells:           7
| | #leaf cells:      4
| | minimum level:    2
| | maximum level:    2
| | domain center:    0.0
| | domain length:    2.0
| | minimum dx:       0.5
| | maximum dx:       0.5


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations1D' with POLYDEG = 5
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_e         
parameters_density_wave.toml with initial_conditions_constant: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:118
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 5, typeof(Trixi.flux_central), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{6, Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SMatrix{6, 2, Float64, 12}, Matrix{Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SVector{12, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:603
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 5, typeof(Trixi.flux_central), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{6, Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SMatrix{6, 2, Float64, 12}, Matrix{Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SVector{12, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:708
   [12] analyze_solution(dg::Trixi.Dg1D{Trixi.CompressibleEulerEquations1D, 3, 5, typeof(Trixi.flux_central), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{6, Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SMatrix{6, 2, Float64, 12}, Matrix{Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SVector{12, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:656
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:initial_conditions,), Tuple{String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:initial_conditions,), Tuple{String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:initial_conditions,), Tuple{String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:initial_conditions,), Tuple{String}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:119
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:119
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters.toml
| equations:          LinearScalarAdvectionEquation1D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_sin
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        1
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.2
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        16
| | #interfaces:      16
| | #boundaries:      0
| | #l2mortars:       -1
| | #DOFs:            64
|
| Mesh
| | #cells:           31
| | #leaf cells:      16
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation1D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
parameters.toml with initial_conditions_sin: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:129
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_sin), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:603
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_sin), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:708
   [12] analyze_solution(dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_sin), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:656
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:130
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:130
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:129
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters.toml
| equations:          LinearScalarAdvectionEquation1D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_constant
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        1
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.2
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        16
| | #interfaces:      16
| | #boundaries:      0
| | #l2mortars:       -1
| | #DOFs:            64
|
| Mesh
| | #cells:           31
| | #leaf cells:      16
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation1D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
parameters.toml with initial_conditions_constant: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:136
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:603
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:708
   [12] analyze_solution(dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, Tuple{Nothing, Nothing}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:656
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:137
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:137
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:129
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters.toml
| equations:          LinearScalarAdvectionEquation1D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_linear_x
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        1
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.2
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        16
| | #interfaces:      15
| | #boundaries:      2
| | #l2mortars:       -1
| | #DOFs:            64
|
| Mesh
| | #cells:           31
| | #leaf cells:      16
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation1D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
parameters.toml with initial_conditions_linear_x: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:143
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_linear_x), Nothing, Tuple{typeof(Trixi.boundary_conditions_linear_x), typeof(Trixi.boundary_conditions_linear_x)}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:603
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_linear_x), Nothing, Tuple{typeof(Trixi.boundary_conditions_linear_x), typeof(Trixi.boundary_conditions_linear_x)}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:708
   [12] analyze_solution(dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_linear_x), Nothing, Tuple{typeof(Trixi.boundary_conditions_linear_x), typeof(Trixi.boundary_conditions_linear_x)}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:656
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:144
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:144
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:129
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/1d/parameters.toml
| equations:          LinearScalarAdvectionEquation1D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        1
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.2
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        16
| | #interfaces:      15
| | #boundaries:      2
| | #l2mortars:       -1
| | #DOFs:            64
|
| Mesh
| | #cells:           31
| | #leaf cells:      16
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation1D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
parameters.toml with initial_conditions_convergence_test: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:152
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#264"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000023, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#273"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000000101, 0x0000000000000203, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :v, :ii}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Matrix{Float64}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:107
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, Tuple{typeof(Trixi.boundary_conditions_convergence_test), typeof(Trixi.boundary_conditions_convergence_test)}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:603
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, Tuple{typeof(Trixi.boundary_conditions_convergence_test), typeof(Trixi.boundary_conditions_convergence_test)}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:708
   [12] analyze_solution(dg::Trixi.Dg1D{Trixi.LinearScalarAdvectionEquation1D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, Tuple{typeof(Trixi.boundary_conditions_convergence_test), typeof(Trixi.boundary_conditions_convergence_test)}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{1}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/1d/dg.jl:656
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples1D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples1D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}})
      @ Main.TestExamples1D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:153
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:153
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_1d.jl:129
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485
275.804223 seconds (189.94 M allocations: 27.488 GiB, 9.12% gc time, 96.85% compilation time)

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters.toml
| equations:          LinearScalarAdvectionEquation2D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
parameters.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:18
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:18
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters.toml
| equations:          LinearScalarAdvectionEquation2D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          1
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            1024
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation2D' with POLYDEG = 1
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
parameters.toml with polydeg=1: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:22
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 1, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{2, Float64}, StaticArrays.SMatrix{2, 2, Float64, 4}, StaticArrays.SMatrix{2, 2, Float64, 4}, Matrix{Float64}, StaticArrays.SMatrix{2, 2, Float64, 4}, StaticArrays.SVector{4, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 1, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{2, Float64}, StaticArrays.SMatrix{2, 2, Float64, 4}, StaticArrays.SMatrix{2, 2, Float64, 4}, Matrix{Float64}, StaticArrays.SMatrix{2, 2, Float64, 4}, StaticArrays.SVector{4, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 1, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{2, Float64}, StaticArrays.SMatrix{2, 2, Float64, 4}, StaticArrays.SMatrix{2, 2, Float64, 4}, Matrix{Float64}, StaticArrays.SMatrix{2, 2, Float64, 4}, StaticArrays.SVector{4, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:polydeg,), Tuple{Int64}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:polydeg,), Tuple{Int64}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:polydeg,), Tuple{Int64}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:polydeg,), Tuple{Int64}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:23
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:23
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters.toml
| equations:          LinearScalarAdvectionEquation2D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk43_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
parameters.toml with carpenter_kennedy_erk43: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:28
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:time_integration_scheme, :cfl), Tuple{String, Float64}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:time_integration_scheme, :cfl), Tuple{String, Float64}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:time_integration_scheme, :cfl), Tuple{String, Float64}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:time_integration_scheme, :cfl), Tuple{String, Float64}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:29
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:29
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters.toml
| equations:          LinearScalarAdvectionEquation2D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_parsani_ketcheson_deconinck_erk94_3Sstar!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
parameters.toml with parsani_ketcheson_deconinck_erk94: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:35
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:time_integration_scheme,), Tuple{String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:time_integration_scheme,), Tuple{String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:time_integration_scheme,), Tuple{String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:time_integration_scheme,), Tuple{String}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:36
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:36
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters.toml
| equations:          LinearScalarAdvectionEquation2D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_parsani_ketcheson_deconinck_erk32_3Sstar!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
parameters.toml with parsani_ketcheson_deconinck_erk32: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:41
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:time_integration_scheme,), Tuple{String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:time_integration_scheme,), Tuple{String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:time_integration_scheme,), Tuple{String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:time_integration_scheme,), Tuple{String}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:42
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:42
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_alfven_wave.toml
| equations:          IdealGlmMhdEquations2D
| | #variables:       9
| | variable names:   rho, rho_v1, rho_v2, rho_v3, rho_e, B1, B2, B3, psi
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              2.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   0
| solution interval:  10
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  split_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.7071067811865476, 0.7071067811865476
| | domain length:    1.4142135623730951
| | minimum dx:       0.08838834764831845
| | maximum dx:       0.08838834764831845


--------------------------------------------------------------------------------
 Simulation running 'IdealGlmMhdEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_v3           rho_e            B1               B2               B3               psi           
parameters_alfven_wave.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:47
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:48
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:48
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_amr.toml
| equations:          LinearScalarAdvectionEquation2D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_gauss
| t_start:            0.0
| t_end:              10.0
| AMR:                yes
| | AMR interval:     5
| | adapt ICs:        yes
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        448
| | #interfaces:      824
| | #boundaries:      0
| | #l2mortars:       48
| | #DOFs:            7168
|
| Mesh
| | #cells:           597
| | #leaf cells:      448
| | minimum level:    4
| | maximum level:    6
| | domain center:    0.0, 0.0
| | domain length:    10.0
| | minimum dx:       0.15625
| | maximum dx:       0.625


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #elements:                 448
 ├── level 6:               128
 ├── level 5:                96
 └── level 4:               224

 Variable:       scalar        
parameters_amr.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:52
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_gauss), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_gauss), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_gauss), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:53
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:53
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_amr_nonperiodic.toml
| equations:          LinearScalarAdvectionEquation2D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_gauss
| t_start:            0.0
| t_end:              5.0
| AMR:                yes
| | AMR interval:     5
| | adapt ICs:        yes
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        448
| | #interfaces:      792
| | #boundaries:      64
| | #l2mortars:       48
| | #DOFs:            7168
|
| Mesh
| | #cells:           597
| | #leaf cells:      448
| | minimum level:    4
| | maximum level:    6
| | domain center:    0.0, 0.0
| | domain length:    10.0
| | minimum dx:       0.15625
| | maximum dx:       0.625


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #elements:                 448
 ├── level 6:               128
 ├── level 5:                96
 └── level 4:               224

 Variable:       scalar        
parameters_amr_nonperiodic.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:57
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_gauss), Nothing, NTuple{4, typeof(Trixi.boundary_conditions_gauss)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_gauss), Nothing, NTuple{4, typeof(Trixi.boundary_conditions_gauss)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_gauss), Nothing, NTuple{4, typeof(Trixi.boundary_conditions_gauss)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:58
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:58
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_amr_vortex.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_isentropic_vortex
| t_start:            0.0
| t_end:              20.0
| AMR:                yes
| | AMR interval:     5
| | adapt ICs:        yes
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   0
| solution interval:  50
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.6
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        136
| | #interfaces:      224
| | #boundaries:      0
| | #l2mortars:       32
| | #DOFs:            2176
|
| Mesh
| | #cells:           181
| | #leaf cells:      136
| | minimum level:    3
| | maximum level:    5
| | domain center:    0.0, 0.0
| | domain length:    20.0
| | minimum dx:       0.625
| | maximum dx:       2.5


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #elements:                 136
 ├── level 5:                48
 ├── level 4:                36
 └── level 3:                52

 Variable:       rho              rho_v1           rho_v2           rho_e         
parameters_amr_vortex.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:62
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:63
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:63
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_blast_wave_shockcapturing.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_blast_wave
| t_start:            0.0
| t_end:              12.5
| AMR:                no
| n_steps_max:        30
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   0
| solution interval:  10
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  shock_capturing
| | volume flux:      flux_chandrashekar
| | surface flux:     flux_lax_friedrichs
| | #elements:        4096
| | #interfaces:      8192
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            65536
|
| Mesh
| | #cells:           5461
| | #leaf cells:      4096
| | minimum level:    6
| | maximum level:    6
| | domain center:    0.0, 0.0
| | domain length:    4.0
| | minimum dx:       0.0625
| | maximum dx:       0.0625

parameters_blast_wave_shockcapturing.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:67
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] threading_run(func::Function)
      @ Base.Threads ./threadingconstructs.jl:34
    [3] macro expansion
      @ ./threadingconstructs.jl:93 [inlined]
    [4] calc_blending_factors!(alpha::Vector{Float64}, alpha_pre_smooth::Vector{Float64}, u::Array{Float64, 4}, alpha_max::Float64, alpha_min::Float64, do_smoothing::Bool, indicator_variable::Function, thread_cache::NamedTuple{(:f1_threaded, :f2_threaded, :fstar1_threaded, :fstar2_threaded, :fstar_upper_threaded, :fstar_lower_threaded, :noncons_diamond_upper_threaded, :noncons_diamond_lower_threaded, :indicator_threaded, :modal_threaded, :modal_tmp1_threaded), Tuple{Vector{Array{Float64, 4}}, Vector{Array{Float64, 4}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}}}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2293
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [6] calc_volume_integral!(u_t::Array{Float64, 4}, #unused#::Val{:shock_capturing}, alpha::Vector{Float64}, alpha_tmp::Vector{Float64}, element_ids_dg::Vector{Int64}, element_ids_dgfv::Vector{Int64}, thread_cache::NamedTuple{(:f1_threaded, :f2_threaded, :fstar1_threaded, :fstar2_threaded, :fstar_upper_threaded, :fstar_lower_threaded, :noncons_diamond_upper_threaded, :noncons_diamond_lower_threaded, :indicator_threaded, :modal_threaded, :modal_tmp1_threaded), Tuple{Vector{Array{Float64, 4}}, Vector{Array{Float64, 4}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}}}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1473
    [7] calc_volume_integral!(u_t::Array{Float64, 4}, #unused#::Val{:shock_capturing}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1460
    [8] calc_volume_integral!
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1281 [inlined]
    [9] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
   [10] rhs!(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t_stage::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1245
   [11] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:347 [inlined]
   [12] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:244
   [13] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:n_steps_max,), Tuple{Int64}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [14] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [15] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:n_steps_max,), Tuple{Int64}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [16] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [17] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:n_steps_max,), Tuple{Int64}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [18] open
      @ ./io.jl:328 [inlined]
   [19] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [20] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:n_steps_max,), Tuple{Int64}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [21] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:68
   [22] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:68
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [26] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [27] macro expansion
      @ ./timing.jl:192 [inlined]
   [28] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [29] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [31] top-level scope
      @ ./timing.jl:192
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] top-level scope
      @ none:6
   [34] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [35] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [36] _start()
      @ Base ./client.jl:485
  
      nested task error: Module IR does not contain specified entry function
      Stacktrace:
        [1] assume
          @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
        [2] macro expansion
          @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
        [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
          @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
        [4] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
        [5] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
        [6] threader
          @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
        [7] macro expansion
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
        [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::Array{Float64, 3}, tmp1::Array{Float64, 3})
          @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
        [9] macro expansion
          @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2302 [inlined]
       [10] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})(onethread::Bool)
          @ Trixi ./threadingconstructs.jl:81
       [11] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})()
          @ Trixi ./threadingconstructs.jl:48

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_ec.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_weak_blast_wave
| t_start:            0.0
| t_end:              0.4
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  split_form
| | volume flux:      flux_chandrashekar
| | surface flux:     flux_chandrashekar
| | #elements:        1024
| | #interfaces:      2048
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            16384
|
| Mesh
| | #cells:           1365
| | #leaf cells:      1024
| | minimum level:    5
| | maximum level:    5
| | domain center:    0.0, 0.0
| | domain length:    4.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_e         
parameters_ec.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:73
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_chandrashekar), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_chandrashekar), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_chandrashekar), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:74
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:74
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_density_wave.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_density_wave
| t_start:            0.0
| t_end:              0.5
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          5
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_central
| | #elements:        16
| | #interfaces:      32
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            576
|
| Mesh
| | #cells:           21
| | #leaf cells:      16
| | minimum level:    2
| | maximum level:    2
| | domain center:    0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.5
| | maximum dx:       0.5


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations2D' with POLYDEG = 5
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_e         
parameters_density_wave.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:78
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 5, typeof(Trixi.flux_central), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{6, Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SMatrix{6, 2, Float64, 12}, Matrix{Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SVector{12, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 5, typeof(Trixi.flux_central), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{6, Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SMatrix{6, 2, Float64, 12}, Matrix{Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SVector{12, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 5, typeof(Trixi.flux_central), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{6, Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SMatrix{6, 2, Float64, 12}, Matrix{Float64}, StaticArrays.SMatrix{6, 6, Float64, 36}, StaticArrays.SVector{12, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:extra_analysis_quantities, :t_end), Tuple{Vector{String}, Float64}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:extra_analysis_quantities, :t_end), Tuple{Vector{String}, Float64}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:extra_analysis_quantities, :t_end), Tuple{Vector{String}, Float64}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:extra_analysis_quantities, :t_end), Tuple{Vector{String}, Float64}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:79
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:79
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_ec_mhd.toml
| equations:          IdealGlmMhdEquations2D
| | #variables:       9
| | variable names:   rho, rho_v1, rho_v2, rho_v3, rho_e, B1, B2, B3, psi
| sources:            none
| restart:            no
| initial conditions: initial_conditions_ec_test
| t_start:            0.0
| t_end:              0.4
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   0
| solution interval:  10
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  split_form
| | volume flux:      flux_derigs_etal
| | surface flux:     flux_derigs_etal
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    4.0
| | minimum dx:       0.25
| | maximum dx:       0.25


--------------------------------------------------------------------------------
 Simulation running 'IdealGlmMhdEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_v3           rho_e            B1               B2               B3               psi           
parameters_ec_mhd.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:84
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_derigs_etal), typeof(Trixi.flux_derigs_etal), typeof(Trixi.initial_conditions_ec_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_derigs_etal), typeof(Trixi.flux_derigs_etal), typeof(Trixi.initial_conditions_ec_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_derigs_etal), typeof(Trixi.flux_derigs_etal), typeof(Trixi.initial_conditions_ec_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:85
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:85
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_hyp_diff_harmonic_nonperiodic.toml
| equations:          HyperbolicDiffusionEquations2D
| | #variables:       3
| | variable names:   phi, q1, q2
| sources:            none
| restart:            no
| initial conditions: initial_conditions_harmonic_nonperiodic
| t_start:            0.0
| t_end:              5.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   0
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          4
| | CFL:              0.5
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_upwind
| | #elements:        64
| | #interfaces:      112
| | #boundaries:      32
| | #l2mortars:       0
| | #DOFs:            1600
|
| Mesh
| | #cells:           85
| | #leaf cells:      64
| | minimum level:    3
| | maximum level:    3
| | domain center:    0.5, 0.5
| | domain length:    1.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'HyperbolicDiffusionEquations2D' with POLYDEG = 4
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       phi              q1               q2            
parameters_hyp_diff_harmonic_nonperiodic.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:89
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.HyperbolicDiffusionEquations2D, 3, 4, typeof(Trixi.flux_upwind), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_harmonic_nonperiodic), typeof(Trixi.source_terms_harmonic), NTuple{4, typeof(Trixi.boundary_conditions_harmonic_nonperiodic)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.HyperbolicDiffusionEquations2D, 3, 4, typeof(Trixi.flux_upwind), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_harmonic_nonperiodic), typeof(Trixi.source_terms_harmonic), NTuple{4, typeof(Trixi.boundary_conditions_harmonic_nonperiodic)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.HyperbolicDiffusionEquations2D, 3, 4, typeof(Trixi.flux_upwind), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_harmonic_nonperiodic), typeof(Trixi.source_terms_harmonic), NTuple{4, typeof(Trixi.boundary_conditions_harmonic_nonperiodic)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:90
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:90
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_hyp_diff_llf.toml
| equations:          HyperbolicDiffusionEquations2D
| | #variables:       3
| | variable names:   phi, q1, q2
| sources:            none
| restart:            no
| initial conditions: initial_conditions_poisson_periodic
| t_start:            0.0
| t_end:              2.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_hyp_diff_N3_erk52_3Sstar!
| restart interval:   0
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              1.2
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        64
| | #interfaces:      128
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            1024
|
| Mesh
| | #cells:           85
| | #leaf cells:      64
| | minimum level:    3
| | maximum level:    3
| | domain center:    0.5, 0.5
| | domain length:    1.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'HyperbolicDiffusionEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       phi              q1               q2            
parameters_hyp_diff_llf.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:94
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.HyperbolicDiffusionEquations2D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_poisson_periodic), typeof(Trixi.source_terms_poisson_periodic), NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.HyperbolicDiffusionEquations2D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_poisson_periodic), typeof(Trixi.source_terms_poisson_periodic), NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.HyperbolicDiffusionEquations2D, 3, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_poisson_periodic), typeof(Trixi.source_terms_poisson_periodic), NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:95
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:95
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_hyp_diff_nonperiodic.toml
| equations:          HyperbolicDiffusionEquations2D
| | #variables:       3
| | variable names:   phi, q1, q2
| sources:            none
| restart:            no
| initial conditions: initial_conditions_poisson_nonperiodic
| t_start:            0.0
| t_end:              5.0
| AMR:                no
| n_steps_max:        20000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   0
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          4
| | CFL:              0.5
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        64
| | #interfaces:      120
| | #boundaries:      16
| | #l2mortars:       0
| | #DOFs:            1600
|
| Mesh
| | #cells:           85
| | #leaf cells:      64
| | minimum level:    3
| | maximum level:    3
| | domain center:    0.5, 0.5
| | domain length:    1.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'HyperbolicDiffusionEquations2D' with POLYDEG = 4
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       phi              q1               q2            
parameters_hyp_diff_nonperiodic.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:99
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.HyperbolicDiffusionEquations2D, 3, 4, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_poisson_nonperiodic), typeof(Trixi.source_terms_poisson_nonperiodic), Tuple{typeof(Trixi.boundary_conditions_poisson_nonperiodic), typeof(Trixi.boundary_conditions_poisson_nonperiodic), Nothing, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.HyperbolicDiffusionEquations2D, 3, 4, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_poisson_nonperiodic), typeof(Trixi.source_terms_poisson_nonperiodic), Tuple{typeof(Trixi.boundary_conditions_poisson_nonperiodic), typeof(Trixi.boundary_conditions_poisson_nonperiodic), Nothing, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.HyperbolicDiffusionEquations2D, 3, 4, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_poisson_nonperiodic), typeof(Trixi.source_terms_poisson_nonperiodic), Tuple{typeof(Trixi.boundary_conditions_poisson_nonperiodic), typeof(Trixi.boundary_conditions_poisson_nonperiodic), Nothing, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:100
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:100
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_hyp_diff_upwind.toml
| equations:          HyperbolicDiffusionEquations2D
| | #variables:       3
| | variable names:   phi, q1, q2
| sources:            none
| restart:            no
| initial conditions: initial_conditions_poisson_periodic
| t_start:            0.0
| t_end:              2.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   0
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          4
| | CFL:              0.5
| | volume integral:  split_form
| | volume flux:      flux_central
| | surface flux:     flux_upwind
| | #elements:        64
| | #interfaces:      128
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            1600
|
| Mesh
| | #cells:           85
| | #leaf cells:      64
| | minimum level:    3
| | maximum level:    3
| | domain center:    0.5, 0.5
| | domain length:    1.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'HyperbolicDiffusionEquations2D' with POLYDEG = 4
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       phi              q1               q2            
parameters_hyp_diff_upwind.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:104
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.HyperbolicDiffusionEquations2D, 3, 4, typeof(Trixi.flux_upwind), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_poisson_periodic), typeof(Trixi.source_terms_poisson_periodic), NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.HyperbolicDiffusionEquations2D, 3, 4, typeof(Trixi.flux_upwind), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_poisson_periodic), typeof(Trixi.source_terms_poisson_periodic), NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.HyperbolicDiffusionEquations2D, 3, 4, typeof(Trixi.flux_upwind), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_poisson_periodic), typeof(Trixi.source_terms_poisson_periodic), NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:105
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:105
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_mortar.toml
| equations:          LinearScalarAdvectionEquation2D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              1.0
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        40
| | #interfaces:      68
| | #boundaries:      0
| | #l2mortars:       8
| | #DOFs:            640
|
| Mesh
| | #cells:           53
| | #leaf cells:      40
| | minimum level:    2
| | maximum level:    3
| | domain center:    0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.25
| | maximum dx:       0.5


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
parameters_mortar.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:109
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:110
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:110
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_mortar_alfven_wave.toml
| equations:          IdealGlmMhdEquations2D
| | #variables:       9
| | variable names:   rho, rho_v1, rho_v2, rho_v3, rho_e, B1, B2, B3, psi
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  split_form
| | volume flux:      flux_derigs_etal
| | surface flux:     flux_hll
| | #elements:        448
| | #interfaces:      848
| | #boundaries:      0
| | #l2mortars:       32
| | #DOFs:            7168
|
| Mesh
| | #cells:           597
| | #leaf cells:      448
| | minimum level:    4
| | maximum level:    5
| | domain center:    0.7071067811865476, 0.7071067811865476
| | domain length:    1.4142135623730951
| | minimum dx:       0.04419417382415922
| | maximum dx:       0.08838834764831845


--------------------------------------------------------------------------------
 Simulation running 'IdealGlmMhdEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_v3           rho_e            B1               B2               B3               psi           
parameters_mortar_alfven_wave.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:114
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_hll), typeof(Trixi.flux_derigs_etal), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_hll), typeof(Trixi.flux_derigs_etal), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_hll), typeof(Trixi.flux_derigs_etal), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:115
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:115
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_mortar_vortex.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_isentropic_vortex
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        640
| | #interfaces:      1232
| | #boundaries:      0
| | #l2mortars:       32
| | #DOFs:            10240
|
| Mesh
| | #cells:           853
| | #leaf cells:      640
| | minimum level:    4
| | maximum level:    5
| | domain center:    0.0, 0.0
| | domain length:    20.0
| | minimum dx:       0.625
| | maximum dx:       1.25


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_e         
parameters_mortar_vortex.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:120
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:121
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:121
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_mortar_vortex_split.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_isentropic_vortex
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  split_form
| | volume flux:      flux_kennedy_gruber
| | surface flux:     flux_lax_friedrichs
| | #elements:        640
| | #interfaces:      1232
| | #boundaries:      0
| | #l2mortars:       32
| | #DOFs:            10240
|
| Mesh
| | #cells:           853
| | #leaf cells:      640
| | minimum level:    4
| | maximum level:    5
| | domain center:    0.0, 0.0
| | domain length:    20.0
| | minimum dx:       0.625
| | maximum dx:       1.25


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_e         
parameters_mortar_vortex_split.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:125
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:126
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:126
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_mortar_vortex_split.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_isentropic_vortex
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  split_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        640
| | #interfaces:      1232
| | #boundaries:      0
| | #l2mortars:       32
| | #DOFs:            10240
|
| Mesh
| | #cells:           853
| | #leaf cells:      640
| | minimum level:    4
| | maximum level:    5
| | domain center:    0.0, 0.0
| | domain length:    20.0
| | minimum dx:       0.625
| | maximum dx:       1.25


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_e         
parameters_mortar_vortex_split.toml with flux_central: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:130
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_flux,), Tuple{String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_flux,), Tuple{String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_flux,), Tuple{String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_flux,), Tuple{String}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:131
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:131
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_mortar_vortex_split.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_isentropic_vortex
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  split_form
| | volume flux:      flux_shima_etal
| | surface flux:     flux_lax_friedrichs
| | #elements:        640
| | #interfaces:      1232
| | #boundaries:      0
| | #l2mortars:       32
| | #DOFs:            10240
|
| Mesh
| | #cells:           853
| | #leaf cells:      640
| | minimum level:    4
| | maximum level:    5
| | domain center:    0.0, 0.0
| | domain length:    20.0
| | minimum dx:       0.625
| | maximum dx:       1.25


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_e         
parameters_mortar_vortex_split.toml with flux_shima_etal: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:136
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_shima_etal), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_shima_etal), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_shima_etal), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_flux,), Tuple{String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_flux,), Tuple{String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_flux,), Tuple{String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_flux,), Tuple{String}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:137
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:137
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_mortar_vortex_split.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_isentropic_vortex
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  split_form
| | volume flux:      flux_ranocha
| | surface flux:     flux_lax_friedrichs
| | #elements:        640
| | #interfaces:      1232
| | #boundaries:      0
| | #l2mortars:       32
| | #DOFs:            10240
|
| Mesh
| | #cells:           853
| | #leaf cells:      640
| | minimum level:    4
| | maximum level:    5
| | domain center:    0.0, 0.0
| | domain length:    20.0
| | minimum dx:       0.625
| | maximum dx:       1.25


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_e         
parameters_mortar_vortex_split.toml with flux_ranocha: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:142
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_ranocha), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_ranocha), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_ranocha), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_flux,), Tuple{String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_flux,), Tuple{String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_flux,), Tuple{String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_flux,), Tuple{String}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:143
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:143
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_mortar_vortex_split_shockcapturing.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_isentropic_vortex
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.4
| | volume integral:  shock_capturing
| | volume flux:      flux_kennedy_gruber
| | surface flux:     flux_lax_friedrichs
| | #elements:        640
| | #interfaces:      1232
| | #boundaries:      0
| | #l2mortars:       32
| | #DOFs:            10240
|
| Mesh
| | #cells:           853
| | #leaf cells:      640
| | minimum level:    4
| | maximum level:    5
| | domain center:    0.0, 0.0
| | domain length:    20.0
| | minimum dx:       0.625
| | maximum dx:       1.25

parameters_mortar_vortex_split_shockcapturing.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:148
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] threading_run(func::Function)
      @ Base.Threads ./threadingconstructs.jl:34
    [3] macro expansion
      @ ./threadingconstructs.jl:93 [inlined]
    [4] calc_blending_factors!(alpha::Vector{Float64}, alpha_pre_smooth::Vector{Float64}, u::Array{Float64, 4}, alpha_max::Float64, alpha_min::Float64, do_smoothing::Bool, indicator_variable::Function, thread_cache::NamedTuple{(:f1_threaded, :f2_threaded, :fstar1_threaded, :fstar2_threaded, :fstar_upper_threaded, :fstar_lower_threaded, :noncons_diamond_upper_threaded, :noncons_diamond_lower_threaded, :indicator_threaded, :modal_threaded, :modal_tmp1_threaded), Tuple{Vector{Array{Float64, 4}}, Vector{Array{Float64, 4}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}}}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2293
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [6] calc_volume_integral!(u_t::Array{Float64, 4}, #unused#::Val{:shock_capturing}, alpha::Vector{Float64}, alpha_tmp::Vector{Float64}, element_ids_dg::Vector{Int64}, element_ids_dgfv::Vector{Int64}, thread_cache::NamedTuple{(:f1_threaded, :f2_threaded, :fstar1_threaded, :fstar2_threaded, :fstar_upper_threaded, :fstar_lower_threaded, :noncons_diamond_upper_threaded, :noncons_diamond_lower_threaded, :indicator_threaded, :modal_threaded, :modal_tmp1_threaded), Tuple{Vector{Array{Float64, 4}}, Vector{Array{Float64, 4}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}}}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1473
    [7] calc_volume_integral!(u_t::Array{Float64, 4}, #unused#::Val{:shock_capturing}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1460
    [8] calc_volume_integral!
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1281 [inlined]
    [9] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
   [10] rhs!(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t_stage::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1245
   [11] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:347 [inlined]
   [12] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:244
   [13] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [14] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:149
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:149
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485
  
      nested task error: Module IR does not contain specified entry function
      Stacktrace:
        [1] assume
          @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
        [2] macro expansion
          @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
        [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
          @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
        [4] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
        [5] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
        [6] threader
          @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
        [7] macro expansion
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
        [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::Array{Float64, 3}, tmp1::Array{Float64, 3})
          @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
        [9] macro expansion
          @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2302 [inlined]
       [10] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})(onethread::Bool)
          @ Trixi ./threadingconstructs.jl:81
       [11] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})()
          @ Trixi ./threadingconstructs.jl:48

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_nonperiodic.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              2.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.6
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      480
| | #boundaries:      64
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    1.0, 1.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_e         
parameters_nonperiodic.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:153
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), NTuple{4, typeof(Trixi.boundary_conditions_convergence_test)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), NTuple{4, typeof(Trixi.boundary_conditions_convergence_test)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), NTuple{4, typeof(Trixi.boundary_conditions_convergence_test)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:154
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:154
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_source_terms.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              2.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.6
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    1.0, 1.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_e         
parameters_source_terms.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:158
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:159
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:159
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_vortex.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_isentropic_vortex
| t_start:            0.0
| t_end:              20.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.6
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    20.0
| | minimum dx:       1.25
| | maximum dx:       1.25


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_e         
parameters_vortex.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:163
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:164
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:164
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_vortex_split_shockcapturing.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_isentropic_vortex
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.4
| | volume integral:  shock_capturing
| | volume flux:      flux_kennedy_gruber
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    20.0
| | minimum dx:       1.25
| | maximum dx:       1.25

parameters_vortex_split_shockcapturing.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:168
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] threading_run(func::Function)
      @ Base.Threads ./threadingconstructs.jl:34
    [3] macro expansion
      @ ./threadingconstructs.jl:93 [inlined]
    [4] calc_blending_factors!(alpha::Vector{Float64}, alpha_pre_smooth::Vector{Float64}, u::Array{Float64, 4}, alpha_max::Float64, alpha_min::Float64, do_smoothing::Bool, indicator_variable::Function, thread_cache::NamedTuple{(:f1_threaded, :f2_threaded, :fstar1_threaded, :fstar2_threaded, :fstar_upper_threaded, :fstar_lower_threaded, :noncons_diamond_upper_threaded, :noncons_diamond_lower_threaded, :indicator_threaded, :modal_threaded, :modal_tmp1_threaded), Tuple{Vector{Array{Float64, 4}}, Vector{Array{Float64, 4}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}}}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2293
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [6] calc_volume_integral!(u_t::Array{Float64, 4}, #unused#::Val{:shock_capturing}, alpha::Vector{Float64}, alpha_tmp::Vector{Float64}, element_ids_dg::Vector{Int64}, element_ids_dgfv::Vector{Int64}, thread_cache::NamedTuple{(:f1_threaded, :f2_threaded, :fstar1_threaded, :fstar2_threaded, :fstar_upper_threaded, :fstar_lower_threaded, :noncons_diamond_upper_threaded, :noncons_diamond_lower_threaded, :indicator_threaded, :modal_threaded, :modal_tmp1_threaded), Tuple{Vector{Array{Float64, 4}}, Vector{Array{Float64, 4}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}}}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1473
    [7] calc_volume_integral!(u_t::Array{Float64, 4}, #unused#::Val{:shock_capturing}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1460
    [8] calc_volume_integral!
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1281 [inlined]
    [9] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
   [10] rhs!(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t_stage::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1245
   [11] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:347 [inlined]
   [12] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:244
   [13] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [14] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:169
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:169
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485
  
      nested task error: Module IR does not contain specified entry function
      Stacktrace:
        [1] assume
          @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
        [2] macro expansion
          @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
        [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
          @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
        [4] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
        [5] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
        [6] threader
          @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
        [7] macro expansion
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
        [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::Array{Float64, 3}, tmp1::Array{Float64, 3})
          @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
        [9] macro expansion
          @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2302 [inlined]
       [10] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})(onethread::Bool)
          @ Trixi ./threadingconstructs.jl:81
       [11] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_isentropic_vortex), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})()
          @ Trixi ./threadingconstructs.jl:48

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_weak_blast_wave_shockcapturing.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_weak_blast_wave
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   0
| solution interval:  10
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  shock_capturing
| | volume flux:      flux_kennedy_gruber
| | surface flux:     flux_lax_friedrichs
| | #elements:        1024
| | #interfaces:      2048
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            16384
|
| Mesh
| | #cells:           1365
| | #leaf cells:      1024
| | minimum level:    5
| | maximum level:    5
| | domain center:    0.0, 0.0
| | domain length:    4.0
| | minimum dx:       0.125
| | maximum dx:       0.125

parameters_weak_blast_wave_shockcapturing.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:173
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] threading_run(func::Function)
      @ Base.Threads ./threadingconstructs.jl:34
    [3] macro expansion
      @ ./threadingconstructs.jl:93 [inlined]
    [4] calc_blending_factors!(alpha::Vector{Float64}, alpha_pre_smooth::Vector{Float64}, u::Array{Float64, 4}, alpha_max::Float64, alpha_min::Float64, do_smoothing::Bool, indicator_variable::Function, thread_cache::NamedTuple{(:f1_threaded, :f2_threaded, :fstar1_threaded, :fstar2_threaded, :fstar_upper_threaded, :fstar_lower_threaded, :noncons_diamond_upper_threaded, :noncons_diamond_lower_threaded, :indicator_threaded, :modal_threaded, :modal_tmp1_threaded), Tuple{Vector{Array{Float64, 4}}, Vector{Array{Float64, 4}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}}}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2293
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [6] calc_volume_integral!(u_t::Array{Float64, 4}, #unused#::Val{:shock_capturing}, alpha::Vector{Float64}, alpha_tmp::Vector{Float64}, element_ids_dg::Vector{Int64}, element_ids_dgfv::Vector{Int64}, thread_cache::NamedTuple{(:f1_threaded, :f2_threaded, :fstar1_threaded, :fstar2_threaded, :fstar_upper_threaded, :fstar_lower_threaded, :noncons_diamond_upper_threaded, :noncons_diamond_lower_threaded, :indicator_threaded, :modal_threaded, :modal_tmp1_threaded), Tuple{Vector{Array{Float64, 4}}, Vector{Array{Float64, 4}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}}}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1473
    [7] calc_volume_integral!(u_t::Array{Float64, 4}, #unused#::Val{:shock_capturing}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1460
    [8] calc_volume_integral!
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1281 [inlined]
    [9] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
   [10] rhs!(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t_stage::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1245
   [11] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:347 [inlined]
   [12] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:244
   [13] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [14] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:174
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:174
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485
  
      nested task error: Module IR does not contain specified entry function
      Stacktrace:
        [1] assume
          @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
        [2] macro expansion
          @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
        [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
          @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
        [4] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
        [5] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
        [6] threader
          @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
        [7] macro expansion
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
        [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::Array{Float64, 3}, tmp1::Array{Float64, 3})
          @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
        [9] macro expansion
          @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2302 [inlined]
       [10] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})(onethread::Bool)
          @ Trixi ./threadingconstructs.jl:81
       [11] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_kennedy_gruber), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})()
          @ Trixi ./threadingconstructs.jl:48

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done
parameters_khi_amr.toml with t_end=0.2: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:178
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] threading_run(func::Function)
      @ Base.Threads ./threadingconstructs.jl:34
    [3] macro expansion
      @ ./threadingconstructs.jl:93 [inlined]
    [4] calc_blending_factors!(alpha::Vector{Float64}, alpha_pre_smooth::Vector{Float64}, u::Array{Float64, 4}, alpha_max::Float64, alpha_min::Float64, do_smoothing::Bool, indicator_variable::Function, thread_cache::NamedTuple{(:f1_threaded, :f2_threaded, :fstar1_threaded, :fstar2_threaded, :fstar_upper_threaded, :fstar_lower_threaded, :noncons_diamond_upper_threaded, :noncons_diamond_lower_threaded, :indicator_threaded, :modal_threaded, :modal_tmp1_threaded), Tuple{Vector{Array{Float64, 4}}, Vector{Array{Float64, 4}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}}}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_khi), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2293
    [5] calc_amr_indicator(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_khi), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/amr.jl:356
    [6] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [7] adapt!(mesh::Trixi.TreeMesh{2}, solver::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_khi), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, time::Float64; only_refine::Bool, only_coarsen::Bool, passive_solvers::Vector{Any})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/amr/amr.jl:18
    [8] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [9] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:138
   [10] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [11] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [12] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [13] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [14] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [15] open
      @ ./io.jl:328 [inlined]
   [16] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [17] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [18] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:179
   [19] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [20] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:179
   [21] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [23] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [24] macro expansion
      @ ./timing.jl:192 [inlined]
   [25] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [26] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [27] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [28] top-level scope
      @ ./timing.jl:192
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] top-level scope
      @ none:6
   [31] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [32] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [33] _start()
      @ Base ./client.jl:485
  
      nested task error: Module IR does not contain specified entry function
      Stacktrace:
        [1] assume
          @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
        [2] macro expansion
          @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
        [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
          @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
        [4] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
        [5] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
        [6] threader
          @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
        [7] macro expansion
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
        [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::Array{Float64, 3}, tmp1::Array{Float64, 3})
          @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
        [9] macro expansion
          @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2302 [inlined]
       [10] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_khi), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})(onethread::Bool)
          @ Trixi ./threadingconstructs.jl:81
       [11] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_khi), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})()
          @ Trixi ./threadingconstructs.jl:48

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done
parameters_blob_amr.toml with t_end=0.12: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:184
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] threading_run(func::Function)
      @ Base.Threads ./threadingconstructs.jl:34
    [3] macro expansion
      @ ./threadingconstructs.jl:93 [inlined]
    [4] calc_blending_factors!(alpha::Vector{Float64}, alpha_pre_smooth::Vector{Float64}, u::Array{Float64, 4}, alpha_max::Float64, alpha_min::Float64, do_smoothing::Bool, indicator_variable::Function, thread_cache::NamedTuple{(:f1_threaded, :f2_threaded, :fstar1_threaded, :fstar2_threaded, :fstar_upper_threaded, :fstar_lower_threaded, :noncons_diamond_upper_threaded, :noncons_diamond_lower_threaded, :indicator_threaded, :modal_threaded, :modal_tmp1_threaded), Tuple{Vector{Array{Float64, 4}}, Vector{Array{Float64, 4}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{StaticArrays.MMatrix{4, 5, Float64, 20}}, Vector{StaticArrays.MMatrix{4, 5, Float64, 20}}, Vector{StaticArrays.MMatrix{4, 5, Float64, 20}}, Vector{StaticArrays.MMatrix{4, 5, Float64, 20}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}}}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 4, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_blob), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2293
    [5] calc_amr_indicator(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 4, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_blob), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/amr.jl:401
    [6] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [7] adapt!(mesh::Trixi.TreeMesh{2}, solver::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 4, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_blob), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, time::Float64; only_refine::Bool, only_coarsen::Bool, passive_solvers::Vector{Any})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/amr/amr.jl:18
    [8] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [9] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:138
   [10] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [11] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [12] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [13] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [14] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [15] open
      @ ./io.jl:328 [inlined]
   [16] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [17] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [18] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:185
   [19] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [20] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:185
   [21] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [23] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [24] macro expansion
      @ ./timing.jl:192 [inlined]
   [25] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [26] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [27] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [28] top-level scope
      @ ./timing.jl:192
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] top-level scope
      @ none:6
   [31] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [32] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [33] _start()
      @ Base ./client.jl:485
  
      nested task error: Module IR does not contain specified entry function
      Stacktrace:
        [1] assume
          @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
        [2] macro expansion
          @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
        [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
          @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
        [4] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
        [5] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
        [6] threader
          @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
        [7] macro expansion
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
        [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::Array{Float64, 3}, tmp1::Array{Float64, 3})
          @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
        [9] macro expansion
          @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2302 [inlined]
       [10] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 4, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_blob), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})(onethread::Bool)
          @ Trixi ./threadingconstructs.jl:81
       [11] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 4, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_blob), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})()
          @ Trixi ./threadingconstructs.jl:48

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done
parameters_orszag_tang.toml with t_end=0.09: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:190
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] threading_run(func::Function)
      @ Base.Threads ./threadingconstructs.jl:34
    [3] macro expansion
      @ ./threadingconstructs.jl:93 [inlined]
    [4] calc_blending_factors!(alpha::Vector{Float64}, alpha_pre_smooth::Vector{Float64}, u::Array{Float64, 4}, alpha_max::Float64, alpha_min::Float64, do_smoothing::Bool, indicator_variable::Function, thread_cache::NamedTuple{(:f1_threaded, :f2_threaded, :fstar1_threaded, :fstar2_threaded, :fstar_upper_threaded, :fstar_lower_threaded, :noncons_diamond_upper_threaded, :noncons_diamond_lower_threaded, :indicator_threaded, :modal_threaded, :modal_tmp1_threaded), Tuple{Vector{Array{Float64, 4}}, Vector{Array{Float64, 4}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{StaticArrays.MMatrix{9, 4, Float64, 36}}, Vector{StaticArrays.MMatrix{9, 4, Float64, 36}}, Vector{StaticArrays.MMatrix{9, 4, Float64, 36}}, Vector{StaticArrays.MMatrix{9, 4, Float64, 36}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}}}, dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_orszag_tang), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2293
    [5] calc_amr_indicator(dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_orszag_tang), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/amr.jl:462
    [6] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [7] adapt!(mesh::Trixi.TreeMesh{2}, solver::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_orszag_tang), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, time::Float64; only_refine::Bool, only_coarsen::Bool, passive_solvers::Vector{Any})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/amr/amr.jl:18
    [8] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [9] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:138
   [10] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [11] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [12] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [13] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [14] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [15] open
      @ ./io.jl:328 [inlined]
   [16] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [17] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [18] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:191
   [19] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [20] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:191
   [21] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [23] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [24] macro expansion
      @ ./timing.jl:192 [inlined]
   [25] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [26] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [27] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [28] top-level scope
      @ ./timing.jl:192
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] top-level scope
      @ none:6
   [31] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [32] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [33] _start()
      @ Base ./client.jl:485
  
      nested task error: Module IR does not contain specified entry function
      Stacktrace:
        [1] assume
          @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
        [2] macro expansion
          @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
        [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
          @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
        [4] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
        [5] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
        [6] threader
          @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
        [7] macro expansion
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
        [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::Array{Float64, 3}, tmp1::Array{Float64, 3})
          @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
        [9] macro expansion
          @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2302 [inlined]
       [10] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_orszag_tang), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})(onethread::Bool)
          @ Trixi ./threadingconstructs.jl:81
       [11] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_orszag_tang), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})()
          @ Trixi ./threadingconstructs.jl:48

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done
parameters_orszag_tang.toml with t_end=0.06: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:197
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] threading_run(func::Function)
      @ Base.Threads ./threadingconstructs.jl:34
    [3] macro expansion
      @ ./threadingconstructs.jl:93 [inlined]
    [4] calc_blending_factors!(alpha::Vector{Float64}, alpha_pre_smooth::Vector{Float64}, u::Array{Float64, 4}, alpha_max::Float64, alpha_min::Float64, do_smoothing::Bool, indicator_variable::Function, thread_cache::NamedTuple{(:f1_threaded, :f2_threaded, :fstar1_threaded, :fstar2_threaded, :fstar_upper_threaded, :fstar_lower_threaded, :noncons_diamond_upper_threaded, :noncons_diamond_lower_threaded, :indicator_threaded, :modal_threaded, :modal_tmp1_threaded), Tuple{Vector{Array{Float64, 4}}, Vector{Array{Float64, 4}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{StaticArrays.MMatrix{9, 4, Float64, 36}}, Vector{StaticArrays.MMatrix{9, 4, Float64, 36}}, Vector{StaticArrays.MMatrix{9, 4, Float64, 36}}, Vector{StaticArrays.MMatrix{9, 4, Float64, 36}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}}}, dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_hll), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_orszag_tang), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2293
    [5] calc_amr_indicator(dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_hll), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_orszag_tang), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/amr.jl:462
    [6] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [7] adapt!(mesh::Trixi.TreeMesh{2}, solver::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_hll), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_orszag_tang), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, time::Float64; only_refine::Bool, only_coarsen::Bool, passive_solvers::Vector{Any})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/amr/amr.jl:18
    [8] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [9] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:138
   [10] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:t_end, :surface_flux), Tuple{Float64, String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [11] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [12] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:t_end, :surface_flux), Tuple{Float64, String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [13] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [14] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:t_end, :surface_flux), Tuple{Float64, String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [15] open
      @ ./io.jl:328 [inlined]
   [16] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [17] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:t_end, :surface_flux), Tuple{Float64, String}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [18] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:198
   [19] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [20] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:198
   [21] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [23] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [24] macro expansion
      @ ./timing.jl:192 [inlined]
   [25] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [26] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [27] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [28] top-level scope
      @ ./timing.jl:192
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] top-level scope
      @ none:6
   [31] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [32] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [33] _start()
      @ Base ./client.jl:485
  
      nested task error: Module IR does not contain specified entry function
      Stacktrace:
        [1] assume
          @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
        [2] macro expansion
          @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
        [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
          @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
        [4] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
        [5] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
        [6] threader
          @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
        [7] macro expansion
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
        [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::Array{Float64, 3}, tmp1::Array{Float64, 3})
          @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
        [9] macro expansion
          @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2302 [inlined]
       [10] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_hll), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_orszag_tang), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})(onethread::Bool)
          @ Trixi ./threadingconstructs.jl:81
       [11] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_hll), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_orszag_tang), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})()
          @ Trixi ./threadingconstructs.jl:48

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_ec_mortar.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_weak_blast_wave
| t_start:            0.0
| t_end:              0.2
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  shock_capturing
| | volume flux:      flux_chandrashekar
| | surface flux:     flux_chandrashekar
| | #elements:        1264
| | #interfaces:      2456
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            20224
|
| Mesh
| | #cells:           1685
| | #leaf cells:      1264
| | minimum level:    5
| | maximum level:    7
| | domain center:    0.0, 0.0
| | domain length:    4.0
| | minimum dx:       0.03125
| | maximum dx:       0.125

parameters_ec_mortar.toml with shock_capturing: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:203
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] threading_run(func::Function)
      @ Base.Threads ./threadingconstructs.jl:34
    [3] macro expansion
      @ ./threadingconstructs.jl:93 [inlined]
    [4] calc_blending_factors!(alpha::Vector{Float64}, alpha_pre_smooth::Vector{Float64}, u::Array{Float64, 4}, alpha_max::Float64, alpha_min::Float64, do_smoothing::Bool, indicator_variable::Function, thread_cache::NamedTuple{(:f1_threaded, :f2_threaded, :fstar1_threaded, :fstar2_threaded, :fstar_upper_threaded, :fstar_lower_threaded, :noncons_diamond_upper_threaded, :noncons_diamond_lower_threaded, :indicator_threaded, :modal_threaded, :modal_tmp1_threaded), Tuple{Vector{Array{Float64, 4}}, Vector{Array{Float64, 4}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}}}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_chandrashekar), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, NTuple{4, Nothing}, Val{:ec}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2293
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [6] calc_volume_integral!(u_t::Array{Float64, 4}, #unused#::Val{:shock_capturing}, alpha::Vector{Float64}, alpha_tmp::Vector{Float64}, element_ids_dg::Vector{Int64}, element_ids_dgfv::Vector{Int64}, thread_cache::NamedTuple{(:f1_threaded, :f2_threaded, :fstar1_threaded, :fstar2_threaded, :fstar_upper_threaded, :fstar_lower_threaded, :noncons_diamond_upper_threaded, :noncons_diamond_lower_threaded, :indicator_threaded, :modal_threaded, :modal_tmp1_threaded), Tuple{Vector{Array{Float64, 4}}, Vector{Array{Float64, 4}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}}}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_chandrashekar), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, NTuple{4, Nothing}, Val{:ec}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1473
    [7] calc_volume_integral!(u_t::Array{Float64, 4}, #unused#::Val{:shock_capturing}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_chandrashekar), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, NTuple{4, Nothing}, Val{:ec}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1460
    [8] calc_volume_integral!
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1281 [inlined]
    [9] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
   [10] rhs!(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_chandrashekar), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, NTuple{4, Nothing}, Val{:ec}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t_stage::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:1245
   [11] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:347 [inlined]
   [12] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:244
   [13] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_integral_type,), Tuple{String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [14] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [15] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_integral_type,), Tuple{String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [16] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [17] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_integral_type,), Tuple{String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [18] open
      @ ./io.jl:328 [inlined]
   [19] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [20] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_integral_type,), Tuple{String}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [21] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:204
   [22] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:204
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [26] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [27] macro expansion
      @ ./timing.jl:192 [inlined]
   [28] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [29] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [31] top-level scope
      @ ./timing.jl:192
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] top-level scope
      @ none:6
   [34] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [35] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [36] _start()
      @ Base ./client.jl:485
  
      nested task error: Module IR does not contain specified entry function
      Stacktrace:
        [1] assume
          @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
        [2] macro expansion
          @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
        [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
          @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
        [4] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
        [5] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
        [6] threader
          @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
        [7] macro expansion
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
        [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::Array{Float64, 3}, tmp1::Array{Float64, 3})
          @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
        [9] macro expansion
          @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2302 [inlined]
       [10] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_chandrashekar), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, NTuple{4, Nothing}, Val{:ec}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})(onethread::Bool)
          @ Trixi ./threadingconstructs.jl:81
       [11] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_chandrashekar), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_weak_blast_wave), Nothing, NTuple{4, Nothing}, Val{:ec}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})()
          @ Trixi ./threadingconstructs.jl:48

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters.toml
| equations:          LinearScalarAdvectionEquation2D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
parameters.toml with restart and t_end=2: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:209
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run(parameters_file::String)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30
   [16] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:210
   [17] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [18] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:210
   [19] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [20] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [21] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [22] macro expansion
      @ ./timing.jl:192 [inlined]
   [23] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [24] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [25] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [26] top-level scope
      @ ./timing.jl:192
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] top-level scope
      @ none:6
   [29] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [30] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [31] _start()
      @ Base ./client.jl:485
Running convtest iteration 1/3

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters.toml
| equations:          LinearScalarAdvectionEquation2D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
Examples 2D: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:16
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] convtest(parameters_file::String, iterations::Int64; parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:439
   [16] convtest
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:428 [inlined]
   [17] #7
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [18] redirect_stderr(f::Main.TestExamples2D.var"#7#9", stream::IOStream)
      @ Base ./stream.jl:1224
   [19] #6
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [20] open(::Main.TestExamples2D.var"#6#8", ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [21] open(::Function, ::String, ::String)
      @ Base ./io.jl:328
   [22] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:217
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:17
   [26] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [27] macro expansion
      @ ./timing.jl:192 [inlined]
   [28] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [29] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [31] top-level scope
      @ ./timing.jl:192
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] top-level scope
      @ none:6
   [34] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [35] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [36] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters.toml
| equations:          LinearScalarAdvectionEquation2D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_sin_sin
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        1
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
parameters.toml with initial_conditions_sin_sin: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:233
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_sin_sin), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_sin_sin), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_sin_sin), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:234
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:234
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:233
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters.toml
| equations:          LinearScalarAdvectionEquation2D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_constant
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        1
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
parameters.toml with initial_conditions_constant: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:240
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:241
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:241
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:233
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters.toml
| equations:          LinearScalarAdvectionEquation2D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_linear_x_y
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        1
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      480
| | #boundaries:      64
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
parameters.toml with initial_conditions_linear_x_y: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:247
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_linear_x_y), Nothing, NTuple{4, typeof(Trixi.boundary_conditions_linear_x_y)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_linear_x_y), Nothing, NTuple{4, typeof(Trixi.boundary_conditions_linear_x_y)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_linear_x_y), Nothing, NTuple{4, typeof(Trixi.boundary_conditions_linear_x_y)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:248
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:248
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:233
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters.toml
| equations:          LinearScalarAdvectionEquation2D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_linear_x
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        1
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      480
| | #boundaries:      64
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
parameters.toml with initial_conditions_linear_x: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:256
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_linear_x), Nothing, NTuple{4, typeof(Trixi.boundary_conditions_linear_x)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_linear_x), Nothing, NTuple{4, typeof(Trixi.boundary_conditions_linear_x)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_linear_x), Nothing, NTuple{4, typeof(Trixi.boundary_conditions_linear_x)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:257
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:257
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:233
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters.toml
| equations:          LinearScalarAdvectionEquation2D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_linear_y
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        1
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.8
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      480
| | #boundaries:      64
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.125


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       scalar        
parameters.toml with initial_conditions_linear_y: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:265
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_linear_y), Nothing, NTuple{4, typeof(Trixi.boundary_conditions_linear_y)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_linear_y), Nothing, NTuple{4, typeof(Trixi.boundary_conditions_linear_y)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.LinearScalarAdvectionEquation2D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_linear_y), Nothing, NTuple{4, typeof(Trixi.boundary_conditions_linear_y)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions, :boundary_conditions, :periodicity), Tuple{Int64, String, String, Bool}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:266
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:266
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:233
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_vortex.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_density_pulse
| t_start:            0.0
| t_end:              20.0
| AMR:                no
| n_steps_max:        1
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.6
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    20.0
| | minimum dx:       1.25
| | maximum dx:       1.25


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_e         
parameters_vortex.toml one step with initial_conditions_density_pulse: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:275
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_pulse), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_pulse), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_pulse), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:276
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:276
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:233
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_vortex.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_pressure_pulse
| t_start:            0.0
| t_end:              20.0
| AMR:                no
| n_steps_max:        1
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.6
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    20.0
| | minimum dx:       1.25
| | maximum dx:       1.25


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_e         
parameters_vortex.toml one step with initial_conditions_pressure_pulse: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:282
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_pressure_pulse), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_pressure_pulse), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_pressure_pulse), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:283
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:283
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:233
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_vortex.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_density_pressure_pulse
| t_start:            0.0
| t_end:              20.0
| AMR:                no
| n_steps_max:        1
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.6
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    20.0
| | minimum dx:       1.25
| | maximum dx:       1.25


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_e         
parameters_vortex.toml one step with initial_conditions_density_pressure_pulse: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:289
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_pressure_pulse), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_pressure_pulse), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_pressure_pulse), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:290
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:290
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:233
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_vortex.toml
| equations:          CompressibleEulerEquations2D
| | #variables:       4
| | variable names:   rho, rho_v1, rho_v2, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_constant
| t_start:            0.0
| t_end:              20.0
| AMR:                no
| n_steps_max:        1
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.6
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.0, 0.0
| | domain length:    20.0
| | minimum dx:       1.25
| | maximum dx:       1.25


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_e         
parameters_vortex.toml one step with initial_conditions_constant: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:296
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:297
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:297
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:233
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done
parameters_sedov_blast_wave_shockcapturing_amr.toml one step: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:303
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] threading_run(func::Function)
      @ Base.Threads ./threadingconstructs.jl:34
    [3] macro expansion
      @ ./threadingconstructs.jl:93 [inlined]
    [4] calc_blending_factors!(alpha::Vector{Float64}, alpha_pre_smooth::Vector{Float64}, u::Array{Float64, 4}, alpha_max::Float64, alpha_min::Float64, do_smoothing::Bool, indicator_variable::Function, thread_cache::NamedTuple{(:f1_threaded, :f2_threaded, :fstar1_threaded, :fstar2_threaded, :fstar_upper_threaded, :fstar_lower_threaded, :noncons_diamond_upper_threaded, :noncons_diamond_lower_threaded, :indicator_threaded, :modal_threaded, :modal_tmp1_threaded), Tuple{Vector{Array{Float64, 4}}, Vector{Array{Float64, 4}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}}}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2293
    [5] calc_amr_indicator(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/amr.jl:462
    [6] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [7] adapt!(mesh::Trixi.TreeMesh{2}, solver::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, time::Float64; only_refine::Bool, only_coarsen::Bool, passive_solvers::Vector{Any})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/amr/amr.jl:18
    [8] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [9] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:138
   [10] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:n_steps_max,), Tuple{Int64}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [11] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [12] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:n_steps_max,), Tuple{Int64}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [13] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [14] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:n_steps_max,), Tuple{Int64}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [15] open
      @ ./io.jl:328 [inlined]
   [16] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [17] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:n_steps_max,), Tuple{Int64}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [18] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:304
   [19] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [20] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:304
   [21] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:233
   [23] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [24] macro expansion
      @ ./timing.jl:192 [inlined]
   [25] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [26] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [27] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [28] top-level scope
      @ ./timing.jl:192
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] top-level scope
      @ none:6
   [31] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [32] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [33] _start()
      @ Base ./client.jl:485
  
      nested task error: Module IR does not contain specified entry function
      Stacktrace:
        [1] assume
          @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
        [2] macro expansion
          @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
        [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
          @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
        [4] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
        [5] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
        [6] threader
          @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
        [7] macro expansion
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
        [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::Array{Float64, 3}, tmp1::Array{Float64, 3})
          @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
        [9] macro expansion
          @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2302 [inlined]
       [10] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})(onethread::Bool)
          @ Trixi ./threadingconstructs.jl:81
       [11] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_sedov_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})()
          @ Trixi ./threadingconstructs.jl:48

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done
parameters_sedov_blast_wave_shockcapturing_amr.toml one step with initial_conditions_medium_sedov_blast_wave: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:309
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] threading_run(func::Function)
      @ Base.Threads ./threadingconstructs.jl:34
    [3] macro expansion
      @ ./threadingconstructs.jl:93 [inlined]
    [4] calc_blending_factors!(alpha::Vector{Float64}, alpha_pre_smooth::Vector{Float64}, u::Array{Float64, 4}, alpha_max::Float64, alpha_min::Float64, do_smoothing::Bool, indicator_variable::Function, thread_cache::NamedTuple{(:f1_threaded, :f2_threaded, :fstar1_threaded, :fstar2_threaded, :fstar_upper_threaded, :fstar_lower_threaded, :noncons_diamond_upper_threaded, :noncons_diamond_lower_threaded, :indicator_threaded, :modal_threaded, :modal_tmp1_threaded), Tuple{Vector{Array{Float64, 4}}, Vector{Array{Float64, 4}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{StaticArrays.MMatrix{4, 4, Float64, 16}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}}}, dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_medium_sedov_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2293
    [5] calc_amr_indicator(dg::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_medium_sedov_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/amr.jl:462
    [6] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [7] adapt!(mesh::Trixi.TreeMesh{2}, solver::Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_medium_sedov_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, time::Float64; only_refine::Bool, only_coarsen::Bool, passive_solvers::Vector{Any})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/amr/amr.jl:18
    [8] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [9] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:138
   [10] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [11] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [12] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [13] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [14] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [15] open
      @ ./io.jl:328 [inlined]
   [16] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [17] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [18] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:310
   [19] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [20] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:310
   [21] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:233
   [23] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [24] macro expansion
      @ ./timing.jl:192 [inlined]
   [25] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [26] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [27] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [28] top-level scope
      @ ./timing.jl:192
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] top-level scope
      @ none:6
   [31] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [32] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [33] _start()
      @ Base ./client.jl:485
  
      nested task error: Module IR does not contain specified entry function
      Stacktrace:
        [1] assume
          @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
        [2] macro expansion
          @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
        [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
          @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
        [4] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
        [5] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
        [6] threader
          @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
        [7] macro expansion
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
        [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::Array{Float64, 3}, tmp1::Array{Float64, 3})
          @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
        [9] macro expansion
          @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2302 [inlined]
       [10] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_medium_sedov_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})(onethread::Bool)
          @ Trixi ./threadingconstructs.jl:81
       [11] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.CompressibleEulerEquations2D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_chandrashekar), typeof(Trixi.initial_conditions_medium_sedov_blast_wave), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})()
          @ Trixi ./threadingconstructs.jl:48

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/2d/parameters_alfven_wave.toml
| equations:          IdealGlmMhdEquations2D
| | #variables:       9
| | variable names:   rho, rho_v1, rho_v2, rho_v3, rho_e, B1, B2, B3, psi
| sources:            none
| restart:            no
| initial conditions: initial_conditions_constant
| t_start:            0.0
| t_end:              2.0
| AMR:                no
| n_steps_max:        1
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   0
| solution interval:  10
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  split_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        256
| | #interfaces:      512
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           341
| | #leaf cells:      256
| | minimum level:    4
| | maximum level:    4
| | domain center:    0.7071067811865476, 0.7071067811865476
| | domain length:    1.4142135623730951
| | minimum dx:       0.08838834764831845
| | maximum dx:       0.08838834764831845


--------------------------------------------------------------------------------
 Simulation running 'IdealGlmMhdEquations2D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00

 Variable:       rho              rho_v1           rho_v2           rho_v3           rho_e            B1               B2               B3               psi           
parameters_alfven_wave.toml one step with initial_conditions_constant: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:318
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 3})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:787
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:925
   [12] analyze_solution(dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:873
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:n_steps_max, :initial_conditions), Tuple{Int64, String}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:319
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:319
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:233
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done
parameters_rotor.toml one step: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:325
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] threading_run(func::Function)
      @ Base.Threads ./threadingconstructs.jl:34
    [3] macro expansion
      @ ./threadingconstructs.jl:93 [inlined]
    [4] calc_blending_factors!(alpha::Vector{Float64}, alpha_pre_smooth::Vector{Float64}, u::Array{Float64, 4}, alpha_max::Float64, alpha_min::Float64, do_smoothing::Bool, indicator_variable::Function, thread_cache::NamedTuple{(:f1_threaded, :f2_threaded, :fstar1_threaded, :fstar2_threaded, :fstar_upper_threaded, :fstar_lower_threaded, :noncons_diamond_upper_threaded, :noncons_diamond_lower_threaded, :indicator_threaded, :modal_threaded, :modal_tmp1_threaded), Tuple{Vector{Array{Float64, 4}}, Vector{Array{Float64, 4}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{StaticArrays.MMatrix{9, 5, Float64, 45}}, Vector{StaticArrays.MMatrix{9, 5, Float64, 45}}, Vector{StaticArrays.MMatrix{9, 5, Float64, 45}}, Vector{StaticArrays.MMatrix{9, 5, Float64, 45}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}}}, dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 4, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_rotor), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2293
    [5] calc_amr_indicator(dg::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 4, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_rotor), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{2}, time::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/amr.jl:462
    [6] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [7] adapt!(mesh::Trixi.TreeMesh{2}, solver::Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 4, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_rotor), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, time::Float64; only_refine::Bool, only_coarsen::Bool, passive_solvers::Vector{Any})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/amr/amr.jl:18
    [8] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:190 [inlined]
    [9] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:138
   [10] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:n_steps_max,), Tuple{Int64}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [11] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [12] redirect_stderr(f::Main.TestExamples2D.var"#3#5"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:n_steps_max,), Tuple{Int64}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [13] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [14] open(::Main.TestExamples2D.var"#2#4"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:n_steps_max,), Tuple{Int64}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [15] open
      @ ./io.jl:328 [inlined]
   [16] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [17] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:n_steps_max,), Tuple{Int64}}})
      @ Main.TestExamples2D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [18] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:326
   [19] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [20] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:326
   [21] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_2d.jl:233
   [23] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [24] macro expansion
      @ ./timing.jl:192 [inlined]
   [25] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:12 [inlined]
   [26] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [27] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [28] top-level scope
      @ ./timing.jl:192
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] top-level scope
      @ none:6
   [31] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [32] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [33] _start()
      @ Base ./client.jl:485
  
      nested task error: Module IR does not contain specified entry function
      Stacktrace:
        [1] assume
          @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
        [2] macro expansion
          @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
        [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#307"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000024, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000341, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#316"), LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000002431, 0x0000000000000004, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000123, 0x0000000000000004, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000204, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000000010101, 0x0000000000030401, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i, :v, :ii}}, ::NTuple{4, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::Nothing, ::typeof(isnothing))
          @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
        [4] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
        [5] 𝒜𝒸𝓉!
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
        [6] threader
          @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
        [7] macro expansion
          @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
        [8] multiply_dimensionwise!(data_out::Array{Float64, 3}, matrix::Matrix{Float64}, data_in::Array{Float64, 3}, tmp1::Array{Float64, 3})
          @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:127
        [9] macro expansion
          @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/2d/dg.jl:2302 [inlined]
       [10] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 4, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_rotor), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})(onethread::Bool)
          @ Trixi ./threadingconstructs.jl:81
       [11] (::Trixi.var"#936#threadsfor_fun#161"{Vector{Float64}, Array{Float64, 4}, Float64, Float64, typeof(Trixi.density_pressure), Trixi.Dg2D{Trixi.IdealGlmMhdEquations2D, 9, 4, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_rotor), Nothing, NTuple{4, Nothing}, Val{:l2}, Val{:shock_capturing}, typeof(Trixi.density_pressure), StaticArrays.SVector{5, Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SMatrix{5, 2, Float64, 10}, Matrix{Float64}, StaticArrays.SMatrix{5, 5, Float64, 25}, StaticArrays.SVector{10, Float64}, Matrix{Float64}}, Float64, Float64, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, Vector{Array{Float64, 3}}, UnitRange{Int64}})()
          @ Trixi ./threadingconstructs.jl:48
501.208811 seconds (387.33 M allocations: 81.909 GiB, 7.07% gc time, 97.22% compilation time)

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/3d/parameters.toml
| equations:          LinearScalarAdvectionEquation3D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.4
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        512
| | #interfaces:      1536
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            32768
|
| Mesh
| | #cells:           585
| | #leaf cells:      512
| | minimum level:    3
| | maximum level:    3
| | domain center:    0.0, 0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.25
| | maximum dx:       0.25


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation3D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #DOF:                    32768

 Variable:       scalar        
parameters.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:17
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#431"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000035, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000004521, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#440"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000005, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000035421, 0x0000000000000005, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000005, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000001010101, 0x0000000004030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000305, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000001010101, 0x0000000004050201, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:k, :j, :i, :v, :ii}}, ::NTuple{5, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 4}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 4, Array{Float64, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 4}, tmp2::Array{Float64, 4})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:172
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:848
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:1041
   [12] analyze_solution(dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:988
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples3D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples3D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples3D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:18
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:18
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:16 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/3d/parameters.toml
| equations:          LinearScalarAdvectionEquation3D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.4
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        512
| | #interfaces:      1536
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            32768
|
| Mesh
| | #cells:           585
| | #leaf cells:      512
| | minimum level:    3
| | maximum level:    3
| | domain center:    0.0, 0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.25
| | maximum dx:       0.25


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation3D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #DOF:                    32768

 Variable:       scalar        
parameters.toml with restart and t_end=2: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:22
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#431"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000035, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000004521, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#440"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000005, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000035421, 0x0000000000000005, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000005, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000001010101, 0x0000000004030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000305, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000001010101, 0x0000000004050201, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:k, :j, :i, :v, :ii}}, ::NTuple{5, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 4}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 4, Array{Float64, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 4}, tmp2::Array{Float64, 4})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:172
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:848
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:1041
   [12] analyze_solution(dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:988
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run(parameters_file::String)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30
   [16] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:23
   [17] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [18] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:23
   [19] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [20] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:17
   [21] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [22] macro expansion
      @ ./timing.jl:192 [inlined]
   [23] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:16 [inlined]
   [24] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [25] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [26] top-level scope
      @ ./timing.jl:192
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] top-level scope
      @ none:6
   [29] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [30] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [31] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/3d/parameters.toml
| equations:          LinearScalarAdvectionEquation3D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_sin_periodic
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.4
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        512
| | #interfaces:      1536
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            32768
|
| Mesh
| | #cells:           585
| | #leaf cells:      512
| | minimum level:    3
| | maximum level:    3
| | domain center:    0.0, 0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.25
| | maximum dx:       0.25


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation3D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #DOF:                    32768

 Variable:       scalar        
parameters.toml with initial_conditions_sin_periodic: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:29
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#431"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000035, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000004521, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#440"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000005, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000035421, 0x0000000000000005, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000005, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000001010101, 0x0000000004030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000305, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000001010101, 0x0000000004050201, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:k, :j, :i, :v, :ii}}, ::NTuple{5, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 4}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 4, Array{Float64, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 4}, tmp2::Array{Float64, 4})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:172
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_sin_periodic), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:848
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_sin_periodic), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:1041
   [12] analyze_solution(dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_sin_periodic), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:988
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, typeof(Trixi.initial_conditions_sin_periodic), Tuple{Symbol}, NamedTuple{(:initial_conditions,), Tuple{typeof(Trixi.initial_conditions_sin_periodic)}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples3D.var"#3#5"{Base.Iterators.Pairs{Symbol, typeof(Trixi.initial_conditions_sin_periodic), Tuple{Symbol}, NamedTuple{(:initial_conditions,), Tuple{typeof(Trixi.initial_conditions_sin_periodic)}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples3D.var"#2#4"{Base.Iterators.Pairs{Symbol, typeof(Trixi.initial_conditions_sin_periodic), Tuple{Symbol}, NamedTuple{(:initial_conditions,), Tuple{typeof(Trixi.initial_conditions_sin_periodic)}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, typeof(Trixi.initial_conditions_sin_periodic), Tuple{Symbol}, NamedTuple{(:initial_conditions,), Tuple{typeof(Trixi.initial_conditions_sin_periodic)}}})
      @ Main.TestExamples3D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:30
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:30
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:16 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/3d/parameters.toml
| equations:          LinearScalarAdvectionEquation3D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_constant
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.4
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        512
| | #interfaces:      1536
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            32768
|
| Mesh
| | #cells:           585
| | #leaf cells:      512
| | minimum level:    3
| | maximum level:    3
| | domain center:    0.0, 0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.25
| | maximum dx:       0.25


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation3D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #DOF:                    32768

 Variable:       scalar        
parameters.toml with initial_conditions_constant: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:35
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#431"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000035, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000004521, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#440"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000005, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000035421, 0x0000000000000005, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000005, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000001010101, 0x0000000004030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000305, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000001010101, 0x0000000004050201, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:k, :j, :i, :v, :ii}}, ::NTuple{5, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 4}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 4, Array{Float64, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 4}, tmp2::Array{Float64, 4})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:172
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:848
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:1041
   [12] analyze_solution(dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_constant), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:988
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, typeof(Trixi.initial_conditions_constant), Tuple{Symbol}, NamedTuple{(:initial_conditions,), Tuple{typeof(Trixi.initial_conditions_constant)}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples3D.var"#3#5"{Base.Iterators.Pairs{Symbol, typeof(Trixi.initial_conditions_constant), Tuple{Symbol}, NamedTuple{(:initial_conditions,), Tuple{typeof(Trixi.initial_conditions_constant)}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples3D.var"#2#4"{Base.Iterators.Pairs{Symbol, typeof(Trixi.initial_conditions_constant), Tuple{Symbol}, NamedTuple{(:initial_conditions,), Tuple{typeof(Trixi.initial_conditions_constant)}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, typeof(Trixi.initial_conditions_constant), Tuple{Symbol}, NamedTuple{(:initial_conditions,), Tuple{typeof(Trixi.initial_conditions_constant)}}})
      @ Main.TestExamples3D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:36
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:36
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:16 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/3d/parameters.toml
| equations:          LinearScalarAdvectionEquation3D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_linear_z
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.4
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        512
| | #interfaces:      1344
| | #boundaries:      384
| | #l2mortars:       0
| | #DOFs:            32768
|
| Mesh
| | #cells:           585
| | #leaf cells:      512
| | minimum level:    3
| | maximum level:    3
| | domain center:    0.0, 0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.25
| | maximum dx:       0.25


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation3D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #DOF:                    32768

 Variable:       scalar        
parameters.toml with initial_conditions_linear_z and periodicity=false: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:41
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#431"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000035, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000004521, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#440"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000005, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000035421, 0x0000000000000005, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000005, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000001010101, 0x0000000004030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000305, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000001010101, 0x0000000004050201, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:k, :j, :i, :v, :ii}}, ::NTuple{5, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 4}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 4, Array{Float64, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 4}, tmp2::Array{Float64, 4})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:172
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_linear_z), Nothing, NTuple{6, typeof(Trixi.boundary_conditions_linear_z)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:848
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_linear_z), Nothing, NTuple{6, typeof(Trixi.boundary_conditions_linear_z)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:1041
   [12] analyze_solution(dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_linear_z), Nothing, NTuple{6, typeof(Trixi.boundary_conditions_linear_z)}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:988
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:initial_conditions, :boundary_conditions, :periodicity), Tuple{typeof(Trixi.initial_conditions_linear_z), typeof(Trixi.boundary_conditions_linear_z), Bool}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples3D.var"#3#5"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:initial_conditions, :boundary_conditions, :periodicity), Tuple{typeof(Trixi.initial_conditions_linear_z), typeof(Trixi.boundary_conditions_linear_z), Bool}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples3D.var"#2#4"{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:initial_conditions, :boundary_conditions, :periodicity), Tuple{typeof(Trixi.initial_conditions_linear_z), typeof(Trixi.boundary_conditions_linear_z), Bool}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:initial_conditions, :boundary_conditions, :periodicity), Tuple{typeof(Trixi.initial_conditions_linear_z), typeof(Trixi.boundary_conditions_linear_z), Bool}}})
      @ Main.TestExamples3D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:42
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:42
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:16 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/3d/parameters_source_terms.toml
| equations:          CompressibleEulerEquations3D
| | #variables:       5
| | variable names:   rho, rho_v1, rho_v2, rho_v3, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              5.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.3
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        64
| | #interfaces:      192
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           73
| | #leaf cells:      64
| | minimum level:    2
| | maximum level:    2
| | domain center:    1.0, 1.0, 1.0
| | domain length:    2.0
| | minimum dx:       0.5
| | maximum dx:       0.5


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations3D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #DOF:                     4096

 Variable:       rho              rho_v1           rho_v2           rho_v3           rho_e         
parameters_source_terms.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:48
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#431"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000035, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000004521, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#440"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000005, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000035421, 0x0000000000000005, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000005, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000001010101, 0x0000000004030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000305, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000001010101, 0x0000000004050201, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:k, :j, :i, :v, :ii}}, ::NTuple{5, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 4}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 4, Array{Float64, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 4}, tmp2::Array{Float64, 4})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:172
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:848
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:1041
   [12] analyze_solution(dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:988
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples3D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples3D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples3D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:49
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:49
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:16 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/3d/parameters_source_terms.toml
| equations:          CompressibleEulerEquations3D
| | #variables:       5
| | variable names:   rho, rho_v1, rho_v2, rho_v3, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              5.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.3
| | volume integral:  split_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        64
| | #interfaces:      192
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           73
| | #leaf cells:      64
| | minimum level:    2
| | maximum level:    2
| | domain center:    1.0, 1.0, 1.0
| | domain length:    2.0
| | minimum dx:       0.5
| | maximum dx:       0.5


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations3D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #DOF:                     4096

 Variable:       rho              rho_v1           rho_v2           rho_v3           rho_e         
parameters_source_terms.toml with split_form: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:53
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#431"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000035, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000004521, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#440"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000005, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000035421, 0x0000000000000005, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000005, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000001010101, 0x0000000004030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000305, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000001010101, 0x0000000004050201, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:k, :j, :i, :v, :ii}}, ::NTuple{5, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 4}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 4, Array{Float64, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 4}, tmp2::Array{Float64, 4})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:172
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), NTuple{6, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:848
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), NTuple{6, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:1041
   [12] analyze_solution(dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), NTuple{6, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:988
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_integral_type,), Tuple{String}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples3D.var"#3#5"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_integral_type,), Tuple{String}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples3D.var"#2#4"{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_integral_type,), Tuple{String}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:volume_integral_type,), Tuple{String}}})
      @ Main.TestExamples3D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:54
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:54
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:16 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/3d/parameters_eoc_test_euler.toml
| equations:          CompressibleEulerEquations3D
| | #variables:       5
| | variable names:   rho, rho_v1, rho_v2, rho_v3, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_eoc_test_coupled_euler_gravity
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_hll
| | #elements:        64
| | #interfaces:      192
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096
|
| Mesh
| | #cells:           73
| | #leaf cells:      64
| | minimum level:    2
| | maximum level:    2
| | domain center:    1.0, 1.0, 1.0
| | domain length:    2.0
| | minimum dx:       0.5
| | maximum dx:       0.5


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations3D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #DOF:                     4096

 Variable:       rho              rho_v1           rho_v2           rho_v3           rho_e         
parameters_eoc_test_euler.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:59
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#431"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000035, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000004521, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#440"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000005, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000035421, 0x0000000000000005, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000005, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000001010101, 0x0000000004030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000305, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000001010101, 0x0000000004050201, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:k, :j, :i, :v, :ii}}, ::NTuple{5, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 4}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 4, Array{Float64, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 4}, tmp2::Array{Float64, 4})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:172
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_hll), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_eoc_test_coupled_euler_gravity), typeof(Trixi.source_terms_eoc_test_euler), NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:848
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_hll), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_eoc_test_coupled_euler_gravity), typeof(Trixi.source_terms_eoc_test_euler), NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:1041
   [12] analyze_solution(dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_hll), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_eoc_test_coupled_euler_gravity), typeof(Trixi.source_terms_eoc_test_euler), NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:988
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples3D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples3D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples3D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:60
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:60
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:16 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup (Euler + Gravity)
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/3d/parameters_eoc_test_coupled_euler_gravity.toml
| equations:          euler_gravity
| | Euler:
| | | #variables:     5
| | | variable names: rho, rho_v1, rho_v2, rho_v3, rho_e
| | | sources:        none
| | Gravity:
| | | #variables:     4
| | | variable names: phi, q1, q2, q3
| | | sources:        none
| restart:            no
| initial conditions: initial_conditions_eoc_test_coupled_euler_gravity
| t_start:            0.0
| t_end:              0.2
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  10
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | Euler solver:
| | | volume integral:  weak_form
| | | volume flux:      flux_central
| | | surface flux:     flux_hll
| | Gravity solver:
| | | volume integral:  weak_form
| | | volume flux:      flux_central
| | | surface flux:     flux_lax_friedrichs
| | #elements:        64
| | #interfaces:      192
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            4096 + 4096
|
| Mesh
| | #cells:           73
| | #leaf cells:      64
| | minimum level:    2
| | maximum level:    2
| | domain center:    1.0, 1.0, 1.0
| | domain length:    2.0
| | minimum dx:       0.5
| | maximum dx:       0.5


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations3D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #DOF:                     4096

 Variable:       rho              rho_v1           rho_v2           rho_v3           rho_e         
parameters_eoc_test_coupled_euler_gravity.toml with resid_tol = 1.0e-4, t_end = 0.2: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:64
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#431"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000035, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000004521, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#440"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000005, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000035421, 0x0000000000000005, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000005, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000001010101, 0x0000000004030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000305, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000001010101, 0x0000000004050201, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:k, :j, :i, :v, :ii}}, ::NTuple{5, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 4}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 4, Array{Float64, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 4}, tmp2::Array{Float64, 4})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:172
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_hll), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_eoc_test_coupled_euler_gravity), typeof(Trixi.source_terms_eoc_test_coupled_euler_gravity), NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:848
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_hll), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_eoc_test_coupled_euler_gravity), typeof(Trixi.source_terms_eoc_test_coupled_euler_gravity), NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Trixi.Dg3D{Trixi.HyperbolicDiffusionEquations3D, 4, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_eoc_test_coupled_euler_gravity), typeof(Trixi.source_terms_eoc_test_coupled_euler_gravity), NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:1041
   [12] init_simulation_euler_gravity()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run_euler_gravity.jl:185
   [13] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol, Symbol}, NamedTuple{(:resid_tol, :t_end), Tuple{Float64, Float64}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:40
   [14] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [15] redirect_stderr(f::Main.TestExamples3D.var"#3#5"{Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol, Symbol}, NamedTuple{(:resid_tol, :t_end), Tuple{Float64, Float64}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [16] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [17] open(::Main.TestExamples3D.var"#2#4"{Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol, Symbol}, NamedTuple{(:resid_tol, :t_end), Tuple{Float64, Float64}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [18] open
      @ ./io.jl:328 [inlined]
   [19] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [20] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol, Symbol}, NamedTuple{(:resid_tol, :t_end), Tuple{Float64, Float64}}})
      @ Main.TestExamples3D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [21] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:65
   [22] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:65
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:17
   [26] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [27] macro expansion
      @ ./timing.jl:192 [inlined]
   [28] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:16 [inlined]
   [29] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [31] top-level scope
      @ ./timing.jl:192
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] top-level scope
      @ none:6
   [34] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [35] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [36] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/3d/parameters_mortar.toml
| equations:          LinearScalarAdvectionEquation3D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              5.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              1.0
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        540
| | #interfaces:      1360
| | #boundaries:      0
| | #l2mortars:       104
| | #DOFs:            34560
|
| Mesh
| | #cells:           617
| | #leaf cells:      540
| | minimum level:    2
| | maximum level:    4
| | domain center:    0.0, 0.0, 0.0
| | domain length:    2.0
| | minimum dx:       0.125
| | maximum dx:       0.5


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation3D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #DOF:                    34560

 Variable:       scalar        
parameters_mortar.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:70
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#431"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000035, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000004521, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#440"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000005, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000035421, 0x0000000000000005, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000005, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000001010101, 0x0000000004030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000305, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000001010101, 0x0000000004050201, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:k, :j, :i, :v, :ii}}, ::NTuple{5, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 4}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 4, Array{Float64, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 4}, tmp2::Array{Float64, 4})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:172
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:848
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:1041
   [12] analyze_solution(dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:988
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples3D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples3D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples3D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:71
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:71
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:16 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/3d/parameters_mortar_euler.toml
| equations:          CompressibleEulerEquations3D
| | #variables:       5
| | variable names:   rho, rho_v1, rho_v2, rho_v3, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_convergence_test
| t_start:            0.0
| t_end:              1.0
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   100
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.3
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        120
| | #interfaces:      300
| | #boundaries:      0
| | #l2mortars:       24
| | #DOFs:            7680
|
| Mesh
| | #cells:           137
| | #leaf cells:      120
| | minimum level:    2
| | maximum level:    3
| | domain center:    1.0, 1.0, 1.0
| | domain length:    2.0
| | minimum dx:       0.25
| | maximum dx:       0.5


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations3D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #DOF:                     7680

 Variable:       rho              rho_v1           rho_v2           rho_v3           rho_e         
parameters_mortar_euler.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:75
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#431"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000035, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000004521, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#440"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000005, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000035421, 0x0000000000000005, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000005, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000001010101, 0x0000000004030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000305, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000001010101, 0x0000000004050201, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:k, :j, :i, :v, :ii}}, ::NTuple{5, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 4}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 4, Array{Float64, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 4}, tmp2::Array{Float64, 4})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:172
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:848
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:1041
   [12] analyze_solution(dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_convergence_test), typeof(Trixi.source_terms_convergence_test), NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:988
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples3D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples3D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples3D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:76
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:76
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:16 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/3d/parameters_amr.toml
| equations:          LinearScalarAdvectionEquation3D
| | #variables:       1
| | variable names:   scalar
| sources:            none
| restart:            no
| initial conditions: initial_conditions_gauss
| t_start:            0.0
| t_end:              0.3
| AMR:                yes
| | AMR interval:     5
| | adapt ICs:        yes
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.6
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        6000
| | #interfaces:      17040
| | #boundaries:      0
| | #l2mortars:       384
| | #DOFs:            384000
|
| Mesh
| | #cells:           6857
| | #leaf cells:      6000
| | minimum level:    4
| | maximum level:    6
| | domain center:    0.0, 0.0, 0.0
| | domain length:    10.0
| | minimum dx:       0.15625
| | maximum dx:       0.625


--------------------------------------------------------------------------------
 Simulation running 'LinearScalarAdvectionEquation3D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #DOF:                   384000
 #elements:                6000
 ├── level 6:              1088
 ├── level 5:               952
 └── level 4:              3960

 Variable:       scalar        
parameters_amr.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:80
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#431"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000035, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000004521, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#440"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000005, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000035421, 0x0000000000000005, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000005, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000001010101, 0x0000000004030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000305, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000001010101, 0x0000000004050201, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:k, :j, :i, :v, :ii}}, ::NTuple{5, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 4}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 4, Array{Float64, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 4}, tmp2::Array{Float64, 4})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:172
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_gauss), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:848
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_gauss), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:1041
   [12] analyze_solution(dg::Trixi.Dg3D{Trixi.LinearScalarAdvectionEquation3D, 1, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_gauss), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:988
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] run
      @ ~/.julia/packages/Trixi/ZUiY9/src/run.jl:30 [inlined]
   [16] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [17] redirect_stderr(f::Main.TestExamples3D.var"#3#5"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [18] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [19] open(::Main.TestExamples3D.var"#2#4"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [20] open
      @ ./io.jl:328 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [22] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.TestExamples3D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [23] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:81
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:81
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ./timing.jl:192 [inlined]
   [30] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:16 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [33] top-level scope
      @ ./timing.jl:192
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/3d/parameters_amr_euler.toml
| equations:          CompressibleEulerEquations3D
| | #variables:       5
| | variable names:   rho, rho_v1, rho_v2, rho_v3, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_density_pulse
| t_start:            0.0
| t_end:              0.1
| AMR:                yes
| | AMR interval:     5
| | adapt ICs:        yes
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.4
| | volume integral:  weak_form
| | volume flux:      flux_central
| | surface flux:     flux_lax_friedrichs
| | #elements:        6000
| | #interfaces:      17040
| | #boundaries:      0
| | #l2mortars:       384
| | #DOFs:            384000
|
| Mesh
| | #cells:           6857
| | #leaf cells:      6000
| | minimum level:    4
| | maximum level:    6
| | domain center:    0.0, 0.0, 0.0
| | domain length:    10.0
| | minimum dx:       0.15625
| | maximum dx:       0.625


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations3D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #DOF:                   384000
 #elements:                6000
 ├── level 6:              1088
 ├── level 5:               952
 └── level 4:              3960

 Variable:       rho              rho_v1           rho_v2           rho_v3           rho_e         
parameters_amr_euler.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:85
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#431"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000035, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000004521, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#440"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000005, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000035421, 0x0000000000000005, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000005, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000001010101, 0x0000000004030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000305, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000001010101, 0x0000000004050201, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:k, :j, :i, :v, :ii}}, ::NTuple{5, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 4}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 4, Array{Float64, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 4}, tmp2::Array{Float64, 4})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:172
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_pulse), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:848
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_pulse), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:1041
   [12] analyze_solution(dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_lax_friedrichs), typeof(Trixi.flux_central), typeof(Trixi.initial_conditions_density_pulse), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:weak_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:988
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples3D.var"#3#5"{Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples3D.var"#2#4"{Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}})
      @ Main.TestExamples3D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:86
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:86
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:16 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/3d/parameters_amr_blob.toml
| equations:          CompressibleEulerEquations3D
| | #variables:       5
| | variable names:   rho, rho_v1, rho_v2, rho_v3, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_blob
| t_start:            0.0
| t_end:              0.2
| AMR:                yes
| | AMR interval:     3
| | adapt ICs:        yes
| n_steps_max:        15000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   200
| solution interval:  200
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.9
| | volume integral:  split_form
| | volume flux:      flux_ranocha
| | surface flux:     flux_hllc
| | #elements:        1100
| | #interfaces:      2580
| | #boundaries:      0
| | #l2mortars:       288
| | #DOFs:            70400
|
| Mesh
| | #cells:           1257
| | #leaf cells:      1100
| | minimum level:    2
| | maximum level:    6
| | domain center:    0.0, 0.0, 0.0
| | domain length:    40.0
| | minimum dx:       0.625
| | maximum dx:       10.0


--------------------------------------------------------------------------------
 Simulation running 'CompressibleEulerEquations3D' with POLYDEG = 3
--------------------------------------------------------------------------------
 #timesteps:                  0                run time:       0.00000000e+00 s
 dt:             0.00000000e+00                Time/DOF/step:  0.00000000e+00 s
 sim. time:      0.00000000e+00
 #DOF:                    70400
 #elements:                1100
 ├── level 6:               512
 ├── level 5:               192
 ├── level 4:               224
 ├── level 3:               128
 └── level 2:                44

 Variable:       rho              rho_v1           rho_v2           rho_v3           rho_e         
parameters_amr_blob.toml: Error During Test at /home/pkgeval/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:91
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, -1, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), Symbol(""), :isnothing, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, LoopVectorization.compute, 0x00, 0x02), :numericconstant, Symbol("##zero#431"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :conditionalload, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memload, 0x01, 0x04), :LoopVectorization, :~, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, LoopVectorization.compute, 0x00, 0x05), :LoopVectorization, :vifelse, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000000, 0x0000000000020304, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000035, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x07), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000004521, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x08), :numericconstant, Symbol("##reductzero#440"), LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000000, 0x0000000000000005, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000035421, 0x0000000000000005, 0x0000000000000000, 0x0000000000070809, LoopVectorization.compute, 0x00, 0x09), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000001234, 0x0000000000000005, 0x0000000000000000, 0x0000000000000a06, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000004321, 0x0000000000000000, 0x0000000000000000, 0x000000000000000b, LoopVectorization.memstore, 0x01, 0x0a)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:ℛ, Symbol("##vptr##_ℛ")}(0x0000000001010101, 0x0000000004030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:matrix, Symbol("##vptr##_matrix")}(0x0000000000000101, 0x0000000000000305, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:data_in, Symbol("##vptr##_data_in")}(0x0000000001010101, 0x0000000004050201, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{1}, Tuple{}, Tuple{}, Tuple{(3, LoopVectorization.IntOrFloat), (9, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:k, :j, :i, :v, :ii}}, ::NTuple{5, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 3}, ::Nothing, ::typeof(isnothing))
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1080 [inlined]
    [5] 𝒜𝒸𝓉!
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:1077 [inlined]
    [6] threader
      @ ~/.julia/packages/Tullio/Q2RDS/src/threads.jl:48 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Tullio/Q2RDS/src/macro.jl:992 [inlined]
    [8] multiply_dimensionwise!(data_out::Array{Float64, 4}, matrix::Matrix{Float64}, data_in::SubArray{Float64, 4, Array{Float64, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, tmp1::Array{Float64, 4}, tmp2::Array{Float64, 4})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/interpolation.jl:172
    [9] calc_error_norms(func::typeof(Trixi.cons2cons), dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_hllc), typeof(Trixi.flux_ranocha), typeof(Trixi.initial_conditions_blob), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, t::Float64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:848
   [10] calc_error_norms
      @ ~/.julia/packages/Trixi/ZUiY9/src/solvers/solvers.jl:60 [inlined]
   [11] analyze_solution(dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_hllc), typeof(Trixi.flux_ranocha), typeof(Trixi.initial_conditions_blob), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64; solver_gravity::Nothing)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:1041
   [12] analyze_solution(dg::Trixi.Dg3D{Trixi.CompressibleEulerEquations3D, 5, 3, typeof(Trixi.flux_hllc), typeof(Trixi.flux_ranocha), typeof(Trixi.initial_conditions_blob), Nothing, NTuple{6, Nothing}, Val{:l2}, Val{:split_form}, typeof(Trixi.density_pressure), StaticArrays.SVector{4, Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SMatrix{4, 2, Float64, 8}, Matrix{Float64}, StaticArrays.SMatrix{4, 4, Float64, 16}, StaticArrays.SVector{8, Float64}, Matrix{Float64}}, mesh::Trixi.TreeMesh{3}, time::Float64, dt::Int64, step::Int64, runtime_absolute::Int64, runtime_relative::Int64)
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/solvers/dg/3d/dg.jl:988
   [13] init_simulation()
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:250
   [14] run(parameters_file::String; verbose::Bool, refinement_level_increment::Int64, parameters::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}})
      @ Trixi ~/.julia/packages/Trixi/ZUiY9/src/run.jl:44
   [15] #3
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [16] redirect_stderr(f::Main.TestExamples3D.var"#3#5"{Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}}, String}, stream::IOStream)
      @ Base ./stream.jl:1224
   [17] #2
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [18] open(::Main.TestExamples3D.var"#2#4"{Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}}, String}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [19] open
      @ ./io.jl:328 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [21] test_trixi_run(parameters_file::String; l2::Vector{Float64}, linf::Vector{Float64}, atol::Float64, rtol::Float64, parameters::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:t_end,), Tuple{Float64}}})
      @ Main.TestExamples3D ~/.julia/packages/Trixi/ZUiY9/test/test_trixi.jl:16
   [22] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:92
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:92
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Trixi/ZUiY9/test/test_examples_3d.jl:17
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] macro expansion
      @ ./timing.jl:192 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:16 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Trixi/ZUiY9/test/runtests.jl:8 [inlined]
   [32] top-level scope
      @ ./timing.jl:192
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485

████████╗██████╗ ██╗██╗  ██╗██╗
╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║
   ██║   ██████╔╝██║ ╚███╔╝ ██║
   ██║   ██╔══██╗██║ ██╔██╗ ██║
   ██║   ██║  ██║██║██╔╝ ██╗██║
   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝

Creating mesh... done
Initializing system of equations... done
Initializing solver... done
Applying initial conditions... done

| Simulation setup
| ----------------
| working directory:  /home/pkgeval/.julia/packages/Trixi/ZUiY9/test
| parameters file:    /home/pkgeval/.julia/packages/Trixi/ZUiY9/examples/3d/parameters_ec.toml
| equations:          CompressibleEulerEquations3D
| | #variables:       5
| | variable names:   rho, rho_v1, rho_v2, rho_v3, rho_e
| sources:            none
| restart:            no
| initial conditions: initial_conditions_weak_blast_wave
| t_start:            0.0
| t_end:              0.4
| AMR:                no
| n_steps_max:        10000
| time integration:   timestep_carpenter_kennedy_erk54_2N!
| restart interval:   10
| solution interval:  100
| #parallel threads:  2
|
| Solver
| | solver:           dg
| | polydeg:          3
| | CFL:              0.5
| | volume integral:  split_form
| | volume flux:      flux_ranocha
| | surface flux:     flux_ranocha
| | #elements:        512
| | #interfaces:      1536
| | #boundaries:      0
| | #l2mortars:       0
| | #DOFs:            32768
|
| Mesh
| | #cells:           585
| | #leaf cells:      512
| | minimum level:    3
| | maximum level:    3
| | domain center:    0.0, 0.0, 0.0
| | domain length:    4.0
| | minimum dx:       0.5
| | maximum dx:       0.5


signal (15): Terminated
in expression starting at none:35
pthread_cond_wait at /lib/x86_64-linux-gnu/libpthread.so.0 (unknown line)
