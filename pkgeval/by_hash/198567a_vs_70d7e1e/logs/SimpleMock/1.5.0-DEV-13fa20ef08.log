Julia Version 1.5.0-DEV.606
Commit 13fa20ef08 (2020-04-09 02:49 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SimpleMock ─ v1.1.1
  Installed Cassette ─── v0.3.1
Updating `~/.julia/environments/v1.5/Project.toml`
  [a896ed2c] + SimpleMock v1.1.1
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [7057c7e9] + Cassette v0.3.1
  [a896ed2c] + SimpleMock v1.1.1
    Testing SimpleMock
Status `/tmp/jl_GaIH1o/Project.toml`
  [7057c7e9] Cassette v0.3.1
  [a896ed2c] SimpleMock v1.1.1
  [fd094767] Suppressor v0.2.0
  [8dfed614] Test
Status `/tmp/jl_GaIH1o/Manifest.toml`
  [7057c7e9] Cassette v0.3.1
  [a896ed2c] SimpleMock v1.1.1
  [fd094767] Suppressor v0.2.0
  [2a0f44e3] Base64
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [56ddb016] Logging
  [d6f4376e] Markdown
  [9a3f8284] Random
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
Keyword arguments are discarded when recursing: Log Test Failed at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:169
  Expression: baz(; foo = :baz)
  Log Pattern: (:warn, "Discarding keyword arguments")
  Captured Logs: 

Stacktrace:
 [1] record at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/logging.jl:89 [inlined]
 [2] overdub(::Cassette.Context{nametype(##379),SimpleMock.Metadata{true},Nothing,Cassette.var"##PassType#256",Nothing,Nothing}, ::typeof(Test.record), ::Test.DefaultTestSet, ::Test.LogTestFailure) at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/overdub.jl:0
 [3] #53 at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:169 [inlined]
 [4] overdub(::Cassette.Context{nametype(##379),SimpleMock.Metadata{true},Nothing,Cassette.var"##PassType#256",Nothing,Nothing}, ::var"#53#75", ::Mock{SimpleMock.var"#15#17"{SimpleMock.var"#15#16#18"}}) at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/overdub.jl:0
 [5] invokelatest(::Any, ::Any, ::Vararg{Any,N} where N; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at ./essentials.jl:710
 [6] invokelatest(::Any, ::Any, ::Vararg{Any,N} where N) at ./essentials.jl:709
 [7] mock(::Function, ::Symbol, ::Function; filters::Array{SimpleMock.var"#9#10"{Tuple{}},1}) at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/src/mock_fun.jl:140
 [8] top-level scope at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:168
 [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [10] top-level scope at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:166
 [11] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [12] top-level scope at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:154
Keyword arguments are discarded when recursing: Log Test Failed at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:174
  Expression: baz(; foo = :baz)
  Log Pattern: (:warn, "Discarding keyword arguments")
  Captured Logs: 

Stacktrace:
 [1] record at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/logging.jl:89 [inlined]
 [2] overdub(::Cassette.Context{nametype(##379),SimpleMock.Metadata{false},Nothing,Cassette.var"##PassType#256",Nothing,Nothing}, ::typeof(Test.record), ::Test.DefaultTestSet, ::Test.LogTestFailure) at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/overdub.jl:0
 [3] #57 at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:174 [inlined]
 [4] overdub(::Cassette.Context{nametype(##379),SimpleMock.Metadata{false},Nothing,Cassette.var"##PassType#256",Nothing,Nothing}, ::var"#57#79", ::Mock{SimpleMock.var"#15#17"{SimpleMock.var"#15#16#18"}}) at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/overdub.jl:0
 [5] invokelatest(::Any, ::Any, ::Vararg{Any,N} where N; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at ./essentials.jl:710
 [6] invokelatest(::Any, ::Any, ::Vararg{Any,N} where N) at ./essentials.jl:709
 [7] mock(::Function, ::Symbol, ::Function; filters::Array{Function,1}) at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/src/mock_fun.jl:140
 [8] mock(::Function, ::Symbol, ::Function) at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/src/mock_fun.jl:117
 [9] top-level scope at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:173
 [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [11] top-level scope at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:166
 [12] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [13] top-level scope at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:154
Keyword arguments are discarded when recursing: Test Failed at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:177
  Expression: ncalls(f) == 2 && has_calls(f, Call(), Call())
Stacktrace:
 [1] #57 at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:177 [inlined]
 [2] overdub(::Cassette.Context{nametype(##379),SimpleMock.Metadata{false},Nothing,Cassette.var"##PassType#256",Nothing,Nothing}, ::var"#57#79", ::Mock{SimpleMock.var"#15#17"{SimpleMock.var"#15#16#18"}}) at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/overdub.jl:0
 [3] invokelatest(::Any, ::Any, ::Vararg{Any,N} where N; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at ./essentials.jl:710
 [4] invokelatest(::Any, ::Any, ::Vararg{Any,N} where N) at ./essentials.jl:709
 [5] mock(::Function, ::Symbol, ::Function; filters::Array{Function,1}) at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/src/mock_fun.jl:140
 [6] mock(::Function, ::Symbol, ::Function) at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/src/mock_fun.jl:117
 [7] top-level scope at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:173
 [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [9] top-level scope at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:166
 [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [11] top-level scope at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:154
Metadata records original functions and not keyword wrappers: Test Failed at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:196
  Expression: eq
Stacktrace:
 [1] (::var"#64#89"{Bool,typeof(kw_f)})(::SimpleMock.Metadata{true}) at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:196
 [2] #1 at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/src/metadata.jl:54 [inlined]
 [3] _all(::SimpleMock.var"#1#2"{SimpleMock.Metadata{true}}, ::Array{var"#64#89"{Bool,typeof(kw_f)},1}, ::Colon) at ./reduce.jl:820
 [4] all(::Function, ::Array{var"#64#89"{Bool,typeof(kw_f)},1}; dims::Function) at ./reducedim.jl:665
 [5] all(::Function, ::Array{var"#64#89"{Bool,typeof(kw_f)},1}) at ./reducedim.jl:665
 [6] should_mock(::SimpleMock.Metadata{true}, ::Tuple{typeof(kw_g),UnionAll}) at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/src/metadata.jl:54
 [7] #overdub#97 at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/src/mock_fun.jl:210 [inlined]
 [8] overdub at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/src/mock_fun.jl:219 [inlined]
 [9] #kw_f#93 at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:183 [inlined]
 [10] overdub(::Cassette.Context{nametype(##386),SimpleMock.Metadata{true},Nothing,Cassette.var"##PassType#256",Nothing,Nothing}, ::var"##kw_f#93", ::Int64, ::typeof(kw_f)) at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/overdub.jl:0 (repeats 2 times)
 [11] #65 at ./none:0 [inlined]
 [12] overdub(::Cassette.Context{nametype(##386),SimpleMock.Metadata{true},Nothing,Cassette.var"##PassType#256",Nothing,Nothing}, ::var"#65#90", ::Mock{SimpleMock.var"#15#17"{SimpleMock.var"#15#16#18"}}) at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/overdub.jl:0
 [13] invokelatest(::Any, ::Any, ::Vararg{Any,N} where N; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at ./essentials.jl:710
 [14] invokelatest(::Any, ::Any, ::Vararg{Any,N} where N) at ./essentials.jl:709
 [15] mock(::Function, ::Symbol, ::Function; filters::Array{var"#64#89"{Bool,typeof(kw_f)},1}) at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/src/mock_fun.jl:140
 [16] #mock#27 at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/src/mock_fun.jl:113 [inlined]
 [17] top-level scope at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:202
 [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [19] top-level scope at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:182
 [20] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [21] top-level scope at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:154
Metadata records original functions and not keyword wrappers: Test Failed at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:196
  Expression: eq
Stacktrace:
 [1] (::var"#64#89"{Bool,var"#95#99"})(::SimpleMock.Metadata{true}) at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:196
 [2] #1 at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/src/metadata.jl:54 [inlined]
 [3] _all(::SimpleMock.var"#1#2"{SimpleMock.Metadata{true}}, ::Array{var"#64#89"{Bool,var"#95#99"},1}, ::Colon) at ./reduce.jl:820
 [4] all(::Function, ::Array{var"#64#89"{Bool,var"#95#99"},1}; dims::Function) at ./reducedim.jl:665
 [5] all(::Function, ::Array{var"#64#89"{Bool,var"#95#99"},1}) at ./reducedim.jl:665
 [6] should_mock(::SimpleMock.Metadata{true}, ::Tuple{var"#97#100",UnionAll}) at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/src/metadata.jl:54
 [7] #overdub#101 at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/src/mock_fun.jl:210 [inlined]
 [8] overdub(::Cassette.Context{nametype(##391),SimpleMock.Metadata{true},Nothing,Cassette.var"##PassType#256",Nothing,Nothing}, ::var"#97#100##kw", ::NamedTuple{(:x,),Tuple{Int64}}, ::var"#97#100") at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/src/mock_fun.jl:219
 [9] #95#96 at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:185 [inlined]
 [10] overdub(::Cassette.Context{nametype(##391),SimpleMock.Metadata{true},Nothing,Cassette.var"##PassType#256",Nothing,Nothing}, ::var"##95#96", ::Int64, ::var"#95#99") at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/overdub.jl:0 (repeats 2 times)
 [11] #66 at ./none:0 [inlined]
 [12] overdub(::Cassette.Context{nametype(##391),SimpleMock.Metadata{true},Nothing,Cassette.var"##PassType#256",Nothing,Nothing}, ::var"#66#91", ::Mock{SimpleMock.var"#15#17"{SimpleMock.var"#15#16#18"}}) at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/overdub.jl:0
 [13] invokelatest(::Any, ::Any, ::Vararg{Any,N} where N; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at ./essentials.jl:710
 [14] invokelatest(::Any, ::Any, ::Vararg{Any,N} where N) at ./essentials.jl:709
 [15] mock(::Function, ::Symbol, ::Function; filters::Array{var"#64#89"{Bool,var"#95#99"},1}) at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/src/mock_fun.jl:140
 [16] #mock#27 at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/src/mock_fun.jl:113 [inlined]
 [17] top-level scope at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:204
 [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [19] top-level scope at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:182
 [20] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [21] top-level scope at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/mock_fun.jl:154
Test Summary:                                                      | Pass  Fail  Broken  Total
SimpleMock.jl                                                      |  125     5       1    131
  Mock type                                                        |   67                   67
  mock function                                                    |   58     5       1     64
    Basics                                                         |    7                    7
    Non-Mock mocks                                                 |    1                    1
    Specific methods                                               |    3                    3
    Multiple mocks                                                 |    4                    4
    Varargs                                                        |    5                    5
    Parametric types                                               |   11                   11
    mock does not overwrite methods                                |    1                    1
    Reusing Context                                                |    2                    2
    Any context name is valid                                      |    1                    1
    Filters                                                        |   16                   16
    Keyword arguments                                              |    7     5       1     13
      Keyword arguments are passed to mocked functions             |    2                    2
      Keyword arguments are discarded when recursing               |    2     3              5
      Metadata records original functions and not keyword wrappers |    3     2       1      6
ERROR: LoadError: Some tests did not pass: 125 passed, 5 failed, 0 errored, 1 broken.
in expression starting at /home/pkgeval/.julia/packages/SimpleMock/Eg0dX/test/runtests.jl:9
ERROR: Package SimpleMock errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1516
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:303
 [5] #test#68 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [11] top-level scope at none:16
