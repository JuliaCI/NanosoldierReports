Julia Version 1.6.0-DEV.86
Commit 532d4a0aee (2020-05-23 04:20 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed InvertedIndices ───────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataAPI ───────────────────── v1.3.0
  Installed Reexport ──────────────────── v0.2.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed SimilaritySearch ──────────── v0.3.19
  Installed PooledArrays ──────────────── v0.5.3
  Installed Compat ────────────────────── v3.10.0
  Installed TableTraits ───────────────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.16
  Installed CategoricalArrays ─────────── v0.7.7
  Installed JSON ──────────────────────── v0.21.0
  Installed Parsers ───────────────────── v1.0.4
  Installed OrderedCollections ────────── v1.2.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.4
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.16
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_ypa5yD/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_ypa5yD/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.16
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9316620069742203
[ Info: 0.8302954188982645
[ Info: 0.5524173142015933
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3289614958812793
mean(cdnet.distances) = 0.40786287739872934
mean(crand.distances) = 0.3436835853258769
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1943359375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1943359375,"f1":null,"seconds":3.4365803003311157e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":6.2265625,"distances_sum":529.8032359108507}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2099609375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2099609375,"f1":null,"seconds":2.21841037273407e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":6.65625,"distances_sum":592.9180635335665}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2099609375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2099609375,"f1":null,"seconds":2.21841037273407e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":6.65625,"distances_sum":592.9180635335665}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.867370650183151,"seconds":3.7811696529388428e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.546875,"distances_sum":2368.4900405242115}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.867370650183151,"seconds":3.7811696529388428e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.546875,"distances_sum":2368.4900405242115}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9595066391941396,"seconds":3.822147846221924e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.8359375,"distances_sum":3121.8789490695954}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9614239926739929,"seconds":3.993511199951172e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.8515625,"distances_sum":3132.005180656516}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9614239926739929,"seconds":3.993511199951172e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.8515625,"distances_sum":3132.005180656516}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9614239926739929,"seconds":3.993511199951172e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.8515625,"distances_sum":3132.005180656516}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8469936313686323,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.375,"distances_sum":2030.1617958388003}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.74609375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.74609375,"f1":0.8469936313686323,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.375,"distances_sum":2030.1617958388003}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9519230769230773,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8359375,"distances_sum":2785.4476545505745}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9597527472527478,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.90625,"distances_sum":2855.734660656779}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9597527472527478,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.90625,"distances_sum":2855.734660656779}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9709306318681322,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.921875,"distances_sum":2906.0838626074665}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9709306318681322,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.921875,"distances_sum":2906.0838626074665}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9709306318681322,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.921875,"distances_sum":2906.0838626074665}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2158203125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2158203125,"f1":null,"seconds":3.557652235031128e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.2890625,"distances_sum":524.7909535474823}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2138671875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2138671875,"f1":null,"seconds":3.557652235031128e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.28125,"distances_sum":501.74408332576394}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.220703125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.220703125,"f1":null,"seconds":3.4887343645095825e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.1171875,"distances_sum":565.5775182358707}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.220703125,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.220703125,"f1":null,"seconds":3.4887343645095825e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.1171875,"distances_sum":565.5775182358707}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8551287254412262,"seconds":5.187466740608215e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8671875,"distances_sum":2026.7267228939556}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3994140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3994140625,"f1":null,"seconds":3.870576620101929e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.0234375,"distances_sum":931.7151433164695}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.412109375, conf: {"ssize":6,"bsize":2}, perf: {"precision":null,"recall":0.412109375,"f1":null,"seconds":3.771856427192688e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.1171875,"distances_sum":972.1278332268755}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.7809450965700973,"seconds":4.680827260017395e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.421875,"distances_sum":1631.7299543741817}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8675416597291605,"seconds":5.04031777381897e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.828125,"distances_sum":2101.7558281838287}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.595703125, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.595703125,"f1":0.7330242673992681,"seconds":4.3585896492004395e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.7890625,"distances_sum":1485.8832669371272}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.40625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.40625,"f1":null,"seconds":3.855675458908081e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.328125,"distances_sum":991.9368956531271}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":8,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8675416597291605,"seconds":5.04031777381897e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.828125,"distances_sum":2101.7558281838287}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.956684981684982,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9296875,"distances_sum":2715.7627596253947}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9571657509157517,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9140625,"distances_sum":2704.1752664564}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9536718489843494,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.890625,"distances_sum":2699.675224913688}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9484832875457879,"seconds":5.342066287994385e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9140625,"distances_sum":2663.594098058492}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9397664835164841,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.90625,"distances_sum":2580.985391564857}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.956684981684982,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9296875,"distances_sum":2715.7627596253947}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.923828125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.956684981684982,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9296875,"distances_sum":2715.7627596253947}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3408203125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3408203125,"f1":null,"seconds":3.7178397178649902e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.78125,"distances_sum":905.0188835075435}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3408203125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3408203125,"f1":null,"seconds":3.7178397178649902e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.78125,"distances_sum":905.0188835075435}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8467100607725617,"seconds":5.23589551448822e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.3359375,"distances_sum":2108.559378706119}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.8996831293706302,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.53125,"distances_sum":2445.136163167617}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5078125, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.5078125,"f1":null,"seconds":4.3548643589019775e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.953125,"distances_sum":1327.2098159020147}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.7825291028416036,"seconds":5.088746547698975e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.0546875,"distances_sum":1825.656328846808}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7863891317016326,"seconds":5.1371753215789795e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.078125,"distances_sum":1793.1538980126595}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8330078125,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8330078125,"f1":0.8996831293706302,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.53125,"distances_sum":2445.136163167617}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9499713827838833,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.78125,"distances_sum":2822.0034703578426}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9247429653679663,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.625,"distances_sum":2645.0934355919353}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.932266171328672,"seconds":4.479661583900452e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.6640625,"distances_sum":2665.1461464240906}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.923743964368965,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.671875,"distances_sum":2585.7306559959216}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9499713827838833,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.78125,"distances_sum":2822.0034703578426}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9499713827838833,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.78125,"distances_sum":2822.0034703578426}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.19140625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.19140625,"f1":null,"seconds":3.1851232051849365e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":6.0546875,"distances_sum":474.7279034775882}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.19140625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.19140625,"f1":null,"seconds":3.1851232051849365e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":6.0546875,"distances_sum":474.7279034775882}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8474770021645031,"seconds":3.5222619771957397e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.8671875,"distances_sum":1668.0967399209653}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6376953125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6376953125,"f1":0.7661498223998232,"seconds":3.0472874641418457e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.15625,"distances_sum":1376.6711493418486}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7490234375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7490234375,"f1":0.8474770021645031,"seconds":3.5222619771957397e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.8671875,"distances_sum":1668.0967399209653}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9357657967032972,"seconds":3.730878233909607e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.5703125,"distances_sum":2114.107095602772}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9376347610722614,"seconds":3.7848949432373047e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6328125,"distances_sum":2100.063878515303}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9376347610722614,"seconds":3.7848949432373047e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6328125,"distances_sum":2100.063878515303}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9434383325008331,"seconds":3.7979334592819214e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.609375,"distances_sum":2138.322416566764}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.970703125, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.970703125,"f1":0.9838541666666668,"seconds":6.843358278274536e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9296875,"distances_sum":2394.4459635374915}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9602735805860808,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.765625,"distances_sum":2238.0482941500636}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9445741758241765,"seconds":1.3509765267372131e-5,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6796875,"distances_sum":2124.2247042752047}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9389938186813194,"seconds":6.165355443954468e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6328125,"distances_sum":2127.795386251177}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.970703125,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9838541666666668,"seconds":6.843358278274536e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9296875,"distances_sum":2394.4459635374915}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.970703125,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9838541666666668,"seconds":6.843358278274536e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9296875,"distances_sum":2394.4459635374915}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6513671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6513671875,"f1":0.7792197385947394,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.4453125,"distances_sum":1266.191712216027}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8458343739593748,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.125,"distances_sum":1498.8358139872441}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.744140625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.744140625,"f1":0.8458343739593748,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.125,"distances_sum":1498.8358139872441}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9333848443223449,"seconds":6.282702088356018e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.4765625,"distances_sum":1913.871657140602}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9402415293040298,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.5703125,"distances_sum":1959.5631083336352}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9552884615384623,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.71875,"distances_sum":2103.482508840024}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9675251831501835,"seconds":2.9416754841804504e-5,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8515625,"distances_sum":2164.2689768577006}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9435554029304034,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.5625,"distances_sum":1975.463167674954}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9675251831501835,"seconds":2.9416754841804504e-5,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8515625,"distances_sum":2164.2689768577006}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9789091117216121,"seconds":6.465241312980652e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9453125,"distances_sum":2216.9530672692745}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9739583333333338,"seconds":6.476417183876038e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.90625,"distances_sum":2183.348921673801}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9709478021978026,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.921875,"distances_sum":2159.324061482867}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9721726190476194,"seconds":6.070360541343689e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.90625,"distances_sum":2171.8681707740293}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9702781593406595,"seconds":5.956739187240601e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.859375,"distances_sum":2173.1019158514196}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9728250915750919,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.90625,"distances_sum":2171.0480872061758}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9789091117216121,"seconds":6.465241312980652e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9453125,"distances_sum":2216.9530672692745}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9789091117216121,"seconds":6.465241312980652e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9453125,"distances_sum":2216.9530672692745}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8630442474192483,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.078125,"distances_sum":1630.178924723535}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.8630442474192483,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.078125,"distances_sum":1630.178924723535}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9426256035631038,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.71875,"distances_sum":2029.2844223966465}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.900390625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.9426256035631038,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.71875,"distances_sum":2029.2844223966465}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9433353105228112,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.5703125,"distances_sum":2037.7213492766598}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9534684065934069,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.765625,"distances_sum":2107.4548977292134}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9534684065934069,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.765625,"distances_sum":2107.4548977292134}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9534684065934069,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.765625,"distances_sum":2107.4548977292134}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5556640625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5556640625,"f1":0.695137501387502,"seconds":4.02890145778656e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.796875,"distances_sum":1234.81247688259}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5947265625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5947265625,"f1":0.7283048548673555,"seconds":4.230067133903503e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.9921875,"distances_sum":1362.9506467239285}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5947265625,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.5947265625,"f1":0.7283048548673555,"seconds":4.230067133903503e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.9921875,"distances_sum":1362.9506467239285}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9327152014652021,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.5703125,"distances_sum":2211.2018825560067}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.9327152014652021,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.5703125,"distances_sum":2211.2018825560067}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9453957500832509,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.65625,"distances_sum":2330.5902819295675}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9453957500832509,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.65625,"distances_sum":2330.5902819295675}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.904296875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9453957500832509,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.65625,"distances_sum":2330.5902819295675}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8573952089577098,"seconds":5.0533562898635864e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.296875,"distances_sum":1736.9552391170337}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4111328125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4111328125,"f1":null,"seconds":3.6209821701049805e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.21875,"distances_sum":867.9094970628806}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8573952089577098,"seconds":5.0533562898635864e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.296875,"distances_sum":1736.9552391170337}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9453983516483522,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7265625,"distances_sum":2275.4996270862193}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8046875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8046875,"f1":0.8849962537462547,"seconds":5.19677996635437e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.3515625,"distances_sum":1888.8675970846293}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9453983516483522,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7265625,"distances_sum":2275.4996270862193}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9584706959706963,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8359375,"distances_sum":2350.4268987709293}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9628548534798539,"seconds":5.4854899644851685e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.796875,"distances_sum":2399.118295028342}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9652758699633703,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8515625,"distances_sum":2407.508511928436}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.94632554945055,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7109375,"distances_sum":2303.5951791990497}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9618875915750918,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.828125,"distances_sum":2402.3738552755794}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9652758699633703,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8515625,"distances_sum":2407.508511928436}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9652758699633703,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8515625,"distances_sum":2407.508511928436}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3857421875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3857421875,"f1":null,"seconds":3.473833203315735e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":5.6640625,"distances_sum":806.0187270857002}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3857421875,"state":{"ssize":4,"bsize":2},"perf":{"precision":null,"recall":0.3857421875,"f1":null,"seconds":3.473833203315735e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":5.6640625,"distances_sum":806.0187270857002}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9077209249084258,"seconds":5.142763257026672e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.4765625,"distances_sum":2031.401215684062}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5927734375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5927734375,"f1":0.7274655899655903,"seconds":4.06801700592041e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.0234375,"distances_sum":1293.0219898062237}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5673828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5673828125,"f1":0.7067607739482746,"seconds":4.168599843978882e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.8359375,"distances_sum":1222.13881107682}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8408203125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8408203125,"f1":0.9077209249084258,"seconds":5.142763257026672e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.4765625,"distances_sum":2031.401215684062}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9635302197802201,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.859375,"distances_sum":2360.480640509254}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9381472693972699,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6171875,"distances_sum":2241.9490920247886}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9274017649017655,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6328125,"distances_sum":2162.1887812517207}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9361581127206131,"seconds":5.31412661075592e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.609375,"distances_sum":2242.700882533085}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9635302197802201,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.859375,"distances_sum":2360.480640509254}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9635302197802201,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.859375,"distances_sum":2360.480640509254}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8461944305694314,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.2265625,"distances_sum":1678.214890033627}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4296875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4296875,"f1":null,"seconds":3.779307007789612e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":6.078125,"distances_sum":936.5511865072347}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4169921875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4169921875,"f1":null,"seconds":3.3508986234664917e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":5.8359375,"distances_sum":856.984145293098}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.744140625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.744140625,"f1":0.8461944305694314,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.2265625,"distances_sum":1678.214890033627}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9259271978021985,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.5625,"distances_sum":2149.9701837863927}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9014173326673336,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.40625,"distances_sum":1994.9204695635005}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.873046875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.873046875,"f1":0.9259271978021985,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.5625,"distances_sum":2149.9701837863927}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9572630494505497,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.8359375,"distances_sum":2316.949956149677}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9651614010989014,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.875,"distances_sum":2360.7239101526675}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9568108974358981,"seconds":5.414709448814392e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.75,"distances_sum":2344.4735291523116}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9435012903762909,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.765625,"distances_sum":2234.693043817843}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9651614010989014,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.875,"distances_sum":2360.7239101526675}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9651614010989014,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.875,"distances_sum":2360.7239101526675}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2431640625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2431640625,"f1":null,"seconds":3.4440308809280396e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.359375,"distances_sum":537.0982843124705}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2431640625,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.2431640625,"f1":null,"seconds":3.4440308809280396e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.359375,"distances_sum":537.0982843124705}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2431640625,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.2431640625,"f1":null,"seconds":3.4440308809280396e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.359375,"distances_sum":537.0982843124705}}, n: 9
mean(cfft.distances) = 0.89420855090811
mean(cdnet.distances) = 0.3896711165229158
mean(crand.distances) = 0.5048249786226987
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8911111111111111
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8755555555555556
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8822222222222221
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8288888888888888
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9333333333333332
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9444444444444445
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8844444444444445
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8777777777777778
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8377777777777778
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8888888888888888
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8933333333333334
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9266666666666667
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8333333333333334
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8777777777777778
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8444444444444444
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9199999999999999
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.908888888888889
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9066666666666667
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8822222222222221
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8533333333333334
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8555555555555555
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9066666666666667
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 11, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 2, 3, 2, 3, 3, 2, 3, 1]
acc = 0.9466666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 11, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 2, 3, 2, 3, 3, 2, 3, 1]
acc = 0.9466666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 11, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 2, 3, 2, 3, 3, 2, 3, 1]
acc = 0.9466666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 11, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 2, 3, 2, 3, 3, 2, 3, 1]
acc = 0.9466666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 11, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 2, 3, 2, 3, 3, 2, 3, 1]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 11, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 2, 3, 2, 3, 3, 2, 3, 1]
acc = 0.9
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 11, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 2, 3, 2, 3, 3, 2, 3, 1]
acc = 0.9533333333333334
*** finished computation of 12 references, err: [Inf, 0.5758857876062393] ***
*** center 1: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.24257649975232612] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24257649975232612, 0.19255662190475162] ***
*** finished computation of 7 references, err: [Inf, 0.24257649975232612, 0.19255662190475162] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 92, 23]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 92), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 7, 0]]
** centroid: 3, normalized-entropy: 0.48791799258948565, [(1, 59), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [102, 19, 0]]
** centroid: 4, normalized-entropy: 0.6271441658983906, [(1, 102), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [89, 34, 0]]
** centroid: 5, normalized-entropy: 0.8505306682780943, [(1, 89), (2, 34)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 98, 1]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23797076270431727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23797076270431727, 0.19114551849819877] ***
*** finished computation of 7 references, err: [Inf, 0.23797076270431727, 0.19114551849819877] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 98, 4]]
** centroid: 1, normalized-entropy: 0.23868451135100152, [(2, 98), (3, 4)]
*** center 2: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 13, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 52), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [115, 14, 0]]
** centroid: 4, normalized-entropy: 0.4954572959859703, [(1, 115), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [83, 31, 0]]
** centroid: 5, normalized-entropy: 0.8442202034297602, [(1, 83), (2, 31)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 86, 13]]
** centroid: 6, normalized-entropy: 0.5610284863400681, [(2, 86), (3, 13)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23350235597248645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23350235597248645, 0.19253696682981622] ***
*** finished computation of 7 references, err: [Inf, 0.23350235597248645, 0.19253696682981622] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [119, 3, 0]]
** centroid: 1, normalized-entropy: 0.16648978563002756, [(1, 119), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 7, 0]]
** centroid: 2, normalized-entropy: 0.43949698692151346, [(1, 70), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 12]]
** centroid: 3, normalized-entropy: 0.6242741010130388, [(2, 65), (3, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 50, 0]]
** centroid: 5, normalized-entropy: 0.9989326546260583, [(1, 54), (2, 50)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [64, 42, 0]]
** centroid: 6, normalized-entropy: 0.9687003436508602, [(1, 64), (2, 42)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 71, 7]]
** centroid: 7, normalized-entropy: 0.4356133734874324, [(2, 71), (3, 7)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3835535259978907] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3835535259978907, 0.29832681363263913] ***
*** finished computation of 3 references, err: [Inf, 0.3835535259978907, 0.29832681363263913] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [117, 182, 17]]
** centroid: 1, normalized-entropy: 0.7672116813059034, [(1, 117), (2, 182), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [121, 60, 0]]
** centroid: 2, normalized-entropy: 0.91644319400731, [(1, 121), (2, 60)]
*** center 3: selecting labels [1] (freq >= 1) [from [169, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3871095517630699] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3871095517630699, 0.31646872353160577] ***
*** finished computation of 3 references, err: [Inf, 0.3871095517630699, 0.31646872353160577] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [265, 71, 0]]
** centroid: 1, normalized-entropy: 0.7439784016798577, [(1, 265), (2, 71)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 139, 24]]
** centroid: 2, normalized-entropy: 0.6028882209434993, [(2, 139), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [128, 40, 0]]
** centroid: 3, normalized-entropy: 0.7918583525674836, [(1, 128), (2, 40)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.41200717443228885] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41200717443228885, 0.30153790877565095] ***
*** finished computation of 3 references, err: [Inf, 0.41200717443228885, 0.30153790877565095] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [115, 140, 19]]
** centroid: 1, normalized-entropy: 0.8124238118284831, [(1, 115), (2, 140), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [117, 98, 0]]
** centroid: 2, normalized-entropy: 0.9943591895217918, [(1, 117), (2, 98)]
*** center 3: selecting labels [1] (freq >= 1) [from [178, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1898182092189744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1898182092189744, 0.15036132275868017] ***
*** finished computation of 7 references, err: [Inf, 0.1898182092189744, 0.15036132275868017] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [103, 3, 0]]
** centroid: 1, normalized-entropy: 0.1858030790723033, [(1, 103), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 12, 0]]
** centroid: 2, normalized-entropy: 0.5705411428522262, [(1, 77), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 70, 17]]
** centroid: 3, normalized-entropy: 0.7126368350739763, [(2, 70), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 89, 0]]
** centroid: 5, normalized-entropy: 0.814590929490591, [(1, 30), (2, 89)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [37, 68, 0]]
** centroid: 6, normalized-entropy: 0.9361764916347493, [(1, 37), (2, 68)]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17968112311564732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17968112311564732, 0.15080502928783376] ***
*** finished computation of 7 references, err: [Inf, 0.17968112311564732, 0.15080502928783376] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [128, 3, 0]]
** centroid: 1, normalized-entropy: 0.15743149388734748, [(1, 128), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 14, 0]]
** centroid: 2, normalized-entropy: 0.710676853856123, [(1, 58), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 51, 24]]
** centroid: 3, normalized-entropy: 0.9043814577244941, [(2, 51), (3, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 88, 0]]
** centroid: 5, normalized-entropy: 0.7624233236147429, [(1, 25), (2, 88)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 94, 0]]
** centroid: 6, normalized-entropy: 0.14609425012013613, [(1, 2), (2, 94)]
*** center 7: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19828298625520904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19828298625520904, 0.15116036711264166] ***
*** finished computation of 7 references, err: [Inf, 0.19828298625520904, 0.15116036711264166] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [11, 113, 0]]
** centroid: 1, normalized-entropy: 0.4321481607261778, [(1, 11), (2, 113)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [67, 28, 0]]
** centroid: 3, normalized-entropy: 0.8747617811911199, [(1, 67), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [70, 37, 0]]
** centroid: 4, normalized-entropy: 0.9302559049579806, [(1, 70), (2, 37)]
*** center 5: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 60, 19]]
** centroid: 7, normalized-entropy: 0.7958812735955936, [(2, 60), (3, 19)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3688101445886869] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3688101445886869, 0.23670689264373915] ***
*** starting iteration: 2; err: [Inf, 0.3688101445886869, 0.23670689264373915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3688101445886869, 0.23670689264373915, 0.235004734680023] ***
*** starting iteration: 3; err: [Inf, 0.3688101445886869, 0.23670689264373915, 0.235004734680023] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3688101445886869, 0.23670689264373915, 0.235004734680023, 0.2346853222096669] ***
*** finished computation of 3 references, err: [Inf, 0.3688101445886869, 0.23670689264373915, 0.235004734680023, 0.2346853222096669] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [252, 1, 0]]
** centroid: 1, normalized-entropy: 0.03724440188016406, [(1, 252), (2, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [12, 187, 17]]
** centroid: 2, normalized-entropy: 0.44188455822672296, [(1, 12), (2, 187), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [143, 54, 0]]
** centroid: 3, normalized-entropy: 0.8473029551105034, [(1, 143), (2, 54)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3224455799762232] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3224455799762232, 0.250775293308845] ***
*** starting iteration: 2; err: [Inf, 0.3224455799762232, 0.250775293308845] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3224455799762232, 0.250775293308845, 0.2451259036628024] ***
*** starting iteration: 3; err: [Inf, 0.3224455799762232, 0.250775293308845, 0.2451259036628024] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3224455799762232, 0.250775293308845, 0.2451259036628024, 0.24401519720957823] ***
*** finished computation of 3 references, err: [Inf, 0.3224455799762232, 0.250775293308845, 0.2451259036628024, 0.24401519720957823] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [105, 148, 22]]
** centroid: 1, normalized-entropy: 0.8220481822635175, [(1, 105), (2, 148), (3, 22)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [108, 102, 2]]
** centroid: 2, normalized-entropy: 0.6732017531803652, [(1, 108), (2, 102), (3, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [180, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3180835613369316] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3180835613369316, 0.23865570888101964] ***
*** starting iteration: 2; err: [Inf, 0.3180835613369316, 0.23865570888101964] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3180835613369316, 0.23865570888101964, 0.2353839852890444] ***
*** starting iteration: 3; err: [Inf, 0.3180835613369316, 0.23865570888101964, 0.2353839852890444] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3180835613369316, 0.23865570888101964, 0.2353839852890444, 0.2348190347623566] ***
*** finished computation of 3 references, err: [Inf, 0.3180835613369316, 0.23865570888101964, 0.2353839852890444, 0.2348190347623566] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [105, 153, 19]]
** centroid: 1, normalized-entropy: 0.8004376597833338, [(1, 105), (2, 153), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [126, 85, 0]]
** centroid: 2, normalized-entropy: 0.9725897103531845, [(1, 126), (2, 85)]
*** center 3: selecting labels [1] (freq >= 1) [from [179, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.26034190212082753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26034190212082753, 0.22489919357474436] ***
*** starting iteration: 2; err: [Inf, 0.26034190212082753, 0.22489919357474436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26034190212082753, 0.22489919357474436, 0.19367960643291743] ***
*** starting iteration: 3; err: [Inf, 0.26034190212082753, 0.22489919357474436, 0.19367960643291743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26034190212082753, 0.22489919357474436, 0.19367960643291743, 0.1912074140790436] ***
*** finished computation of 7 references, err: [Inf, 0.26034190212082753, 0.22489919357474436, 0.19367960643291743, 0.1912074140790436] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [117, 17, 0]]
** centroid: 1, normalized-entropy: 0.5487791867822941, [(1, 117), (2, 17)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 69, 5]]
** centroid: 2, normalized-entropy: 0.35678001438394347, [(2, 69), (3, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 86, 12]]
** centroid: 3, normalized-entropy: 0.5363596511250623, [(2, 86), (3, 12)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [87, 8, 0]]
** centroid: 4, normalized-entropy: 0.4168441963431652, [(1, 87), (2, 8)]
*** center 5: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [16, 62, 0]]
** centroid: 6, normalized-entropy: 0.7320666900931937, [(1, 16), (2, 62)]
*** center 7: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22541312519055995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22541312519055995, 0.19704359976052568] ***
*** starting iteration: 2; err: [Inf, 0.22541312519055995, 0.19704359976052568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22541312519055995, 0.19704359976052568, 0.19309279396784432] ***
*** starting iteration: 3; err: [Inf, 0.22541312519055995, 0.19704359976052568, 0.19309279396784432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22541312519055995, 0.19704359976052568, 0.19309279396784432, 0.19065376111959711] ***
*** finished computation of 7 references, err: [Inf, 0.22541312519055995, 0.19704359976052568, 0.19309279396784432, 0.19065376111959711] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [98, 8, 0]]
** centroid: 1, normalized-entropy: 0.3860189005698936, [(1, 98), (2, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [43, 74, 0]]
** centroid: 3, normalized-entropy: 0.9487499032694516, [(1, 43), (2, 74)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 47, 24]]
** centroid: 4, normalized-entropy: 0.9229192878686723, [(2, 47), (3, 24)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 100, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [94, 21, 0]]
** centroid: 6, normalized-entropy: 0.685750764543924, [(1, 94), (2, 21)]
*** center 7: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2669325834628882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2669325834628882, 0.22346295118283038] ***
*** starting iteration: 2; err: [Inf, 0.2669325834628882, 0.22346295118283038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2669325834628882, 0.22346295118283038, 0.21157621918455594] ***
*** starting iteration: 3; err: [Inf, 0.2669325834628882, 0.22346295118283038, 0.21157621918455594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2669325834628882, 0.22346295118283038, 0.21157621918455594, 0.20271310816914112] ***
*** finished computation of 7 references, err: [Inf, 0.2669325834628882, 0.22346295118283038, 0.21157621918455594, 0.20271310816914112] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [11, 66, 0]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(1, 11), (2, 66)]
*** center 2: selecting labels [1] (freq >= 1) [from [143, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 50, 19]]
** centroid: 4, normalized-entropy: 0.849054424254048, [(2, 50), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [15, 63, 0]]
** centroid: 5, normalized-entropy: 0.7062740891876008, [(1, 15), (2, 63)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [58, 51, 0]]
** centroid: 6, normalized-entropy: 0.9970229471810967, [(1, 58), (2, 51)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [60, 8, 0]]
** centroid: 7, normalized-entropy: 0.5225593745369407, [(1, 60), (2, 8)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38080743085257374] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38080743085257374, 0.2630073266752713] ***
*** starting iteration: 2; err: [Inf, 0.38080743085257374, 0.2630073266752713] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38080743085257374, 0.2630073266752713, 0.24215627312883958] ***
*** starting iteration: 3; err: [Inf, 0.38080743085257374, 0.2630073266752713, 0.24215627312883958] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38080743085257374, 0.2630073266752713, 0.24215627312883958, 0.23880348214739794] ***
*** starting iteration: 4; err: [Inf, 0.38080743085257374, 0.2630073266752713, 0.24215627312883958, 0.23880348214739794] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38080743085257374, 0.2630073266752713, 0.24215627312883958, 0.23880348214739794, 0.2379949865331342] ***
*** finished computation of 3 references, err: [Inf, 0.38080743085257374, 0.2630073266752713, 0.24215627312883958, 0.23880348214739794, 0.2379949865331342] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [108, 109, 5]]
** centroid: 1, normalized-entropy: 0.7147432015905655, [(1, 108), (2, 109), (3, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [186, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [113, 133, 12]]
** centroid: 3, normalized-entropy: 0.7699404402867904, [(1, 113), (2, 133), (3, 12)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2863512856612119] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2863512856612119, 0.2703217566711479] ***
*** starting iteration: 2; err: [Inf, 0.2863512856612119, 0.2703217566711479] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2863512856612119, 0.2703217566711479, 0.2612324899741109] ***
*** starting iteration: 3; err: [Inf, 0.2863512856612119, 0.2703217566711479, 0.2612324899741109] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2863512856612119, 0.2703217566711479, 0.2612324899741109, 0.2397004721729529] ***
*** starting iteration: 4; err: [Inf, 0.2863512856612119, 0.2703217566711479, 0.2612324899741109, 0.2397004721729529] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2863512856612119, 0.2703217566711479, 0.2612324899741109, 0.2397004721729529, 0.23292428610505705] ***
*** starting iteration: 5; err: [Inf, 0.2863512856612119, 0.2703217566711479, 0.2612324899741109, 0.2397004721729529, 0.23292428610505705] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2863512856612119, 0.2703217566711479, 0.2612324899741109, 0.2397004721729529, 0.23292428610505705, 0.23262033957326184] ***
*** finished computation of 3 references, err: [Inf, 0.2863512856612119, 0.2703217566711479, 0.2612324899741109, 0.2397004721729529, 0.23292428610505705, 0.23262033957326184] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [214, 32, 0]]
** centroid: 1, normalized-entropy: 0.5576611106650714, [(1, 214), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [179, 38, 0]]
** centroid: 2, normalized-entropy: 0.6692734921626446, [(1, 179), (2, 38)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 180, 24]]
** centroid: 3, normalized-entropy: 0.5225593745369407, [(2, 180), (3, 24)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4095391009643121] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4095391009643121, 0.23989615793377608] ***
*** starting iteration: 2; err: [Inf, 0.4095391009643121, 0.23989615793377608] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4095391009643121, 0.23989615793377608, 0.23597015415470504] ***
*** starting iteration: 3; err: [Inf, 0.4095391009643121, 0.23989615793377608, 0.23597015415470504] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4095391009643121, 0.23989615793377608, 0.23597015415470504, 0.23556512675277408] ***
*** finished computation of 3 references, err: [Inf, 0.4095391009643121, 0.23989615793377608, 0.23597015415470504, 0.23556512675277408] ***
*** center 1: selecting labels [1] (freq >= 2) [from [230, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [21, 167, 19]]
** centroid: 2, normalized-entropy: 0.5685192025811224, [(1, 21), (2, 167), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [159, 71, 0]]
** centroid: 3, normalized-entropy: 0.8916620710528754, [(1, 159), (2, 71)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23310470341092293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23310470341092293, 0.19797597166609476] ***
*** finished computation of 7 references, err: [Inf, 0.23310470341092293, 0.19797597166609476] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [77, 27, 0]]
** centroid: 1, normalized-entropy: 0.826165427834159, [(1, 77), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [97, 23, 0]]
** centroid: 2, normalized-entropy: 0.7049450065963296, [(1, 97), (2, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 80, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [68, 1, 0]]
** centroid: 5, normalized-entropy: 0.10928571467638523, [(1, 68), (2, 1)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 91, 17]]
** centroid: 6, normalized-entropy: 0.6280710155029396, [(2, 91), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [69, 20, 0]]
** centroid: 7, normalized-entropy: 0.7686913027030167, [(1, 69), (2, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2519624115245743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2519624115245743, 0.21883151742505438] ***
*** finished computation of 7 references, err: [Inf, 0.2519624115245743, 0.21883151742505438] ***
*** center 1: selecting labels [1] (freq >= 1) [from [142, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 52, 0]]
** centroid: 2, normalized-entropy: 0.9994328781096228, [(1, 55), (2, 52)]
*** center 3: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [75, 58, 0]]
** centroid: 4, normalized-entropy: 0.9881824392260751, [(1, 75), (2, 58)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 55, 9]]
** centroid: 6, normalized-entropy: 0.5858732928619204, [(2, 55), (3, 9)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 32, 15]]
** centroid: 7, normalized-entropy: 0.9034535552068337, [(2, 32), (3, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30419833424209297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30419833424209297, 0.22292541044958306] ***
*** finished computation of 7 references, err: [Inf, 0.30419833424209297, 0.22292541044958306] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [139, 49, 0]]
** centroid: 1, normalized-entropy: 0.8277080459850166, [(1, 139), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [94, 8, 0]]
** centroid: 2, normalized-entropy: 0.3966277727783787, [(1, 94), (2, 8)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 3, 0]]
** centroid: 3, normalized-entropy: 0.2863969571159561, [(1, 57), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [6, 44, 0]]
** centroid: 4, normalized-entropy: 0.5293608652873645, [(1, 6), (2, 44)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 80, 19]]
** centroid: 6, normalized-entropy: 0.7054690408228712, [(2, 80), (3, 19)]
*** center 7: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23702141942803162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23702141942803162, 0.1938443283841305] ***
*** finished computation of 7 references, err: [Inf, 0.23702141942803162, 0.1938443283841305] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [105, 2, 0]]
** centroid: 1, normalized-entropy: 0.13402979616803584, [(1, 105), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 4, 0]]
** centroid: 2, normalized-entropy: 0.3411538931451763, [(1, 59), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 88, 17]]
** centroid: 3, normalized-entropy: 0.6388469391771899, [(2, 88), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 72, 0]]
** centroid: 5, normalized-entropy: 0.9950600468156066, [(1, 61), (2, 72)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [64, 3, 0]]
** centroid: 6, normalized-entropy: 0.26377743669413856, [(1, 64), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 73, 0]]
** centroid: 7, normalized-entropy: 0.49917983618854633, [(1, 9), (2, 73)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23398341232634287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23398341232634287, 0.19096802481808986] ***
*** finished computation of 7 references, err: [Inf, 0.23398341232634287, 0.19096802481808986] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [59, 70, 0]]
** centroid: 1, normalized-entropy: 0.9947485647372363, [(1, 59), (2, 70)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 6, 0]]
** centroid: 2, normalized-entropy: 0.39845927409523557, [(1, 70), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 83, 24]]
** centroid: 4, normalized-entropy: 0.7679401376244881, [(2, 83), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 2, 0]]
** centroid: 5, normalized-entropy: 0.19364280468389852, [(1, 65), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 89, 0]]
** centroid: 6, normalized-entropy: 0.442571064839798, [(1, 9), (2, 89)]
*** center 7: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2227077253310867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2227077253310867, 0.19426890633681948] ***
*** finished computation of 7 references, err: [Inf, 0.2227077253310867, 0.19426890633681948] ***
*** center 1: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 56, 19]]
** centroid: 2, normalized-entropy: 0.8165187119538281, [(2, 56), (3, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [86, 48, 0]]
** centroid: 4, normalized-entropy: 0.9411864371816836, [(1, 86), (2, 48)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 68, 0]]
** centroid: 5, normalized-entropy: 0.980892449782821, [(1, 49), (2, 68)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 66, 0]]
** centroid: 7, normalized-entropy: 0.3159971329784246, [(1, 4), (2, 66)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 10)
[0.9469859080637524, 0.9290008571445697, 0.9260068451685218, 0.9189758620896346, 0.916011820203437, 0.9110188032343721, 0.892994791198384, 0.8759867652083221, 0.7940395485305665, 0.7860225494956034]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 2) => 0.9469859080637524
finished with 10
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 10)
[0.9469859080637524, 0.9290008571445697, 0.9260068451685218, 0.9189758620896346, 0.916011820203437, 0.9110188032343721, 0.892994791198384, 0.8759867652083221, 0.7940395485305665, 0.7860225494956034]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 2) => 0.9469859080637524
finished with 11
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.4649530015452981] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4649530015452981, 0.2945591587450417] ***
*** starting iteration: 2; err: [Inf, 0.4649530015452981, 0.2945591587450417] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4649530015452981, 0.2945591587450417, 0.29246862001320545] ***
*** starting iteration: 3; err: [Inf, 0.4649530015452981, 0.2945591587450417, 0.29246862001320545] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4649530015452981, 0.2945591587450417, 0.29246862001320545, 0.2916388054136773] ***
*** finished computation of 3 references, err: [Inf, 0.4649530015452981, 0.2945591587450417, 0.29246862001320545, 0.2916388054136773] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [230, 7, 0]]
** centroid: 1, normalized-entropy: 0.19205887686615145, [(1, 230), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 192, 24]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(2, 192), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [163, 51, 0]]
** centroid: 3, normalized-entropy: 0.7922315584562315, [(1, 163), (2, 51)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4201528384845268] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4201528384845268, 0.29624765001617753] ***
*** starting iteration: 2; err: [Inf, 0.4201528384845268, 0.29624765001617753] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4201528384845268, 0.29624765001617753, 0.2951498678465886] ***
*** starting iteration: 3; err: [Inf, 0.4201528384845268, 0.29624765001617753, 0.2951498678465886] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4201528384845268, 0.29624765001617753, 0.2951498678465886, 0.2949170939115298] ***
*** finished computation of 3 references, err: [Inf, 0.4201528384845268, 0.29624765001617753, 0.2951498678465886, 0.2949170939115298] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [87, 171, 17]]
** centroid: 1, normalized-entropy: 0.7569514671399143, [(1, 87), (2, 171), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [129, 71, 0]]
** centroid: 2, normalized-entropy: 0.9384543826025636, [(1, 129), (2, 71)]
*** center 3: selecting labels [1] (freq >= 1) [from [191, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3890288779190902] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3890288779190902, 0.3015940937463535] ***
*** starting iteration: 2; err: [Inf, 0.3890288779190902, 0.3015940937463535] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3890288779190902, 0.3015940937463535, 0.29693395828317176] ***
*** starting iteration: 3; err: [Inf, 0.3890288779190902, 0.3015940937463535, 0.29693395828317176] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3890288779190902, 0.3015940937463535, 0.29693395828317176, 0.29591931746902594] ***
*** finished computation of 3 references, err: [Inf, 0.3890288779190902, 0.3015940937463535, 0.29693395828317176, 0.29591931746902594] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [238, 16, 0]]
** centroid: 1, normalized-entropy: 0.3392097746962188, [(1, 238), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [172, 57, 0]]
** centroid: 2, normalized-entropy: 0.8095432264543627, [(1, 172), (2, 57)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 165, 19]]
** centroid: 3, normalized-entropy: 0.47924789026360143, [(2, 165), (3, 19)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9469859080637524, 0.9290008571445697, 0.9260068451685218, 0.9189758620896346, 0.916011820203437, 0.9110188032343721, 0.9080038121954289, 0.892994791198384, 0.8759867652083221, 0.7940395485305665, 0.7860225494956034]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 2) => 0.9469859080637524
finished with 11
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9469859080637524, 0.9290008571445697, 0.9260068451685218, 0.9189758620896346, 0.916011820203437, 0.9110188032343721, 0.9080038121954289, 0.892994791198384, 0.8759867652083221, 0.7940395485305665, 0.7860225494956034]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 2) => 0.9469859080637524
finished with 11
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9469859080637524, 0.9290008571445697, 0.9260068451685218, 0.9189758620896346, 0.916011820203437, 0.9110188032343721, 0.9080038121954289, 0.892994791198384, 0.8759867652083221, 0.7940395485305665, 0.7860225494956034]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 2) => 0.9469859080637524
finished with 12
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.35676457479210766] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35676457479210766, 0.23818484510782398] ***
*** finished computation of 3 references, err: [Inf, 0.35676457479210766, 0.23818484510782398] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [98, 175, 24]]
** centroid: 1, normalized-entropy: 0.8017485026262595, [(1, 98), (2, 175), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [127, 75, 0]]
** centroid: 2, normalized-entropy: 0.9516552599435962, [(1, 127), (2, 75)]
*** center 3: selecting labels [1] (freq >= 1) [from [168, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35105119915483324] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35105119915483324, 0.24167573457869054] ***
*** finished computation of 3 references, err: [Inf, 0.35105119915483324, 0.24167573457869054] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [135, 153, 16]]
** centroid: 1, normalized-entropy: 0.7837216769224484, [(1, 135), (2, 153), (3, 16)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [103, 89, 1]]
** centroid: 2, normalized-entropy: 0.6547755590259504, [(1, 103), (2, 89), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [169, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37206713720943885] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37206713720943885, 0.23636073924774217] ***
*** finished computation of 3 references, err: [Inf, 0.37206713720943885, 0.23636073924774217] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [235, 34, 0]]
** centroid: 1, normalized-entropy: 0.5474652657339979, [(1, 235), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [175, 35, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 175), (2, 35)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 169, 19]]
** centroid: 3, normalized-entropy: 0.4723588118525454, [(2, 169), (3, 19)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9469859080637524, 0.9290008571445697, 0.9260068451685218, 0.9189758620896346, 0.916011820203437, 0.9110188032343721, 0.9080038121954289, 0.892994791198384, 0.8759867652083221, 0.7940395485305665, 0.7860225494956034, 0.7781434128739518]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 2) => 0.9469859080637524
finished with 14
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.2168751118366268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2168751118366268, 0.1990080382248426] ***
*** finished computation of 7 references, err: [Inf, 0.2168751118366268, 0.1990080382248426] ***
*** center 1: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 144, 17]]
** centroid: 2, normalized-entropy: 0.48646924762425214, [(2, 144), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [67, 33, 0]]
** centroid: 3, normalized-entropy: 0.9149263727797277, [(1, 67), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 2, 0]]
** centroid: 4, normalized-entropy: 0.1914332548141934, [(1, 66), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 18, 0]]
** centroid: 5, normalized-entropy: 0.8453509366224364, [(1, 48), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [99, 2, 0]]
** centroid: 6, normalized-entropy: 0.1403272709905931, [(1, 99), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [29, 43, 0]]
** centroid: 7, normalized-entropy: 0.9725523165688429, [(1, 29), (2, 43)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23938289289732745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23938289289732745, 0.20438951050312534] ***
*** finished computation of 7 references, err: [Inf, 0.23938289289732745, 0.20438951050312534] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [31, 76, 0]]
** centroid: 1, normalized-entropy: 0.8683587934693187, [(1, 31), (2, 76)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [132, 16, 0]]
** centroid: 2, normalized-entropy: 0.4941829348497886, [(1, 132), (2, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [8, 54, 0]]
** centroid: 3, normalized-entropy: 0.5547781633412736, [(1, 8), (2, 54)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 17, 23]]
** centroid: 4, normalized-entropy: 0.9837082626231858, [(2, 17), (3, 23)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 84, 1]]
** centroid: 5, normalized-entropy: 0.0922772477445739, [(2, 84), (3, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [97, 3, 0]]
** centroid: 6, normalized-entropy: 0.19439185783157603, [(1, 97), (2, 3)]
*** center 7: selecting labels [1] (freq >= 1) [from [125, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22037333574926557] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22037333574926557, 0.2002671521263144] ***
*** finished computation of 7 references, err: [Inf, 0.22037333574926557, 0.2002671521263144] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 114, 19]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(2, 114), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [83, 16, 0]]
** centroid: 2, normalized-entropy: 0.638161945314006, [(1, 83), (2, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [48, 63, 0]]
** centroid: 4, normalized-entropy: 0.9867867202680318, [(1, 48), (2, 63)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [57, 10, 0]]
** centroid: 5, normalized-entropy: 0.6079696120060726, [(1, 57), (2, 10)]
*** center 6: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [34, 35, 0]]
** centroid: 7, normalized-entropy: 0.9998484829291058, [(1, 34), (2, 35)]
finished with 11 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24781322906873338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24781322906873338, 0.18553678656986974] ***
*** finished computation of 7 references, err: [Inf, 0.24781322906873338, 0.18553678656986974] ***
*** center 1: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [10, 83, 0]]
** centroid: 2, normalized-entropy: 0.49241092131589825, [(1, 10), (2, 83)]
*** center 3: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [88, 8, 0]]
** centroid: 4, normalized-entropy: 0.4138168503036336, [(1, 88), (2, 8)]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [30, 129, 17]]
** centroid: 5, normalized-entropy: 0.6872763073467528, [(1, 30), (2, 129), (3, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [52, 22, 0]]
** centroid: 7, normalized-entropy: 0.8779620013943914, [(1, 52), (2, 22)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22514851116596246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22514851116596246, 0.1689364071376901] ***
*** finished computation of 7 references, err: [Inf, 0.22514851116596246, 0.1689364071376901] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [67, 40, 0]]
** centroid: 2, normalized-entropy: 0.9535688597080136, [(1, 67), (2, 40)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 73, 24]]
** centroid: 3, normalized-entropy: 0.8071675554288905, [(2, 73), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 97, 0]]
** centroid: 4, normalized-entropy: 0.9475615595071798, [(1, 56), (2, 97)]
*** center 5: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [77, 40, 0]]
** centroid: 6, normalized-entropy: 0.9266067073697131, [(1, 77), (2, 40)]
*** center 7: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20007643424518368] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20007643424518368, 0.16156743949968955] ***
*** finished computation of 7 references, err: [Inf, 0.20007643424518368, 0.16156743949968955] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 54, 19]]
** centroid: 1, normalized-entropy: 0.8271595195340525, [(2, 54), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [60, 10, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 60), (2, 10)]
*** center 3: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [53, 49, 0]]
** centroid: 6, normalized-entropy: 0.998890376741155, [(1, 53), (2, 49)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [97, 63, 0]]
** centroid: 7, normalized-entropy: 0.967176964433324, [(1, 97), (2, 63)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9469859080637524, 0.9410308512104919, 0.9290008571445697, 0.9269838700976426, 0.9260068451685218, 0.9189758620896346, 0.916011820203437, 0.9110188032343721, 0.9080038121954289, 0.892994791198384, 0.8759867652083221, 0.7940395485305665, 0.7860225494956034, 0.7781434128739518]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 2) => 0.9469859080637524
finished with 14
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9469859080637524, 0.9410308512104919, 0.9290008571445697, 0.9269838700976426, 0.9260068451685218, 0.9189758620896346, 0.916011820203437, 0.9110188032343721, 0.9080038121954289, 0.892994791198384, 0.8759867652083221, 0.7940395485305665, 0.7860225494956034, 0.7781434128739518]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 2) => 0.9469859080637524
finished with 14
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.19473375135753304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19473375135753304, 0.15158316846005618] ***
*** finished computation of 7 references, err: [Inf, 0.19473375135753304, 0.15158316846005618] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [161, 8, 0]]
** centroid: 1, normalized-entropy: 0.2749763748830523, [(1, 161), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [129, 24, 0]]
** centroid: 2, normalized-entropy: 0.6267511370265896, [(1, 129), (2, 24)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 77, 30]]
** centroid: 3, normalized-entropy: 0.8559596826463527, [(2, 77), (3, 30)]
*** center 4: selecting labels [1] (freq >= 2) [from [131, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 121, 0]]
** centroid: 5, normalized-entropy: 0.9396397693856336, [(1, 67), (2, 121)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 135, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1902015369386063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1902015369386063, 0.15711567629687487] ***
*** finished computation of 7 references, err: [Inf, 0.1902015369386063, 0.15711567629687487] ***
*** center 1: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 45, 14]]
** centroid: 2, normalized-entropy: 0.7905013842153699, [(2, 45), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 11, 0]]
** centroid: 3, normalized-entropy: 0.6873150928309273, [(1, 49), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [27, 40, 0]]
** centroid: 4, normalized-entropy: 0.9726699911457106, [(1, 27), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 95, 0]]
** centroid: 5, normalized-entropy: 0.6973409725623739, [(1, 22), (2, 95)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2059954636991024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2059954636991024, 0.15181266754679382] ***
*** finished computation of 7 references, err: [Inf, 0.2059954636991024, 0.15181266754679382] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [21, 76, 0]]
** centroid: 1, normalized-entropy: 0.7537153483720096, [(1, 21), (2, 76)]
*** center 2: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 18, 0]]
** centroid: 3, normalized-entropy: 0.9121156307204275, [(1, 37), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 29, 0]]
** centroid: 4, normalized-entropy: 0.9335289015212996, [(1, 54), (2, 29)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 62, 15]]
** centroid: 5, normalized-entropy: 0.7114160189012126, [(2, 62), (3, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19576579148694873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19576579148694873, 0.15540455819666385] ***
*** finished computation of 7 references, err: [Inf, 0.19576579148694873, 0.15540455819666385] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [59, 32, 0]]
** centroid: 1, normalized-entropy: 0.9355315642388212, [(1, 59), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 7, 0]]
** centroid: 2, normalized-entropy: 0.5313400141801669, [(1, 51), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 63, 13]]
** centroid: 3, normalized-entropy: 0.6601070987550468, [(2, 63), (3, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 16, 0]]
** centroid: 5, normalized-entropy: 0.8564052389131375, [(1, 41), (2, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 73, 0]]
** centroid: 7, normalized-entropy: 0.3877431810559867, [(1, 6), (2, 73)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2186875063981861] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2186875063981861, 0.1535271012801677] ***
*** finished computation of 7 references, err: [Inf, 0.2186875063981861, 0.1535271012801677] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [81, 22, 0]]
** centroid: 1, normalized-entropy: 0.7482932859824888, [(1, 81), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 3, 0]]
** centroid: 2, normalized-entropy: 0.3274449191544762, [(1, 47), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 54, 12]]
** centroid: 3, normalized-entropy: 0.6840384356390419, [(2, 54), (3, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 35, 0]]
** centroid: 5, normalized-entropy: 0.9906174973781801, [(1, 44), (2, 35)]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18887268230412155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18887268230412155, 0.15104136798065157] ***
*** finished computation of 7 references, err: [Inf, 0.18887268230412155, 0.15104136798065157] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 98, 16]]
** centroid: 1, normalized-entropy: 0.5851569902762294, [(2, 98), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [55, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [43, 14, 0]]
** centroid: 4, normalized-entropy: 0.8042522359016421, [(1, 43), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [82, 16, 0]]
** centroid: 5, normalized-entropy: 0.6420642892306891, [(1, 82), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 58, 0]]
** centroid: 6, normalized-entropy: 0.39993804743902767, [(1, 5), (2, 58)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19734105573035776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19734105573035776, 0.15057032108679413] ***
*** finished computation of 7 references, err: [Inf, 0.19734105573035776, 0.15057032108679413] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [23, 47, 0]]
** centroid: 1, normalized-entropy: 0.9134601452569628, [(1, 23), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 17, 0]]
** centroid: 2, normalized-entropy: 0.7941021417852022, [(1, 54), (2, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 85, 15]]
** centroid: 4, normalized-entropy: 0.6098403047164005, [(2, 85), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 34, 0]]
** centroid: 5, normalized-entropy: 0.9837082626231858, [(1, 46), (2, 34)]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20074160944856703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20074160944856703, 0.15069293000642212] ***
*** finished computation of 7 references, err: [Inf, 0.20074160944856703, 0.15069293000642212] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 6, 0]]
** centroid: 1, normalized-entropy: 0.4178642624458583, [(1, 65), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [74, 6, 0]]
** centroid: 2, normalized-entropy: 0.3843115441264972, [(1, 74), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 34, 15]]
** centroid: 3, normalized-entropy: 0.8886466698980794, [(2, 34), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [28, 69, 0]]
** centroid: 6, normalized-entropy: 0.8669837150190186, [(1, 28), (2, 69)]
*** center 7: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19849128999002277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19849128999002277, 0.15583846536837517] ***
*** finished computation of 7 references, err: [Inf, 0.19849128999002277, 0.15583846536837517] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 76, 0]]
** centroid: 1, normalized-entropy: 0.17203694935311387, [(1, 2), (2, 76)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 5, 0]]
** centroid: 3, normalized-entropy: 0.3674984948272913, [(1, 66), (2, 5)]
*** center 4: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [94, 12, 0]]
** centroid: 5, normalized-entropy: 0.5095157180881823, [(1, 94), (2, 12)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 22, 12]]
** centroid: 7, normalized-entropy: 0.9366673818775627, [(2, 22), (3, 12)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.183434046568349] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.183434046568349, 0.15168293558992446] ***
*** finished computation of 7 references, err: [Inf, 0.183434046568349, 0.15168293558992446] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [60, 43, 0]]
** centroid: 1, normalized-entropy: 0.98025955447738, [(1, 60), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 19, 0]]
** centroid: 2, normalized-entropy: 0.8271595195340525, [(1, 54), (2, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 63, 4]]
** centroid: 4, normalized-entropy: 0.32625881462949274, [(2, 63), (3, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [78, 8, 0]]
** centroid: 5, normalized-entropy: 0.446481346896803, [(1, 78), (2, 8)]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 50, 14]]
** centroid: 7, normalized-entropy: 0.7578784625383954, [(2, 50), (3, 14)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19457225981075316] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19457225981075316, 0.15140590288024397] ***
*** finished computation of 7 references, err: [Inf, 0.19457225981075316, 0.15140590288024397] ***
*** center 1: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 54, 12]]
** centroid: 2, normalized-entropy: 0.6840384356390419, [(2, 54), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 14, 0]]
** centroid: 3, normalized-entropy: 0.7455178428108284, [(1, 52), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 30, 0]]
** centroid: 4, normalized-entropy: 0.9071657675730821, [(1, 63), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 82, 0]]
** centroid: 5, normalized-entropy: 0.5993142373098089, [(1, 14), (2, 82)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19486697357706725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19486697357706725, 0.156040158752352] ***
*** finished computation of 7 references, err: [Inf, 0.19486697357706725, 0.156040158752352] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [26, 15, 0]]
** centroid: 2, normalized-entropy: 0.9474351361840305, [(1, 26), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 41, 23]]
** centroid: 3, normalized-entropy: 0.9421631690835511, [(2, 41), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [16, 71, 0]]
** centroid: 5, normalized-entropy: 0.6885521684368613, [(1, 16), (2, 71)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [27, 41, 0]]
** centroid: 6, normalized-entropy: 0.9692040949598235, [(1, 27), (2, 41)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [66, 2, 0]]
** centroid: 7, normalized-entropy: 0.1914332548141934, [(1, 66), (2, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1834498934969306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1834498934969306, 0.14683687713369728] ***
*** finished computation of 7 references, err: [Inf, 0.1834498934969306, 0.14683687713369728] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 96, 15]]
** centroid: 1, normalized-entropy: 0.5713549744279549, [(2, 96), (3, 15)]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 8, 0]]
** centroid: 3, normalized-entropy: 0.5605769426145328, [(1, 53), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 8, 0]]
** centroid: 4, normalized-entropy: 0.4941829348497886, [(1, 66), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 20, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 60), (2, 20)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 65, 3]]
** centroid: 6, normalized-entropy: 0.260862909647207, [(2, 65), (3, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18520346601307391] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18520346601307391, 0.14721471605915576] ***
*** finished computation of 7 references, err: [Inf, 0.18520346601307391, 0.14721471605915576] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 47, 0]]
** centroid: 1, normalized-entropy: 0.9699504941611515, [(1, 71), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 8, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 48), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 41, 17]]
** centroid: 4, normalized-entropy: 0.8726965039103788, [(2, 41), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [71, 12, 0]]
** centroid: 5, normalized-entropy: 0.5961045458832345, [(1, 71), (2, 12)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 79, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18691397197544574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18691397197544574, 0.15510515196435154] ***
*** finished computation of 7 references, err: [Inf, 0.18691397197544574, 0.15510515196435154] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [113, 2, 0]]
** centroid: 1, normalized-entropy: 0.12653159222336474, [(1, 113), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 4, 0]]
** centroid: 2, normalized-entropy: 0.3912435636292556, [(1, 48), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 33, 16]]
** centroid: 3, normalized-entropy: 0.9113423759758414, [(2, 33), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 86, 0]]
** centroid: 5, normalized-entropy: 0.4820661480830933, [(1, 10), (2, 86)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 48, 0]]
** centroid: 7, normalized-entropy: 0.5916727785823274, [(1, 8), (2, 48)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20017909649014473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20017909649014473, 0.1507311778636649] ***
*** finished computation of 7 references, err: [Inf, 0.20017909649014473, 0.1507311778636649] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [26, 69, 0]]
** centroid: 1, normalized-entropy: 0.846701711600821, [(1, 26), (2, 69)]
*** center 2: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 23, 0]]
** centroid: 3, normalized-entropy: 0.9327076126690367, [(1, 43), (2, 23)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 55, 17]]
** centroid: 4, normalized-entropy: 0.7885131605379784, [(2, 55), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 14, 0]]
** centroid: 5, normalized-entropy: 0.7162583911075451, [(1, 57), (2, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18617777328332885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18617777328332885, 0.15175445674732327] ***
*** finished computation of 7 references, err: [Inf, 0.18617777328332885, 0.15175445674732327] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 94, 10]]
** centroid: 1, normalized-entropy: 0.45668363153944286, [(2, 94), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [36, 2, 0]]
** centroid: 3, normalized-entropy: 0.2974722489192896, [(1, 36), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 20, 0]]
** centroid: 4, normalized-entropy: 0.8263541679009075, [(1, 57), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 12, 0]]
** centroid: 5, normalized-entropy: 0.6006085754131871, [(1, 70), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [79, 4, 0]]
** centroid: 6, normalized-entropy: 0.27866980356389914, [(1, 79), (2, 4)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 64, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18700856246054173] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18700856246054173, 0.14905241249420215] ***
*** finished computation of 7 references, err: [Inf, 0.18700856246054173, 0.14905241249420215] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 69, 19]]
** centroid: 1, normalized-entropy: 0.7526269564427315, [(2, 69), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [55, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [79, 11, 0]]
** centroid: 5, normalized-entropy: 0.5357150195407704, [(1, 79), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 64, 0]]
** centroid: 6, normalized-entropy: 0.19590927087360496, [(1, 2), (2, 64)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [34, 38, 0]]
** centroid: 7, normalized-entropy: 0.9977724720899819, [(1, 34), (2, 38)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17578238833369686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17578238833369686, 0.14656216449476778] ***
*** finished computation of 7 references, err: [Inf, 0.17578238833369686, 0.14656216449476778] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [100, 5, 0]]
** centroid: 1, normalized-entropy: 0.2761954276479391, [(1, 100), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 11, 0]]
** centroid: 2, normalized-entropy: 0.6385146263620961, [(1, 57), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 36, 12]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 36), (3, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 58, 0]]
** centroid: 5, normalized-entropy: 0.8212809417449864, [(1, 20), (2, 58)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 73, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19886942430585622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19886942430585622, 0.1512706242315471] ***
*** finished computation of 7 references, err: [Inf, 0.19886942430585622, 0.1512706242315471] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [55, 35, 0]]
** centroid: 1, normalized-entropy: 0.9640787648082293, [(1, 55), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 3, 0]]
** centroid: 2, normalized-entropy: 0.2899860470332091, [(1, 56), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 39, 16]]
** centroid: 4, normalized-entropy: 0.8698926856041562, [(2, 39), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [76, 25, 0]]
** centroid: 5, normalized-entropy: 0.8073313266519867, [(1, 76), (2, 25)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19388742529321462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19388742529321462, 0.15941765081509948] ***
*** finished computation of 7 references, err: [Inf, 0.19388742529321462, 0.15941765081509948] ***
*** center 1: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 34, 13]]
** centroid: 2, normalized-entropy: 0.8507707040532602, [(2, 34), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [39, 12, 0]]
** centroid: 3, normalized-entropy: 0.787126586201269, [(1, 39), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 2, 0]]
** centroid: 4, normalized-entropy: 0.19823496409776642, [(1, 63), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 84, 0]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(1, 14), (2, 84)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 56, 0]]
** centroid: 6, normalized-entropy: 0.5032583347756457, [(1, 7), (2, 56)]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18596157437749208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18596157437749208, 0.14972127514332534] ***
*** finished computation of 7 references, err: [Inf, 0.18596157437749208, 0.14972127514332534] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 21, 0]]
** centroid: 1, normalized-entropy: 0.8160172973428256, [(1, 62), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 12, 0]]
** centroid: 2, normalized-entropy: 0.6098403047164005, [(1, 68), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 54, 3]]
** centroid: 4, normalized-entropy: 0.2974722489192896, [(2, 54), (3, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [77, 20, 0]]
** centroid: 5, normalized-entropy: 0.7341280428958428, [(1, 77), (2, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 70, 7]]
** centroid: 7, normalized-entropy: 0.43949698692151346, [(2, 70), (3, 7)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1853707692604512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1853707692604512, 0.15196498400345446] ***
*** finished computation of 7 references, err: [Inf, 0.1853707692604512, 0.15196498400345446] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [12, 72, 0]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(1, 12), (2, 72)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 5, 0]]
** centroid: 2, normalized-entropy: 0.4236805715709106, [(1, 53), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 34, 15]]
** centroid: 4, normalized-entropy: 0.8886466698980794, [(2, 34), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [107, 4, 0]]
** centroid: 5, normalized-entropy: 0.22381255513458592, [(1, 107), (2, 4)]
*** center 6: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19914945879392326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19914945879392326, 0.15858118981518782] ***
*** finished computation of 7 references, err: [Inf, 0.19914945879392326, 0.15858118981518782] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 5, 0]]
** centroid: 2, normalized-entropy: 0.38705142139219795, [(1, 61), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 45, 16]]
** centroid: 3, normalized-entropy: 0.8301899714180444, [(2, 45), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 70, 0]]
** centroid: 5, normalized-entropy: 0.8531935252328874, [(1, 27), (2, 70)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 57, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [47, 5, 0]]
** centroid: 7, normalized-entropy: 0.45668363153944286, [(1, 47), (2, 5)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18963120452128351] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18963120452128351, 0.15677244670316576] ***
*** finished computation of 7 references, err: [Inf, 0.18963120452128351, 0.15677244670316576] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [88, 2, 0]]
** centroid: 1, normalized-entropy: 0.1537421803287618, [(1, 88), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 3, 0]]
** centroid: 2, normalized-entropy: 0.3424637724817958, [(1, 44), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 42, 12]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(2, 42), (3, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 54, 0]]
** centroid: 5, normalized-entropy: 0.9940302114769566, [(1, 45), (2, 54)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [23, 78, 0]]
** centroid: 6, normalized-entropy: 0.7740204128451942, [(1, 23), (2, 78)]
*** center 7: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18157863019406795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18157863019406795, 0.15381321121565997] ***
*** finished computation of 7 references, err: [Inf, 0.18157863019406795, 0.15381321121565997] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [97, 10, 0]]
** centroid: 1, normalized-entropy: 0.447907858914932, [(1, 97), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 7, 0]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(1, 49), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 19, 14]]
** centroid: 3, normalized-entropy: 0.9833761901392238, [(2, 19), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [94, 5, 0]]
** centroid: 5, normalized-entropy: 0.2885385136944103, [(1, 94), (2, 5)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 68, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19475839466787875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19475839466787875, 0.15087726230267434] ***
*** finished computation of 7 references, err: [Inf, 0.19475839466787875, 0.15087726230267434] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 66, 12]]
** centroid: 1, normalized-entropy: 0.6193821946787638, [(2, 66), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 12, 0]]
** centroid: 3, normalized-entropy: 0.6051865766334207, [(1, 69), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [46, 14, 0]]
** centroid: 4, normalized-entropy: 0.7837769474847011, [(1, 46), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 32, 0]]
** centroid: 5, normalized-entropy: 0.9217647116941611, [(1, 63), (2, 32)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 56, 5]]
** centroid: 6, normalized-entropy: 0.4090731390438265, [(2, 56), (3, 5)]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1879530259054154] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1879530259054154, 0.1524589890819043] ***
*** finished computation of 7 references, err: [Inf, 0.1879530259054154, 0.1524589890819043] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [25, 53, 0]]
** centroid: 1, normalized-entropy: 0.9049382594235603, [(1, 25), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [36, 16, 0]]
** centroid: 2, normalized-entropy: 0.8904916402194913, [(1, 36), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 87, 14]]
** centroid: 4, normalized-entropy: 0.5805970961414402, [(2, 87), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 25, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 50), (2, 25)]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1977656066622585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1977656066622585, 0.146698947314173] ***
*** finished computation of 7 references, err: [Inf, 0.1977656066622585, 0.146698947314173] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 65, 12]]
** centroid: 1, normalized-entropy: 0.6242741010130388, [(2, 65), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 2, 0]]
** centroid: 3, normalized-entropy: 0.23181305002459035, [(1, 51), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [91, 13, 0]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(1, 91), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 33, 0]]
** centroid: 5, normalized-entropy: 0.9874750082985965, [(1, 43), (2, 33)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 63, 2]]
** centroid: 6, normalized-entropy: 0.19823496409776642, [(2, 63), (3, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18769731145352125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18769731145352125, 0.1492819097423926] ***
*** finished computation of 7 references, err: [Inf, 0.18769731145352125, 0.1492819097423926] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [6, 91, 4]]
** centroid: 1, normalized-entropy: 0.3545717300816741, [(1, 6), (2, 91), (3, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 9, 0]]
** centroid: 2, normalized-entropy: 0.6098403047164005, [(1, 51), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 63, 8]]
** centroid: 5, normalized-entropy: 0.5079353563991225, [(2, 63), (3, 8)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [92, 9, 0]]
** centroid: 6, normalized-entropy: 0.43348846324460666, [(1, 92), (2, 9)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [37, 5, 0]]
** centroid: 7, normalized-entropy: 0.5266170655714281, [(1, 37), (2, 5)]
finished with 13 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17982489464432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17982489464432, 0.1480373122766614] ***
*** finished computation of 7 references, err: [Inf, 0.17982489464432, 0.1480373122766614] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 74, 3]]
** centroid: 1, normalized-entropy: 0.23750814382859295, [(2, 74), (3, 3)]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 19, 0]]
** centroid: 3, normalized-entropy: 0.8659653498997099, [(1, 47), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [89, 4, 0]]
** centroid: 4, normalized-entropy: 0.2559300438391133, [(1, 89), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 26, 0]]
** centroid: 5, normalized-entropy: 0.9011701959974223, [(1, 56), (2, 26)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 63, 12]]
** centroid: 6, normalized-entropy: 0.634309554640566, [(2, 63), (3, 12)]
*** center 7: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 365,3 => 30,1 => 605), Dict(2 => 387,3 => 29,1 => 584))
[ Info: ===== scores for single classifier: {"micro_f1":0.946,"precision":0.946,"recall":0.946,"macro_recall":0.9466325980933643,"macro_f1":0.897988846361495,"accuracy":0.946,"class_f1":{"2":0.9278074866310161,"3":0.8000000000000002,"1":0.9661590524534688},"class_precision":{"2":0.961218836565097,"3":0.6829268292682927,"1":0.9548494983277592},"class_recall":{"2":0.896640826873385,"3":0.9655172413793104,"1":0.9777397260273972}}
[ Info: ===== scores for 1: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9733401767489056,"macro_f1":0.9138860816165222,"accuracy":0.965,"class_f1":{"2":0.9541284403669724,"3":0.8055555555555556,"1":0.9819742489270387},"class_precision":{"2":0.9680851063829787,"3":0.6744186046511628,"1":0.9845094664371773},"class_recall":{"2":0.9405684754521964,"3":1.0,"1":0.9794520547945206}}
[ Info: ===== scores for 5: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9716381721001026,"macro_f1":0.9257930173480359,"accuracy":0.961,"class_f1":{"2":0.9494163424124514,"3":0.8529411764705882,"1":0.975021533161068},"class_precision":{"2":0.953125,"3":0.7435897435897436,"1":0.9809358752166378},"class_recall":{"2":0.9457364341085271,"3":1.0,"1":0.9691780821917808}}
[ Info: ===== scores for 7: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9768164548747538,"macro_f1":0.937580057824623,"accuracy":0.966,"class_f1":{"2":0.9565217391304348,"3":0.8787878787878788,"1":0.9774305555555555},"class_precision":{"2":0.9468354430379747,"3":0.7837837837837838,"1":0.9911971830985915},"class_recall":{"2":0.9664082687338501,"3":1.0,"1":0.964041095890411}}
[ Info: ===== scores for 9: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9805316625960142,"macro_f1":0.9418323745006482,"accuracy":0.972,"class_f1":{"2":0.9640102827763496,"3":0.8787878787878788,"1":0.9826989619377163},"class_precision":{"2":0.959079283887468,"3":0.7837837837837838,"1":0.993006993006993},"class_recall":{"2":0.9689922480620154,"3":1.0,"1":0.9726027397260274}}
[ Info: ===== scores for 11: {"micro_f1":0.968,"precision":0.968,"recall":0.968,"macro_recall":0.9779580073861692,"macro_f1":0.9348993463089074,"accuracy":0.968,"class_f1":{"2":0.9589743589743589,"3":0.8656716417910448,"1":0.9800520381613184},"class_precision":{"2":0.9516539440203562,"3":0.7631578947368421,"1":0.9929701230228472},"class_recall":{"2":0.9664082687338501,"3":1.0,"1":0.9674657534246576}}
(score = 0.965, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.957, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.957, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.966,"k":3,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9742015031916275,"macro_f1":0.9254561458912621,"accuracy":0.966,"class_f1":{"2":0.955497382198953,"3":0.8405797101449275,"1":0.9802913453299058},"class_precision":{"2":0.9681697612732095,"3":0.725,"1":0.9811320754716981},"class_recall":{"2":0.9431524547803618,"3":1.0,"1":0.9794520547945206}}
Test Summary: | Pass  Total
AKNC          |    8      8
[230, 3, 1, 2, 2, 2, 2, 15, 13, 3, 2, 3, 8, 5, 2, 3, 3, 1, 1, 9, 5, 23, 2, 11, 2, 22, 11, 4, 30, 23, 16, 32, 15, 4, 29, 2, 2, 2, 3, 6, 15, 49, 32, 13, 26, 2, 40, 6, 9, 6, 36, 38, 13, 2, 7, 5, 20, 7, 10, 9, 13, 3, 173, 1, 11, 3, 22, 8, 72, 9, 9, 2, 11, 32, 7, 14, 23, 3, 16, 3, 7, 29, 10, 9, 3, 6, 8, 11, 11, 23, 5, 35, 19, 99, 43, 3, 34, 4, 18, 28, 8, 5, 3, 15, 111, 25, 4, 22, 37, 1321, 15, 4, 9, 38, 27, 12, 99, 10, 35, 1, 12, 30, 19, 15, 9, 19, 1, 78, 8, 14, 18, 41, 21, 29, 49, 10, 14, 6, 2, 113, 9, 10, 8, 8, 12, 41, 26, 36, 19, 19, 14, 1, 1, 60, 129, 71, 27, 69, 5, 11, 13, 27, 6, 21, 13, 19, 126, 12, 16, 97, 11, 133, 83, 32, 29, 45, 18, 24, 2, 56, 7, 60, 13, 44, 11, 167, 12, 125, 23, 6, 5, 6, 59, 44, 4, 10, 108, 8, 44, 148, 122, 5, 4, 5, 96, 6, 26, 23, 10, 17, 17, 200, 104, 21, 5, 54, 4, 30, 4, 36, 10, 28, 60, 8, 65, 37, 18, 8, 79, 20, 8, 99, 6, 7, 7, 7, 68, 5, 70, 144, 11, 22, 109, 122, 22, 21, 6, 13, 13, 10, 41, 36, 4, 13, 57, 20, 7, 15, 9, 87, 11, 48, 60, 22, 9, 4, 8, 47, 6, 8, 25, 74, 116, 133, 11, 14, 21, 111, 29, 20, 11, 9, 101, 11, 23, 16, 51, 35, 53, 85, 68, 99, 1, 69, 8, 8, 6, 13, 23, 41]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6859999999999999, speedup = 0.3461035620901024, eval_ratio = 0.080804)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.40234375000000017,"recall":0.3932291666666668,"f1":null,"seconds":0.0002222638577222824,"exhaustive_search_seconds":0.0004942957311868668,"evaluations":527.1484375,"distances_sum":1727.7968130119043}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.552951388888889,"recall":0.5494791666666667,"f1":0.5502358140225788,"seconds":0.0003746338188648224,"exhaustive_search_seconds":0.0004942957311868668,"evaluations":638.5625,"distances_sum":1634.944694999415}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6597222222222224,"recall":0.6597222222222224,"f1":0.6597222222222224,"seconds":0.00038945116102695465,"exhaustive_search_seconds":0.0004942957311868668,"evaluations":726.015625,"distances_sum":1598.2480829411206}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7413194444444441,"recall":0.7413194444444441,"f1":0.7413194444444441,"seconds":0.00045155733823776245,"exhaustive_search_seconds":0.0004942957311868668,"evaluations":874.109375,"distances_sum":1570.2198063312965}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.797743055555555,"recall":0.797743055555555,"f1":0.797743055555555,"seconds":0.0005428697913885117,"exhaustive_search_seconds":0.0004942957311868668,"evaluations":987.875,"distances_sum":1554.332880702208}
KCenters.DeloneInvIndex> reached performance {"precision":0.842013888888888,"recall":0.842013888888888,"f1":0.842013888888888,"seconds":0.0007253680378198624,"exhaustive_search_seconds":0.0004942957311868668,"evaluations":1095.4140625,"distances_sum":1544.0377048868386}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8510000000000002, speedup = 0.5835302705085677, eval_ratio = 0.11542000000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
