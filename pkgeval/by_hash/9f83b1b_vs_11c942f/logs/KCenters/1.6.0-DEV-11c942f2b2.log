Julia Version 1.6.0-DEV.81
Commit 11c942f2b2 (2020-05-23 03:41 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed MappedArrays ──────────────── v0.2.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed Compat ────────────────────── v3.10.0
  Installed TableTraits ───────────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.4
  Installed JSON ──────────────────────── v0.21.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed Parsers ───────────────────── v1.0.4
  Installed DataAPI ───────────────────── v1.3.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed SimilaritySearch ──────────── v0.3.19
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Reexport ──────────────────── v0.2.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataStructures ────────────── v0.17.16
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataFrames ────────────────── v0.20.2
  Installed StatsBase ─────────────────── v0.32.2
  Installed Missings ──────────────────── v0.4.3
  Installed PooledArrays ──────────────── v0.5.3
  Installed OrderedCollections ────────── v1.2.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed DataValueInterfaces ───────── v1.0.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.16
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_appmWn/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_appmWn/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.16
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9370718047022819
[ Info: 0.8321307849884033
[ Info: 0.5533601232866446
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3269949548194806
mean(cdnet.distances) = 0.35500641688704493
mean(crand.distances) = 0.3363704316318035
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1318359375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1318359375,"f1":null,"seconds":3.4905970096588135e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":4.578125,"distances_sum":356.0060978799722}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7924304861804871,"seconds":1.0810792446136475e-5,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.546875,"distances_sum":1984.839024791647}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8473718989343998,"seconds":1.1667609214782715e-5,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.90625,"distances_sum":2199.86908095095}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.75,"f1":0.8473718989343998,"seconds":1.1667609214782715e-5,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.90625,"distances_sum":2199.86908095095}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9273351648351656,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.4765625,"distances_sum":2744.273972687239}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.968475274725275,"seconds":7.078051567077637e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8046875,"distances_sum":3093.597784548937}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8822183025308036,"seconds":6.310641765594482e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.1953125,"distances_sum":2470.2987885931407}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9116701007326014,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.2578125,"distances_sum":2647.921427914983}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.968475274725275,"seconds":7.078051567077637e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8046875,"distances_sum":3093.597784548937}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.968475274725275,"seconds":7.078051567077637e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8046875,"distances_sum":3093.597784548937}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.968475274725275,"seconds":7.078051567077637e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8046875,"distances_sum":3093.597784548937}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8561442030192039,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.921875,"distances_sum":1979.1632298310658}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8561442030192039,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.921875,"distances_sum":1979.1632298310658}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.923969780219781,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.4453125,"distances_sum":2375.004872397362}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8662109375,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8662109375,"f1":0.923969780219781,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.4453125,"distances_sum":2375.004872397362}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9690132783882786,"seconds":6.087124347686768e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8515625,"distances_sum":2654.3614764777503}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9570741758241763,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.75,"distances_sum":2605.6886384623635}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690132783882786,"seconds":6.087124347686768e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8515625,"distances_sum":2654.3614764777503}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690132783882786,"seconds":6.087124347686768e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8515625,"distances_sum":2654.3614764777503}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3857421875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3857421875,"f1":null,"seconds":3.6656856536865234e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":6.40625,"distances_sum":897.321334019475}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.201171875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.201171875,"f1":null,"seconds":3.3676624298095703e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":6.984375,"distances_sum":483.5705807845176}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3857421875,"state":{"ssize":2,"bsize":2},"perf":{"precision":null,"recall":0.3857421875,"f1":null,"seconds":3.6656856536865234e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":6.40625,"distances_sum":897.321334019475}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9157165750915758,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8125,"distances_sum":2289.502551957351}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.392578125, conf: {"ssize":7,"bsize":2}, perf: {"precision":null,"recall":0.392578125,"f1":null,"seconds":3.7364661693573e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":6.6640625,"distances_sum":874.8396109297123}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80078125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.80078125,"f1":0.8801974067599074,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.6171875,"distances_sum":2095.2764865347463}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8544921875,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8544921875,"f1":0.9157165750915758,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8125,"distances_sum":2289.502551957351}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9427541208791216,"seconds":5.543231964111328e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.9296875,"distances_sum":2470.0113095710485}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9545475357975363,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8671875,"distances_sum":2591.957633378664}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9545475357975363,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8671875,"distances_sum":2591.957633378664}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9208984375,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9545475357975363,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8671875,"distances_sum":2591.957633378664}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.169921875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.169921875,"f1":null,"seconds":3.1739473342895508e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":4.8671875,"distances_sum":487.828933193993}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.49609375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.49609375,"f1":0.644877344877345,"seconds":3.948807716369629e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.4375,"distances_sum":1378.0989946008845}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.49609375,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.49609375,"f1":0.644877344877345,"seconds":3.948807716369629e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.4375,"distances_sum":1378.0989946008845}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.864913732101233,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.5234375,"distances_sum":2126.3573435709436}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6513671875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6513671875,"f1":0.7750461344211353,"seconds":4.76837158203125e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.703125,"distances_sum":1772.213654818679}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.642578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.642578125,"f1":0.7694279678654686,"seconds":4.595145583152771e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.7265625,"distances_sum":1738.8353233433415}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8628642191142198,"seconds":5.1818788051605225e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.5390625,"distances_sum":2174.7923715258285}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.864913732101233,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.5234375,"distances_sum":2126.3573435709436}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9471070596070602,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.84375,"distances_sum":2690.0116556220987}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9333822427572434,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.7890625,"distances_sum":2585.9562183022185}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9339832042957049,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8046875,"distances_sum":2590.3887076840147}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9411578005328011,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.7734375,"distances_sum":2685.156269740808}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9088432400932406,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.7421875,"distances_sum":2405.176282937049}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9339571886446894,"seconds":5.6996941566467285e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.84375,"distances_sum":2551.762707335271}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9471070596070602,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.84375,"distances_sum":2690.0116556220987}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9091796875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9471070596070602,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.84375,"distances_sum":2690.0116556220987}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.720703125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.720703125,"f1":0.8221677627927636,"seconds":4.991888999938965e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.96875,"distances_sum":1937.520395058113}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.720703125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.720703125,"f1":0.8221677627927636,"seconds":4.991888999938965e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.96875,"distances_sum":1937.520395058113}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.8856518481518487,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.3203125,"distances_sum":2169.134567016879}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.8322873307248314,"seconds":5.083158612251282e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.9375,"distances_sum":1972.2152530740002}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8076171875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8076171875,"f1":0.8856518481518487,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.3203125,"distances_sum":2169.134567016879}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9052992146742154,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.4765625,"distances_sum":2338.935319437951}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9154480935730942,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.5625,"distances_sum":2356.5138723775535}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9435184607059613,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.640625,"distances_sum":2554.405372762184}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9175054112554119,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6171875,"distances_sum":2399.893553140152}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9435184607059613,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.640625,"distances_sum":2554.405372762184}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9013671875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9435184607059613,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.640625,"distances_sum":2554.405372762184}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.44921875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.44921875,"f1":null,"seconds":4.064291715621948e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":6.609375,"distances_sum":1031.2709097616498}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.8877008408258416,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.4453125,"distances_sum":2132.566770242274}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.689453125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.689453125,"f1":0.8080482017982027,"seconds":4.945322871208191e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.140625,"distances_sum":1694.9203651578493}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8076171875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.8076171875,"f1":0.8877008408258416,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.4453125,"distances_sum":2132.566770242274}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9326329920079924,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.671875,"distances_sum":2447.3441513035696}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9203046953046957,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.6171875,"distances_sum":2356.605049822699}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9326329920079924,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.671875,"distances_sum":2447.3441513035696}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9748340201465204,"seconds":5.289912223815918e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.9296875,"distances_sum":2765.798994155162}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9757268772893775,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.9296875,"distances_sum":2745.9616020059048}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9528674450549453,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8515625,"distances_sum":2583.627996234187}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9547332875457881,"seconds":6.301328539848328e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8359375,"distances_sum":2587.2594641054784}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9757268772893775,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.9296875,"distances_sum":2745.9616020059048}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9757268772893775,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.9296875,"distances_sum":2745.9616020059048}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7769844738594746,"seconds":5.058944225311279e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.3828125,"distances_sum":1739.7855888802544}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7973464035964044,"seconds":4.993751645088196e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.390625,"distances_sum":1819.730838608996}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8720160048285057,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.890625,"distances_sum":2113.757393804013}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7880859375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7880859375,"f1":0.8720160048285057,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.890625,"distances_sum":2113.757393804013}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9592490842490847,"seconds":6.128102540969849e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.9296875,"distances_sum":2713.302821692935}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.942811875624376,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.90625,"distances_sum":2604.0628038429586}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7958984375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7958984375,"f1":0.8744926948051954,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7734375,"distances_sum":2182.130947627799}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9506441475191478,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8984375,"distances_sum":2649.8394273034905}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9564045329670335,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.9765625,"distances_sum":2700.498578653294}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9655334249084252,"seconds":5.735084414482117e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.9375,"distances_sum":2749.7015882193973}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9510302197802201,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.9375,"distances_sum":2634.686266955302}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9655334249084252,"seconds":5.735084414482117e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.9375,"distances_sum":2749.7015882193973}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9714342948717952,"seconds":6.023794412612915e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.9765625,"distances_sum":2796.9576689297114}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9694425366300371,"seconds":6.467103958129883e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.9921875,"distances_sum":2778.4201049717835}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9805631868131871,"seconds":6.990507245063782e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.9921875,"distances_sum":2866.1515673662093}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9697265625, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.9697265625,"f1":0.9833161630036631,"seconds":6.293877959251404e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":9.0,"distances_sum":2883.7281347988965}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9756524725274729,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":9.0,"distances_sum":2796.4555697832448}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9784626831501835,"seconds":6.062909960746765e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.9921875,"distances_sum":2844.5056756600916}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9697265625,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9833161630036631,"seconds":6.293877959251404e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":9.0,"distances_sum":2883.7281347988965}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9697265625,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9833161630036631,"seconds":6.293877959251404e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":9.0,"distances_sum":2883.7281347988965}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2490234375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2490234375,"f1":null,"seconds":3.119930624961853e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":5.328125,"distances_sum":626.8990545776828}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2490234375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2490234375,"f1":null,"seconds":3.119930624961853e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":5.328125,"distances_sum":626.8990545776828}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7373046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7373046875,"f1":0.8398018648018656,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.453125,"distances_sum":1632.6541138080743}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.40234375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.40234375,"f1":null,"seconds":3.848224878311157e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":6.0234375,"distances_sum":835.6032710225085}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7373046875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7373046875,"f1":0.8398018648018656,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.453125,"distances_sum":1632.6541138080743}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9570715742590746,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.8046875,"distances_sum":2258.537030323467}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8710653929403939,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.671875,"distances_sum":1740.6554911736164}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9570715742590746,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.8046875,"distances_sum":2258.537030323467}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9711538461538467,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.8828125,"distances_sum":2376.663896267283}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9711538461538467,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.8828125,"distances_sum":2376.663896267283}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9711538461538467,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.8828125,"distances_sum":2376.663896267283}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.388671875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.388671875,"f1":null,"seconds":4.0996819734573364e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":5.78125,"distances_sum":874.9802475313564}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3974609375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3974609375,"f1":null,"seconds":4.088506102561951e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":5.875,"distances_sum":889.9828829820814}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53515625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.53515625,"f1":0.6789823024198028,"seconds":4.41819429397583e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.90625,"distances_sum":1190.697991109777}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.53515625,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.53515625,"f1":0.6789823024198028,"seconds":4.41819429397583e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.90625,"distances_sum":1190.697991109777}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8572729353979361,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.375,"distances_sum":1745.6772228958778}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5400390625, conf: {"ssize":8,"bsize":3}, perf: {"precision":1.0,"recall":0.5400390625,"f1":0.6865167818292824,"seconds":4.773959517478943e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.9140625,"distances_sum":1171.7284084179}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9262820512820519,"seconds":6.241723895072937e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.65625,"distances_sum":2128.872009733867}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9048134157509164,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.5859375,"distances_sum":1981.5061028078478}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.8854744214119222,"seconds":5.926936864852905e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.3828125,"distances_sum":1922.7634932988715}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8720703125,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.8720703125,"f1":0.9262820512820519,"seconds":6.241723895072937e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.65625,"distances_sum":2128.872009733867}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9762477106227108,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9140625,"distances_sum":2501.7699152691594}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":11,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9635473901098903,"seconds":5.563721060752869e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8125,"distances_sum":2429.1639195923967}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9564617673992678,"seconds":6.688758730888367e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8359375,"distances_sum":2360.7372550541986}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9314274267399274,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.7265625,"distances_sum":2206.095999290965}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.94720695970696,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.671875,"distances_sum":2341.9044828739306}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9762477106227108,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9140625,"distances_sum":2501.7699152691594}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9762477106227108,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9140625,"distances_sum":2501.7699152691594}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.8432914307914317,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.3828125,"distances_sum":1777.9998816547536}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8398089757464765,"seconds":5.058944225311279e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.234375,"distances_sum":1768.1870283646545}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.777793387168388,"seconds":4.595145583152771e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.7578125,"distances_sum":1541.978985463286}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.744140625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.744140625,"f1":0.8398089757464765,"seconds":5.058944225311279e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.234375,"distances_sum":1768.1870283646545}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8927286255411265,"seconds":5.4370611906051636e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.71875,"distances_sum":1984.4793188369497}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9622825091575096,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.875,"distances_sum":2501.263397857161}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9524267399267405,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8515625,"distances_sum":2426.011170041296}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8917983058608068,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.6171875,"distances_sum":2010.3490799047647}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.9002180111555118,"seconds":5.407258868217468e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.7734375,"distances_sum":2046.6841918520345}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9622825091575096,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.875,"distances_sum":2501.263397857161}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9807119963369967,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.96875,"distances_sum":2622.5026929162073}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9755952380952384,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.9453125,"distances_sum":2594.1889801833463}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9659626831501835,"seconds":6.457418203353882e-5,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.9140625,"distances_sum":2517.95435023046}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9807119963369967,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.96875,"distances_sum":2622.5026929162073}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9807119963369967,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.96875,"distances_sum":2622.5026929162073}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7811738608613618,"seconds":4.6193599700927734e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.9140625,"distances_sum":1549.2130737155117}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2578125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2578125,"f1":null,"seconds":3.2782554626464844e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":5.640625,"distances_sum":628.605531748237}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6572265625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6572265625,"f1":0.7811738608613618,"seconds":4.6193599700927734e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.9140625,"distances_sum":1549.2130737155117}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9465086996337002,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.75,"distances_sum":2473.1895364618053}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8520125707625714,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.3515625,"distances_sum":1870.9236292418525}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8057338494838503,"seconds":4.664063453674316e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.9296875,"distances_sum":1671.2503960328236}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":2,"bsize":4}, perf: {"precision":null,"recall":0.68359375,"f1":null,"seconds":4.824250936508179e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.96875,"distances_sum":1650.496421804809}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7392578125,"f1":0.8419996669996679,"seconds":5.347654223442078e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.3671875,"distances_sum":1798.2405808784592}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8675002081252088,"seconds":4.92483377456665e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.515625,"distances_sum":1968.8126318332725}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9465086996337002,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.75,"distances_sum":2473.1895364618053}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":11,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9608115842490845,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.828125,"distances_sum":2551.834707485276}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9469036172161178,"seconds":5.3122639656066895e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7578125,"distances_sum":2449.2881462437003}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9539491758241763,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.828125,"distances_sum":2530.157876734943}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":11,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9608115842490845,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.828125,"distances_sum":2551.834707485276}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":11,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9608115842490845,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.828125,"distances_sum":2551.834707485276}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.736328125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.736328125,"f1":0.8381425865800873,"seconds":5.783513188362122e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.0390625,"distances_sum":1852.5415272911673}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.22265625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.22265625,"f1":null,"seconds":3.1478703022003174e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":4.53125,"distances_sum":577.6370261660195}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.736328125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.736328125,"f1":0.8381425865800873,"seconds":5.783513188362122e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.0390625,"distances_sum":1852.5415272911673}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9516082875457883,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.7109375,"distances_sum":2580.4790734786216}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9516082875457883,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.7109375,"distances_sum":2580.4790734786216}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.956553342490843,"seconds":6.027519702911377e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.765625,"distances_sum":2583.920705515551}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.956553342490843,"seconds":6.027519702911377e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.765625,"distances_sum":2583.920705515551}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9228515625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.956553342490843,"seconds":6.027519702911377e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.765625,"distances_sum":2583.920705515551}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.51171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.51171875,"f1":0.6589750527250531,"seconds":4.474073648452759e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.75,"distances_sum":1147.1531442108683}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.638671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.638671875,"f1":0.7640080405705413,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.8671875,"distances_sum":1450.828881150641}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1953125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1953125,"f1":null,"seconds":3.119930624961853e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":4.859375,"distances_sum":473.8757837139985}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.638671875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.638671875,"f1":0.7640080405705413,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.8671875,"distances_sum":1450.828881150641}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9325434981684989,"seconds":6.375834345817566e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6640625,"distances_sum":2260.877576614774}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.868404512154513,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.609375,"distances_sum":1891.2814993965635}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.9325434981684989,"seconds":6.375834345817566e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6640625,"distances_sum":2260.877576614774}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9398008241758249,"seconds":5.9604644775390625e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.640625,"distances_sum":2329.3012075466527}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9698889652014653,"seconds":7.666647434234619e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.890625,"distances_sum":2505.8372682659074}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9394288003663008,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6640625,"distances_sum":2330.4857874267964}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9698889652014653,"seconds":7.666647434234619e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.890625,"distances_sum":2505.8372682659074}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9698889652014653,"seconds":7.666647434234619e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.890625,"distances_sum":2505.8372682659074}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.7990155677655686,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.21875,"distances_sum":1312.1516494770221}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.56640625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.56640625,"f1":0.7114649239649247,"seconds":4.902482032775879e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.9921875,"distances_sum":1041.6019365885843}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8689112970362979,"seconds":5.112960934638977e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.65625,"distances_sum":1533.0389134174243}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7822265625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7822265625,"f1":0.8689112970362979,"seconds":5.112960934638977e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.65625,"distances_sum":1533.0389134174243}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9087568681318687,"seconds":6.126239895820618e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.84375,"distances_sum":1673.600300650802}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9295043498168507,"seconds":6.319954991340637e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7421875,"distances_sum":1789.3238168842124}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9259844322344328,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7421875,"distances_sum":1754.144420989451}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9431662087912092,"seconds":6.513670086860657e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8828125,"distances_sum":1852.7611202936469}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9431662087912092,"seconds":6.513670086860657e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8828125,"distances_sum":1852.7611202936469}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9575206043956047,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8125,"distances_sum":1944.826180765769}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9495967574092579,"seconds":6.511807441711426e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.9609375,"distances_sum":1881.294656251543}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9595524267399274,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.9140625,"distances_sum":1933.385120429484}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9595524267399274,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.9140625,"distances_sum":1933.385120429484}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9595524267399274,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.9140625,"distances_sum":1933.385120429484}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8559648684648694,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.3828125,"distances_sum":1502.9450087569282}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8559648684648694,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.3828125,"distances_sum":1502.9450087569282}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9487611346986353,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.90625,"distances_sum":1869.0612801012194}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9508241758241762,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.75,"distances_sum":1922.6509584677233}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9508241758241762,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.75,"distances_sum":1922.6509584677233}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9644917582417587,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.90625,"distances_sum":1969.85788675266}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9784798534798538,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9765625,"distances_sum":2051.0769938871813}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9784798534798538,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9765625,"distances_sum":2051.0769938871813}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9784798534798538,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9765625,"distances_sum":2051.0769938871813}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.38671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.38671875,"f1":null,"seconds":4.380941390991211e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.2578125,"distances_sum":602.4050068449349}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8590550074925083,"seconds":5.735084414482117e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.7734375,"distances_sum":1239.9510244695052}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8590550074925083,"seconds":5.735084414482117e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.7734375,"distances_sum":1239.9510244695052}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9542296245421249,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8984375,"distances_sum":1602.6071170125024}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9542296245421249,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8984375,"distances_sum":1602.6071170125024}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9637336621711623,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.953125,"distances_sum":1700.6767598287756}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9703697344322345,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.921875,"distances_sum":1705.7308623224956}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9572000915750922,"seconds":4.740431904792786e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8359375,"distances_sum":1633.5765392916305}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9703697344322345,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.921875,"distances_sum":1705.7308623224956}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9703697344322345,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.921875,"distances_sum":1705.7308623224956}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6875,"f1":0.8031055749805758,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.53125,"distances_sum":1180.4228059000943}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7922499375624384,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.40625,"distances_sum":1111.235987505843}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5498046875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5498046875,"f1":0.6926670551670558,"seconds":4.798173904418945e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.078125,"distances_sum":889.7246720266478}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6875,"f1":0.8031055749805758,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.53125,"distances_sum":1180.4228059000943}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9046916625041631,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.7734375,"distances_sum":1541.1673078420984}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.867064706127207,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.7421875,"distances_sum":1356.3065694655766}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8427734375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8427734375,"f1":0.9046916625041631,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.7734375,"distances_sum":1541.1673078420984}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9694425366300372,"seconds":6.413087248802185e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9296875,"distances_sum":1787.7233341569677}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9722126831501836,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.90625,"distances_sum":1818.8443061319551}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9112954753579762,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.7734375,"distances_sum":1533.81019951986}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.95882554945055,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8515625,"distances_sum":1747.604736510639}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9231029387279395,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.671875,"distances_sum":1596.9750732426135}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9722126831501836,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.90625,"distances_sum":1818.8443061319551}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9722126831501836,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.90625,"distances_sum":1818.8443061319551}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8712579087579095,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.65625,"distances_sum":1277.8409163936058}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.8712579087579095,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.65625,"distances_sum":1277.8409163936058}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9629292582417585,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8359375,"distances_sum":1695.5668626224017}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9629292582417585,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8359375,"distances_sum":1695.5668626224017}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":3,"bsize":13}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9803571428571431,"seconds":6.109476089477539e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.96875,"distances_sum":1766.3200465167833}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9638671875,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9803571428571431,"seconds":6.109476089477539e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.96875,"distances_sum":1766.3200465167833}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9638671875,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9803571428571431,"seconds":6.109476089477539e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.96875,"distances_sum":1766.3200465167833}}, n: 9
mean(cfft.distances) = 0.3273575983720313
mean(cdnet.distances) = 0.3531842160719659
mean(crand.distances) = 0.34527516119769475
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8555555555555555
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8888888888888888
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8111111111111112
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9088888888888889
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.8888888888888888
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9244444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9022222222222224
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8822222222222221
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9199999999999999
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9311111111111111
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8911111111111111
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8733333333333334
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.88
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9022222222222221
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9199999999999999
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9444444444444443
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8822222222222224
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9111111111111111
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8466666666666667
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8933333333333332
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9066666666666666
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8888888888888888
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 6, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 8, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 6, 6]]
** centroid: 11, normalized-entropy: 1.0, [(2, 6), (3, 6)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 3, 2, 1, 2, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 6, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 8, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 6, 6]]
** centroid: 11, normalized-entropy: 1.0, [(2, 6), (3, 6)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 3, 2, 1, 2, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 6, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 8, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 6, 6]]
** centroid: 11, normalized-entropy: 1.0, [(2, 6), (3, 6)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 3, 2, 1, 2, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 6, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 8, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 6, 6]]
** centroid: 11, normalized-entropy: 1.0, [(2, 6), (3, 6)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 3, 2, 1, 2, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 6, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 8, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 6, 6]]
** centroid: 11, normalized-entropy: 1.0, [(2, 6), (3, 6)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 3, 2, 1, 2, 3, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 6, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 8, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 6, 6]]
** centroid: 11, normalized-entropy: 1.0, [(2, 6), (3, 6)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 3, 2, 1, 2, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 6, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 8, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 6, 6]]
** centroid: 11, normalized-entropy: 1.0, [(2, 6), (3, 6)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 3, 2, 1, 2, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5414590804775556] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 23, 10]]
** centroid: 1, normalized-entropy: 0.8849636363831529, [(2, 23), (3, 10)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 10, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 11: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 15 centroids; started with 12
acc = 0.9533333333333334
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.27513717188829884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27513717188829884, 0.21574137864953224] ***
*** starting iteration: 2; err: [Inf, 0.27513717188829884, 0.21574137864953224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27513717188829884, 0.21574137864953224, 0.19705827997622638] ***
*** starting iteration: 3; err: [Inf, 0.27513717188829884, 0.21574137864953224, 0.19705827997622638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27513717188829884, 0.21574137864953224, 0.19705827997622638, 0.1945212934038241] ***
*** starting iteration: 4; err: [Inf, 0.27513717188829884, 0.21574137864953224, 0.19705827997622638, 0.1945212934038241] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27513717188829884, 0.21574137864953224, 0.19705827997622638, 0.1945212934038241, 0.19401907113411496] ***
*** finished computation of 7 references, err: [Inf, 0.27513717188829884, 0.21574137864953224, 0.19705827997622638, 0.1945212934038241, 0.19401907113411496] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [77, 10, 0]]
** centroid: 1, normalized-entropy: 0.5146464316834292, [(1, 77), (2, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [85, 2, 0]]
** centroid: 3, normalized-entropy: 0.15790637433488164, [(1, 85), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [31, 83, 0]]
** centroid: 4, normalized-entropy: 0.8442202034297602, [(1, 31), (2, 83)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 59, 0]]
** centroid: 5, normalized-entropy: 0.9995565335032316, [(1, 62), (2, 59)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 101, 19]]
** centroid: 7, normalized-entropy: 0.6303074079971902, [(2, 101), (3, 19)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25000985166004885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25000985166004885, 0.21015427518088645] ***
*** starting iteration: 2; err: [Inf, 0.25000985166004885, 0.21015427518088645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556] ***
*** starting iteration: 3; err: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556, 0.20033451048531634] ***
*** starting iteration: 4; err: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556, 0.20033451048531634] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556, 0.20033451048531634, 0.19875174201466422] ***
*** starting iteration: 5; err: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556, 0.20033451048531634, 0.19875174201466422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556, 0.20033451048531634, 0.19875174201466422, 0.1974585659723768] ***
*** starting iteration: 6; err: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556, 0.20033451048531634, 0.19875174201466422, 0.1974585659723768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556, 0.20033451048531634, 0.19875174201466422, 0.1974585659723768, 0.19546567930140415] ***
*** starting iteration: 7; err: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556, 0.20033451048531634, 0.19875174201466422, 0.1974585659723768, 0.19546567930140415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556, 0.20033451048531634, 0.19875174201466422, 0.1974585659723768, 0.19546567930140415, 0.1932323680648851] ***
*** starting iteration: 8; err: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556, 0.20033451048531634, 0.19875174201466422, 0.1974585659723768, 0.19546567930140415, 0.1932323680648851] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556, 0.20033451048531634, 0.19875174201466422, 0.1974585659723768, 0.19546567930140415, 0.1932323680648851, 0.19044452930089908] ***
*** starting iteration: 9; err: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556, 0.20033451048531634, 0.19875174201466422, 0.1974585659723768, 0.19546567930140415, 0.1932323680648851, 0.19044452930089908] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556, 0.20033451048531634, 0.19875174201466422, 0.1974585659723768, 0.19546567930140415, 0.1932323680648851, 0.19044452930089908, 0.18785565370774787] ***
*** starting iteration: 10; err: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556, 0.20033451048531634, 0.19875174201466422, 0.1974585659723768, 0.19546567930140415, 0.1932323680648851, 0.19044452930089908, 0.18785565370774787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556, 0.20033451048531634, 0.19875174201466422, 0.1974585659723768, 0.19546567930140415, 0.1932323680648851, 0.19044452930089908, 0.18785565370774787, 0.18623606089887948] ***
*** finished computation of 7 references, err: [Inf, 0.25000985166004885, 0.21015427518088645, 0.20341777156848556, 0.20033451048531634, 0.19875174201466422, 0.1974585659723768, 0.19546567930140415, 0.1932323680648851, 0.19044452930089908, 0.18785565370774787, 0.18623606089887948] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 19, 0]]
** centroid: 2, normalized-entropy: 0.7136036068604937, [(1, 78), (2, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [82, 31, 0]]
** centroid: 3, normalized-entropy: 0.8476183429401788, [(1, 82), (2, 31)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 87, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [87, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [63, 20, 0]]
** centroid: 6, normalized-entropy: 0.7966394665488286, [(1, 63), (2, 20)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 79, 22]]
** centroid: 7, normalized-entropy: 0.756170148929897, [(2, 79), (3, 22)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21821207631759157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21821207631759157, 0.19559048814349983] ***
*** starting iteration: 2; err: [Inf, 0.21821207631759157, 0.19559048814349983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21821207631759157, 0.19559048814349983, 0.18743696493394058] ***
*** starting iteration: 3; err: [Inf, 0.21821207631759157, 0.19559048814349983, 0.18743696493394058] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21821207631759157, 0.19559048814349983, 0.18743696493394058, 0.184782642834838] ***
*** starting iteration: 4; err: [Inf, 0.21821207631759157, 0.19559048814349983, 0.18743696493394058, 0.184782642834838] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21821207631759157, 0.19559048814349983, 0.18743696493394058, 0.184782642834838, 0.1835003551647257] ***
*** starting iteration: 5; err: [Inf, 0.21821207631759157, 0.19559048814349983, 0.18743696493394058, 0.184782642834838, 0.1835003551647257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21821207631759157, 0.19559048814349983, 0.18743696493394058, 0.184782642834838, 0.1835003551647257, 0.18242549856585719] ***
*** starting iteration: 6; err: [Inf, 0.21821207631759157, 0.19559048814349983, 0.18743696493394058, 0.184782642834838, 0.1835003551647257, 0.18242549856585719] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21821207631759157, 0.19559048814349983, 0.18743696493394058, 0.184782642834838, 0.1835003551647257, 0.18242549856585719, 0.18168007747467044] ***
*** finished computation of 7 references, err: [Inf, 0.21821207631759157, 0.19559048814349983, 0.18743696493394058, 0.184782642834838, 0.1835003551647257, 0.18242549856585719, 0.18168007747467044] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [85, 12, 0]]
** centroid: 2, normalized-entropy: 0.5399357331112666, [(1, 85), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 90, 11]]
** centroid: 4, normalized-entropy: 0.4966221117153493, [(2, 90), (3, 11)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 24, 0]]
** centroid: 5, normalized-entropy: 0.8323322690121193, [(1, 67), (2, 24)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [68, 30, 0]]
** centroid: 6, normalized-entropy: 0.8886466698980794, [(1, 68), (2, 30)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 80, 6]]
** centroid: 7, normalized-entropy: 0.3650551896402848, [(2, 80), (3, 6)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3946924628201185] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3946924628201185, 0.29282730843346827] ***
*** finished computation of 3 references, err: [Inf, 0.3946924628201185, 0.29282730843346827] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [81, 187, 22]]
** centroid: 1, normalized-entropy: 0.7598766229979894, [(1, 81), (2, 187), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [191, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [136, 50, 0]]
** centroid: 3, normalized-entropy: 0.8397622740178036, [(1, 136), (2, 50)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4564096020434102] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4564096020434102, 0.3120602909461602] ***
*** finished computation of 3 references, err: [Inf, 0.4564096020434102, 0.3120602909461602] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [129, 111, 1]]
** centroid: 1, normalized-entropy: 0.9959386076315955, [(1, 129), (2, 111)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [111, 125, 16]]
** centroid: 2, normalized-entropy: 0.804614058962971, [(1, 111), (2, 125), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [174, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2242019768432342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2242019768432342, 0.18391434546537674] ***
*** finished computation of 7 references, err: [Inf, 0.2242019768432342, 0.18391434546537674] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [61, 37, 0]]
** centroid: 1, normalized-entropy: 0.9562940061600327, [(1, 61), (2, 37)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [57, 23, 0]]
** centroid: 2, normalized-entropy: 0.8654698974285927, [(1, 57), (2, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 110, 7]]
** centroid: 4, normalized-entropy: 0.32676597648839795, [(2, 110), (3, 7)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [104, 16, 0]]
** centroid: 5, normalized-entropy: 0.5665095065529052, [(1, 104), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [92, 2, 0]]
** centroid: 6, normalized-entropy: 0.14854949043034832, [(1, 92), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 67, 12]]
** centroid: 7, normalized-entropy: 0.6145715612236268, [(2, 67), (3, 12)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22638440801939372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22638440801939372, 0.1918275433542232] ***
*** finished computation of 7 references, err: [Inf, 0.22638440801939372, 0.1918275433542232] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [18, 120, 0]]
** centroid: 1, normalized-entropy: 0.5586293734521991, [(1, 18), (2, 120)]
*** center 2: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [62, 24, 0]]
** centroid: 3, normalized-entropy: 0.8541802051521676, [(1, 62), (2, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [65, 30, 0]]
** centroid: 4, normalized-entropy: 0.8997437586982626, [(1, 65), (2, 30)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 62, 22]]
** centroid: 5, normalized-entropy: 0.8296071030882032, [(2, 62), (3, 22)]
*** center 6: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [95, 1, 0]]
** centroid: 7, normalized-entropy: 0.08354288831032243, [(1, 95), (2, 1)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23709630441881235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23709630441881235, 0.19732368401093953] ***
*** finished computation of 7 references, err: [Inf, 0.23709630441881235, 0.19732368401093953] ***
*** center 1: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 94, 17]]
** centroid: 2, normalized-entropy: 0.6176751423955683, [(2, 94), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 30, 0]]
** centroid: 3, normalized-entropy: 0.9293636260137188, [(1, 57), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [39, 18, 0]]
** centroid: 4, normalized-entropy: 0.8997437586982626, [(1, 39), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [35, 73, 0]]
** centroid: 5, normalized-entropy: 0.9087569615031438, [(1, 35), (2, 73)]
*** center 6: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [80, 21, 0]]
** centroid: 7, normalized-entropy: 0.7374895672137457, [(1, 80), (2, 21)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39966967518444174] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39966967518444174, 0.2948273410580146] ***
*** starting iteration: 2; err: [Inf, 0.39966967518444174, 0.2948273410580146] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39966967518444174, 0.2948273410580146, 0.29038377749165883] ***
*** starting iteration: 3; err: [Inf, 0.39966967518444174, 0.2948273410580146, 0.29038377749165883] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39966967518444174, 0.2948273410580146, 0.29038377749165883, 0.2893166693414117] ***
*** finished computation of 3 references, err: [Inf, 0.39966967518444174, 0.2948273410580146, 0.29038377749165883, 0.2893166693414117] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [237, 27, 0]]
** centroid: 1, normalized-entropy: 0.4761588445580706, [(1, 237), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [155, 33, 0]]
** centroid: 2, normalized-entropy: 0.6702043370162768, [(1, 155), (2, 33)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 195, 19]]
** centroid: 3, normalized-entropy: 0.43240140725814613, [(2, 195), (3, 19)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4319693523764923] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4319693523764923, 0.3069953116053517] ***
*** starting iteration: 2; err: [Inf, 0.4319693523764923, 0.3069953116053517] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4319693523764923, 0.3069953116053517, 0.30365630823174966] ***
*** starting iteration: 3; err: [Inf, 0.4319693523764923, 0.3069953116053517, 0.30365630823174966] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4319693523764923, 0.3069953116053517, 0.30365630823174966, 0.30237501859036586] ***
*** finished computation of 3 references, err: [Inf, 0.4319693523764923, 0.3069953116053517, 0.30365630823174966, 0.30237501859036586] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [111, 135, 22]]
** centroid: 1, normalized-entropy: 0.8335197452287861, [(1, 111), (2, 135), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [109, 102, 0]]
** centroid: 2, normalized-entropy: 0.9992059361869124, [(1, 109), (2, 102)]
*** center 3: selecting labels [1] (freq >= 2) [from [188, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4137282058459775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4137282058459775, 0.28549306886480086] ***
*** starting iteration: 2; err: [Inf, 0.4137282058459775, 0.28549306886480086] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4137282058459775, 0.28549306886480086, 0.28524166432445286] ***
*** finished computation of 3 references, err: [Inf, 0.4137282058459775, 0.28549306886480086, 0.28524166432445286] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [244, 13, 0]]
** centroid: 1, normalized-entropy: 0.28887113790524604, [(1, 244), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [169, 43, 0]]
** centroid: 2, normalized-entropy: 0.7275524867147116, [(1, 169), (2, 43)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 180, 17]]
** centroid: 3, normalized-entropy: 0.42397859285436, [(2, 180), (3, 17)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2269297836840645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2269297836840645, 0.18854976089827874] ***
*** starting iteration: 2; err: [Inf, 0.2269297836840645, 0.18854976089827874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2269297836840645, 0.18854976089827874, 0.1854003579530574] ***
*** starting iteration: 3; err: [Inf, 0.2269297836840645, 0.18854976089827874, 0.1854003579530574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2269297836840645, 0.18854976089827874, 0.1854003579530574, 0.18442680178260482] ***
*** finished computation of 7 references, err: [Inf, 0.2269297836840645, 0.18854976089827874, 0.1854003579530574, 0.18442680178260482] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [57, 61, 0]]
** centroid: 1, normalized-entropy: 0.9991709442878892, [(1, 57), (2, 61)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [75, 12, 0]]
** centroid: 2, normalized-entropy: 0.5787946246321198, [(1, 75), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 108, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 11, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 88), (2, 11)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 63, 19]]
** centroid: 6, normalized-entropy: 0.7809756883263416, [(2, 63), (3, 19)]
*** center 7: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24365468551942343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24365468551942343, 0.1895304856950353] ***
*** starting iteration: 2; err: [Inf, 0.24365468551942343, 0.1895304856950353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24365468551942343, 0.1895304856950353, 0.18769472809243148] ***
*** starting iteration: 3; err: [Inf, 0.24365468551942343, 0.1895304856950353, 0.18769472809243148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24365468551942343, 0.1895304856950353, 0.18769472809243148, 0.18734202029342684] ***
*** finished computation of 7 references, err: [Inf, 0.24365468551942343, 0.1895304856950353, 0.18769472809243148, 0.18734202029342684] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [61, 43, 0]]
** centroid: 1, normalized-entropy: 0.9782823907994933, [(1, 61), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 25, 0]]
** centroid: 2, normalized-entropy: 0.9271587399898307, [(1, 48), (2, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 113, 22]]
** centroid: 4, normalized-entropy: 0.6413510165846328, [(2, 113), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 56, 0]]
** centroid: 5, normalized-entropy: 0.9852281360342514, [(1, 42), (2, 56)]
*** center 6: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2327284938467295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2327284938467295, 0.19321185971206722] ***
*** starting iteration: 2; err: [Inf, 0.2327284938467295, 0.19321185971206722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2327284938467295, 0.19321185971206722, 0.1844610019071751] ***
*** starting iteration: 3; err: [Inf, 0.2327284938467295, 0.19321185971206722, 0.1844610019071751] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2327284938467295, 0.19321185971206722, 0.1844610019071751, 0.18323206008485948] ***
*** starting iteration: 4; err: [Inf, 0.2327284938467295, 0.19321185971206722, 0.1844610019071751, 0.18323206008485948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2327284938467295, 0.19321185971206722, 0.1844610019071751, 0.18323206008485948, 0.18292756624257323] ***
*** finished computation of 7 references, err: [Inf, 0.2327284938467295, 0.19321185971206722, 0.1844610019071751, 0.18323206008485948, 0.18292756624257323] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [104, 14, 0]]
** centroid: 1, normalized-entropy: 0.5254506799086205, [(1, 104), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 11, 0]]
** centroid: 2, normalized-entropy: 0.5822463050121238, [(1, 68), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 98, 17]]
** centroid: 4, normalized-entropy: 0.6043732420352782, [(2, 98), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 77, 0]]
** centroid: 5, normalized-entropy: 0.48356837509176975, [(1, 9), (2, 77)]
*** center 6: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [51, 36, 0]]
** centroid: 7, normalized-entropy: 0.9784493292686188, [(1, 51), (2, 36)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4453170708836512] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4453170708836512, 0.31134154904751227] ***
*** starting iteration: 2; err: [Inf, 0.4453170708836512, 0.31134154904751227] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4453170708836512, 0.31134154904751227, 0.29462841960570746] ***
*** starting iteration: 3; err: [Inf, 0.4453170708836512, 0.31134154904751227, 0.29462841960570746] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4453170708836512, 0.31134154904751227, 0.29462841960570746, 0.29012015339336006] ***
*** starting iteration: 4; err: [Inf, 0.4453170708836512, 0.31134154904751227, 0.29462841960570746, 0.29012015339336006] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4453170708836512, 0.31134154904751227, 0.29462841960570746, 0.29012015339336006, 0.289593851059541] ***
*** finished computation of 3 references, err: [Inf, 0.4453170708836512, 0.31134154904751227, 0.29462841960570746, 0.29012015339336006, 0.289593851059541] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 193, 19]]
** centroid: 1, normalized-entropy: 0.4352089878265592, [(2, 193), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [237, 21, 0]]
** centroid: 2, normalized-entropy: 0.40707680632541937, [(1, 237), (2, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [155, 41, 0]]
** centroid: 3, normalized-entropy: 0.7399194614272068, [(1, 155), (2, 41)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35780409316677525] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35780409316677525, 0.3008634223919669] ***
*** starting iteration: 2; err: [Inf, 0.35780409316677525, 0.3008634223919669] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35780409316677525, 0.3008634223919669, 0.29353596877189414] ***
*** starting iteration: 3; err: [Inf, 0.35780409316677525, 0.3008634223919669, 0.29353596877189414] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35780409316677525, 0.3008634223919669, 0.29353596877189414, 0.2916822021389366] ***
*** starting iteration: 4; err: [Inf, 0.35780409316677525, 0.3008634223919669, 0.29353596877189414, 0.2916822021389366] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35780409316677525, 0.3008634223919669, 0.29353596877189414, 0.2916822021389366, 0.2907073722993103] ***
*** finished computation of 3 references, err: [Inf, 0.35780409316677525, 0.3008634223919669, 0.29353596877189414, 0.2916822021389366, 0.2907073722993103] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [241, 29, 0]]
** centroid: 1, normalized-entropy: 0.4920460456059408, [(1, 241), (2, 29)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 176, 22]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(2, 176), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [167, 32, 0]]
** centroid: 3, normalized-entropy: 0.6362295610302482, [(1, 167), (2, 32)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39803908964426354] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39803908964426354, 0.30529037603306985] ***
*** starting iteration: 2; err: [Inf, 0.39803908964426354, 0.30529037603306985] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39803908964426354, 0.30529037603306985, 0.29273189249381454] ***
*** starting iteration: 3; err: [Inf, 0.39803908964426354, 0.30529037603306985, 0.29273189249381454] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39803908964426354, 0.30529037603306985, 0.29273189249381454, 0.2897877849392716] ***
*** starting iteration: 4; err: [Inf, 0.39803908964426354, 0.30529037603306985, 0.29273189249381454, 0.2897877849392716] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39803908964426354, 0.30529037603306985, 0.29273189249381454, 0.2897877849392716, 0.2884738583290863] ***
*** starting iteration: 5; err: [Inf, 0.39803908964426354, 0.30529037603306985, 0.29273189249381454, 0.2897877849392716, 0.2884738583290863] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39803908964426354, 0.30529037603306985, 0.29273189249381454, 0.2897877849392716, 0.2884738583290863, 0.28806899499561434] ***
*** finished computation of 3 references, err: [Inf, 0.39803908964426354, 0.30529037603306985, 0.29273189249381454, 0.2897877849392716, 0.2884738583290863, 0.28806899499561434] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 177, 17]]
** centroid: 1, normalized-entropy: 0.42850536452761046, [(2, 177), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [237, 25, 0]]
** centroid: 2, normalized-entropy: 0.45430638041815447, [(1, 237), (2, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [177, 34, 0]]
** centroid: 3, normalized-entropy: 0.6370237433649951, [(1, 177), (2, 34)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.43678975376851475] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43678975376851475, 0.25203726328937365] ***
*** starting iteration: 2; err: [Inf, 0.43678975376851475, 0.25203726328937365] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43678975376851475, 0.25203726328937365, 0.23925889059957173] ***
*** starting iteration: 3; err: [Inf, 0.43678975376851475, 0.25203726328937365, 0.23925889059957173] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43678975376851475, 0.25203726328937365, 0.23925889059957173, 0.23518052830727207] ***
*** starting iteration: 4; err: [Inf, 0.43678975376851475, 0.25203726328937365, 0.23925889059957173, 0.23518052830727207] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43678975376851475, 0.25203726328937365, 0.23925889059957173, 0.23518052830727207, 0.23383024301066682] ***
*** starting iteration: 5; err: [Inf, 0.43678975376851475, 0.25203726328937365, 0.23925889059957173, 0.23518052830727207, 0.23383024301066682] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43678975376851475, 0.25203726328937365, 0.23925889059957173, 0.23518052830727207, 0.23383024301066682, 0.23299398629607315] ***
*** finished computation of 3 references, err: [Inf, 0.43678975376851475, 0.25203726328937365, 0.23925889059957173, 0.23518052830727207, 0.23383024301066682, 0.23299398629607315] ***
*** center 1: selecting labels [1] (freq >= 1) [from [231, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [21, 195, 19]]
** centroid: 2, normalized-entropy: 0.5224710029263386, [(1, 21), (2, 195), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [140, 60, 0]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(1, 140), (2, 60)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.43529981717668376] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43529981717668376, 0.26204927887549734] ***
*** starting iteration: 2; err: [Inf, 0.43529981717668376, 0.26204927887549734] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43529981717668376, 0.26204927887549734, 0.24098218070005237] ***
*** starting iteration: 3; err: [Inf, 0.43529981717668376, 0.26204927887549734, 0.24098218070005237] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43529981717668376, 0.26204927887549734, 0.24098218070005237, 0.23478417586942932] ***
*** starting iteration: 4; err: [Inf, 0.43529981717668376, 0.26204927887549734, 0.24098218070005237, 0.23478417586942932] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43529981717668376, 0.26204927887549734, 0.24098218070005237, 0.23478417586942932, 0.23238487308495853] ***
*** starting iteration: 5; err: [Inf, 0.43529981717668376, 0.26204927887549734, 0.24098218070005237, 0.23478417586942932, 0.23238487308495853] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43529981717668376, 0.26204927887549734, 0.24098218070005237, 0.23478417586942932, 0.23238487308495853, 0.23123476561158895] ***
*** starting iteration: 6; err: [Inf, 0.43529981717668376, 0.26204927887549734, 0.24098218070005237, 0.23478417586942932, 0.23238487308495853, 0.23123476561158895] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43529981717668376, 0.26204927887549734, 0.24098218070005237, 0.23478417586942932, 0.23238487308495853, 0.23123476561158895, 0.23043641002186904] ***
*** finished computation of 3 references, err: [Inf, 0.43529981717668376, 0.26204927887549734, 0.24098218070005237, 0.23478417586942932, 0.23238487308495853, 0.23123476561158895, 0.23043641002186904] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [219, 31, 0]]
** centroid: 1, normalized-entropy: 0.5407504779634867, [(1, 219), (2, 31)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 178, 22]]
** centroid: 2, normalized-entropy: 0.49991595816452816, [(2, 178), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [189, 28, 0]]
** centroid: 3, normalized-entropy: 0.5547781633412736, [(1, 189), (2, 28)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2831991790379139] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2831991790379139, 0.2574324164472554] ***
*** starting iteration: 2; err: [Inf, 0.2831991790379139, 0.2574324164472554] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2831991790379139, 0.2574324164472554, 0.2435022787870965] ***
*** starting iteration: 3; err: [Inf, 0.2831991790379139, 0.2574324164472554, 0.2435022787870965] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2831991790379139, 0.2574324164472554, 0.2435022787870965, 0.24176178521873232] ***
*** starting iteration: 4; err: [Inf, 0.2831991790379139, 0.2574324164472554, 0.2435022787870965, 0.24176178521873232] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2831991790379139, 0.2574324164472554, 0.2435022787870965, 0.24176178521873232, 0.24059625550081068] ***
*** starting iteration: 5; err: [Inf, 0.2831991790379139, 0.2574324164472554, 0.2435022787870965, 0.24176178521873232, 0.24059625550081068] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2831991790379139, 0.2574324164472554, 0.2435022787870965, 0.24176178521873232, 0.24059625550081068, 0.2398627126132832] ***
*** finished computation of 3 references, err: [Inf, 0.2831991790379139, 0.2574324164472554, 0.2435022787870965, 0.24176178521873232, 0.24059625550081068, 0.2398627126132832] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [145, 72, 0]]
** centroid: 1, normalized-entropy: 0.9167520704352075, [(1, 145), (2, 72)]
*** center 2: selecting labels [1] (freq >= 1) [from [231, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [38, 164, 17]]
** centroid: 3, normalized-entropy: 0.6543569055959026, [(1, 38), (2, 164), (3, 17)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39800410052235646] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39800410052235646, 0.23338232012102017] ***
*** starting iteration: 2; err: [Inf, 0.39800410052235646, 0.23338232012102017] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39800410052235646, 0.23338232012102017, 0.23136322720356667] ***
*** starting iteration: 3; err: [Inf, 0.39800410052235646, 0.23338232012102017, 0.23136322720356667] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39800410052235646, 0.23338232012102017, 0.23136322720356667, 0.23080684507528582] ***
*** finished computation of 3 references, err: [Inf, 0.39800410052235646, 0.23338232012102017, 0.23136322720356667, 0.23080684507528582] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [102, 123, 7]]
** centroid: 1, normalized-entropy: 0.7312351762239364, [(1, 102), (2, 123), (3, 7)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [95, 132, 12]]
** centroid: 2, normalized-entropy: 0.7689721957492608, [(1, 95), (2, 132), (3, 12)]
*** center 3: selecting labels [1] (freq >= 1) [from [195, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3053900117035034] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3053900117035034, 0.2572865873656195] ***
*** starting iteration: 2; err: [Inf, 0.3053900117035034, 0.2572865873656195] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3053900117035034, 0.2572865873656195, 0.24505531666953972] ***
*** starting iteration: 3; err: [Inf, 0.3053900117035034, 0.2572865873656195, 0.24505531666953972] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3053900117035034, 0.2572865873656195, 0.24505531666953972, 0.241297982834179] ***
*** starting iteration: 4; err: [Inf, 0.3053900117035034, 0.2572865873656195, 0.24505531666953972, 0.241297982834179] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3053900117035034, 0.2572865873656195, 0.24505531666953972, 0.241297982834179, 0.24029963633821888] ***
*** finished computation of 3 references, err: [Inf, 0.3053900117035034, 0.2572865873656195, 0.24505531666953972, 0.241297982834179, 0.24029963633821888] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [108, 142, 22]]
** centroid: 1, normalized-entropy: 0.8278412038983283, [(1, 108), (2, 142), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [112, 95, 0]]
** centroid: 2, normalized-entropy: 0.9951293050264184, [(1, 112), (2, 95)]
*** center 3: selecting labels [1] (freq >= 1) [from [188, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3393364263191607] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3393364263191607, 0.24953717955512397] ***
*** starting iteration: 2; err: [Inf, 0.3393364263191607, 0.24953717955512397] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3393364263191607, 0.24953717955512397, 0.2436752913637028] ***
*** starting iteration: 3; err: [Inf, 0.3393364263191607, 0.24953717955512397, 0.2436752913637028] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3393364263191607, 0.24953717955512397, 0.2436752913637028, 0.24190756978782668] ***
*** starting iteration: 4; err: [Inf, 0.3393364263191607, 0.24953717955512397, 0.2436752913637028, 0.24190756978782668] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3393364263191607, 0.24953717955512397, 0.2436752913637028, 0.24190756978782668, 0.241416044006853] ***
*** finished computation of 3 references, err: [Inf, 0.3393364263191607, 0.24953717955512397, 0.2436752913637028, 0.24190756978782668, 0.241416044006853] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [97, 109, 12]]
** centroid: 1, normalized-entropy: 0.7887229571558407, [(1, 97), (2, 109), (3, 12)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [109, 127, 5]]
** centroid: 2, normalized-entropy: 0.7071168589917171, [(1, 109), (2, 127), (3, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [208, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3457095422684117] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3457095422684117, 0.2971826350867368] ***
*** finished computation of 3 references, err: [Inf, 0.3457095422684117, 0.2971826350867368] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [101, 78, 0]]
** centroid: 1, normalized-entropy: 0.9880574933023201, [(1, 101), (2, 78)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [230, 3, 0]]
** centroid: 2, normalized-entropy: 0.09930374457114807, [(1, 230), (2, 3)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [61, 174, 19]]
** centroid: 3, normalized-entropy: 0.7242480939569262, [(1, 61), (2, 174), (3, 19)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3379960719208377] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3379960719208377, 0.30444172779907996] ***
*** finished computation of 3 references, err: [Inf, 0.3379960719208377, 0.30444172779907996] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [11, 173, 22]]
** centroid: 1, normalized-entropy: 0.49331105496974986, [(1, 11), (2, 173), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [263, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [134, 63, 0]]
** centroid: 3, normalized-entropy: 0.9041605164013701, [(1, 134), (2, 63)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.46097139743850685] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46097139743850685, 0.29137802616912295] ***
*** finished computation of 3 references, err: [Inf, 0.46097139743850685, 0.29137802616912295] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [239, 11, 0]]
** centroid: 1, normalized-entropy: 0.2603406250124503, [(1, 239), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [175, 22, 0]]
** centroid: 2, normalized-entropy: 0.504948062194051, [(1, 175), (2, 22)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 203, 17]]
** centroid: 3, normalized-entropy: 0.3924958067526299, [(2, 203), (3, 17)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2275410125580233] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2275410125580233, 0.19168449676590035] ***
*** finished computation of 7 references, err: [Inf, 0.2275410125580233, 0.19168449676590035] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [62, 127, 19]]
** centroid: 1, normalized-entropy: 0.801577178887485, [(1, 62), (2, 127), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [9, 61, 0]]
** centroid: 2, normalized-entropy: 0.5535072654547254, [(1, 9), (2, 61)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 10, 0]]
** centroid: 3, normalized-entropy: 0.7467366074830678, [(1, 37), (2, 10)]
*** center 4: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 57, 0]]
** centroid: 6, normalized-entropy: 0.9777287741161507, [(1, 40), (2, 57)]
*** center 7: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1820307688667499] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1820307688667499, 0.15111444251000256] ***
*** finished computation of 7 references, err: [Inf, 0.1820307688667499, 0.15111444251000256] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 111, 22]]
** centroid: 1, normalized-entropy: 0.6471045650133528, [(2, 111), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [81, 46, 0]]
** centroid: 2, normalized-entropy: 0.9444980709274635, [(1, 81), (2, 46)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 66, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [89, 14, 0]]
** centroid: 5, normalized-entropy: 0.5734593207286953, [(1, 89), (2, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22743275184728864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22743275184728864, 0.1636784714541916] ***
*** finished computation of 7 references, err: [Inf, 0.22743275184728864, 0.1636784714541916] ***
*** center 1: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [118, 13, 0]]
** centroid: 2, normalized-entropy: 0.4665711224494238, [(1, 118), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 64, 15]]
** centroid: 3, normalized-entropy: 0.7012065844539666, [(2, 64), (3, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [20, 39, 0]]
** centroid: 4, normalized-entropy: 0.9238422284571813, [(1, 20), (2, 39)]
*** center 5: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 58, 2]]
** centroid: 6, normalized-entropy: 0.2108423003185322, [(2, 58), (3, 2)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [98, 62, 0]]
** centroid: 7, normalized-entropy: 0.9631672450918831, [(1, 98), (2, 62)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3034713750281413] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3034713750281413, 0.23209619199487944] ***
*** starting iteration: 2; err: [Inf, 0.3034713750281413, 0.23209619199487944] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3034713750281413, 0.23209619199487944, 0.2309753817167726] ***
*** starting iteration: 3; err: [Inf, 0.3034713750281413, 0.23209619199487944, 0.2309753817167726] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3034713750281413, 0.23209619199487944, 0.2309753817167726, 0.2304543463146879] ***
*** finished computation of 3 references, err: [Inf, 0.3034713750281413, 0.23209619199487944, 0.2309753817167726, 0.2304543463146879] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [93, 137, 12]]
** centroid: 1, normalized-entropy: 0.7633029576199594, [(1, 93), (2, 137), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [195, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [104, 118, 7]]
** centroid: 3, normalized-entropy: 0.7343266662554304, [(1, 104), (2, 118), (3, 7)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2989176172180858] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2989176172180858, 0.28008867231668205] ***
*** starting iteration: 2; err: [Inf, 0.2989176172180858, 0.28008867231668205] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2989176172180858, 0.28008867231668205, 0.2687285339328526] ***
*** starting iteration: 3; err: [Inf, 0.2989176172180858, 0.28008867231668205, 0.2687285339328526] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2989176172180858, 0.28008867231668205, 0.2687285339328526, 0.23837724107427932] ***
*** finished computation of 3 references, err: [Inf, 0.2989176172180858, 0.28008867231668205, 0.2687285339328526, 0.23837724107427932] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [7, 195, 22]]
** centroid: 1, normalized-entropy: 0.415904137063069, [(1, 7), (2, 195), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [266, 7, 0]]
** centroid: 2, normalized-entropy: 0.17203694935311387, [(1, 266), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [135, 35, 0]]
** centroid: 3, normalized-entropy: 0.7335379291086666, [(1, 135), (2, 35)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3162042671839694] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3162042671839694, 0.23723753440547093] ***
*** starting iteration: 2; err: [Inf, 0.3162042671839694, 0.23723753440547093] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3162042671839694, 0.23723753440547093, 0.23102861397091237] ***
*** starting iteration: 3; err: [Inf, 0.3162042671839694, 0.23723753440547093, 0.23102861397091237] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3162042671839694, 0.23723753440547093, 0.23102861397091237, 0.23015372318702973] ***
*** finished computation of 3 references, err: [Inf, 0.3162042671839694, 0.23723753440547093, 0.23102861397091237, 0.23015372318702973] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [241, 3, 0]]
** centroid: 1, normalized-entropy: 0.09565038045803285, [(1, 241), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [151, 61, 0]]
** centroid: 2, normalized-entropy: 0.8657785053678078, [(1, 151), (2, 61)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [22, 172, 17]]
** centroid: 3, normalized-entropy: 0.5509123928645578, [(1, 22), (2, 172), (3, 17)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.25966885855824157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25966885855824157, 0.1959825381916296] ***
*** starting iteration: 2; err: [Inf, 0.25966885855824157, 0.1959825381916296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25966885855824157, 0.1959825381916296, 0.1890784700403924] ***
*** starting iteration: 3; err: [Inf, 0.25966885855824157, 0.1959825381916296, 0.1890784700403924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25966885855824157, 0.1959825381916296, 0.1890784700403924, 0.18740926162471194] ***
*** finished computation of 7 references, err: [Inf, 0.25966885855824157, 0.1959825381916296, 0.1890784700403924, 0.18740926162471194] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [34, 66, 0]]
** centroid: 1, normalized-entropy: 0.9248187049730301, [(1, 34), (2, 66)]
*** center 2: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [101, 21, 0]]
** centroid: 4, normalized-entropy: 0.6625567995605484, [(1, 101), (2, 21)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 91, 19]]
** centroid: 5, normalized-entropy: 0.6639057588563916, [(2, 91), (3, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 77, 0]]
** centroid: 7, normalized-entropy: 0.098959095355743, [(1, 1), (2, 77)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22467450232899885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22467450232899885, 0.19560316903726094] ***
*** starting iteration: 2; err: [Inf, 0.22467450232899885, 0.19560316903726094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22467450232899885, 0.19560316903726094, 0.19191095623644305] ***
*** starting iteration: 3; err: [Inf, 0.22467450232899885, 0.19560316903726094, 0.19191095623644305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22467450232899885, 0.19560316903726094, 0.19191095623644305, 0.1906915338335746] ***
*** finished computation of 7 references, err: [Inf, 0.22467450232899885, 0.19560316903726094, 0.19191095623644305, 0.1906915338335746] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [43, 57, 0]]
** centroid: 1, normalized-entropy: 0.9858150371789197, [(1, 43), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [78, 9, 0]]
** centroid: 2, normalized-entropy: 0.47983202361612853, [(1, 78), (2, 9)]
*** center 3: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 101, 22]]
** centroid: 4, normalized-entropy: 0.6775807218599569, [(2, 101), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [29, 64, 0]]
** centroid: 5, normalized-entropy: 0.8952722642402938, [(1, 29), (2, 64)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [113, 6, 0]]
** centroid: 6, normalized-entropy: 0.28817912669245493, [(1, 113), (2, 6)]
*** center 7: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22895577582328216] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22895577582328216, 0.18866282996736924] ***
*** starting iteration: 2; err: [Inf, 0.22895577582328216, 0.18866282996736924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22895577582328216, 0.18866282996736924, 0.1871370867291267] ***
*** starting iteration: 3; err: [Inf, 0.22895577582328216, 0.18866282996736924, 0.1871370867291267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22895577582328216, 0.18866282996736924, 0.1871370867291267, 0.18695091106649628] ***
*** finished computation of 7 references, err: [Inf, 0.22895577582328216, 0.18866282996736924, 0.1871370867291267, 0.18695091106649628] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [43, 38, 0]]
** centroid: 3, normalized-entropy: 0.9972496329704711, [(1, 43), (2, 38)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [84, 18, 0]]
** centroid: 4, normalized-entropy: 0.6722948170756378, [(1, 84), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [100, 9, 0]]
** centroid: 5, normalized-entropy: 0.41116649000212574, [(1, 100), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [108, 2, 0]]
** centroid: 6, normalized-entropy: 0.13110652958234514, [(1, 108), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 92, 17]]
** centroid: 7, normalized-entropy: 0.6245644324971011, [(2, 92), (3, 17)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3796168822800746] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3796168822800746, 0.30197257097452523] ***
*** finished computation of 3 references, err: [Inf, 0.3796168822800746, 0.30197257097452523] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [274, 41, 0]]
** centroid: 1, normalized-entropy: 0.5578733424491018, [(1, 274), (2, 41)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 163, 19]]
** centroid: 2, normalized-entropy: 0.48277644297290634, [(2, 163), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [118, 51, 0]]
** centroid: 3, normalized-entropy: 0.8834500145943527, [(1, 118), (2, 51)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 14)
[0.9240138341934748, 0.9240108371844898, 0.9060137982293671, 0.9000857144569719, 0.897996799194404, 0.8870157582732432, 0.8859727991464519, 0.8830117542692394, 0.87397876918835, 0.8719977462492433, 0.8680207153261046, 0.8579717441992892, 0.8421055786325247, 0.7640005274735814]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9240138341934748
finished with 14
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9240138341934748, 0.9240108371844898, 0.9060137982293671, 0.9000857144569719, 0.897996799194404, 0.8870157582732432, 0.8859727991464519, 0.8830117542692394, 0.87397876918835, 0.8719977462492433, 0.8680207153261046, 0.8579717441992892, 0.8421055786325247, 0.7640005274735814]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9240138341934748
finished with 15
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.35814941774175557] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35814941774175557, 0.29987209111133273] ***
*** starting iteration: 2; err: [Inf, 0.35814941774175557, 0.29987209111133273] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35814941774175557, 0.29987209111133273, 0.2871600765197932] ***
*** starting iteration: 3; err: [Inf, 0.35814941774175557, 0.29987209111133273, 0.2871600765197932] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35814941774175557, 0.29987209111133273, 0.2871600765197932, 0.2847055242936667] ***
*** starting iteration: 4; err: [Inf, 0.35814941774175557, 0.29987209111133273, 0.2871600765197932, 0.2847055242936667] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35814941774175557, 0.29987209111133273, 0.2871600765197932, 0.2847055242936667, 0.28376029138719] ***
*** finished computation of 3 references, err: [Inf, 0.35814941774175557, 0.29987209111133273, 0.2871600765197932, 0.2847055242936667, 0.28376029138719] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 188, 19]]
** centroid: 1, normalized-entropy: 0.4424080837272288, [(2, 188), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [160, 50, 0]]
** centroid: 2, normalized-entropy: 0.7918583525674836, [(1, 160), (2, 50)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [232, 17, 0]]
** centroid: 3, normalized-entropy: 0.3594458711409625, [(1, 232), (2, 17)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.323036363334402] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.323036363334402, 0.3070396632402912] ***
*** starting iteration: 2; err: [Inf, 0.323036363334402, 0.3070396632402912] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.323036363334402, 0.3070396632402912, 0.30473726305055027] ***
*** starting iteration: 3; err: [Inf, 0.323036363334402, 0.3070396632402912, 0.30473726305055027] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.323036363334402, 0.3070396632402912, 0.30473726305055027, 0.3042163620249129] ***
*** finished computation of 3 references, err: [Inf, 0.323036363334402, 0.3070396632402912, 0.30473726305055027, 0.3042163620249129] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [122, 83, 0]]
** centroid: 1, normalized-entropy: 0.9737326459226808, [(1, 122), (2, 83)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [83, 154, 22]]
** centroid: 2, normalized-entropy: 0.8039663817529341, [(1, 83), (2, 154), (3, 22)]
*** center 3: selecting labels [1] (freq >= 1) [from [203, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37021684572882557] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37021684572882557, 0.30703830585648856] ***
*** starting iteration: 2; err: [Inf, 0.37021684572882557, 0.30703830585648856] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37021684572882557, 0.30703830585648856, 0.2898048850619744] ***
*** starting iteration: 3; err: [Inf, 0.37021684572882557, 0.30703830585648856, 0.2898048850619744] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37021684572882557, 0.30703830585648856, 0.2898048850619744, 0.28589935914363374] ***
*** starting iteration: 4; err: [Inf, 0.37021684572882557, 0.30703830585648856, 0.2898048850619744, 0.28589935914363374] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37021684572882557, 0.30703830585648856, 0.2898048850619744, 0.28589935914363374, 0.28540922907450567] ***
*** finished computation of 3 references, err: [Inf, 0.37021684572882557, 0.30703830585648856, 0.2898048850619744, 0.28589935914363374, 0.28540922907450567] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [171, 44, 0]]
** centroid: 1, normalized-entropy: 0.7311334483544388, [(1, 171), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [242, 11, 0]]
** centroid: 2, normalized-entropy: 0.2580186686648155, [(1, 242), (2, 11)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [1, 181, 17]]
** centroid: 3, normalized-entropy: 0.29399844505199374, [(1, 1), (2, 181), (3, 17)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9240138341934748, 0.9240108371844898, 0.9060137982293671, 0.9000857144569719, 0.897996799194404, 0.8870157582732432, 0.8859727991464519, 0.8830117542692394, 0.87397876918835, 0.8719977462492433, 0.8690726654798512, 0.8680207153261046, 0.8579717441992892, 0.8421055786325247, 0.7640005274735814]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9240138341934748
finished with 16
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.3748799336447685] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3748799336447685, 0.3041171157066976] ***
*** starting iteration: 2; err: [Inf, 0.3748799336447685, 0.3041171157066976] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3748799336447685, 0.3041171157066976, 0.29262606466647695] ***
*** starting iteration: 3; err: [Inf, 0.3748799336447685, 0.3041171157066976, 0.29262606466647695] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3748799336447685, 0.3041171157066976, 0.29262606466647695, 0.2899796951117481] ***
*** finished computation of 3 references, err: [Inf, 0.3748799336447685, 0.3041171157066976, 0.29262606466647695, 0.2899796951117481] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [166, 40, 0]]
** centroid: 1, normalized-entropy: 0.7101234912653349, [(1, 166), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [224, 14, 0]]
** centroid: 2, normalized-entropy: 0.32275695889739825, [(1, 224), (2, 14)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [2, 201, 19]]
** centroid: 3, normalized-entropy: 0.31202122140007776, [(1, 2), (2, 201), (3, 19)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3474567551668482] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3474567551668482, 0.309725750109245] ***
*** starting iteration: 2; err: [Inf, 0.3474567551668482, 0.309725750109245] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3474567551668482, 0.309725750109245, 0.3045690716153522] ***
*** starting iteration: 3; err: [Inf, 0.3474567551668482, 0.309725750109245, 0.3045690716153522] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3474567551668482, 0.309725750109245, 0.3045690716153522, 0.30365724748522716] ***
*** finished computation of 3 references, err: [Inf, 0.3474567551668482, 0.309725750109245, 0.3045690716153522, 0.30365724748522716] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [100, 156, 22]]
** centroid: 1, normalized-entropy: 0.812605198768618, [(1, 100), (2, 156), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [198, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [110, 81, 0]]
** centroid: 3, normalized-entropy: 0.9833062169291144, [(1, 110), (2, 81)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4074094453393698] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4074094453393698, 0.38088389128346045] ***
*** starting iteration: 2; err: [Inf, 0.4074094453393698, 0.38088389128346045] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4074094453393698, 0.38088389128346045, 0.356568351424281] ***
*** starting iteration: 3; err: [Inf, 0.4074094453393698, 0.38088389128346045, 0.356568351424281] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4074094453393698, 0.38088389128346045, 0.356568351424281, 0.3492584127789319] ***
*** finished computation of 3 references, err: [Inf, 0.4074094453393698, 0.38088389128346045, 0.356568351424281, 0.3492584127789319] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [260, 39, 0]]
** centroid: 1, normalized-entropy: 0.5586293734521991, [(1, 260), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [106, 132, 1]]
** centroid: 2, normalized-entropy: 0.9913740996986371, [(1, 106), (2, 132)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [48, 65, 16]]
** centroid: 3, normalized-entropy: 0.8848482059962075, [(1, 48), (2, 65), (3, 16)]
finished with 7 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 16)
[0.9240138341934748, 0.9240108371844898, 0.9060137982293671, 0.9000857144569719, 0.897996799194404, 0.8870157582732432, 0.8859727991464519, 0.8830117542692394, 0.87397876918835, 0.8719977462492433, 0.8690726654798512, 0.8680207153261046, 0.86305167442892, 0.8579717441992892, 0.8421055786325247, 0.7640005274735814]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9240138341934748
finished with 17
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.16833328001631853] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16833328001631853, 0.14273538442074066] ***
*** starting iteration: 2; err: [Inf, 0.16833328001631853, 0.14273538442074066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16833328001631853, 0.14273538442074066, 0.1407985083860913] ***
*** starting iteration: 3; err: [Inf, 0.16833328001631853, 0.14273538442074066, 0.1407985083860913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16833328001631853, 0.14273538442074066, 0.1407985083860913, 0.14027411324061542] ***
*** finished computation of 7 references, err: [Inf, 0.16833328001631853, 0.14273538442074066, 0.1407985083860913, 0.14027411324061542] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [46, 35, 0]]
** centroid: 1, normalized-entropy: 0.9866554896538049, [(1, 46), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 37, 0]]
** centroid: 2, normalized-entropy: 0.9449382598624693, [(1, 65), (2, 37)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [93, 17, 0]]
** centroid: 3, normalized-entropy: 0.6210993704855443, [(1, 93), (2, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 91, 8]]
** centroid: 5, normalized-entropy: 0.40502013262424225, [(2, 91), (3, 8)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 75, 11]]
** centroid: 7, normalized-entropy: 0.5516699920020824, [(2, 75), (3, 11)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1871054656531332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1871054656531332, 0.15670500368276413] ***
*** starting iteration: 2; err: [Inf, 0.1871054656531332, 0.15670500368276413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1871054656531332, 0.15670500368276413, 0.15207729368251394] ***
*** starting iteration: 3; err: [Inf, 0.1871054656531332, 0.15670500368276413, 0.15207729368251394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1871054656531332, 0.15670500368276413, 0.15207729368251394, 0.1498085980637298] ***
*** starting iteration: 4; err: [Inf, 0.1871054656531332, 0.15670500368276413, 0.15207729368251394, 0.1498085980637298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1871054656531332, 0.15670500368276413, 0.15207729368251394, 0.1498085980637298, 0.1485156452927649] ***
*** starting iteration: 5; err: [Inf, 0.1871054656531332, 0.15670500368276413, 0.15207729368251394, 0.1498085980637298, 0.1485156452927649] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1871054656531332, 0.15670500368276413, 0.15207729368251394, 0.1498085980637298, 0.1485156452927649, 0.14774606855358577] ***
*** finished computation of 7 references, err: [Inf, 0.1871054656531332, 0.15670500368276413, 0.15207729368251394, 0.1498085980637298, 0.1485156452927649, 0.14774606855358577] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [38, 36, 0]]
** centroid: 1, normalized-entropy: 0.9994730201859837, [(1, 38), (2, 36)]
*** center 2: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [26, 46, 0]]
** centroid: 3, normalized-entropy: 0.943601631299382, [(1, 26), (2, 46)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 106, 22]]
** centroid: 6, normalized-entropy: 0.6619760641115651, [(2, 106), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [49, 49, 0]]
** centroid: 7, normalized-entropy: 1.0, [(1, 49), (2, 49)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21453557231057171] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21453557231057171, 0.15544093243821036] ***
*** starting iteration: 2; err: [Inf, 0.21453557231057171, 0.15544093243821036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21453557231057171, 0.15544093243821036, 0.15050943737648528] ***
*** starting iteration: 3; err: [Inf, 0.21453557231057171, 0.15544093243821036, 0.15050943737648528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21453557231057171, 0.15544093243821036, 0.15050943737648528, 0.14749193621305065] ***
*** starting iteration: 4; err: [Inf, 0.21453557231057171, 0.15544093243821036, 0.15050943737648528, 0.14749193621305065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21453557231057171, 0.15544093243821036, 0.15050943737648528, 0.14749193621305065, 0.14566820919704992] ***
*** starting iteration: 5; err: [Inf, 0.21453557231057171, 0.15544093243821036, 0.15050943737648528, 0.14749193621305065, 0.14566820919704992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21453557231057171, 0.15544093243821036, 0.15050943737648528, 0.14749193621305065, 0.14566820919704992, 0.14411355201727424] ***
*** starting iteration: 6; err: [Inf, 0.21453557231057171, 0.15544093243821036, 0.15050943737648528, 0.14749193621305065, 0.14566820919704992, 0.14411355201727424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21453557231057171, 0.15544093243821036, 0.15050943737648528, 0.14749193621305065, 0.14566820919704992, 0.14411355201727424, 0.1435344603702962] ***
*** finished computation of 7 references, err: [Inf, 0.21453557231057171, 0.15544093243821036, 0.15050943737648528, 0.14749193621305065, 0.14566820919704992, 0.14411355201727424, 0.1435344603702962] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [70, 16, 0]]
** centroid: 1, normalized-entropy: 0.6931274153282881, [(1, 70), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [108, 11, 0]]
** centroid: 2, normalized-entropy: 0.444552233571264, [(1, 108), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 99, 11]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(2, 99), (3, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [91, 6, 0]]
** centroid: 4, normalized-entropy: 0.3347676126777638, [(1, 91), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [71, 23, 0]]
** centroid: 5, normalized-entropy: 0.8027381019527042, [(1, 71), (2, 23)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 81, 6]]
** centroid: 6, normalized-entropy: 0.36205125173399805, [(2, 81), (3, 6)]
*** center 7: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 17)
[0.9240138341934748, 0.9240108371844898, 0.9169888451325577, 0.9060137982293671, 0.9000857144569719, 0.897996799194404, 0.8870157582732432, 0.8859727991464519, 0.8830117542692394, 0.87397876918835, 0.8719977462492433, 0.8690726654798512, 0.8680207153261046, 0.86305167442892, 0.8579717441992892, 0.8421055786325247, 0.7640005274735814]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9240138341934748
finished with 17
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9240138341934748, 0.9240108371844898, 0.9169888451325577, 0.9060137982293671, 0.9000857144569719, 0.897996799194404, 0.8870157582732432, 0.8859727991464519, 0.8830117542692394, 0.87397876918835, 0.8719977462492433, 0.8690726654798512, 0.8680207153261046, 0.86305167442892, 0.8579717441992892, 0.8421055786325247, 0.7640005274735814]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9240138341934748
finished with 17
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9240138341934748, 0.9240108371844898, 0.9169888451325577, 0.9060137982293671, 0.9000857144569719, 0.897996799194404, 0.8870157582732432, 0.8859727991464519, 0.8830117542692394, 0.87397876918835, 0.8719977462492433, 0.8690726654798512, 0.8680207153261046, 0.86305167442892, 0.8579717441992892, 0.8421055786325247, 0.7640005274735814]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9240138341934748
finished with 18
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.1949401281646982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1949401281646982, 0.15000947462841646] ***
*** starting iteration: 2; err: [Inf, 0.1949401281646982, 0.15000947462841646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1949401281646982, 0.15000947462841646, 0.14617427134735586] ***
*** starting iteration: 3; err: [Inf, 0.1949401281646982, 0.15000947462841646, 0.14617427134735586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1949401281646982, 0.15000947462841646, 0.14617427134735586, 0.14574306943304446] ***
*** finished computation of 7 references, err: [Inf, 0.1949401281646982, 0.15000947462841646, 0.14617427134735586, 0.14574306943304446] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [88, 17, 0]]
** centroid: 1, normalized-entropy: 0.6388469391771899, [(1, 88), (2, 17)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 45, 22]]
** centroid: 2, normalized-entropy: 0.9132401614300725, [(2, 45), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [119, 6, 0]]
** centroid: 3, normalized-entropy: 0.2778395739583094, [(1, 119), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [91, 2, 0]]
** centroid: 4, normalized-entropy: 0.14981136747274781, [(1, 91), (2, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 85, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 82, 0]]
** centroid: 7, normalized-entropy: 0.22028326695127437, [(1, 3), (2, 82)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1831266376030472] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1831266376030472, 0.14517209175121118] ***
*** starting iteration: 2; err: [Inf, 0.1831266376030472, 0.14517209175121118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1831266376030472, 0.14517209175121118, 0.14251169788877707] ***
*** starting iteration: 3; err: [Inf, 0.1831266376030472, 0.14517209175121118, 0.14251169788877707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1831266376030472, 0.14517209175121118, 0.14251169788877707, 0.14198289899359662] ***
*** finished computation of 7 references, err: [Inf, 0.1831266376030472, 0.14517209175121118, 0.14251169788877707, 0.14198289899359662] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 41, 0]]
** centroid: 1, normalized-entropy: 0.9501866467511052, [(1, 70), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 21, 0]]
** centroid: 2, normalized-entropy: 0.8304955225035798, [(1, 59), (2, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 93, 8]]
** centroid: 4, normalized-entropy: 0.39938208242459744, [(2, 93), (3, 8)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [93, 17, 0]]
** centroid: 5, normalized-entropy: 0.6210993704855443, [(1, 93), (2, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 83, 11]]
** centroid: 7, normalized-entropy: 0.5207375686265202, [(2, 83), (3, 11)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18928153529020397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18928153529020397, 0.15649708945756552] ***
*** starting iteration: 2; err: [Inf, 0.18928153529020397, 0.15649708945756552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18928153529020397, 0.15649708945756552, 0.15068473105250427] ***
*** starting iteration: 3; err: [Inf, 0.18928153529020397, 0.15649708945756552, 0.15068473105250427] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18928153529020397, 0.15649708945756552, 0.15068473105250427, 0.1490819350588715] ***
*** finished computation of 7 references, err: [Inf, 0.18928153529020397, 0.15649708945756552, 0.15068473105250427, 0.1490819350588715] ***
*** center 1: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [88, 7, 0]]
** centroid: 2, normalized-entropy: 0.3795243778626806, [(1, 88), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 85, 17]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(2, 85), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 5, 0]]
** centroid: 5, normalized-entropy: 0.3533593350214213, [(1, 70), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [31, 68, 0]]
** centroid: 6, normalized-entropy: 0.8967550157663144, [(1, 31), (2, 68)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [9, 71, 0]]
** centroid: 7, normalized-entropy: 0.5074109636646968, [(1, 9), (2, 71)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 18)
[0.9240138341934748, 0.9240108371844898, 0.921016825208442, 0.9169888451325577, 0.9060137982293671, 0.9000857144569719, 0.897996799194404, 0.8870157582732432, 0.8859727991464519, 0.8830117542692394, 0.87397876918835, 0.8719977462492433, 0.8690726654798512, 0.8680207153261046, 0.86305167442892, 0.8579717441992892, 0.8421055786325247, 0.7640005274735814]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9240138341934748
finished with 18
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.2387594649819657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2387594649819657, 0.1881231430307962] ***
*** starting iteration: 2; err: [Inf, 0.2387594649819657, 0.1881231430307962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2387594649819657, 0.1881231430307962, 0.18554882693500258] ***
*** starting iteration: 3; err: [Inf, 0.2387594649819657, 0.1881231430307962, 0.18554882693500258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2387594649819657, 0.1881231430307962, 0.18554882693500258, 0.1853269698738586] ***
*** finished computation of 7 references, err: [Inf, 0.2387594649819657, 0.1881231430307962, 0.18554882693500258, 0.1853269698738586] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [75, 78, 0]]
** centroid: 1, normalized-entropy: 0.9997226475394071, [(1, 75), (2, 78)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 48, 0]]
** centroid: 2, normalized-entropy: 0.9608181753171039, [(1, 77), (2, 48)]
*** center 3: selecting labels [1] (freq >= 2) [from [127, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 173, 29]]
** centroid: 4, normalized-entropy: 0.5934979568119285, [(2, 173), (3, 29)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [71, 65, 0]]
** centroid: 5, normalized-entropy: 0.9985955373409132, [(1, 71), (2, 65)]
*** center 6: selecting labels [1] (freq >= 2) [from [134, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [123, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.242223250631243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.242223250631243, 0.1922807713150978] ***
*** starting iteration: 2; err: [Inf, 0.242223250631243, 0.1922807713150978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.242223250631243, 0.1922807713150978, 0.18829862477211282] ***
*** starting iteration: 3; err: [Inf, 0.242223250631243, 0.1922807713150978, 0.18829862477211282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.242223250631243, 0.1922807713150978, 0.18829862477211282, 0.18780984681099652] ***
*** finished computation of 7 references, err: [Inf, 0.242223250631243, 0.1922807713150978, 0.18829862477211282, 0.18780984681099652] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 13, 0]]
** centroid: 1, normalized-entropy: 0.6216297820565386, [(1, 71), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 8, 0]]
** centroid: 2, normalized-entropy: 0.612196127490834, [(1, 45), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 69, 16]]
** centroid: 3, normalized-entropy: 0.6977652006354232, [(2, 69), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 32, 0]]
** centroid: 5, normalized-entropy: 0.9738354819891416, [(1, 47), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [12, 59, 0]]
** centroid: 6, normalized-entropy: 0.6554444445609846, [(1, 12), (2, 59)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24249026748538016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24249026748538016, 0.1928993227239698] ***
*** starting iteration: 2; err: [Inf, 0.24249026748538016, 0.1928993227239698] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24249026748538016, 0.1928993227239698, 0.1907582599353045] ***
*** starting iteration: 3; err: [Inf, 0.24249026748538016, 0.1928993227239698, 0.1907582599353045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24249026748538016, 0.1928993227239698, 0.1907582599353045, 0.19055981189385057] ***
*** finished computation of 7 references, err: [Inf, 0.24249026748538016, 0.1928993227239698, 0.1907582599353045, 0.19055981189385057] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 2, 0]]
** centroid: 1, normalized-entropy: 0.1623261801753929, [(1, 82), (2, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 39, 18]]
** centroid: 3, normalized-entropy: 0.8997437586982626, [(2, 39), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 15, 0]]
** centroid: 5, normalized-entropy: 0.6864381668766382, [(1, 67), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 59, 0]]
** centroid: 6, normalized-entropy: 0.20818094555717087, [(1, 2), (2, 59)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22622134055569768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22622134055569768, 0.18816626531817018] ***
*** starting iteration: 2; err: [Inf, 0.22622134055569768, 0.18816626531817018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22622134055569768, 0.18816626531817018, 0.1840913200993091] ***
*** starting iteration: 3; err: [Inf, 0.22622134055569768, 0.18816626531817018, 0.1840913200993091] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22622134055569768, 0.18816626531817018, 0.1840913200993091, 0.18350651599280537] ***
*** finished computation of 7 references, err: [Inf, 0.22622134055569768, 0.18816626531817018, 0.1840913200993091, 0.18350651599280537] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 86, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 29, 0]]
** centroid: 3, normalized-entropy: 0.9067816913292788, [(1, 61), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [36, 21, 0]]
** centroid: 4, normalized-entropy: 0.9494520153879484, [(1, 36), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 4, 0]]
** centroid: 5, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [79, 5, 0]]
** centroid: 6, normalized-entropy: 0.3255517134879513, [(1, 79), (2, 5)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 52, 14]]
** centroid: 7, normalized-entropy: 0.7455178428108284, [(2, 52), (3, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22893142916448414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22893142916448414, 0.1848319244608283] ***
*** starting iteration: 2; err: [Inf, 0.22893142916448414, 0.1848319244608283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22893142916448414, 0.1848319244608283, 0.18260637933202087] ***
*** starting iteration: 3; err: [Inf, 0.22893142916448414, 0.1848319244608283, 0.18260637933202087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22893142916448414, 0.1848319244608283, 0.18260637933202087, 0.1819333213083446] ***
*** finished computation of 7 references, err: [Inf, 0.22893142916448414, 0.1848319244608283, 0.18260637933202087, 0.1819333213083446] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 79, 7]]
** centroid: 1, normalized-entropy: 0.40707680632541937, [(2, 79), (3, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [56, 7, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 56), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 10, 0]]
** centroid: 4, normalized-entropy: 0.576291461217437, [(1, 63), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 12, 0]]
** centroid: 5, normalized-entropy: 0.6006085754131871, [(1, 70), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 70, 1]]
** centroid: 6, normalized-entropy: 0.18312206830137262, [(1, 2), (2, 70)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22159222155064345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22159222155064345, 0.19514423287287355] ***
*** starting iteration: 2; err: [Inf, 0.22159222155064345, 0.19514423287287355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22159222155064345, 0.19514423287287355, 0.19091830794513226] ***
*** starting iteration: 3; err: [Inf, 0.22159222155064345, 0.19514423287287355, 0.19091830794513226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22159222155064345, 0.19514423287287355, 0.19091830794513226, 0.19032765842229127] ***
*** finished computation of 7 references, err: [Inf, 0.22159222155064345, 0.19514423287287355, 0.19091830794513226, 0.19032765842229127] ***
*** center 1: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 5, 0]]
** centroid: 2, normalized-entropy: 0.38705142139219795, [(1, 61), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 51, 17]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 51), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 10, 0]]
** centroid: 5, normalized-entropy: 0.5864477034453907, [(1, 61), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [23, 60, 0]]
** centroid: 6, normalized-entropy: 0.8514808683852091, [(1, 23), (2, 60)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [11, 68, 0]]
** centroid: 7, normalized-entropy: 0.5822463050121238, [(1, 11), (2, 68)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23044524266757072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23044524266757072, 0.18802976858057083] ***
*** starting iteration: 2; err: [Inf, 0.23044524266757072, 0.18802976858057083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23044524266757072, 0.18802976858057083, 0.18591576282214373] ***
*** starting iteration: 3; err: [Inf, 0.23044524266757072, 0.18802976858057083, 0.18591576282214373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23044524266757072, 0.18802976858057083, 0.18591576282214373, 0.1850444896838162] ***
*** finished computation of 7 references, err: [Inf, 0.23044524266757072, 0.18802976858057083, 0.18591576282214373, 0.1850444896838162] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 71, 13]]
** centroid: 2, normalized-entropy: 0.6216297820565386, [(2, 71), (3, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [58, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 16, 0]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(1, 64), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 32, 0]]
** centroid: 5, normalized-entropy: 0.9993375041688846, [(1, 34), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 54, 0]]
** centroid: 6, normalized-entropy: 0.46899559358928133, [(1, 6), (2, 54)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22095992078073323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22095992078073323, 0.19056746074184774] ***
*** starting iteration: 2; err: [Inf, 0.22095992078073323, 0.19056746074184774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22095992078073323, 0.19056746074184774, 0.18855657803546638] ***
*** starting iteration: 3; err: [Inf, 0.22095992078073323, 0.19056746074184774, 0.18855657803546638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22095992078073323, 0.19056746074184774, 0.18855657803546638, 0.18791887494176626] ***
*** finished computation of 7 references, err: [Inf, 0.22095992078073323, 0.19056746074184774, 0.18855657803546638, 0.18791887494176626] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [68, 4, 0]]
** centroid: 1, normalized-entropy: 0.3095434291503252, [(1, 68), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 12, 0]]
** centroid: 2, normalized-entropy: 0.6145715612236268, [(1, 67), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 18]]
** centroid: 3, normalized-entropy: 0.7544062039636575, [(2, 65), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 68, 0]]
** centroid: 5, normalized-entropy: 0.6098403047164005, [(1, 12), (2, 68)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [32, 42, 0]]
** centroid: 6, normalized-entropy: 0.9867867202680318, [(1, 32), (2, 42)]
*** center 7: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23404261934757234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23404261934757234, 0.18278217869997024] ***
*** starting iteration: 2; err: [Inf, 0.23404261934757234, 0.18278217869997024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23404261934757234, 0.18278217869997024, 0.1793465817598626] ***
*** starting iteration: 3; err: [Inf, 0.23404261934757234, 0.18278217869997024, 0.1793465817598626] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23404261934757234, 0.18278217869997024, 0.1793465817598626, 0.1793070189319551] ***
*** finished computation of 7 references, err: [Inf, 0.23404261934757234, 0.18278217869997024, 0.1793465817598626, 0.1793070189319551] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [69, 7, 0]]
** centroid: 1, normalized-entropy: 0.4434581453896789, [(1, 69), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [36, 11, 0]]
** centroid: 2, normalized-entropy: 0.7849920887641585, [(1, 36), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 72, 15]]
** centroid: 3, normalized-entropy: 0.6631968402398286, [(2, 72), (3, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 23, 0]]
** centroid: 4, normalized-entropy: 0.8561146277685725, [(1, 59), (2, 23)]
*** center 5: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [72, 7, 0]]
** centroid: 6, normalized-entropy: 0.43180499427520785, [(1, 72), (2, 7)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22832450168579818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22832450168579818, 0.18631398448161782] ***
*** starting iteration: 2; err: [Inf, 0.22832450168579818, 0.18631398448161782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22832450168579818, 0.18631398448161782, 0.18281891504302622] ***
*** starting iteration: 3; err: [Inf, 0.22832450168579818, 0.18631398448161782, 0.18281891504302622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22832450168579818, 0.18631398448161782, 0.18281891504302622, 0.18204160401038824] ***
*** finished computation of 7 references, err: [Inf, 0.22832450168579818, 0.18631398448161782, 0.18281891504302622, 0.18204160401038824] ***
*** center 1: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 66, 12]]
** centroid: 2, normalized-entropy: 0.6193821946787638, [(2, 66), (3, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 27, 0]]
** centroid: 4, normalized-entropy: 0.8976844934141643, [(1, 59), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 47, 0]]
** centroid: 5, normalized-entropy: 0.9777945702913884, [(1, 33), (2, 47)]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 55, 0]]
** centroid: 7, normalized-entropy: 0.4637773498877517, [(1, 6), (2, 55)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2368582727201283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2368582727201283, 0.19111320075392724] ***
*** starting iteration: 2; err: [Inf, 0.2368582727201283, 0.19111320075392724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2368582727201283, 0.19111320075392724, 0.18682472286280244] ***
*** starting iteration: 3; err: [Inf, 0.2368582727201283, 0.19111320075392724, 0.18682472286280244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2368582727201283, 0.19111320075392724, 0.18682472286280244, 0.18506796241737902] ***
*** starting iteration: 4; err: [Inf, 0.2368582727201283, 0.19111320075392724, 0.18682472286280244, 0.18506796241737902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2368582727201283, 0.19111320075392724, 0.18682472286280244, 0.18506796241737902, 0.18412299507530405] ***
*** finished computation of 7 references, err: [Inf, 0.2368582727201283, 0.19111320075392724, 0.18682472286280244, 0.18506796241737902, 0.18412299507530405] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [26, 53, 0]]
** centroid: 1, normalized-entropy: 0.9140185106642174, [(1, 26), (2, 53)]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 38, 0]]
** centroid: 3, normalized-entropy: 0.9865446300055647, [(1, 50), (2, 38)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [34, 22, 0]]
** centroid: 4, normalized-entropy: 0.9666186325481027, [(1, 34), (2, 22)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 72, 13]]
** centroid: 5, normalized-entropy: 0.617151919200282, [(2, 72), (3, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2309549183193594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2309549183193594, 0.18610899525135755] ***
*** starting iteration: 2; err: [Inf, 0.2309549183193594, 0.18610899525135755] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2309549183193594, 0.18610899525135755, 0.18278726955503224] ***
*** starting iteration: 3; err: [Inf, 0.2309549183193594, 0.18610899525135755, 0.18278726955503224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2309549183193594, 0.18610899525135755, 0.18278726955503224, 0.18226224900968374] ***
*** finished computation of 7 references, err: [Inf, 0.2309549183193594, 0.18610899525135755, 0.18278726955503224, 0.18226224900968374] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 6, 0]]
** centroid: 1, normalized-entropy: 0.39481484603049416, [(1, 71), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 23, 0]]
** centroid: 2, normalized-entropy: 0.8844839729019952, [(1, 53), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 66, 13]]
** centroid: 3, normalized-entropy: 0.6451006442088483, [(2, 66), (3, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 3, 0]]
** centroid: 5, normalized-entropy: 0.32275695889739825, [(1, 48), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [67, 15, 0]]
** centroid: 6, normalized-entropy: 0.6864381668766382, [(1, 67), (2, 15)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22406485397182405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22406485397182405, 0.18526437347102911] ***
*** starting iteration: 2; err: [Inf, 0.22406485397182405, 0.18526437347102911] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22406485397182405, 0.18526437347102911, 0.18045990479923785] ***
*** starting iteration: 3; err: [Inf, 0.22406485397182405, 0.18526437347102911, 0.18045990479923785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22406485397182405, 0.18526437347102911, 0.18045990479923785, 0.17983985080197454] ***
*** finished computation of 7 references, err: [Inf, 0.22406485397182405, 0.18526437347102911, 0.18045990479923785, 0.17983985080197454] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 7, 0]]
** centroid: 1, normalized-entropy: 0.5140912790181233, [(1, 54), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 16, 0]]
** centroid: 2, normalized-entropy: 0.775512658133148, [(1, 54), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 79, 13]]
** centroid: 3, normalized-entropy: 0.5876446142980418, [(2, 79), (3, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 19, 0]]
** centroid: 5, normalized-entropy: 0.8890349038123858, [(1, 43), (2, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 72, 0]]
** centroid: 7, normalized-entropy: 0.34673146824966367, [(1, 5), (2, 72)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2272559491256252] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2272559491256252, 0.192716707540676] ***
*** starting iteration: 2; err: [Inf, 0.2272559491256252, 0.192716707540676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2272559491256252, 0.192716707540676, 0.19132775427773596] ***
*** starting iteration: 3; err: [Inf, 0.2272559491256252, 0.192716707540676, 0.19132775427773596] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2272559491256252, 0.192716707540676, 0.19132775427773596, 0.19099328429065646] ***
*** finished computation of 7 references, err: [Inf, 0.2272559491256252, 0.192716707540676, 0.19132775427773596, 0.19099328429065646] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [22, 53, 0]]
** centroid: 1, normalized-entropy: 0.8729882944709463, [(1, 22), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [37, 16, 0]]
** centroid: 2, normalized-entropy: 0.8835850861052531, [(1, 37), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 44, 14]]
** centroid: 4, normalized-entropy: 0.7973265101474423, [(2, 44), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [78, 8, 0]]
** centroid: 5, normalized-entropy: 0.446481346896803, [(1, 78), (2, 8)]
*** center 6: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22052256067097187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22052256067097187, 0.1857331263842061] ***
*** starting iteration: 2; err: [Inf, 0.22052256067097187, 0.1857331263842061] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22052256067097187, 0.1857331263842061, 0.18302016071602703] ***
*** starting iteration: 3; err: [Inf, 0.22052256067097187, 0.1857331263842061, 0.18302016071602703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22052256067097187, 0.1857331263842061, 0.18302016071602703, 0.18254489339515567] ***
*** finished computation of 7 references, err: [Inf, 0.22052256067097187, 0.1857331263842061, 0.18302016071602703, 0.18254489339515567] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 70, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 31, 0]]
** centroid: 3, normalized-entropy: 0.9943766625699823, [(1, 37), (2, 31)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 16, 0]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(1, 64), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 2, 0]]
** centroid: 5, normalized-entropy: 0.2006223243127146, [(1, 62), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [72, 2, 0]]
** centroid: 6, normalized-entropy: 0.1792560669283214, [(1, 72), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 61, 15]]
** centroid: 7, normalized-entropy: 0.7166336117927455, [(2, 61), (3, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2317119169328362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2317119169328362, 0.18607087961956859] ***
*** starting iteration: 2; err: [Inf, 0.2317119169328362, 0.18607087961956859] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2317119169328362, 0.18607087961956859, 0.18459522670693695] ***
*** starting iteration: 3; err: [Inf, 0.2317119169328362, 0.18607087961956859, 0.18459522670693695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2317119169328362, 0.18607087961956859, 0.18459522670693695, 0.18445847868174314] ***
*** finished computation of 7 references, err: [Inf, 0.2317119169328362, 0.18607087961956859, 0.18459522670693695, 0.18445847868174314] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [34, 37, 0]]
** centroid: 1, normalized-entropy: 0.9987117514654895, [(1, 34), (2, 37)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [35, 16, 0]]
** centroid: 2, normalized-entropy: 0.8974271930876951, [(1, 35), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 91, 17]]
** centroid: 4, normalized-entropy: 0.6280710155029396, [(2, 91), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [38, 45, 0]]
** centroid: 5, normalized-entropy: 0.9948631079048572, [(1, 38), (2, 45)]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [68, 2, 0]]
** centroid: 7, normalized-entropy: 0.18717625687320805, [(1, 68), (2, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22887368270009756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22887368270009756, 0.1939676125664264] ***
*** starting iteration: 2; err: [Inf, 0.22887368270009756, 0.1939676125664264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22887368270009756, 0.1939676125664264, 0.19020326089300216] ***
*** starting iteration: 3; err: [Inf, 0.22887368270009756, 0.1939676125664264, 0.19020326089300216] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22887368270009756, 0.1939676125664264, 0.19020326089300216, 0.18843615663051605] ***
*** starting iteration: 4; err: [Inf, 0.22887368270009756, 0.1939676125664264, 0.19020326089300216, 0.18843615663051605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22887368270009756, 0.1939676125664264, 0.19020326089300216, 0.18843615663051605, 0.18697139475494623] ***
*** starting iteration: 5; err: [Inf, 0.22887368270009756, 0.1939676125664264, 0.19020326089300216, 0.18843615663051605, 0.18697139475494623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22887368270009756, 0.1939676125664264, 0.19020326089300216, 0.18843615663051605, 0.18697139475494623, 0.18583021118305623] ***
*** starting iteration: 6; err: [Inf, 0.22887368270009756, 0.1939676125664264, 0.19020326089300216, 0.18843615663051605, 0.18697139475494623, 0.18583021118305623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22887368270009756, 0.1939676125664264, 0.19020326089300216, 0.18843615663051605, 0.18697139475494623, 0.18583021118305623, 0.18557897734083234] ***
*** finished computation of 7 references, err: [Inf, 0.22887368270009756, 0.1939676125664264, 0.19020326089300216, 0.18843615663051605, 0.18697139475494623, 0.18583021118305623, 0.18557897734083234] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 58, 18]]
** centroid: 1, normalized-entropy: 0.7897492536625221, [(2, 58), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [48, 41, 0]]
** centroid: 4, normalized-entropy: 0.995533068899466, [(1, 48), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 18, 0]]
** centroid: 5, normalized-entropy: 0.7131467486384921, [(1, 74), (2, 18)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [61, 2, 0]]
** centroid: 7, normalized-entropy: 0.20307392998664567, [(1, 61), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23653802637010812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23653802637010812, 0.18806834750249982] ***
*** starting iteration: 2; err: [Inf, 0.23653802637010812, 0.18806834750249982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23653802637010812, 0.18806834750249982, 0.1845468398882076] ***
*** starting iteration: 3; err: [Inf, 0.23653802637010812, 0.18806834750249982, 0.1845468398882076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23653802637010812, 0.18806834750249982, 0.1845468398882076, 0.18293375974800438] ***
*** starting iteration: 4; err: [Inf, 0.23653802637010812, 0.18806834750249982, 0.1845468398882076, 0.18293375974800438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23653802637010812, 0.18806834750249982, 0.1845468398882076, 0.18293375974800438, 0.18151700184494257] ***
*** starting iteration: 5; err: [Inf, 0.23653802637010812, 0.18806834750249982, 0.1845468398882076, 0.18293375974800438, 0.18151700184494257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23653802637010812, 0.18806834750249982, 0.1845468398882076, 0.18293375974800438, 0.18151700184494257, 0.1800708942534402] ***
*** starting iteration: 6; err: [Inf, 0.23653802637010812, 0.18806834750249982, 0.1845468398882076, 0.18293375974800438, 0.18151700184494257, 0.1800708942534402] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23653802637010812, 0.18806834750249982, 0.1845468398882076, 0.18293375974800438, 0.18151700184494257, 0.1800708942534402, 0.17910669236443938] ***
*** finished computation of 7 references, err: [Inf, 0.23653802637010812, 0.18806834750249982, 0.1845468398882076, 0.18293375974800438, 0.18151700184494257, 0.1800708942534402, 0.17910669236443938] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [53, 30, 0]]
** centroid: 1, normalized-entropy: 0.9438767571287909, [(1, 53), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 15, 0]]
** centroid: 2, normalized-entropy: 0.7114160189012126, [(1, 62), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 67, 15]]
** centroid: 3, normalized-entropy: 0.6864381668766382, [(2, 67), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 4, 0]]
** centroid: 5, normalized-entropy: 0.32984607020714635, [(1, 62), (2, 4)]
*** center 6: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22996258671581746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22996258671581746, 0.19375119798630475] ***
*** starting iteration: 2; err: [Inf, 0.22996258671581746, 0.19375119798630475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22996258671581746, 0.19375119798630475, 0.19109598524682223] ***
*** starting iteration: 3; err: [Inf, 0.22996258671581746, 0.19375119798630475, 0.19109598524682223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22996258671581746, 0.19375119798630475, 0.19109598524682223, 0.1907370480746031] ***
*** finished computation of 7 references, err: [Inf, 0.22996258671581746, 0.19375119798630475, 0.19109598524682223, 0.1907370480746031] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 70, 0]]
** centroid: 1, normalized-entropy: 0.24729443986205674, [(1, 3), (2, 70)]
*** center 2: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 32, 0]]
** centroid: 3, normalized-entropy: 0.9321115676166747, [(1, 60), (2, 32)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 15, 0]]
** centroid: 4, normalized-entropy: 0.7982441335646697, [(1, 47), (2, 15)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 55, 17]]
** centroid: 5, normalized-entropy: 0.7885131605379784, [(2, 55), (3, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21757714803889394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21757714803889394, 0.1882288468517363] ***
*** starting iteration: 2; err: [Inf, 0.21757714803889394, 0.1882288468517363] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21757714803889394, 0.1882288468517363, 0.18408564815856515] ***
*** starting iteration: 3; err: [Inf, 0.21757714803889394, 0.1882288468517363, 0.18408564815856515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21757714803889394, 0.1882288468517363, 0.18408564815856515, 0.18250503439456225] ***
*** starting iteration: 4; err: [Inf, 0.21757714803889394, 0.1882288468517363, 0.18408564815856515, 0.18250503439456225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21757714803889394, 0.1882288468517363, 0.18408564815856515, 0.18250503439456225, 0.18151493557728826] ***
*** finished computation of 7 references, err: [Inf, 0.21757714803889394, 0.1882288468517363, 0.18408564815856515, 0.18250503439456225, 0.18151493557728826] ***
*** center 1: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 72, 14]]
** centroid: 2, normalized-entropy: 0.6409441847875289, [(2, 72), (3, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [34, 33, 0]]
** centroid: 4, normalized-entropy: 0.9998393017810486, [(1, 34), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [38, 40, 0]]
** centroid: 5, normalized-entropy: 0.9995256892936492, [(1, 38), (2, 40)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 44, 0]]
** centroid: 7, normalized-entropy: 0.6572729784684466, [(1, 9), (2, 44)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23327804213017225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23327804213017225, 0.19181754964869469] ***
*** starting iteration: 2; err: [Inf, 0.23327804213017225, 0.19181754964869469] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23327804213017225, 0.19181754964869469, 0.18654629679396748] ***
*** starting iteration: 3; err: [Inf, 0.23327804213017225, 0.19181754964869469, 0.18654629679396748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23327804213017225, 0.19181754964869469, 0.18654629679396748, 0.18610701965447515] ***
*** finished computation of 7 references, err: [Inf, 0.23327804213017225, 0.19181754964869469, 0.18654629679396748, 0.18610701965447515] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [72, 18, 0]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(1, 72), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 3, 0]]
** centroid: 2, normalized-entropy: 0.29367630985136944, [(1, 55), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 90, 12]]
** centroid: 3, normalized-entropy: 0.5225593745369407, [(2, 90), (3, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [16, 52, 0]]
** centroid: 5, normalized-entropy: 0.787126586201269, [(1, 16), (2, 52)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [30, 22, 0]]
** centroid: 6, normalized-entropy: 0.9828586897127057, [(1, 30), (2, 22)]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22843927382398396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22843927382398396, 0.18456381292827428] ***
*** starting iteration: 2; err: [Inf, 0.22843927382398396, 0.18456381292827428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22843927382398396, 0.18456381292827428, 0.17911337686469778] ***
*** starting iteration: 3; err: [Inf, 0.22843927382398396, 0.18456381292827428, 0.17911337686469778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22843927382398396, 0.18456381292827428, 0.17911337686469778, 0.17858977802377193] ***
*** finished computation of 7 references, err: [Inf, 0.22843927382398396, 0.18456381292827428, 0.17911337686469778, 0.17858977802377193] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 64, 0]]
** centroid: 1, normalized-entropy: 0.5032583347756457, [(1, 8), (2, 64)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 14, 0]]
** centroid: 2, normalized-entropy: 0.7394809367166378, [(1, 53), (2, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 83, 10]]
** centroid: 4, normalized-entropy: 0.49241092131589825, [(2, 83), (3, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 16, 0]]
** centroid: 5, normalized-entropy: 0.7586638628883696, [(1, 57), (2, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22331894460693003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22331894460693003, 0.18900518204271793] ***
*** starting iteration: 2; err: [Inf, 0.22331894460693003, 0.18900518204271793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22331894460693003, 0.18900518204271793, 0.18681896937265993] ***
*** starting iteration: 3; err: [Inf, 0.22331894460693003, 0.18900518204271793, 0.18681896937265993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22331894460693003, 0.18900518204271793, 0.18681896937265993, 0.18611953603848816] ***
*** finished computation of 7 references, err: [Inf, 0.22331894460693003, 0.18900518204271793, 0.18681896937265993, 0.18611953603848816] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [17, 44, 0]]
** centroid: 1, normalized-entropy: 0.8536576732793314, [(1, 17), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 2, 0]]
** centroid: 2, normalized-entropy: 0.2222848306856879, [(1, 54), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 44, 14]]
** centroid: 4, normalized-entropy: 0.7973265101474423, [(2, 44), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 7, 0]]
** centroid: 5, normalized-entropy: 0.42440514472480345, [(1, 74), (2, 7)]
*** center 6: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23033487681113182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23033487681113182, 0.18996682458464056] ***
*** starting iteration: 2; err: [Inf, 0.23033487681113182, 0.18996682458464056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23033487681113182, 0.18996682458464056, 0.18762177701573818] ***
*** starting iteration: 3; err: [Inf, 0.23033487681113182, 0.18996682458464056, 0.18762177701573818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23033487681113182, 0.18996682458464056, 0.18762177701573818, 0.18721939219534398] ***
*** finished computation of 7 references, err: [Inf, 0.23033487681113182, 0.18996682458464056, 0.18762177701573818, 0.18721939219534398] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [21, 67, 0]]
** centroid: 1, normalized-entropy: 0.7927652363756529, [(1, 21), (2, 67)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 6, 0]]
** centroid: 2, normalized-entropy: 0.5586293734521991, [(1, 40), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 69, 14]]
** centroid: 4, normalized-entropy: 0.6546640527143932, [(2, 69), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [31, 37, 0]]
** centroid: 5, normalized-entropy: 0.9943766625699823, [(1, 31), (2, 37)]
*** center 6: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2133216013945639] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2133216013945639, 0.18716142983362077] ***
*** starting iteration: 2; err: [Inf, 0.2133216013945639, 0.18716142983362077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2133216013945639, 0.18716142983362077, 0.1835537113752216] ***
*** starting iteration: 3; err: [Inf, 0.2133216013945639, 0.18716142983362077, 0.1835537113752216] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2133216013945639, 0.18716142983362077, 0.1835537113752216, 0.183427868982777] ***
*** finished computation of 7 references, err: [Inf, 0.2133216013945639, 0.18716142983362077, 0.1835537113752216, 0.183427868982777] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 46, 16]]
** centroid: 2, normalized-entropy: 0.8238116333123173, [(2, 46), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 34, 0]]
** centroid: 4, normalized-entropy: 0.9813387358307915, [(1, 47), (2, 34)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 67, 0]]
** centroid: 5, normalized-entropy: 0.7266645172796352, [(1, 17), (2, 67)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 48, 0]]
** centroid: 6, normalized-entropy: 0.32275695889739825, [(1, 3), (2, 48)]
*** center 7: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23308533018827438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23308533018827438, 0.19087043605186046] ***
*** starting iteration: 2; err: [Inf, 0.23308533018827438, 0.19087043605186046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23308533018827438, 0.19087043605186046, 0.18715277472510933] ***
*** starting iteration: 3; err: [Inf, 0.23308533018827438, 0.19087043605186046, 0.18715277472510933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23308533018827438, 0.19087043605186046, 0.18715277472510933, 0.18672789698652922] ***
*** finished computation of 7 references, err: [Inf, 0.23308533018827438, 0.19087043605186046, 0.18715277472510933, 0.18672789698652922] ***
*** center 1: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 56, 12]]
** centroid: 2, normalized-entropy: 0.6722948170756378, [(2, 56), (3, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [81, 6, 0]]
** centroid: 4, normalized-entropy: 0.36205125173399805, [(1, 81), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 64, 0]]
** centroid: 5, normalized-entropy: 0.5713549744279549, [(1, 10), (2, 64)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [11, 60, 0]]
** centroid: 7, normalized-entropy: 0.6220403090607189, [(1, 11), (2, 60)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21856375160254538] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21856375160254538, 0.19539429054968058] ***
*** starting iteration: 2; err: [Inf, 0.21856375160254538, 0.19539429054968058] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21856375160254538, 0.19539429054968058, 0.18962215226329862] ***
*** starting iteration: 3; err: [Inf, 0.21856375160254538, 0.19539429054968058, 0.18962215226329862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21856375160254538, 0.19539429054968058, 0.18962215226329862, 0.1864204630702734] ***
*** starting iteration: 4; err: [Inf, 0.21856375160254538, 0.19539429054968058, 0.18962215226329862, 0.1864204630702734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21856375160254538, 0.19539429054968058, 0.18962215226329862, 0.1864204630702734, 0.1847751616053283] ***
*** starting iteration: 5; err: [Inf, 0.21856375160254538, 0.19539429054968058, 0.18962215226329862, 0.1864204630702734, 0.1847751616053283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21856375160254538, 0.19539429054968058, 0.18962215226329862, 0.1864204630702734, 0.1847751616053283, 0.18489216693118216] ***
*** finished computation of 7 references, err: [Inf, 0.21856375160254538, 0.19539429054968058, 0.18962215226329862, 0.1864204630702734, 0.1847751616053283, 0.18489216693118216] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [44, 39, 0]]
** centroid: 1, normalized-entropy: 0.9973806632063373, [(1, 44), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 7, 0]]
** centroid: 2, normalized-entropy: 0.54991090463341, [(1, 48), (2, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [11, 69, 0]]
** centroid: 4, normalized-entropy: 0.5776539033535634, [(1, 11), (2, 69)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 71, 18]]
** centroid: 5, normalized-entropy: 0.7263997735417457, [(2, 71), (3, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [75, 2, 0]]
** centroid: 7, normalized-entropy: 0.17378132267943294, [(1, 75), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2305880347415805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2305880347415805, 0.18711581699177623] ***
*** starting iteration: 2; err: [Inf, 0.2305880347415805, 0.18711581699177623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2305880347415805, 0.18711581699177623, 0.18402861414104701] ***
*** starting iteration: 3; err: [Inf, 0.2305880347415805, 0.18711581699177623, 0.18402861414104701] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2305880347415805, 0.18711581699177623, 0.18402861414104701, 0.18262759903818368] ***
*** starting iteration: 4; err: [Inf, 0.2305880347415805, 0.18711581699177623, 0.18402861414104701, 0.18262759903818368] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2305880347415805, 0.18711581699177623, 0.18402861414104701, 0.18262759903818368, 0.1824660171661526] ***
*** finished computation of 7 references, err: [Inf, 0.2305880347415805, 0.18711581699177623, 0.18402861414104701, 0.18262759903818368, 0.1824660171661526] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [71, 6, 0]]
** centroid: 2, normalized-entropy: 0.39481484603049416, [(1, 71), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 57, 17]]
** centroid: 3, normalized-entropy: 0.77753986416076, [(2, 57), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 10, 0]]
** centroid: 4, normalized-entropy: 0.5969995167604553, [(1, 59), (2, 10)]
*** center 5: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 73, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [31, 33, 0]]
** centroid: 7, normalized-entropy: 0.9992954443621548, [(1, 31), (2, 33)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2246546651609242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2246546651609242, 0.19180865374417044] ***
*** starting iteration: 2; err: [Inf, 0.2246546651609242, 0.19180865374417044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2246546651609242, 0.19180865374417044, 0.1882916487827897] ***
*** starting iteration: 3; err: [Inf, 0.2246546651609242, 0.19180865374417044, 0.1882916487827897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2246546651609242, 0.19180865374417044, 0.1882916487827897, 0.1878695117980242] ***
*** finished computation of 7 references, err: [Inf, 0.2246546651609242, 0.19180865374417044, 0.1882916487827897, 0.1878695117980242] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 18, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 54), (2, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 73, 19]]
** centroid: 4, normalized-entropy: 0.7347813522127804, [(2, 73), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 31, 0]]
** centroid: 5, normalized-entropy: 0.9753817903274211, [(1, 45), (2, 31)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [77, 3, 0]]
** centroid: 6, normalized-entropy: 0.2307099556914763, [(1, 77), (2, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24327032293006778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24327032293006778, 0.1916502416357398] ***
*** starting iteration: 2; err: [Inf, 0.24327032293006778, 0.1916502416357398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24327032293006778, 0.1916502416357398, 0.1884240442533046] ***
*** starting iteration: 3; err: [Inf, 0.24327032293006778, 0.1916502416357398, 0.1884240442533046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24327032293006778, 0.1916502416357398, 0.1884240442533046, 0.18728199347294866] ***
*** starting iteration: 4; err: [Inf, 0.24327032293006778, 0.1916502416357398, 0.1884240442533046, 0.18728199347294866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24327032293006778, 0.1916502416357398, 0.1884240442533046, 0.18728199347294866, 0.18584323551808485] ***
*** starting iteration: 5; err: [Inf, 0.24327032293006778, 0.1916502416357398, 0.1884240442533046, 0.18728199347294866, 0.18584323551808485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24327032293006778, 0.1916502416357398, 0.1884240442533046, 0.18728199347294866, 0.18584323551808485, 0.18463200585357845] ***
*** starting iteration: 6; err: [Inf, 0.24327032293006778, 0.1916502416357398, 0.1884240442533046, 0.18728199347294866, 0.18584323551808485, 0.18463200585357845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24327032293006778, 0.1916502416357398, 0.1884240442533046, 0.18728199347294866, 0.18584323551808485, 0.18463200585357845, 0.1839061903785914] ***
*** finished computation of 7 references, err: [Inf, 0.24327032293006778, 0.1916502416357398, 0.1884240442533046, 0.18728199347294866, 0.18584323551808485, 0.18463200585357845, 0.1839061903785914] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [75, 5, 0]]
** centroid: 1, normalized-entropy: 0.3372900666170139, [(1, 75), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 5, 0]]
** centroid: 2, normalized-entropy: 0.32840071392894665, [(1, 78), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 74, 9]]
** centroid: 3, normalized-entropy: 0.4951734787020683, [(2, 74), (3, 9)]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 12, 0]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(1, 60), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 22, 0]]
** centroid: 6, normalized-entropy: 0.9575534837147484, [(1, 36), (2, 22)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22493263052217663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22493263052217663, 0.19469548115320504] ***
*** starting iteration: 2; err: [Inf, 0.22493263052217663, 0.19469548115320504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22493263052217663, 0.19469548115320504, 0.18989252994023265] ***
*** starting iteration: 3; err: [Inf, 0.22493263052217663, 0.19469548115320504, 0.18989252994023265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22493263052217663, 0.19469548115320504, 0.18989252994023265, 0.18845333179831505] ***
*** starting iteration: 4; err: [Inf, 0.22493263052217663, 0.19469548115320504, 0.18989252994023265, 0.18845333179831505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22493263052217663, 0.19469548115320504, 0.18989252994023265, 0.18845333179831505, 0.18777713887393474] ***
*** finished computation of 7 references, err: [Inf, 0.22493263052217663, 0.19469548115320504, 0.18989252994023265, 0.18845333179831505, 0.18777713887393474] ***
*** center 1: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 63, 9]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(2, 63), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [79, 17, 0]]
** centroid: 3, normalized-entropy: 0.673654715229001, [(1, 79), (2, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 53, 0]]
** centroid: 5, normalized-entropy: 0.847107490529376, [(1, 20), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 53, 0]]
** centroid: 7, normalized-entropy: 0.6900703653284017, [(1, 12), (2, 53)]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 364,3 => 29,1 => 607), Dict(2 => 370,3 => 41,1 => 589))
[ Info: ===== scores for single classifier: {"micro_f1":0.927,"precision":0.927,"recall":0.927,"macro_recall":0.6448722066718671,"macro_f1":0.6267714989984355,"accuracy":0.927,"class_f1":{"2":0.9077117572692793,"3":0.0,"1":0.9726027397260274},"class_precision":{"2":0.8527315914489311,"3":0.0,"1":0.9810017271157168},"class_recall":{"2":0.9702702702702702,"3":0.0,"1":0.9643463497453311}}
[ Info: ===== scores for 1: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9554310532322045,"macro_f1":0.9425406835515634,"accuracy":0.961,"class_f1":{"2":0.9469387755102041,"3":0.9069767441860465,"1":0.9737065309584393},"class_precision":{"2":0.9534246575342465,"3":0.8666666666666667,"1":0.9728813559322034},"class_recall":{"2":0.9405405405405406,"3":0.9512195121951219,"1":0.9745331069609507}}
[ Info: ===== scores for 5: {"micro_f1":0.963,"precision":0.963,"recall":0.963,"macro_recall":0.9582377648674391,"macro_f1":0.9474172244839947,"accuracy":0.963,"class_f1":{"2":0.9502018842530282,"3":0.9176470588235294,"1":0.9744027303754266},"class_precision":{"2":0.9463806970509383,"3":0.8863636363636364,"1":0.9794168096054888},"class_recall":{"2":0.9540540540540541,"3":0.9512195121951219,"1":0.969439728353141}}
[ Info: ===== scores for 7: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9528103862693288,"macro_f1":0.9449370526493389,"accuracy":0.965,"class_f1":{"2":0.9531459170013387,"3":0.9047619047619047,"1":0.9769033361847734},"class_precision":{"2":0.9442970822281167,"3":0.8837209302325582,"1":0.9844827586206897},"class_recall":{"2":0.9621621621621622,"3":0.926829268292683,"1":0.969439728353141}}
[ Info: ===== scores for 9: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9546121880711306,"macro_f1":0.9464269030134056,"accuracy":0.967,"class_f1":{"2":0.9559412550066755,"3":0.9047619047619047,"1":0.9785775492716368},"class_precision":{"2":0.9445910290237467,"3":0.8837209302325582,"1":0.9878892733564014},"class_recall":{"2":0.9675675675675676,"3":0.926829268292683,"1":0.969439728353141}}
[ Info: ===== scores for 11: {"micro_f1":0.968,"precision":0.968,"recall":0.968,"macro_recall":0.9545081791385986,"macro_f1":0.9375294646154484,"accuracy":0.968,"class_f1":{"2":0.956989247311828,"3":0.8735632183908046,"1":0.9820359281437125},"class_precision":{"2":0.9518716577540107,"3":0.8260869565217391,"1":0.9896551724137931},"class_recall":{"2":0.9621621621621622,"3":0.926829268292683,"1":0.9745331069609507}}
(score = 0.961, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.972,"k":5,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9801342938864162,"macro_f1":0.9651137143260174,"accuracy":0.972,"class_f1":{"2":0.9623655913978495,"3":0.9534883720930233,"1":0.9794871794871794},"class_precision":{"2":0.9572192513368984,"3":0.9111111111111111,"1":0.9862306368330465},"class_recall":{"2":0.9675675675675676,"3":1.0,"1":0.9728353140916808}}
Test Summary: | Pass  Total
AKNC          |    8      8
[184, 1, 1, 1, 3, 2, 3, 2, 3, 1, 3, 17, 2, 1, 3, 7, 1, 46, 3, 2, 43, 15, 2, 2, 5, 13, 5, 2, 12, 13, 23, 2, 3, 3, 20, 4, 4, 27, 21, 25, 16, 5, 10, 1, 28, 20, 2, 123, 9, 19, 21, 6, 6, 109, 10, 4, 56, 10, 14, 2, 26, 36, 2, 3, 9, 6, 1, 33, 5, 64, 73, 53, 9, 10, 7, 13, 30, 4, 2, 2, 14, 17, 22, 8, 57, 31, 4, 39, 101, 25, 30, 5, 3, 13, 3, 1, 144, 12, 116, 3, 119, 12, 8, 32, 43, 62, 24, 8, 19, 25, 25, 14, 5, 4, 5, 33, 12, 6, 11, 34, 29, 34, 4, 17, 12, 20, 45, 36, 106, 65, 2, 17, 17, 23, 19, 33, 18, 2, 8, 5, 36, 10, 7, 46, 1, 96, 78, 59, 48, 5, 32, 231, 20, 8, 7, 13, 3, 39, 95, 40, 12, 5, 33, 715, 25, 28, 24, 25, 95, 14, 79, 6, 68, 10, 30, 2, 4, 76, 24, 6, 23, 94, 15, 21, 31, 28, 132, 48, 24, 4, 49, 30, 7, 987, 5, 6, 6, 8, 15, 16, 18, 80, 10, 219, 4, 23, 21, 14, 28, 16, 22, 13, 16, 6, 13, 16, 45, 12, 7, 2, 9, 23, 11, 3, 50, 67, 14, 60, 10, 48, 4, 23, 19, 31, 9, 46, 1, 58, 148, 7, 4, 44, 16, 20, 50, 55, 11, 82, 24, 18, 11, 24, 55, 68, 8, 55, 17, 176, 29, 27, 38, 10, 82, 11, 6, 19, 63, 17, 46, 1, 16, 3, 4, 30, 6, 139, 44, 7, 7, 58, 18, 12, 42, 11, 46, 5, 7, 174, 55, 31, 40, 6, 9, 14, 67, 8, 15, 20, 28, 11]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.599, speedup = 0.18771590865689175, eval_ratio = 0.074657)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.39802517361111117,"recall":0.3906250000000001,"f1":null,"seconds":0.00019877031445503235,"exhaustive_search_seconds":0.00037546083331108093,"evaluations":519.59375,"distances_sum":1733.9365802466773}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5486111111111108,"recall":0.5486111111111108,"f1":null,"seconds":0.0002958253026008606,"exhaustive_search_seconds":0.00037546083331108093,"evaluations":646.2265625,"distances_sum":1653.1359009891435}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6545138888888888,"recall":0.6545138888888888,"f1":null,"seconds":0.0004086103290319443,"exhaustive_search_seconds":0.00037546083331108093,"evaluations":768.3125,"distances_sum":1601.0687270798442}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7248263888888884,"recall":0.7248263888888884,"f1":null,"seconds":0.0008158683776855469,"exhaustive_search_seconds":0.00037546083331108093,"evaluations":893.5625,"distances_sum":1575.8487368451651}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7725694444444439,"recall":0.7725694444444439,"f1":null,"seconds":0.0007667932659387589,"exhaustive_search_seconds":0.00037546083331108093,"evaluations":987.0859375,"distances_sum":1559.9035619389826}
KCenters.DeloneInvIndex> reached performance {"precision":0.8124999999999993,"recall":0.8124999999999993,"f1":0.8124999999999993,"seconds":0.0006084516644477844,"exhaustive_search_seconds":0.00037546083331108093,"evaluations":1104.65625,"distances_sum":1549.7998569567733}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.796, speedup = 0.5560015603666861, eval_ratio = 0.108456)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
