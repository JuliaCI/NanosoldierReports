Julia Version 1.5.0-DEV.11
Commit bf3c5d81c2 (2020-01-03 14:17 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed DataAPI ───────────────────── v1.1.0
 Installed KCenters ──────────────────── v0.1.8
 Installed OrderedCollections ────────── v1.1.0
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed MLLabelUtils ──────────────── v0.5.1
 Installed MLDataUtils ───────────────── v0.5.0
 Installed JSON ──────────────────────── v0.21.0
 Installed Reexport ──────────────────── v0.2.0
 Installed Missings ──────────────────── v0.4.3
 Installed MappedArrays ──────────────── v0.2.2
 Installed TableTraits ───────────────── v1.0.0
 Installed PooledArrays ──────────────── v0.5.3
 Installed MLDataPattern ─────────────── v0.5.0
 Installed SimilaritySearch ──────────── v0.3.17
 Installed LearnBase ─────────────────── v0.2.2
 Installed Tables ────────────────────── v0.2.11
 Installed DataValueInterfaces ───────── v1.0.0
 Installed Compat ────────────────────── v3.2.0
 Installed DataStructures ────────────── v0.17.7
 Installed Parsers ───────────────────── v0.3.10
 Installed StatsBase ─────────────────── v0.32.0
 Installed DataFrames ────────────────── v0.20.0
 Installed InvertedIndices ───────────── v1.0.0
 Installed CategoricalArrays ─────────── v0.7.5
  Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.1.8
  Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.5
  [34da2185] + Compat v3.2.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.7
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.8
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.10
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.17
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing KCenters
  Updating `/tmp/jl_wQQMmP/Project.toml`
 [no changes]
  Updating `/tmp/jl_wQQMmP/Manifest.toml`
 [no changes]
Running sandbox
Status `/tmp/jl_wQQMmP/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.8
  [cc2ba9b6] MLDataUtils v0.5.0
  [053f045d] SimilaritySearch v0.3.17
  [2913bbd2] StatsBase v0.32.0
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [37e2e46d] LinearAlgebra 
  [9a3f8284] Random 
  [2f01184e] SparseArrays 
  [8dfed614] Test 
Test Summary: | Pass  Total
Scores        |    9      9
[ Info: 131.83000000000007
[ Info: 70.08000000000004
[ Info: 38.67999999999999
[ Info: 22.07
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 313.64000338064864
[ Info: 547.7199992669996
[ Info: 146.21999839687118
[ Info: 75.80000116067464
Test Summary:        |
Clustering with dnet | No tests
inertia(cfft.distances) = 18.43565090952681
inertia(cdnet.distances) = 24.141136162267433
inertia(crand.distances) = 22.72317122587632
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.856240114052615,"seconds":7.839873433113098e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6328125,"distances_sum":2432.0721718668797}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.856240114052615,"seconds":7.839873433113098e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6328125,"distances_sum":2432.0721718668797}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9152586996337002,"seconds":6.118789315223694e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.796875,"distances_sum":2867.7186427697097}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9626316391941395,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9140625,"distances_sum":3279.8003788142732}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9681204212454216,"seconds":6.329268217086792e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9375,"distances_sum":3307.8893292675284}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9267456501831507,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.875,"distances_sum":2921.7663975372675}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9681204212454216,"seconds":6.329268217086792e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9375,"distances_sum":3307.8893292675284}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9704670329670335,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.953125,"distances_sum":3327.509131339239}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9704670329670334,"seconds":0.00014156848192214966,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9609375,"distances_sum":3306.23536314399}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9704670329670335,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.953125,"distances_sum":3327.509131339239}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9704670329670335,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.953125,"distances_sum":3327.509131339239}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8653742091242098,"seconds":5.114823579788208e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.2734375,"distances_sum":2367.792168322437}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.412109375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.412109375,"f1":null,"seconds":3.864988684654236e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":6.875,"distances_sum":1094.0454368680812}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7783203125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7783203125,"f1":0.8653742091242098,"seconds":5.114823579788208e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.2734375,"distances_sum":2367.792168322437}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9225420412920418,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.6171875,"distances_sum":2805.082392429302}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.909280823343324,"seconds":5.189329385757446e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.5625,"distances_sum":2695.169091560497}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8681640625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8681640625,"f1":0.9225420412920418,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.6171875,"distances_sum":2805.082392429302}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.939835164835165,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.734375,"distances_sum":2969.602194838162}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9478479853479856,"seconds":4.783272743225098e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.796875,"distances_sum":3020.2178444449323}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9605311355311358,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8125,"distances_sum":3142.2600317958068}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9637133699633703,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8671875,"distances_sum":3132.9153583677607}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9637133699633703,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8671875,"distances_sum":3132.9153583677607}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9637133699633703,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8671875,"distances_sum":3132.9153583677607}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.197265625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.197265625,"f1":null,"seconds":3.341585397720337e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":6.140625,"distances_sum":608.1529186709562}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8049955253080261,"seconds":4.872679710388184e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":7.9765625,"distances_sum":2040.12266906254}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69140625,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.69140625,"f1":0.8049955253080261,"seconds":4.872679710388184e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":7.9765625,"distances_sum":2040.12266906254}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9409855769230776,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.84375,"distances_sum":2880.0178086971755}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8681755744255752,"seconds":5.107372999191284e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.5859375,"distances_sum":2294.612518078975}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8955078125,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8955078125,"f1":0.9409855769230776,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.84375,"distances_sum":2880.0178086971755}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9506639194139198,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.890625,"distances_sum":2947.3288358133304}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9506639194139198,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.890625,"distances_sum":2947.3288358133304}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9506639194139198,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.890625,"distances_sum":2947.3288358133304}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.431640625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.431640625,"f1":null,"seconds":3.876164555549622e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":6.9453125,"distances_sum":1089.9370847700852}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8056640625,"f1":0.8858693389943398,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.4453125,"distances_sum":2381.60685295303}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8056640625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.8056640625,"f1":0.8858693389943398,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.4453125,"distances_sum":2381.60685295303}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9384386446886452,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.7734375,"distances_sum":2849.0512517397437}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.961332417582418,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8671875,"distances_sum":3054.647706059956}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.961332417582418,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8671875,"distances_sum":3054.647706059956}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.961332417582418,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8671875,"distances_sum":3054.647706059956}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.961332417582418,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8671875,"distances_sum":3054.647706059956}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3759765625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3759765625,"f1":null,"seconds":3.729015588760376e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":5.796875,"distances_sum":1020.8530266628745}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7926941114441123,"seconds":4.956498742103577e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":7.5078125,"distances_sum":1985.651304813317}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.671875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.671875,"f1":0.7926941114441123,"seconds":4.956498742103577e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":7.5078125,"distances_sum":1985.651304813317}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9063015109890116,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.4765625,"distances_sum":2602.6492012719036}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9069919663669673,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.484375,"distances_sum":2651.2968273031197}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8427734375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8427734375,"f1":0.9069919663669673,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.484375,"distances_sum":2651.2968273031197}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9303665084915093,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.6015625,"distances_sum":2869.638314729958}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9644001831501835,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.875,"distances_sum":3118.7879335411612}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9209223068598074,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.5859375,"distances_sum":2783.649636145162}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9592319139194146,"seconds":6.26780092716217e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.8125,"distances_sum":3069.093274295259}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9644001831501835,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.875,"distances_sum":3118.7879335411612}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9644001831501835,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.875,"distances_sum":3118.7879335411612}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7980925324675332,"seconds":5.902722477912903e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.15625,"distances_sum":1953.7079022596147}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5458984375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5458984375,"f1":0.6921585359085365,"seconds":4.522502422332764e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":7.28125,"distances_sum":1434.6479465522782}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.544921875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.544921875,"f1":0.6886738261738267,"seconds":4.6156346797943115e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":7.3125,"distances_sum":1475.9139655243964}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6787109375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6787109375,"f1":0.7980925324675332,"seconds":5.902722477912903e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.15625,"distances_sum":1953.7079022596147}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8672535797535806,"seconds":5.2656978368759155e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.1171875,"distances_sum":2302.3247662216504}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9274839743589748,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.6640625,"distances_sum":2814.005750959863}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9163295038295045,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.640625,"distances_sum":2720.8383401141114}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9428285256410263,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.7265625,"distances_sum":2943.0488413570424}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9084623709623714,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.5703125,"distances_sum":2646.1136559502656}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.900390625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.9428285256410263,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.7265625,"distances_sum":2943.0488413570424}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9552884615384619,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.828125,"distances_sum":3043.631933927294}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9596611721611722,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8984375,"distances_sum":3058.901526852238}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9704269688644693,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.890625,"distances_sum":3168.3325333228227}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.967880036630037,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8984375,"distances_sum":3136.968587709067}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9704269688644693,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.890625,"distances_sum":3168.3325333228227}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9704269688644693,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.890625,"distances_sum":3168.3325333228227}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.560546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.560546875,"f1":null,"seconds":3.850087523460388e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.046875,"distances_sum":1439.8924243504928}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1630859375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1630859375,"f1":null,"seconds":2.816319465637207e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":5.109375,"distances_sum":470.151782867084}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1953125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1953125,"f1":null,"seconds":2.7623027563095093e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":5.296875,"distances_sum":560.2347552901788}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8739073426573434,"seconds":4.231929779052734e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.046875,"distances_sum":2301.2541624311366}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.791015625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.791015625,"f1":0.8739073426573434,"seconds":4.231929779052734e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.046875,"distances_sum":2301.2541624311366}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8988240925740936,"seconds":3.3956021070480347e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.3828125,"distances_sum":2459.127277006447}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7939453125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7939453125,"f1":0.8754505910755918,"seconds":4.686415195465088e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.984375,"distances_sum":2314.240208611426}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8291015625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8291015625,"f1":0.8988240925740936,"seconds":3.3956021070480347e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.3828125,"distances_sum":2459.127277006447}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.96038804945055,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.796875,"distances_sum":2971.463990702683}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9662202380952386,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.859375,"distances_sum":3014.9639964515586}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.948895375457876,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.65625,"distances_sum":2926.382768467981}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9362293956043961,"seconds":5.2247196435928345e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.53125,"distances_sum":2868.5585825962426}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9326179029304036,"seconds":5.185604095458984e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5078125,"distances_sum":2751.2438813529443}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9662202380952386,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.859375,"distances_sum":3014.9639964515586}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9662202380952386,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.859375,"distances_sum":3014.9639964515586}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.7795104201354208,"seconds":4.984438419342041e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.7734375,"distances_sum":1368.5979371155684}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.845717650405151,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.9921875,"distances_sum":1673.0955681007645}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.845717650405151,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.9921875,"distances_sum":1673.0955681007645}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9404304029304037,"seconds":3.7103891372680664e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.859375,"distances_sum":2173.523245149103}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8056640625,"f1":0.8850139443889452,"seconds":3.2763928174972534e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.15625,"distances_sum":1823.804681264821}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9537259615384618,"seconds":4.433095455169678e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.84375,"distances_sum":2287.637619976716}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9536546786546791,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.859375,"distances_sum":2273.290890809696}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9334394771894781,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8359375,"distances_sum":2146.0627898746725}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8653050074925082,"seconds":4.7013163566589355e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.0546875,"distances_sum":1710.0084675002158}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9537259615384618,"seconds":4.433095455169678e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.84375,"distances_sum":2287.637619976716}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9774553571428574,"seconds":4.41819429397583e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.984375,"distances_sum":2414.5582189078764}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9755036630036632,"seconds":5.735084414482117e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.9375,"distances_sum":2408.7245151555153}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9708161630036635,"seconds":3.827735781669617e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.9453125,"distances_sum":2369.8404519178935}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9680460164835167,"seconds":3.917142748832703e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.9453125,"distances_sum":2354.3141545517647}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9552712912087916,"seconds":3.6545097827911377e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.84375,"distances_sum":2288.1763340904777}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9726762820512822,"seconds":3.915280103683472e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.9453125,"distances_sum":2383.7805673410357}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9707646520146522,"seconds":3.7923455238342285e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.9375,"distances_sum":2369.3024994393927}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9774553571428574,"seconds":4.41819429397583e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.984375,"distances_sum":2414.5582189078764}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9774553571428574,"seconds":4.41819429397583e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.984375,"distances_sum":2414.5582189078764}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8903273809523816,"seconds":3.296881914138794e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.3671875,"distances_sum":1911.6445930719176}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.369140625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.369140625,"f1":null,"seconds":2.0638108253479004e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":5.6484375,"distances_sum":825.3562633063082}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5224609375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5224609375,"f1":0.670554445554446,"seconds":3.3546239137649536e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":6.8125,"distances_sum":1143.9254373774659}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8134765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.8134765625,"f1":0.8903273809523816,"seconds":3.296881914138794e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.3671875,"distances_sum":1911.6445930719176}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9161088911088915,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.5234375,"distances_sum":2117.810838344861}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9103937728937739,"seconds":5.2675604820251465e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.4765625,"distances_sum":2039.1003714605442}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8989760239760247,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.3125,"distances_sum":1983.5775299116558}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8564453125,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8564453125,"f1":0.9161088911088915,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.5234375,"distances_sum":2117.810838344861}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9604395604395609,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.8046875,"distances_sum":2409.150117418461}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9649210164835167,"seconds":5.966052412986755e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.875,"distances_sum":2426.1280275441004}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.961092032967033,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.8671875,"distances_sum":2397.6075251309626}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9372653388278396,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.6328125,"distances_sum":2284.189258142673}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9649210164835167,"seconds":5.966052412986755e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.875,"distances_sum":2426.1280275441004}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9649210164835167,"seconds":5.966052412986755e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.875,"distances_sum":2426.1280275441004}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2548828125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2548828125,"f1":null,"seconds":3.4496188163757324e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.421875,"distances_sum":545.4175394247299}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.259765625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.259765625,"f1":null,"seconds":3.3266842365264893e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.3125,"distances_sum":633.1298519602675}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2294921875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2294921875,"f1":null,"seconds":3.1366944313049316e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.0078125,"distances_sum":483.00000212625974}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.259765625,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.259765625,"f1":null,"seconds":3.3266842365264893e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.3125,"distances_sum":633.1298519602675}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8040138680763688,"seconds":4.734843969345093e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.03125,"distances_sum":1483.8547761621887}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4658203125, conf: {"ssize":6,"bsize":2}, perf: {"precision":null,"recall":0.4658203125,"f1":null,"seconds":2.1979212760925293e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.2890625,"distances_sum":930.0683430604195}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7966814435564444,"seconds":3.28943133354187e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.96875,"distances_sum":1417.1481135422418}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.578125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.578125,"f1":0.717481650294151,"seconds":2.769753336906433e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.8359375,"distances_sum":1153.4331173601659}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69140625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.69140625,"f1":0.8040138680763688,"seconds":4.734843969345093e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.03125,"distances_sum":1483.8547761621887}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9063587454212461,"seconds":3.555789589881897e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.46875,"distances_sum":1934.7758932790994}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9210170038295046,"seconds":3.7830322980880737e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7890625,"distances_sum":2072.899170308438}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8539408508158517,"seconds":3.7066638469696045e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.921875,"distances_sum":1647.011459258037}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9575034340659345,"seconds":3.6526471376419067e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9296875,"distances_sum":2285.5323153442805}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8719010156510164,"seconds":3.3620744943618774e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.1015625,"distances_sum":1749.3760542148839}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8743454462204471,"seconds":3.116205334663391e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.1328125,"distances_sum":1795.049072964693}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9347355769230776,"seconds":3.809109330177307e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.953125,"distances_sum":2102.2290981735323}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9575034340659345,"seconds":3.6526471376419067e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9296875,"distances_sum":2285.5323153442805}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9575034340659345,"seconds":3.6526471376419067e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9296875,"distances_sum":2285.5323153442805}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5732421875, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5732421875,"f1":null,"seconds":2.8070062398910522e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":7.2890625,"distances_sum":1177.082057618174}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5732421875,"state":{"ssize":3,"bsize":3},"perf":{"precision":null,"recall":0.5732421875,"f1":null,"seconds":2.8070062398910522e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":7.2890625,"distances_sum":1177.082057618174}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8893606393606401,"seconds":5.085021257400513e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.5625,"distances_sum":1936.8216147824119}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8134765625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8134765625,"f1":0.8893606393606401,"seconds":5.085021257400513e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.5625,"distances_sum":1936.8216147824119}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9606055402930405,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.8828125,"distances_sum":2370.4396554808836}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9133330211455221,"seconds":5.230307579040527e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.71875,"distances_sum":2055.8632750854304}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9606055402930405,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.8828125,"distances_sum":2370.4396554808836}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9296875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9606055402930405,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.8828125,"distances_sum":2370.4396554808836}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.25390625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.25390625,"f1":null,"seconds":3.3974647521972656e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":6.5,"distances_sum":576.8640420021718}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8738896520146529,"seconds":3.846362233161926e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":7.75,"distances_sum":1767.068908581013}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.7794219669219676,"seconds":3.0491501092910767e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":7.4453125,"distances_sum":1360.2798589482422}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8738896520146529,"seconds":3.846362233161926e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":7.75,"distances_sum":1767.068908581013}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.929922161172162,"seconds":3.550201654434204e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.7421875,"distances_sum":2140.3777823902456}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9583390567765572,"seconds":3.598630428314209e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.8359375,"distances_sum":2320.098572042663}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9583390567765572,"seconds":3.598630428314209e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.8359375,"distances_sum":2320.098572042663}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9672275641025646,"seconds":3.648921847343445e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.921875,"distances_sum":2356.7042993231007}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9593063186813193,"seconds":3.6247074604034424e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.8359375,"distances_sum":2322.9727644921363}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9672275641025646,"seconds":3.648921847343445e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.921875,"distances_sum":2356.7042993231007}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9672275641025646,"seconds":3.648921847343445e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.921875,"distances_sum":2356.7042993231007}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.525390625, conf: {"ssize":2,"bsize":3}, perf: {"precision":0.9723958333333335,"recall":0.525390625,"f1":0.6676883880008884,"seconds":2.8926879167556763e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":6.625,"distances_sum":1254.2038488381363}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":0.9756510416666668,"recall":0.515625,"f1":0.6597018432955938,"seconds":2.522021532058716e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":6.5,"distances_sum":1190.430463574694}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3935546875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3935546875,"f1":null,"seconds":2.1886080503463745e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":6.1640625,"distances_sum":958.3866683798591}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.525390625,"state":{"ssize":2,"bsize":3},"perf":{"precision":0.9723958333333335,"recall":0.525390625,"f1":0.6676883880008884,"seconds":2.8926879167556763e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":6.625,"distances_sum":1254.2038488381363}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.9815290178571429,"recall":0.853515625,"f1":0.9086781707875463,"seconds":3.5818666219711304e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.8125,"distances_sum":2463.03172957689}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":4,"bsize":7}, perf: {"precision":0.983696056547619,"recall":0.88671875,"f1":0.9289670615842495,"seconds":3.63960862159729e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.796875,"distances_sum":2626.9440892084126}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6494140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.6494140625,"f1":null,"seconds":2.855435013771057e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":7.265625,"distances_sum":1670.5915019881909}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7080078125, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9748883928571427,"recall":0.7080078125,"f1":0.8131108474858479,"seconds":3.417953848838806e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.0703125,"distances_sum":1869.4579369608764}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.88671875,"state":{"ssize":4,"bsize":7},"perf":{"precision":0.983696056547619,"recall":0.88671875,"f1":0.9289670615842495,"seconds":3.63960862159729e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.796875,"distances_sum":2626.9440892084126}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9877232142857143,"recall":0.89453125,"f1":0.9345867673992677,"seconds":3.507360816001892e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.7890625,"distances_sum":2659.312228876313}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":0.9801432291666667,"recall":0.93359375,"f1":0.9537152300824178,"seconds":3.769993782043457e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.9609375,"distances_sum":2827.9644925327616}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":10}, perf: {"precision":0.9836774553571429,"recall":0.953125,"f1":0.9667131696428571,"seconds":3.954395651817322e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.9296875,"distances_sum":2924.112183468946}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":5,"bsize":11}, perf: {"precision":0.9826543898809524,"recall":0.955078125,"f1":0.967066592261905,"seconds":3.7457793951034546e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.96875,"distances_sum":2930.7012007848716}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":5,"bsize":11},"perf":{"precision":0.9826543898809524,"recall":0.955078125,"f1":0.967066592261905,"seconds":3.7457793951034546e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.96875,"distances_sum":2930.7012007848716}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":5,"bsize":11},"perf":{"precision":0.9826543898809524,"recall":0.955078125,"f1":0.967066592261905,"seconds":3.7457793951034546e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.96875,"distances_sum":2930.7012007848716}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.800415730103231,"seconds":2.9243528842926025e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":7.8203125,"distances_sum":1717.207934179411}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.630859375, conf: {"ssize":4,"bsize":4}, perf: {"precision":null,"recall":0.630859375,"f1":null,"seconds":4.019588232040405e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":7.6015625,"distances_sum":1547.2357127978619}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6796875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6796875,"f1":0.800415730103231,"seconds":2.9243528842926025e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":7.8203125,"distances_sum":1717.207934179411}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9252174908424918,"seconds":5.129724740982056e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.734375,"distances_sum":2471.7956489924923}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8597145909645919,"seconds":3.3117830753326416e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.25,"distances_sum":1998.848442826622}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9577094780219785,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.8125,"distances_sum":2734.216092923123}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9577094780219785,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.8125,"distances_sum":2734.216092923123}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.958453525641026,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.84375,"distances_sum":2708.7700541547656}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9668383699633704,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.875,"distances_sum":2782.344549188274}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9656681859806862,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.84375,"distances_sum":2782.6728933017084}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9633241758241763,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.90625,"distances_sum":2733.6135755090368}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9661687271062274,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.890625,"distances_sum":2774.260565138907}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9668383699633704,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.875,"distances_sum":2782.344549188274}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9668383699633704,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.875,"distances_sum":2782.344549188274}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2119140625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2119140625,"f1":null,"seconds":3.129243850708008e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":5.3671875,"distances_sum":495.55869108526076}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7177734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7177734375,"f1":0.8253819097569106,"seconds":5.0514936447143555e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.8125,"distances_sum":1847.065510350629}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7177734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7177734375,"f1":0.8253819097569106,"seconds":5.0514936447143555e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.8125,"distances_sum":1847.065510350629}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.8370723026973036,"seconds":4.770234227180481e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.90625,"distances_sum":1930.0994148676211}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8982200091575101,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.3046875,"distances_sum":2236.6046875819225}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8251953125,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8251953125,"f1":0.8982200091575101,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.3046875,"distances_sum":2236.6046875819225}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9411973443223449,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.6953125,"distances_sum":2623.6887292360216}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9638850732600738,"seconds":5.679205060005188e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8046875,"distances_sum":2797.2410108646654}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9657222985347989,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8203125,"distances_sum":2808.328724892659}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.931461767399268,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.625,"distances_sum":2538.739520936204}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9657222985347989,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8203125,"distances_sum":2808.328724892659}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9657222985347989,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8203125,"distances_sum":2808.328724892659}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8476996961371968,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.3984375,"distances_sum":1952.0984715267361}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2119140625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2119140625,"f1":null,"seconds":3.259629011154175e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":5.7578125,"distances_sum":496.3145925159415}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.748046875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.748046875,"f1":0.8476996961371968,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.3984375,"distances_sum":1952.0984715267361}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9490212912087918,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.734375,"distances_sum":2730.13232585899}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9504724442224448,"seconds":6.0889869928359985e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8515625,"distances_sum":2712.149950976894}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9504724442224448,"seconds":6.0889869928359985e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8515625,"distances_sum":2712.149950976894}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9672275641025643,"seconds":6.303191184997559e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.859375,"distances_sum":2834.047295239915}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9794299450549452,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9453125,"distances_sum":2910.739386355179}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9741643772893778,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9140625,"distances_sum":2877.675597849308}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9774553571428575,"seconds":6.254762411117554e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.96875,"distances_sum":2896.557698004962}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9794299450549452,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9453125,"distances_sum":2910.739386355179}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9794299450549452,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9453125,"distances_sum":2910.739386355179}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.64453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.64453125,"f1":0.77362463924964,"seconds":4.567205905914307e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.0234375,"distances_sum":1629.2852965265395}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7882908757908766,"seconds":4.503875970840454e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.2578125,"distances_sum":1669.8669584128952}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7333984375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7333984375,"f1":0.8371430652680664,"seconds":5.288049578666687e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.9140625,"distances_sum":1919.4525070710677}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7333984375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7333984375,"f1":0.8371430652680664,"seconds":5.288049578666687e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.9140625,"distances_sum":1919.4525070710677}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9497481684981691,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.75,"distances_sum":2688.9198613596436}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8945283882783891,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.125,"distances_sum":2222.9690058645333}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9497481684981691,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.75,"distances_sum":2688.9198613596436}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9764880952380954,"seconds":6.074085831642151e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.984375,"distances_sum":2878.79582933338}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9589342948717953,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8203125,"distances_sum":2762.9009672886627}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9720810439560444,"seconds":6.025657057762146e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.890625,"distances_sum":2858.3629607106895}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9505341880341884,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7265625,"distances_sum":2748.177418797165}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.959975961538462,"seconds":6.0927122831344604e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8125,"distances_sum":2768.1137819562105}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9764880952380954,"seconds":6.074085831642151e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.984375,"distances_sum":2878.79582933338}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9764880952380954,"seconds":6.074085831642151e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.984375,"distances_sum":2878.79582933338}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7885702838827847,"seconds":4.86522912979126e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":7.9765625,"distances_sum":1712.6733058515622}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3818359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3818359375,"f1":null,"seconds":3.6116689443588257e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":6.2421875,"distances_sum":990.2438786054986}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.666015625,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.666015625,"f1":0.7885702838827847,"seconds":4.86522912979126e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":7.9765625,"distances_sum":1712.6733058515622}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.797198461260962,"seconds":3.069639205932617e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.09375,"distances_sum":1764.8704750066163}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8445351523476532,"seconds":3.5800039768218994e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.5078125,"distances_sum":1981.7331018880923}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8602803446553454,"seconds":3.507360816001892e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.578125,"distances_sum":2093.6807083993776}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.806640625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.806640625,"f1":0.8835601898101907,"seconds":3.7439167499542236e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.6328125,"distances_sum":2221.8800523637838}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.806640625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.806640625,"f1":0.8835601898101907,"seconds":3.7439167499542236e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.6328125,"distances_sum":2221.8800523637838}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9653502747252751,"seconds":3.7513673305511475e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.9453125,"distances_sum":2801.2221359662417}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9396176739926745,"seconds":4.289671778678894e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.6953125,"distances_sum":2682.199463533567}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9465315934065937,"seconds":3.982335329055786e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.7890625,"distances_sum":2722.1267764743566}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9614983974358982,"seconds":3.563240170478821e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.8828125,"distances_sum":2777.4516969478523}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.937917811355312,"seconds":4.90434467792511e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.8515625,"distances_sum":2612.178657882216}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9419413919413923,"seconds":4.911795258522034e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.8203125,"distances_sum":2654.3297307614416}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9653502747252751,"seconds":3.7513673305511475e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.9453125,"distances_sum":2801.2221359662417}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9653502747252751,"seconds":3.7513673305511475e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.9453125,"distances_sum":2801.2221359662417}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4990234375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.4990234375,"f1":0.6496954434454438,"seconds":3.0156224966049194e-6,"exhaustive_search_seconds":1.1548399925231934e-6,"evaluations":6.546875,"distances_sum":1215.8851781275555}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8456252081252088,"seconds":3.430992364883423e-6,"exhaustive_search_seconds":1.1548399925231934e-6,"evaluations":8.125,"distances_sum":2035.0808450048166}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.748046875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.748046875,"f1":0.8456252081252088,"seconds":3.430992364883423e-6,"exhaustive_search_seconds":1.1548399925231934e-6,"evaluations":8.125,"distances_sum":2035.0808450048166}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.944688644688645,"seconds":3.5241246223449707e-6,"exhaustive_search_seconds":1.1548399925231934e-6,"evaluations":8.765625,"distances_sum":2740.9503541687186}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9481284340659347,"seconds":3.686174750328064e-6,"exhaustive_search_seconds":1.1548399925231934e-6,"evaluations":8.8046875,"distances_sum":2744.445466825177}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9477564102564108,"seconds":3.6172568798065186e-6,"exhaustive_search_seconds":1.1548399925231934e-6,"evaluations":8.734375,"distances_sum":2778.9886767077473}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9285802738927745,"seconds":4.7907233238220215e-6,"exhaustive_search_seconds":1.1548399925231934e-6,"evaluations":8.734375,"distances_sum":2602.4015672435794}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.9002117673992682,"seconds":3.291293978691101e-6,"exhaustive_search_seconds":1.1548399925231934e-6,"evaluations":8.359375,"distances_sum":2362.734668616455}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.922727793040294,"seconds":3.4514814615249634e-6,"exhaustive_search_seconds":1.1548399925231934e-6,"evaluations":8.6875,"distances_sum":2548.107967959599}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9481284340659347,"seconds":3.686174750328064e-6,"exhaustive_search_seconds":1.1548399925231934e-6,"evaluations":8.8046875,"distances_sum":2744.445466825177}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.980265567765568,"seconds":3.7476420402526855e-6,"exhaustive_search_seconds":1.1548399925231934e-6,"evaluations":8.921875,"distances_sum":2995.80550493814}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9671932234432238,"seconds":3.6507844924926758e-6,"exhaustive_search_seconds":1.1548399925231934e-6,"evaluations":8.90625,"distances_sum":2872.1289588210866}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9552312271062277,"seconds":3.6265701055526733e-6,"exhaustive_search_seconds":1.1548399925231934e-6,"evaluations":8.796875,"distances_sum":2807.502249504438}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.9811584249084251,"seconds":3.682449460029602e-6,"exhaustive_search_seconds":1.1548399925231934e-6,"evaluations":8.9453125,"distances_sum":2992.6096943743637}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9632841117216122,"seconds":3.604218363761902e-6,"exhaustive_search_seconds":1.1548399925231934e-6,"evaluations":8.84375,"distances_sum":2868.7040086061634}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9658203125,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9811584249084251,"seconds":3.682449460029602e-6,"exhaustive_search_seconds":1.1548399925231934e-6,"evaluations":8.9453125,"distances_sum":2992.6096943743637}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9658203125,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9811584249084251,"seconds":3.682449460029602e-6,"exhaustive_search_seconds":1.1548399925231934e-6,"evaluations":8.9453125,"distances_sum":2992.6096943743637}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7798123751248757,"seconds":2.9150396585464478e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":7.5546875,"distances_sum":1635.0365186378049}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6533203125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6533203125,"f1":0.7798123751248757,"seconds":2.9150396585464478e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":7.5546875,"distances_sum":1635.0365186378049}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8972532675657684,"seconds":3.3117830753326416e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.390625,"distances_sum":2256.416214443632}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8546406718281726,"seconds":3.116205334663391e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.2265625,"distances_sum":1997.3060642855673}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.828125,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.828125,"f1":0.8972532675657684,"seconds":3.3117830753326416e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.390625,"distances_sum":2256.416214443632}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9304945054945061,"seconds":4.155561327934265e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.796875,"distances_sum":2491.846077462893}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9557177197802202,"seconds":3.5297125577926636e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.7890625,"distances_sum":2700.355606378651}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9664091117216123,"seconds":3.974884748458862e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.921875,"distances_sum":2741.956892558254}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9218094405594413,"seconds":3.5651028156280518e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.734375,"distances_sum":2413.2309461930013}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.947550366300367,"seconds":3.827735781669617e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.734375,"distances_sum":2650.460148551089}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.939758158508159,"seconds":3.8333237171173096e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.7265625,"distances_sum":2590.341617156289}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9664091117216123,"seconds":3.974884748458862e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.921875,"distances_sum":2741.956892558254}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9664091117216123,"seconds":3.974884748458862e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.921875,"distances_sum":2741.956892558254}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8519235972360981,"seconds":3.3285468816757202e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.2578125,"distances_sum":1953.955636861036}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8519235972360981,"seconds":3.3285468816757202e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.2578125,"distances_sum":1953.955636861036}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8519235972360981,"seconds":3.3285468816757202e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.2578125,"distances_sum":1953.955636861036}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.751953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8519235972360981,"seconds":3.3285468816757202e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.2578125,"distances_sum":1953.955636861036}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.564453125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.564453125,"f1":0.7066770035520041,"seconds":4.520639777183533e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.0234375,"distances_sum":1461.8004546330924}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.232421875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.232421875,"f1":null,"seconds":3.121793270111084e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":5.3125,"distances_sum":589.3557996679452}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.23046875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.23046875,"f1":null,"seconds":3.162771463394165e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":5.34375,"distances_sum":612.319856184204}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.564453125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.564453125,"f1":0.7066770035520041,"seconds":4.520639777183533e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.0234375,"distances_sum":1461.8004546330924}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.7844905094905104,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.78125,"distances_sum":1783.7936720506777}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8442489801864811,"seconds":5.122274160385132e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.3125,"distances_sum":2087.682444343662}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6357421875, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6357421875,"f1":0.7671042499167506,"seconds":4.369765520095825e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.6640625,"distances_sum":1681.6186113177407}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7470703125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7470703125,"f1":0.8442489801864811,"seconds":5.122274160385132e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.3125,"distances_sum":2087.682444343662}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9218011155511162,"seconds":5.926936864852905e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.6328125,"distances_sum":2561.0947208063753}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9457849442224447,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.71875,"distances_sum":2718.864329312608}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9271093489843494,"seconds":6.1765313148498535e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.75,"distances_sum":2562.551052972446}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.851958458208459,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.4140625,"distances_sum":2100.1115957976026}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9052734375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9052734375,"f1":0.9457849442224447,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.71875,"distances_sum":2718.864329312608}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9052734375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9052734375,"f1":0.9457849442224447,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.71875,"distances_sum":2718.864329312608}}, n: 9
inertia(cfft.distances) = 19.159817460317463
inertia(cdnet.distances) = 23.892106126111123
inertia(crand.distances) = 20.19356852324264
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9511111111111111
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8933333333333334
===> k=5
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8822222222222221
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9355555555555556
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9400000000000001
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9266666666666666
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.888888888888889
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9333333333333332
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8933333333333332
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9333333333333332
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.931111111111111
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9311111111111111
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9244444444444445
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9288888888888889
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8977777777777778
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> k=11
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9311111111111111
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9177777777777778
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9155555555555556
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [2, 1, 3, 2, 3, 1, 3, 3, 1, 3, 3, 1, 3, 2, 2, 3, 3, 3, 3, 1, 2]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 1, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 15]]
** centroid: 9, normalized-entropy: 0.5225593745369407, [(2, 2), (3, 15)]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 1, 3, 2, 3, 2, 1, 2]
acc = 0.92
*** starting iteration: 1; err: [Inf, 0.3360666710986965] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3360666710986965, 0.16813951499000535] ***
*** starting iteration: 2; err: [Inf, 0.3360666710986965, 0.16813951499000535] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3360666710986965, 0.16813951499000535, 0.15924120184603707] ***
*** starting iteration: 3; err: [Inf, 0.3360666710986965, 0.16813951499000535, 0.15924120184603707] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3360666710986965, 0.16813951499000535, 0.15924120184603707, 0.15536866683004646] ***
*** starting iteration: 4; err: [Inf, 0.3360666710986965, 0.16813951499000535, 0.15924120184603707, 0.15536866683004646] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3360666710986965, 0.16813951499000535, 0.15924120184603707, 0.15536866683004646, 0.1541586598566034] ***
*** starting iteration: 5; err: [Inf, 0.3360666710986965, 0.16813951499000535, 0.15924120184603707, 0.15536866683004646, 0.1541586598566034] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3360666710986965, 0.16813951499000535, 0.15924120184603707, 0.15536866683004646, 0.1541586598566034, 0.15387439695178848] ***
*** finished computation of 12 references, err: [Inf, 0.3360666710986965, 0.16813951499000535, 0.15924120184603707, 0.15536866683004646, 0.1541586598566034, 0.15387439695178848] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
finished with 14 centroids; started with 12
acc = 0.9133333333333333
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.7215912025228144] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7215912025228144, 0.3716439624722132] ***
*** starting iteration: 2; err: [Inf, 0.7215912025228144, 0.3716439624722132] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7215912025228144, 0.3716439624722132, 0.3676170410191202] ***
*** starting iteration: 3; err: [Inf, 0.7215912025228144, 0.3716439624722132, 0.3676170410191202] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7215912025228144, 0.3716439624722132, 0.3676170410191202, 0.3672767376459565] ***
*** finished computation of 3 references, err: [Inf, 0.7215912025228144, 0.3716439624722132, 0.3676170410191202, 0.3672767376459565] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 33, 5]]
** centroid: 1, normalized-entropy: 0.5617526078313283, [(2, 33), (3, 5)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 3, 28]]
** centroid: 2, normalized-entropy: 0.45868581620054033, [(2, 3), (3, 28)]
*** center 3: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.6927916222884591] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6927916222884591, 0.6816133029582637] ***
*** starting iteration: 2; err: [Inf, 1.6927916222884591, 0.6816133029582637] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6927916222884591, 0.6816133029582637, 0.6629378041061008] ***
*** starting iteration: 3; err: [Inf, 1.6927916222884591, 0.6816133029582637, 0.6629378041061008] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6927916222884591, 0.6816133029582637, 0.6629378041061008, 0.6617785796110128] ***
*** starting iteration: 4; err: [Inf, 1.6927916222884591, 0.6816133029582637, 0.6629378041061008, 0.6617785796110128] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6927916222884591, 0.6816133029582637, 0.6629378041061008, 0.6617785796110128, 0.6617785796110128] ***
*** finished computation of 3 references, err: [Inf, 1.6927916222884591, 0.6816133029582637, 0.6629378041061008, 0.6617785796110128, 0.6617785796110128] ***
*** center 1: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 27, 40]]
** centroid: 2, normalized-entropy: 0.9726699911457106, [(2, 27), (3, 40)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [20, 2, 0]]
** centroid: 3, normalized-entropy: 0.43949698692151346, [(1, 20), (2, 2)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6021276632207959] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6021276632207959, 0.3718042901407442] ***
*** starting iteration: 2; err: [Inf, 0.6021276632207959, 0.3718042901407442] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6021276632207959, 0.3718042901407442, 0.3647034913857503] ***
*** starting iteration: 3; err: [Inf, 0.6021276632207959, 0.3718042901407442, 0.3647034913857503] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6021276632207959, 0.3718042901407442, 0.3647034913857503, 0.36068527660106287] ***
*** starting iteration: 4; err: [Inf, 0.6021276632207959, 0.3718042901407442, 0.3647034913857503, 0.36068527660106287] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6021276632207959, 0.3718042901407442, 0.3647034913857503, 0.36068527660106287, 0.3590879552137626] ***
*** starting iteration: 5; err: [Inf, 0.6021276632207959, 0.3718042901407442, 0.3647034913857503, 0.36068527660106287, 0.3590879552137626] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6021276632207959, 0.3718042901407442, 0.3647034913857503, 0.36068527660106287, 0.3590879552137626, 0.3580266117296578] ***
*** starting iteration: 6; err: [Inf, 0.6021276632207959, 0.3718042901407442, 0.3647034913857503, 0.36068527660106287, 0.3590879552137626, 0.3580266117296578] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6021276632207959, 0.3718042901407442, 0.3647034913857503, 0.36068527660106287, 0.3590879552137626, 0.3580266117296578, 0.3580266117296578] ***
*** finished computation of 3 references, err: [Inf, 0.6021276632207959, 0.3718042901407442, 0.3647034913857503, 0.36068527660106287, 0.3590879552137626, 0.3580266117296578, 0.3580266117296578] ***
*** center 1: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 3, 19]]
** centroid: 2, normalized-entropy: 0.5746356978376794, [(2, 3), (3, 19)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 32, 8]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 32), (3, 8)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.427899999057717] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.427899999057717, 1.5631307062105315] ***
*** finished computation of 3 references, err: [Inf, 3.427899999057717, 1.5631307062105315] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [31, 16, 0]]
** centroid: 2, normalized-entropy: 0.9252253278054431, [(1, 31), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 20, 26]]
** centroid: 3, normalized-entropy: 0.9876925088958032, [(2, 20), (3, 26)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1799000014058139] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1799000014058139, 0.9864091061655307] ***
*** finished computation of 3 references, err: [Inf, 1.1799000014058139, 0.9864091061655307] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 27, 40]]
** centroid: 1, normalized-entropy: 0.9726699911457106, [(2, 27), (3, 40)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [20, 2, 0]]
** centroid: 2, normalized-entropy: 0.43949698692151346, [(1, 20), (2, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.697200006939174] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.697200006939174, 0.9301476998263832] ***
*** finished computation of 3 references, err: [Inf, 3.697200006939174, 0.9301476998263832] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [38, 4, 0]]
** centroid: 1, normalized-entropy: 0.45371633918694493, [(1, 38), (2, 4)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 31, 11]]
** centroid: 3, normalized-entropy: 0.8296071030882032, [(2, 31), (3, 11)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4374925493953632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4374925493953632, 0.21167328779059794] ***
*** starting iteration: 2; err: [Inf, 0.4374925493953632, 0.21167328779059794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4374925493953632, 0.21167328779059794, 0.1788974001570483] ***
*** starting iteration: 3; err: [Inf, 0.4374925493953632, 0.21167328779059794, 0.1788974001570483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4374925493953632, 0.21167328779059794, 0.1788974001570483, 0.1695354885073499] ***
*** finished computation of 7 references, err: [Inf, 0.4374925493953632, 0.21167328779059794, 0.1788974001570483, 0.1695354885073499] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 1, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 17, 4]]
** centroid: 5, normalized-entropy: 0.7024665512903904, [(2, 17), (3, 4)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7765124047154467] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7765124047154467, 0.2548112838874912] ***
*** starting iteration: 2; err: [Inf, 0.7765124047154467, 0.2548112838874912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7765124047154467, 0.2548112838874912, 0.20600571592012137] ***
*** starting iteration: 3; err: [Inf, 0.7765124047154467, 0.2548112838874912, 0.20600571592012137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7765124047154467, 0.2548112838874912, 0.20600571592012137, 0.1882003307532568] ***
*** finished computation of 7 references, err: [Inf, 0.7765124047154467, 0.2548112838874912, 0.20600571592012137, 0.1882003307532568] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 1, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 2: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 1, 18]]
** centroid: 7, normalized-entropy: 0.2974722489192896, [(2, 1), (3, 18)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3963782911625438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3963782911625438, 0.2299475212654217] ***
*** starting iteration: 2; err: [Inf, 0.3963782911625438, 0.2299475212654217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3963782911625438, 0.2299475212654217, 0.21409808384992737] ***
*** starting iteration: 3; err: [Inf, 0.3963782911625438, 0.2299475212654217, 0.21409808384992737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3963782911625438, 0.2299475212654217, 0.21409808384992737, 0.21059398015130198] ***
*** finished computation of 7 references, err: [Inf, 0.3963782911625438, 0.2299475212654217, 0.21409808384992737, 0.21059398015130198] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 9]]
** centroid: 1, normalized-entropy: 1.0, [(2, 9), (3, 9)]
*** center 2: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 1, 7]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(2, 1), (3, 7)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 3.085160875976518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 3.085160875976518, 0.520437251870966] ***
*** starting iteration: 2; err: [Inf, 3.085160875976518, 0.520437251870966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 3.085160875976518, 0.520437251870966, 0.21712929915624904] ***
*** starting iteration: 3; err: [Inf, 3.085160875976518, 0.520437251870966, 0.21712929915624904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 3.085160875976518, 0.520437251870966, 0.21712929915624904, 0.17607359705711345] ***
*** starting iteration: 4; err: [Inf, 3.085160875976518, 0.520437251870966, 0.21712929915624904, 0.17607359705711345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 3.085160875976518, 0.520437251870966, 0.21712929915624904, 0.17607359705711345, 0.17139539070383777] ***
*** starting iteration: 5; err: [Inf, 3.085160875976518, 0.520437251870966, 0.21712929915624904, 0.17607359705711345, 0.17139539070383777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 3.085160875976518, 0.520437251870966, 0.21712929915624904, 0.17607359705711345, 0.17139539070383777, 0.17031032005503147] ***
*** starting iteration: 6; err: [Inf, 3.085160875976518, 0.520437251870966, 0.21712929915624904, 0.17607359705711345, 0.17139539070383777, 0.17031032005503147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 3.085160875976518, 0.520437251870966, 0.21712929915624904, 0.17607359705711345, 0.17139539070383777, 0.17031032005503147, 0.16905336284152725] ***
*** starting iteration: 7; err: [Inf, 3.085160875976518, 0.520437251870966, 0.21712929915624904, 0.17607359705711345, 0.17139539070383777, 0.17031032005503147, 0.16905336284152725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 3.085160875976518, 0.520437251870966, 0.21712929915624904, 0.17607359705711345, 0.17139539070383777, 0.17031032005503147, 0.16905336284152725, 0.16886369866464715] ***
*** finished computation of 7 references, err: [Inf, 3.085160875976518, 0.520437251870966, 0.21712929915624904, 0.17607359705711345, 0.17139539070383777, 0.17031032005503147, 0.16905336284152725, 0.16886369866464715] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 16, 1]]
** centroid: 1, normalized-entropy: 0.32275695889739825, [(2, 16), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 5]]
** centroid: 5, normalized-entropy: 0.954434002924965, [(2, 3), (3, 5)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 9]]
** centroid: 7, normalized-entropy: 0.940285958670631, [(2, 5), (3, 9)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.44673862354031213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.44673862354031213, 0.20214090177924504] ***
*** starting iteration: 2; err: [Inf, 0.44673862354031213, 0.20214090177924504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.44673862354031213, 0.20214090177924504, 0.19130012591288548] ***
*** starting iteration: 3; err: [Inf, 0.44673862354031213, 0.20214090177924504, 0.19130012591288548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.44673862354031213, 0.20214090177924504, 0.19130012591288548, 0.18928332106788268] ***
*** starting iteration: 4; err: [Inf, 0.44673862354031213, 0.20214090177924504, 0.19130012591288548, 0.18928332106788268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.44673862354031213, 0.20214090177924504, 0.19130012591288548, 0.18928332106788268, 0.18749565381414818] ***
*** starting iteration: 5; err: [Inf, 0.44673862354031213, 0.20214090177924504, 0.19130012591288548, 0.18928332106788268, 0.18749565381414818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.44673862354031213, 0.20214090177924504, 0.19130012591288548, 0.18928332106788268, 0.18749565381414818, 0.18657812551446462] ***
*** finished computation of 7 references, err: [Inf, 0.44673862354031213, 0.20214090177924504, 0.19130012591288548, 0.18928332106788268, 0.18749565381414818, 0.18657812551446462] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 5, 5]]
** centroid: 1, normalized-entropy: 1.0, [(2, 5), (3, 5)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 13, 1]]
** centroid: 2, normalized-entropy: 0.3712323266408756, [(2, 13), (3, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 1, 5]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(2, 1), (3, 5)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3040955457542747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3040955457542747, 0.19159059714886265] ***
*** starting iteration: 2; err: [Inf, 0.3040955457542747, 0.19159059714886265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3040955457542747, 0.19159059714886265, 0.18347731960737693] ***
*** starting iteration: 3; err: [Inf, 0.3040955457542747, 0.19159059714886265, 0.18347731960737693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3040955457542747, 0.19159059714886265, 0.18347731960737693, 0.18014427816655984] ***
*** starting iteration: 4; err: [Inf, 0.3040955457542747, 0.19159059714886265, 0.18347731960737693, 0.18014427816655984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3040955457542747, 0.19159059714886265, 0.18347731960737693, 0.18014427816655984, 0.17834318591664836] ***
*** starting iteration: 5; err: [Inf, 0.3040955457542747, 0.19159059714886265, 0.18347731960737693, 0.18014427816655984, 0.17834318591664836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3040955457542747, 0.19159059714886265, 0.18347731960737693, 0.18014427816655984, 0.17834318591664836, 0.17413683332569302] ***
*** starting iteration: 6; err: [Inf, 0.3040955457542747, 0.19159059714886265, 0.18347731960737693, 0.18014427816655984, 0.17834318591664836, 0.17413683332569302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3040955457542747, 0.19159059714886265, 0.18347731960737693, 0.18014427816655984, 0.17834318591664836, 0.17413683332569302, 0.17144970789094724] ***
*** starting iteration: 7; err: [Inf, 0.3040955457542747, 0.19159059714886265, 0.18347731960737693, 0.18014427816655984, 0.17834318591664836, 0.17413683332569302, 0.17144970789094724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3040955457542747, 0.19159059714886265, 0.18347731960737693, 0.18014427816655984, 0.17834318591664836, 0.17413683332569302, 0.17144970789094724, 0.17076526600554812] ***
*** finished computation of 7 references, err: [Inf, 0.3040955457542747, 0.19159059714886265, 0.18347731960737693, 0.18014427816655984, 0.17834318591664836, 0.17413683332569302, 0.17144970789094724, 0.17076526600554812] ***
*** center 1: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 8, 5]]
** centroid: 2, normalized-entropy: 0.961236604722876, [(2, 8), (3, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 3, 8]]
** centroid: 4, normalized-entropy: 0.8453509366224364, [(2, 3), (3, 8)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.45543205640926926] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45543205640926926, 0.3704021658433075] ***
*** finished computation of 3 references, err: [Inf, 0.45543205640926926, 0.3704021658433075] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 34, 6]]
** centroid: 1, normalized-entropy: 0.6098403047164005, [(2, 34), (3, 6)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 27]]
** centroid: 2, normalized-entropy: 0.36205125173399805, [(2, 2), (3, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7309746828422741] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7309746828422741, 0.6629557192757021] ***
*** finished computation of 3 references, err: [Inf, 0.7309746828422741, 0.6629557192757021] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 27, 40]]
** centroid: 1, normalized-entropy: 0.9726699911457106, [(2, 27), (3, 40)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [17, 2, 0]]
** centroid: 2, normalized-entropy: 0.48546076074591343, [(1, 17), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.688781013011812] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.688781013011812, 0.5068485534284184] ***
*** finished computation of 3 references, err: [Inf, 2.688781013011812, 0.5068485534284184] ***
*** center 1: selecting labels [1] (freq >= 2) [from [38, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 28, 3]]
** centroid: 2, normalized-entropy: 0.45868581620054033, [(2, 28), (3, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 6, 24]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 6), (3, 24)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.280299976320267] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.280299976320267, 0.6632634848964745] ***
*** starting iteration: 2; err: [Inf, 3.280299976320267, 0.6632634848964745] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.280299976320267, 0.6632634848964745, 0.5416221784124724] ***
*** starting iteration: 3; err: [Inf, 3.280299976320267, 0.6632634848964745, 0.5416221784124724] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.280299976320267, 0.6632634848964745, 0.5416221784124724, 0.5386746926126336] ***
*** starting iteration: 4; err: [Inf, 3.280299976320267, 0.6632634848964745, 0.5416221784124724, 0.5386746926126336] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.280299976320267, 0.6632634848964745, 0.5416221784124724, 0.5386746926126336, 0.5380442192214692] ***
*** finished computation of 3 references, err: [Inf, 3.280299976320267, 0.6632634848964745, 0.5416221784124724, 0.5386746926126336, 0.5380442192214692] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 4, 30]]
** centroid: 1, normalized-entropy: 0.5225593745369407, [(2, 4), (3, 30)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 32, 3]]
** centroid: 2, normalized-entropy: 0.4220005168831531, [(2, 32), (3, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.7669000063141937] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.7669000063141937, 1.011082016175553] ***
*** starting iteration: 2; err: [Inf, 2.7669000063141937, 1.011082016175553] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.7669000063141937, 1.011082016175553, 0.762472355639025] ***
*** starting iteration: 3; err: [Inf, 2.7669000063141937, 1.011082016175553, 0.762472355639025] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.7669000063141937, 1.011082016175553, 0.762472355639025, 0.6353472468864864] ***
*** starting iteration: 4; err: [Inf, 2.7669000063141937, 1.011082016175553, 0.762472355639025, 0.6353472468864864] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.7669000063141937, 1.011082016175553, 0.762472355639025, 0.6353472468864864, 0.6066078717272063] ***
*** starting iteration: 5; err: [Inf, 2.7669000063141937, 1.011082016175553, 0.762472355639025, 0.6353472468864864, 0.6066078717272063] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.7669000063141937, 1.011082016175553, 0.762472355639025, 0.6353472468864864, 0.6066078717272063, 0.5811396140622938] ***
*** starting iteration: 6; err: [Inf, 2.7669000063141937, 1.011082016175553, 0.762472355639025, 0.6353472468864864, 0.6066078717272063, 0.5811396140622938] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.7669000063141937, 1.011082016175553, 0.762472355639025, 0.6353472468864864, 0.6066078717272063, 0.5811396140622938, 0.5549632782022773] ***
*** starting iteration: 7; err: [Inf, 2.7669000063141937, 1.011082016175553, 0.762472355639025, 0.6353472468864864, 0.6066078717272063, 0.5811396140622938, 0.5549632782022773] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.7669000063141937, 1.011082016175553, 0.762472355639025, 0.6353472468864864, 0.6066078717272063, 0.5811396140622938, 0.5549632782022773, 0.5282364947170518] ***
*** starting iteration: 8; err: [Inf, 2.7669000063141937, 1.011082016175553, 0.762472355639025, 0.6353472468864864, 0.6066078717272063, 0.5811396140622938, 0.5549632782022773, 0.5282364947170518] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.7669000063141937, 1.011082016175553, 0.762472355639025, 0.6353472468864864, 0.6066078717272063, 0.5811396140622938, 0.5549632782022773, 0.5282364947170518, 0.5231262112044781] ***
*** starting iteration: 9; err: [Inf, 2.7669000063141937, 1.011082016175553, 0.762472355639025, 0.6353472468864864, 0.6066078717272063, 0.5811396140622938, 0.5549632782022773, 0.5282364947170518, 0.5231262112044781] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.7669000063141937, 1.011082016175553, 0.762472355639025, 0.6353472468864864, 0.6066078717272063, 0.5811396140622938, 0.5549632782022773, 0.5282364947170518, 0.5231262112044781, 0.5231262112044781] ***
*** finished computation of 3 references, err: [Inf, 2.7669000063141937, 1.011082016175553, 0.762472355639025, 0.6353472468864864, 0.6066078717272063, 0.5811396140622938, 0.5549632782022773, 0.5282364947170518, 0.5231262112044781, 0.5231262112044781] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 28, 11]]
** centroid: 1, normalized-entropy: 0.8582307926411409, [(2, 28), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 29]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.5539000115584258] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5539000115584258, 0.5620494829092277] ***
*** starting iteration: 2; err: [Inf, 1.5539000115584258, 0.5620494829092277] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5539000115584258, 0.5620494829092277, 0.5339659255601351] ***
*** starting iteration: 3; err: [Inf, 1.5539000115584258, 0.5620494829092277, 0.5339659255601351] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5539000115584258, 0.5620494829092277, 0.5339659255601351, 0.5267314345282227] ***
*** starting iteration: 4; err: [Inf, 1.5539000115584258, 0.5620494829092277, 0.5339659255601351, 0.5267314345282227] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5539000115584258, 0.5620494829092277, 0.5339659255601351, 0.5267314345282227, 0.526222717131701] ***
*** finished computation of 3 references, err: [Inf, 1.5539000115584258, 0.5620494829092277, 0.5339659255601351, 0.5267314345282227, 0.526222717131701] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 10, 27]]
** centroid: 1, normalized-entropy: 0.8418521897563208, [(2, 10), (3, 27)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 25, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.303861790258865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.303861790258865, 0.18756821721917608] ***
*** starting iteration: 2; err: [Inf, 0.303861790258865, 0.18756821721917608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.303861790258865, 0.18756821721917608, 0.1767855821077263] ***
*** starting iteration: 3; err: [Inf, 0.303861790258865, 0.18756821721917608, 0.1767855821077263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.303861790258865, 0.18756821721917608, 0.1767855821077263, 0.17442184480031536] ***
*** starting iteration: 4; err: [Inf, 0.303861790258865, 0.18756821721917608, 0.1767855821077263, 0.17442184480031536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.303861790258865, 0.18756821721917608, 0.1767855821077263, 0.17442184480031536, 0.17089801267780505] ***
*** starting iteration: 5; err: [Inf, 0.303861790258865, 0.18756821721917608, 0.1767855821077263, 0.17442184480031536, 0.17089801267780505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.303861790258865, 0.18756821721917608, 0.1767855821077263, 0.17442184480031536, 0.17089801267780505, 0.16853116783745375] ***
*** starting iteration: 6; err: [Inf, 0.303861790258865, 0.18756821721917608, 0.1767855821077263, 0.17442184480031536, 0.17089801267780505, 0.16853116783745375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.303861790258865, 0.18756821721917608, 0.1767855821077263, 0.17442184480031536, 0.17089801267780505, 0.16853116783745375, 0.16815950469481375] ***
*** finished computation of 7 references, err: [Inf, 0.303861790258865, 0.18756821721917608, 0.1767855821077263, 0.17442184480031536, 0.17089801267780505, 0.16853116783745375, 0.16815950469481375] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 1, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 18, 6]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 18), (3, 6)]
*** center 3: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3630100602025557] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3630100602025557, 0.23403428895105258] ***
*** starting iteration: 2; err: [Inf, 0.3630100602025557, 0.23403428895105258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3630100602025557, 0.23403428895105258, 0.20218555964332313] ***
*** starting iteration: 3; err: [Inf, 0.3630100602025557, 0.23403428895105258, 0.20218555964332313] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3630100602025557, 0.23403428895105258, 0.20218555964332313, 0.17517680475868697] ***
*** starting iteration: 4; err: [Inf, 0.3630100602025557, 0.23403428895105258, 0.20218555964332313, 0.17517680475868697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3630100602025557, 0.23403428895105258, 0.20218555964332313, 0.17517680475868697, 0.17041494926885126] ***
*** starting iteration: 5; err: [Inf, 0.3630100602025557, 0.23403428895105258, 0.20218555964332313, 0.17517680475868697, 0.17041494926885126] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3630100602025557, 0.23403428895105258, 0.20218555964332313, 0.17517680475868697, 0.17041494926885126, 0.16961172410616288] ***
*** finished computation of 7 references, err: [Inf, 0.3630100602025557, 0.23403428895105258, 0.20218555964332313, 0.17517680475868697, 0.17041494926885126, 0.16961172410616288] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 16, 1]]
** centroid: 1, normalized-entropy: 0.32275695889739825, [(2, 16), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 12, 10]]
** centroid: 5, normalized-entropy: 0.9940302114769566, [(2, 12), (3, 10)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 6, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4069367325480243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4069367325480243, 0.21401391013738202] ***
*** starting iteration: 2; err: [Inf, 0.4069367325480243, 0.21401391013738202] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4069367325480243, 0.21401391013738202, 0.21402210897467497] ***
*** finished computation of 7 references, err: [Inf, 0.4069367325480243, 0.21401391013738202, 0.21402210897467497] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 5]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(2, 2), (3, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 6]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 2), (3, 6)]
*** center 4: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.45940000244608853] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.45940000244608853, 0.27966792444251243] ***
*** starting iteration: 2; err: [Inf, 0.45940000244608853, 0.27966792444251243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.45940000244608853, 0.27966792444251243, 0.2331381090574261] ***
*** starting iteration: 3; err: [Inf, 0.45940000244608853, 0.27966792444251243, 0.2331381090574261] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.45940000244608853, 0.27966792444251243, 0.2331381090574261, 0.21847446689262573] ***
*** finished computation of 7 references, err: [Inf, 0.45940000244608853, 0.27966792444251243, 0.2331381090574261, 0.21847446689262573] ***
*** center 1: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 8]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 18, 1]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 17, 1]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 17]]
*** center 6: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5778000062885279] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5778000062885279, 0.29770343581702186] ***
*** starting iteration: 2; err: [Inf, 0.5778000062885279, 0.29770343581702186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5778000062885279, 0.29770343581702186, 0.28106239250513115] ***
*** starting iteration: 3; err: [Inf, 0.5778000062885279, 0.29770343581702186, 0.28106239250513115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5778000062885279, 0.29770343581702186, 0.28106239250513115, 0.2775789899358482] ***
*** finished computation of 7 references, err: [Inf, 0.5778000062885279, 0.29770343581702186, 0.28106239250513115, 0.2775789899358482] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 12, 1]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 17]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 15, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 1, 10]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 3.7568000061846054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 3.7568000061846054, 1.2588563428709687] ***
*** starting iteration: 2; err: [Inf, 3.7568000061846054, 1.2588563428709687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 3.7568000061846054, 1.2588563428709687, 0.5198122907016685] ***
*** starting iteration: 3; err: [Inf, 3.7568000061846054, 1.2588563428709687, 0.5198122907016685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 3.7568000061846054, 1.2588563428709687, 0.5198122907016685, 0.4464765735746265] ***
*** finished computation of 7 references, err: [Inf, 3.7568000061846054, 1.2588563428709687, 0.5198122907016685, 0.4464765735746265] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 32, 7]]
** centroid: 1, normalized-entropy: 0.6789538995185759, [(2, 32), (3, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 3, 5]]
** centroid: 3, normalized-entropy: 0.954434002924965, [(2, 3), (3, 5)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4244000001149293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4244000001149293, 0.33409436960313504] ***
*** starting iteration: 2; err: [Inf, 0.4244000001149293, 0.33409436960313504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4244000001149293, 0.33409436960313504, 0.32663836429496984] ***
*** starting iteration: 3; err: [Inf, 0.4244000001149293, 0.33409436960313504, 0.32663836429496984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4244000001149293, 0.33409436960313504, 0.32663836429496984, 0.3258005126241564] ***
*** finished computation of 7 references, err: [Inf, 0.4244000001149293, 0.33409436960313504, 0.32663836429496984, 0.3258005126241564] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 22, 1]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 14, 18]]
** centroid: 2, normalized-entropy: 0.9886994082884974, [(2, 14), (3, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7496999966451809] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7496999966451809, 0.366938071823605] ***
*** starting iteration: 2; err: [Inf, 0.7496999966451809, 0.366938071823605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7496999966451809, 0.366938071823605, 0.31417285305727116] ***
*** starting iteration: 3; err: [Inf, 0.7496999966451809, 0.366938071823605, 0.31417285305727116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7496999966451809, 0.366938071823605, 0.31417285305727116, 0.2897114115415789] ***
*** finished computation of 7 references, err: [Inf, 0.7496999966451809, 0.366938071823605, 0.31417285305727116, 0.2897114115415789] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 13, 10]]
** centroid: 2, normalized-entropy: 0.9876925088958032, [(2, 13), (3, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 16, 1]]
*** center 5: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [0, 0, 1]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 18]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.46190000129756653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46190000129756653, 0.3107826482683984] ***
*** starting iteration: 2; err: [Inf, 0.46190000129756653, 0.3107826482683984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46190000129756653, 0.3107826482683984, 0.29641256870273297] ***
*** starting iteration: 3; err: [Inf, 0.46190000129756653, 0.3107826482683984, 0.29641256870273297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46190000129756653, 0.3107826482683984, 0.29641256870273297, 0.28627989480314797] ***
*** finished computation of 7 references, err: [Inf, 0.46190000129756653, 0.3107826482683984, 0.29641256870273297, 0.28627989480314797] ***
*** center 1: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 9, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 9, 11]]
** centroid: 4, normalized-entropy: 0.9927744539878083, [(2, 9), (3, 11)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 10]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.0586000013306762] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0586000013306762, 0.5773631195890259] ***
*** starting iteration: 2; err: [Inf, 1.0586000013306762, 0.5773631195890259] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0586000013306762, 0.5773631195890259, 0.5558230084727627] ***
*** starting iteration: 3; err: [Inf, 1.0586000013306762, 0.5773631195890259, 0.5558230084727627] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0586000013306762, 0.5773631195890259, 0.5558230084727627, 0.5469167904402015] ***
*** finished computation of 3 references, err: [Inf, 1.0586000013306762, 0.5773631195890259, 0.5558230084727627, 0.5469167904402015] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 32]]
** centroid: 1, normalized-entropy: 0.7592757847892834, [(2, 9), (3, 32)]
*** center 2: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 27, 1]]
** centroid: 3, normalized-entropy: 0.2222848306856879, [(2, 27), (3, 1)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.661899995491854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.661899995491854, 0.5567006488256585] ***
*** starting iteration: 2; err: [Inf, 1.661899995491854, 0.5567006488256585] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.661899995491854, 0.5567006488256585, 0.5272500165106028] ***
*** starting iteration: 3; err: [Inf, 1.661899995491854, 0.5567006488256585, 0.5272500165106028] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.661899995491854, 0.5567006488256585, 0.5272500165106028, 0.5238468829763723] ***
*** finished computation of 3 references, err: [Inf, 1.661899995491854, 0.5567006488256585, 0.5272500165106028, 0.5238468829763723] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 29]]
** centroid: 1, normalized-entropy: 0.2108423003185322, [(2, 1), (3, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 28, 11]]
** centroid: 3, normalized-entropy: 0.8582307926411409, [(2, 28), (3, 11)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0331999987590803] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0331999987590803, 0.527670551628706] ***
*** starting iteration: 2; err: [Inf, 1.0331999987590803, 0.527670551628706] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0331999987590803, 0.527670551628706, 0.5207478779292954] ***
*** starting iteration: 3; err: [Inf, 1.0331999987590803, 0.527670551628706, 0.5207478779292954] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0331999987590803, 0.527670551628706, 0.5207478779292954, 0.5187329833661065] ***
*** finished computation of 3 references, err: [Inf, 1.0331999987590803, 0.527670551628706, 0.5207478779292954, 0.5187329833661065] ***
*** center 1: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 17]]
** centroid: 2, normalized-entropy: 0.48546076074591343, [(2, 2), (3, 17)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 33, 10]]
** centroid: 3, normalized-entropy: 0.7824441294066888, [(2, 33), (3, 10)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1612611303604896] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1612611303604896, 0.39674378607232663] ***
*** starting iteration: 2; err: [Inf, 1.1612611303604896, 0.39674378607232663] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1612611303604896, 0.39674378607232663, 0.3761197778668419] ***
*** starting iteration: 3; err: [Inf, 1.1612611303604896, 0.39674378607232663, 0.3761197778668419] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1612611303604896, 0.39674378607232663, 0.3761197778668419, 0.37127071227971414] ***
*** finished computation of 3 references, err: [Inf, 1.1612611303604896, 0.39674378607232663, 0.3761197778668419, 0.37127071227971414] ***
*** center 1: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 25]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 35, 8]]
** centroid: 3, normalized-entropy: 0.6931274153282881, [(2, 35), (3, 8)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7413203239218508] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7413203239218508, 0.42719614702477243] ***
*** starting iteration: 2; err: [Inf, 0.7413203239218508, 0.42719614702477243] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7413203239218508, 0.42719614702477243, 0.4124891460532399] ***
*** starting iteration: 3; err: [Inf, 0.7413203239218508, 0.42719614702477243, 0.4124891460532399] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7413203239218508, 0.42719614702477243, 0.4124891460532399, 0.3967548441153237] ***
*** finished computation of 3 references, err: [Inf, 0.7413203239218508, 0.42719614702477243, 0.4124891460532399, 0.3967548441153237] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 4, 31]]
** centroid: 1, normalized-entropy: 0.5127091420308771, [(2, 4), (3, 31)]
*** center 2: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 25, 9]]
** centroid: 3, normalized-entropy: 0.8337649072106652, [(2, 25), (3, 9)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8888685663687876] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8888685663687876, 0.3580266117296578] ***
*** starting iteration: 2; err: [Inf, 0.8888685663687876, 0.3580266117296578] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8888685663687876, 0.3580266117296578, 0.3580266117296578] ***
*** finished computation of 3 references, err: [Inf, 0.8888685663687876, 0.3580266117296578, 0.3580266117296578] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 19]]
** centroid: 1, normalized-entropy: 0.5746356978376794, [(2, 3), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 32, 8]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 32), (3, 8)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.205000007461365] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.205000007461365, 0.5599573488750199] ***
*** finished computation of 3 references, err: [Inf, 1.205000007461365, 0.5599573488750199] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 12, 32]]
** centroid: 1, normalized-entropy: 0.8453509366224364, [(2, 12), (3, 32)]
*** center 2: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 24, 1]]
** centroid: 3, normalized-entropy: 0.24229218908241482, [(2, 24), (3, 1)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.661899995491854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.661899995491854, 0.5567006488256585] ***
*** finished computation of 3 references, err: [Inf, 1.661899995491854, 0.5567006488256585] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 13]]
** centroid: 1, normalized-entropy: 0.8926230133850988, [(2, 29), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 27]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.124199999099882] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.124199999099882, 0.6023638677568421] ***
*** finished computation of 3 references, err: [Inf, 1.124199999099882, 0.6023638677568421] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 35, 13]]
** centroid: 1, normalized-entropy: 0.842657877202239, [(2, 35), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1589915591068343] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1589915591068343, 0.39674378607232663] ***
*** finished computation of 3 references, err: [Inf, 1.1589915591068343, 0.39674378607232663] ***
*** center 1: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 21]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 36, 12]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 36), (3, 12)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6650180933237716] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6650180933237716, 0.43372584407128556] ***
*** finished computation of 3 references, err: [Inf, 0.6650180933237716, 0.43372584407128556] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 9, 39]]
** centroid: 1, normalized-entropy: 0.6962122601251459, [(2, 9), (3, 39)]
*** center 2: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 20, 1]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7804953992643653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7804953992643653, 0.38048287905494055] ***
*** finished computation of 3 references, err: [Inf, 0.7804953992643653, 0.38048287905494055] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 35, 10]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(2, 35), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 17]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.4292000084334235] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.4292000084334235, 0.5358417446778533] ***
*** starting iteration: 2; err: [Inf, 2.4292000084334235, 0.5358417446778533] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.4292000084334235, 0.5358417446778533, 0.5339016722687133] ***
*** starting iteration: 3; err: [Inf, 2.4292000084334235, 0.5358417446778533, 0.5339016722687133] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.4292000084334235, 0.5358417446778533, 0.5339016722687133, 0.5332217830841007] ***
*** finished computation of 3 references, err: [Inf, 2.4292000084334235, 0.5358417446778533, 0.5339016722687133, 0.5332217830841007] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 34, 7]]
** centroid: 1, normalized-entropy: 0.6593758812786991, [(2, 34), (3, 7)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 26]]
** centroid: 2, normalized-entropy: 0.3712323266408756, [(2, 2), (3, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.045800000866801] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.045800000866801, 0.6242461486045039] ***
*** starting iteration: 2; err: [Inf, 1.045800000866801, 0.6242461486045039] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.045800000866801, 0.6242461486045039, 0.6016683352155284] ***
*** starting iteration: 3; err: [Inf, 1.045800000866801, 0.6242461486045039, 0.6016683352155284] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.045800000866801, 0.6242461486045039, 0.6016683352155284, 0.5760029617522534] ***
*** finished computation of 3 references, err: [Inf, 1.045800000866801, 0.6242461486045039, 0.6016683352155284, 0.5760029617522534] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 35]]
** centroid: 1, normalized-entropy: 0.39845927409523557, [(2, 3), (3, 35)]
*** center 2: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 26, 5]]
** centroid: 3, normalized-entropy: 0.6373874992221911, [(2, 26), (3, 5)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0685999970870026] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0685999970870026, 0.5545984746020606] ***
*** starting iteration: 2; err: [Inf, 1.0685999970870026, 0.5545984746020606] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0685999970870026, 0.5545984746020606, 0.5222429956594908] ***
*** starting iteration: 3; err: [Inf, 1.0685999970870026, 0.5545984746020606, 0.5222429956594908] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0685999970870026, 0.5545984746020606, 0.5222429956594908, 0.5207478779292954] ***
*** finished computation of 3 references, err: [Inf, 1.0685999970870026, 0.5545984746020606, 0.5222429956594908, 0.5207478779292954] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 34, 10]]
** centroid: 1, normalized-entropy: 0.7732266742876346, [(2, 34), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 17]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.011600006230369] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.011600006230369, 0.5837009129244245] ***
*** finished computation of 3 references, err: [Inf, 1.011600006230369, 0.5837009129244245] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 14, 32]]
** centroid: 1, normalized-entropy: 0.8865408928220899, [(2, 14), (3, 32)]
*** center 2: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 3, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3626999989890107] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3626999989890107, 0.5631836446070103] ***
*** finished computation of 3 references, err: [Inf, 1.3626999989890107, 0.5631836446070103] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 13]]
** centroid: 1, normalized-entropy: 0.8926230133850988, [(2, 29), (3, 13)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 27]]
*** center 3: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9499999978394302] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9499999978394302, 0.527670551628706] ***
*** finished computation of 3 references, err: [Inf, 0.9499999978394302, 0.527670551628706] ***
*** center 1: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 35, 10]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(2, 35), (3, 10)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5304000022342658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5304000022342658, 0.2637288556664362] ***
*** starting iteration: 2; err: [Inf, 0.5304000022342658, 0.2637288556664362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5304000022342658, 0.2637288556664362, 0.25041269678137945] ***
*** starting iteration: 3; err: [Inf, 0.5304000022342658, 0.2637288556664362, 0.25041269678137945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5304000022342658, 0.2637288556664362, 0.25041269678137945, 0.24227154308309728] ***
*** finished computation of 7 references, err: [Inf, 0.5304000022342658, 0.2637288556664362, 0.25041269678137945, 0.24227154308309728] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 8, 4]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(2, 8), (3, 4)]
*** center 2: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6330000047569849] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6330000047569849, 0.27733947801136877] ***
*** starting iteration: 2; err: [Inf, 0.6330000047569849, 0.27733947801136877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6330000047569849, 0.27733947801136877, 0.24225813119248266] ***
*** starting iteration: 3; err: [Inf, 0.6330000047569849, 0.27733947801136877, 0.24225813119248266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6330000047569849, 0.27733947801136877, 0.24225813119248266, 0.23794802730284131] ***
*** finished computation of 7 references, err: [Inf, 0.6330000047569849, 0.27733947801136877, 0.24225813119248266, 0.23794802730284131] ***
*** center 1: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 8, 6]]
** centroid: 3, normalized-entropy: 0.9852281360342514, [(2, 8), (3, 6)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 12, 5]]
** centroid: 4, normalized-entropy: 0.8739810481273581, [(2, 12), (3, 5)]
*** center 5: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5771000068757547] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5771000068757547, 0.26209313331145867] ***
*** starting iteration: 2; err: [Inf, 0.5771000068757547, 0.26209313331145867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5771000068757547, 0.26209313331145867, 0.24591118288833222] ***
*** starting iteration: 3; err: [Inf, 0.5771000068757547, 0.26209313331145867, 0.24591118288833222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5771000068757547, 0.26209313331145867, 0.24591118288833222, 0.24208707690650383] ***
*** finished computation of 7 references, err: [Inf, 0.5771000068757547, 0.26209313331145867, 0.24591118288833222, 0.24208707690650383] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 12]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 3), (3, 12)]
*** center 2: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
finished with 9 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 16)
[0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9133333333333334, 0.9133333333333332, 0.9066666666666667, 0.9066666666666667, 0.8933333333333332]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.3, 1) => 0.96
finished with 17
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.666700003934188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.666700003934188, 0.3427065801853969] ***
*** starting iteration: 2; err: [Inf, 0.666700003934188, 0.3427065801853969] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.666700003934188, 0.3427065801853969, 0.2840440778652537] ***
*** starting iteration: 3; err: [Inf, 0.666700003934188, 0.3427065801853969, 0.2840440778652537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.666700003934188, 0.3427065801853969, 0.2840440778652537, 0.2686139312305231] ***
*** starting iteration: 4; err: [Inf, 0.666700003934188, 0.3427065801853969, 0.2840440778652537, 0.2686139312305231] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.666700003934188, 0.3427065801853969, 0.2840440778652537, 0.2686139312305231, 0.2593904054877832] ***
*** starting iteration: 5; err: [Inf, 0.666700003934188, 0.3427065801853969, 0.2840440778652537, 0.2686139312305231, 0.2593904054877832] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.666700003934188, 0.3427065801853969, 0.2840440778652537, 0.2686139312305231, 0.2593904054877832, 0.24816627867666594] ***
*** starting iteration: 6; err: [Inf, 0.666700003934188, 0.3427065801853969, 0.2840440778652537, 0.2686139312305231, 0.2593904054877832, 0.24816627867666594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.666700003934188, 0.3427065801853969, 0.2840440778652537, 0.2686139312305231, 0.2593904054877832, 0.24816627867666594, 0.24361794366495296] ***
*** starting iteration: 7; err: [Inf, 0.666700003934188, 0.3427065801853969, 0.2840440778652537, 0.2686139312305231, 0.2593904054877832, 0.24816627867666594, 0.24361794366495296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.666700003934188, 0.3427065801853969, 0.2840440778652537, 0.2686139312305231, 0.2593904054877832, 0.24816627867666594, 0.24361794366495296, 0.2424004608892283] ***
*** starting iteration: 8; err: [Inf, 0.666700003934188, 0.3427065801853969, 0.2840440778652537, 0.2686139312305231, 0.2593904054877832, 0.24816627867666594, 0.24361794366495296, 0.2424004608892283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.666700003934188, 0.3427065801853969, 0.2840440778652537, 0.2686139312305231, 0.2593904054877832, 0.24816627867666594, 0.24361794366495296, 0.2424004608892283, 0.2424004608892283] ***
*** finished computation of 7 references, err: [Inf, 0.666700003934188, 0.3427065801853969, 0.2840440778652537, 0.2686139312305231, 0.2593904054877832, 0.24816627867666594, 0.24361794366495296, 0.2424004608892283, 0.2424004608892283] ***
*** center 1: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 3, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 18, 7]]
** centroid: 5, normalized-entropy: 0.8554508105601307, [(2, 18), (3, 7)]
*** center 6: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 5.758099973011968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 5.758099973011968, 1.7564702099798573] ***
*** starting iteration: 2; err: [Inf, 5.758099973011968, 1.7564702099798573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862] ***
*** starting iteration: 3; err: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862, 0.36189911038511846] ***
*** starting iteration: 4; err: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862, 0.36189911038511846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862, 0.36189911038511846, 0.3407557045210302] ***
*** starting iteration: 5; err: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862, 0.36189911038511846, 0.3407557045210302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862, 0.36189911038511846, 0.3407557045210302, 0.3201105108564159] ***
*** starting iteration: 6; err: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862, 0.36189911038511846, 0.3407557045210302, 0.3201105108564159] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862, 0.36189911038511846, 0.3407557045210302, 0.3201105108564159, 0.29414181164058273] ***
*** starting iteration: 7; err: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862, 0.36189911038511846, 0.3407557045210302, 0.3201105108564159, 0.29414181164058273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862, 0.36189911038511846, 0.3407557045210302, 0.3201105108564159, 0.29414181164058273, 0.2834605038747021] ***
*** starting iteration: 8; err: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862, 0.36189911038511846, 0.3407557045210302, 0.3201105108564159, 0.29414181164058273, 0.2834605038747021] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862, 0.36189911038511846, 0.3407557045210302, 0.3201105108564159, 0.29414181164058273, 0.2834605038747021, 0.2751009687333774] ***
*** starting iteration: 9; err: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862, 0.36189911038511846, 0.3407557045210302, 0.3201105108564159, 0.29414181164058273, 0.2834605038747021, 0.2751009687333774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862, 0.36189911038511846, 0.3407557045210302, 0.3201105108564159, 0.29414181164058273, 0.2834605038747021, 0.2751009687333774, 0.2662550786580427] ***
*** starting iteration: 10; err: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862, 0.36189911038511846, 0.3407557045210302, 0.3201105108564159, 0.29414181164058273, 0.2834605038747021, 0.2751009687333774, 0.2662550786580427] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862, 0.36189911038511846, 0.3407557045210302, 0.3201105108564159, 0.29414181164058273, 0.2834605038747021, 0.2751009687333774, 0.2662550786580427, 0.2647416615272802] ***
*** finished computation of 7 references, err: [Inf, 5.758099973011968, 1.7564702099798573, 0.7370639158259862, 0.36189911038511846, 0.3407557045210302, 0.3201105108564159, 0.29414181164058273, 0.2834605038747021, 0.2751009687333774, 0.2662550786580427, 0.2647416615272802] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 16, 1]]
** centroid: 1, normalized-entropy: 0.32275695889739825, [(2, 16), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 3: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 1, 10]]
** centroid: 7, normalized-entropy: 0.43949698692151346, [(2, 1), (3, 10)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 2.6386000276677244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.6386000276677244, 0.7032097309336075] ***
*** starting iteration: 2; err: [Inf, 2.6386000276677244, 0.7032097309336075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.6386000276677244, 0.7032097309336075, 0.3594372067169948] ***
*** starting iteration: 3; err: [Inf, 2.6386000276677244, 0.7032097309336075, 0.3594372067169948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.6386000276677244, 0.7032097309336075, 0.3594372067169948, 0.30259835306433713] ***
*** starting iteration: 4; err: [Inf, 2.6386000276677244, 0.7032097309336075, 0.3594372067169948, 0.30259835306433713] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.6386000276677244, 0.7032097309336075, 0.3594372067169948, 0.30259835306433713, 0.2978674597976993] ***
*** starting iteration: 5; err: [Inf, 2.6386000276677244, 0.7032097309336075, 0.3594372067169948, 0.30259835306433713, 0.2978674597976993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.6386000276677244, 0.7032097309336075, 0.3594372067169948, 0.30259835306433713, 0.2978674597976993, 0.2966316856689314] ***
*** starting iteration: 6; err: [Inf, 2.6386000276677244, 0.7032097309336075, 0.3594372067169948, 0.30259835306433713, 0.2978674597976993, 0.2966316856689314] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.6386000276677244, 0.7032097309336075, 0.3594372067169948, 0.30259835306433713, 0.2978674597976993, 0.2966316856689314, 0.29592569654934453] ***
*** finished computation of 7 references, err: [Inf, 2.6386000276677244, 0.7032097309336075, 0.3594372067169948, 0.30259835306433713, 0.2978674597976993, 0.2966316856689314, 0.29592569654934453] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 15, 10]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(2, 15), (3, 10)]
*** center 2: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 5, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
finished with 9 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 17)
[0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9133333333333334, 0.9133333333333332, 0.9066666666666667, 0.9066666666666667, 0.8933333333333332]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.3, 1) => 0.96
finished with 18
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.2673153989520006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2673153989520006, 0.18382439167741108] ***
*** starting iteration: 2; err: [Inf, 0.2673153989520006, 0.18382439167741108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2673153989520006, 0.18382439167741108, 0.18109250821735748] ***
*** starting iteration: 3; err: [Inf, 0.2673153989520006, 0.18382439167741108, 0.18109250821735748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2673153989520006, 0.18382439167741108, 0.18109250821735748, 0.1808744216595196] ***
*** finished computation of 7 references, err: [Inf, 0.2673153989520006, 0.18382439167741108, 0.18109250821735748, 0.1808744216595196] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 18, 1]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 4, 6]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(2, 4), (3, 6)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 14, 5]]
** centroid: 4, normalized-entropy: 0.8314743880097292, [(2, 14), (3, 5)]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 6: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 3.233301654661966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 3.233301654661966, 0.8864672547322585] ***
*** starting iteration: 2; err: [Inf, 3.233301654661966, 0.8864672547322585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 3.233301654661966, 0.8864672547322585, 0.34407022085805805] ***
*** starting iteration: 3; err: [Inf, 3.233301654661966, 0.8864672547322585, 0.34407022085805805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 3.233301654661966, 0.8864672547322585, 0.34407022085805805, 0.2841715196924796] ***
*** finished computation of 7 references, err: [Inf, 3.233301654661966, 0.8864672547322585, 0.34407022085805805, 0.2841715196924796] ***
*** center 1: selecting labels [1] (freq >= 2) [from [31, 1, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 17]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 27, 11]]
** centroid: 3, normalized-entropy: 0.8680403986166402, [(2, 27), (3, 11)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 7: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [0, 0, 1]
finished with 6 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3709926259286542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3709926259286542, 0.22516989397166867] ***
*** starting iteration: 2; err: [Inf, 0.3709926259286542, 0.22516989397166867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3709926259286542, 0.22516989397166867, 0.2216945194914787] ***
*** starting iteration: 3; err: [Inf, 0.3709926259286542, 0.22516989397166867, 0.2216945194914787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3709926259286542, 0.22516989397166867, 0.2216945194914787, 0.2184989922989483] ***
*** finished computation of 7 references, err: [Inf, 0.3709926259286542, 0.22516989397166867, 0.2216945194914787, 0.2184989922989483] ***
*** center 1: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 18, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 14, 9]]
** centroid: 3, normalized-entropy: 0.9656361333706099, [(2, 14), (3, 9)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 3, 6]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(2, 3), (3, 6)]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 7: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [0, 0, 1]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 18)
[0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333332, 0.9066666666666667, 0.9066666666666667, 0.8933333333333332]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.3, 1) => 0.96
finished with 18
iteration 4 finished
generating 4 configurations using top 4 configurations, starting with 18)
[0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333332, 0.9066666666666667, 0.9066666666666667, 0.8933333333333332]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.3, 1) => 0.96
finished with 18
iteration 5 finished
generating 4 configurations using top 4 configurations, starting with 18)
[0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333332, 0.9066666666666667, 0.9066666666666667, 0.8933333333333332]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.3, 1) => 0.96
finished with 18
iteration 6 finished
generating 4 configurations using top 4 configurations, starting with 18)
[0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333332, 0.9066666666666667, 0.9066666666666667, 0.8933333333333332]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.3, 1) => 0.96
finished with 19
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.925939340378615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.925939340378615, 0.3411162154904612] ***
*** starting iteration: 2; err: [Inf, 0.925939340378615, 0.3411162154904612] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.925939340378615, 0.3411162154904612, 0.22010249055106054] ***
*** starting iteration: 3; err: [Inf, 0.925939340378615, 0.3411162154904612, 0.22010249055106054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.925939340378615, 0.3411162154904612, 0.22010249055106054, 0.1820263297759541] ***
*** finished computation of 7 references, err: [Inf, 0.925939340378615, 0.3411162154904612, 0.22010249055106054, 0.1820263297759541] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 4]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(2, 3), (3, 4)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 10, 4]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(2, 10), (3, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 3, 17]]
** centroid: 3, normalized-entropy: 0.6098403047164005, [(2, 3), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 20, 1]]
*** center 6: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.9607937614294818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9607937614294818, 0.299654864009942] ***
*** starting iteration: 2; err: [Inf, 0.9607937614294818, 0.299654864009942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9607937614294818, 0.299654864009942, 0.25552062279715015] ***
*** starting iteration: 3; err: [Inf, 0.9607937614294818, 0.299654864009942, 0.25552062279715015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9607937614294818, 0.299654864009942, 0.25552062279715015, 0.23040178127156463] ***
*** finished computation of 7 references, err: [Inf, 0.9607937614294818, 0.299654864009942, 0.25552062279715015, 0.23040178127156463] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 8, 7]]
** centroid: 1, normalized-entropy: 0.9967916319816367, [(2, 8), (3, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 19, 0]]
*** center 4: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [0, 0, 1]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 2, 8]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.36553956564645546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.36553956564645546, 0.20278441603434214] ***
*** starting iteration: 2; err: [Inf, 0.36553956564645546, 0.20278441603434214] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.36553956564645546, 0.20278441603434214, 0.18382381926077468] ***
*** starting iteration: 3; err: [Inf, 0.36553956564645546, 0.20278441603434214, 0.18382381926077468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.36553956564645546, 0.20278441603434214, 0.18382381926077468, 0.17937497897026666] ***
*** finished computation of 7 references, err: [Inf, 0.36553956564645546, 0.20278441603434214, 0.18382381926077468, 0.17937497897026666] ***
*** center 1: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 12, 13]]
** centroid: 3, normalized-entropy: 0.998845535995202, [(2, 12), (3, 13)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 3, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 20, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 19)
[0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333332, 0.9066666666666667, 0.9066666666666667, 0.8933333333333332]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.3, 1) => 0.96
finished with 21
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.8943999957710943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8943999957710943, 0.35742796253826215] ***
*** starting iteration: 2; err: [Inf, 0.8943999957710943, 0.35742796253826215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8943999957710943, 0.35742796253826215, 0.28744971510956724] ***
*** starting iteration: 3; err: [Inf, 0.8943999957710943, 0.35742796253826215, 0.28744971510956724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8943999957710943, 0.35742796253826215, 0.28744971510956724, 0.28217016719226085] ***
*** starting iteration: 4; err: [Inf, 0.8943999957710943, 0.35742796253826215, 0.28744971510956724, 0.28217016719226085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8943999957710943, 0.35742796253826215, 0.28744971510956724, 0.28217016719226085, 0.280785883257743] ***
*** starting iteration: 5; err: [Inf, 0.8943999957710943, 0.35742796253826215, 0.28744971510956724, 0.28217016719226085, 0.280785883257743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8943999957710943, 0.35742796253826215, 0.28744971510956724, 0.28217016719226085, 0.280785883257743, 0.2802524821163796] ***
*** finished computation of 7 references, err: [Inf, 0.8943999957710943, 0.35742796253826215, 0.28744971510956724, 0.28217016719226085, 0.280785883257743, 0.2802524821163796] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 11, 1]]
*** center 3: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 8, 18]]
** centroid: 6, normalized-entropy: 0.8904916402194913, [(2, 8), (3, 18)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 17, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.48620000103610905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48620000103610905, 0.33168772364600363] ***
*** starting iteration: 2; err: [Inf, 0.48620000103610905, 0.33168772364600363] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48620000103610905, 0.33168772364600363, 0.271421444999699] ***
*** starting iteration: 3; err: [Inf, 0.48620000103610905, 0.33168772364600363, 0.271421444999699] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48620000103610905, 0.33168772364600363, 0.271421444999699, 0.25802339815966596] ***
*** starting iteration: 4; err: [Inf, 0.48620000103610905, 0.33168772364600363, 0.271421444999699, 0.25802339815966596] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48620000103610905, 0.33168772364600363, 0.271421444999699, 0.25802339815966596, 0.25802339815966596] ***
*** finished computation of 7 references, err: [Inf, 0.48620000103610905, 0.33168772364600363, 0.271421444999699, 0.25802339815966596, 0.25802339815966596] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 16, 1]]
*** center 2: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 12, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 1, 11]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6842000034741303] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6842000034741303, 0.2623675729202208] ***
*** starting iteration: 2; err: [Inf, 0.6842000034741303, 0.2623675729202208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6842000034741303, 0.2623675729202208, 0.24003951034375706] ***
*** starting iteration: 3; err: [Inf, 0.6842000034741303, 0.2623675729202208, 0.24003951034375706] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6842000034741303, 0.2623675729202208, 0.24003951034375706, 0.23813485499920767] ***
*** starting iteration: 4; err: [Inf, 0.6842000034741303, 0.2623675729202208, 0.24003951034375706, 0.23813485499920767] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6842000034741303, 0.2623675729202208, 0.24003951034375706, 0.23813485499920767, 0.23714567822462806] ***
*** finished computation of 7 references, err: [Inf, 0.6842000034741303, 0.2623675729202208, 0.24003951034375706, 0.23813485499920767, 0.23714567822462806] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 15, 6]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(2, 15), (3, 6)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 4, 6]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(2, 4), (3, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 6: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3025140565921572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3025140565921572, 0.19272335421562364] ***
*** starting iteration: 2; err: [Inf, 0.3025140565921572, 0.19272335421562364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3025140565921572, 0.19272335421562364, 0.1735870629349151] ***
*** starting iteration: 3; err: [Inf, 0.3025140565921572, 0.19272335421562364, 0.1735870629349151] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3025140565921572, 0.19272335421562364, 0.1735870629349151, 0.1714766439182754] ***
*** starting iteration: 4; err: [Inf, 0.3025140565921572, 0.19272335421562364, 0.1735870629349151, 0.1714766439182754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3025140565921572, 0.19272335421562364, 0.1735870629349151, 0.1714766439182754, 0.16970885341460648] ***
*** starting iteration: 5; err: [Inf, 0.3025140565921572, 0.19272335421562364, 0.1735870629349151, 0.1714766439182754, 0.16970885341460648] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3025140565921572, 0.19272335421562364, 0.1735870629349151, 0.1714766439182754, 0.16970885341460648, 0.16933719027196653] ***
*** finished computation of 7 references, err: [Inf, 0.3025140565921572, 0.19272335421562364, 0.1735870629349151, 0.1714766439182754, 0.16970885341460648, 0.16933719027196653] ***
*** center 1: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 18]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 18, 1]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 18, 6]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 18), (3, 6)]
*** center 6: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 7: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [0, 0, 1]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2418332737356967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2418332737356967, 0.17543631557973036] ***
*** starting iteration: 2; err: [Inf, 0.2418332737356967, 0.17543631557973036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2418332737356967, 0.17543631557973036, 0.1722859107291953] ***
*** starting iteration: 3; err: [Inf, 0.2418332737356967, 0.17543631557973036, 0.1722859107291953] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2418332737356967, 0.17543631557973036, 0.1722859107291953, 0.16964713542164095] ***
*** starting iteration: 4; err: [Inf, 0.2418332737356967, 0.17543631557973036, 0.1722859107291953, 0.16964713542164095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2418332737356967, 0.17543631557973036, 0.1722859107291953, 0.16964713542164095, 0.16929382054971673] ***
*** finished computation of 7 references, err: [Inf, 0.2418332737356967, 0.17543631557973036, 0.1722859107291953, 0.16964713542164095, 0.16929382054971673] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 2: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 15, 1]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 1, 17]]
*** center 6: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 13, 10]]
** centroid: 7, normalized-entropy: 0.9876925088958032, [(2, 13), (3, 10)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5462657702206326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5462657702206326, 0.23786610884841305] ***
*** starting iteration: 2; err: [Inf, 0.5462657702206326, 0.23786610884841305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5462657702206326, 0.23786610884841305, 0.22802299410347376] ***
*** starting iteration: 3; err: [Inf, 0.5462657702206326, 0.23786610884841305, 0.22802299410347376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5462657702206326, 0.23786610884841305, 0.22802299410347376, 0.22039212795897492] ***
*** starting iteration: 4; err: [Inf, 0.5462657702206326, 0.23786610884841305, 0.22802299410347376, 0.22039212795897492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5462657702206326, 0.23786610884841305, 0.22802299410347376, 0.22039212795897492, 0.21390260075227777] ***
*** starting iteration: 5; err: [Inf, 0.5462657702206326, 0.23786610884841305, 0.22802299410347376, 0.22039212795897492, 0.21390260075227777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5462657702206326, 0.23786610884841305, 0.22802299410347376, 0.22039212795897492, 0.21390260075227777, 0.21042071811773932] ***
*** starting iteration: 6; err: [Inf, 0.5462657702206326, 0.23786610884841305, 0.22802299410347376, 0.22039212795897492, 0.21390260075227777, 0.21042071811773932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5462657702206326, 0.23786610884841305, 0.22802299410347376, 0.22039212795897492, 0.21390260075227777, 0.21042071811773932, 0.2092281783739886] ***
*** starting iteration: 7; err: [Inf, 0.5462657702206326, 0.23786610884841305, 0.22802299410347376, 0.22039212795897492, 0.21390260075227777, 0.21042071811773932, 0.2092281783739886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5462657702206326, 0.23786610884841305, 0.22802299410347376, 0.22039212795897492, 0.21390260075227777, 0.21042071811773932, 0.2092281783739886, 0.2090893766232678] ***
*** finished computation of 7 references, err: [Inf, 0.5462657702206326, 0.23786610884841305, 0.22802299410347376, 0.22039212795897492, 0.21390260075227777, 0.21042071811773932, 0.2092281783739886, 0.2090893766232678] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 18, 0]]
*** center 2: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [0, 0, 1]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 8, 9]]
** centroid: 4, normalized-entropy: 0.9975025463691153, [(2, 8), (3, 9)]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 6: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 9, 0]]
finished with 7 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 21)
[0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333332, 0.9066666666666667, 0.9066666666666667, 0.8933333333333332]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.3, 1) => 0.96
finished with 22
iteration 9 finished
*** starting iteration: 1; err: [Inf, 3.4062338137604007] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.4062338137604007, 0.5169431814633846] ***
*** starting iteration: 2; err: [Inf, 3.4062338137604007, 0.5169431814633846] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.4062338137604007, 0.5169431814633846, 0.3750601049597377] ***
*** starting iteration: 3; err: [Inf, 3.4062338137604007, 0.5169431814633846, 0.3750601049597377] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.4062338137604007, 0.5169431814633846, 0.3750601049597377, 0.3707708568807073] ***
*** starting iteration: 4; err: [Inf, 3.4062338137604007, 0.5169431814633846, 0.3750601049597377, 0.3707708568807073] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.4062338137604007, 0.5169431814633846, 0.3750601049597377, 0.3707708568807073, 0.3704021658433075] ***
*** finished computation of 3 references, err: [Inf, 3.4062338137604007, 0.5169431814633846, 0.3750601049597377, 0.3707708568807073, 0.3704021658433075] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 34, 6]]
** centroid: 1, normalized-entropy: 0.6098403047164005, [(2, 34), (3, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 27]]
** centroid: 3, normalized-entropy: 0.36205125173399805, [(2, 2), (3, 27)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 4.1527109672445075] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 4.1527109672445075, 1.6115440427324277] ***
*** starting iteration: 2; err: [Inf, 4.1527109672445075, 1.6115440427324277] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 4.1527109672445075, 1.6115440427324277, 0.44060428410666747] ***
*** starting iteration: 3; err: [Inf, 4.1527109672445075, 1.6115440427324277, 0.44060428410666747] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 4.1527109672445075, 1.6115440427324277, 0.44060428410666747, 0.3799920856388016] ***
*** starting iteration: 4; err: [Inf, 4.1527109672445075, 1.6115440427324277, 0.44060428410666747, 0.3799920856388016] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 4.1527109672445075, 1.6115440427324277, 0.44060428410666747, 0.3799920856388016, 0.3706573834954003] ***
*** starting iteration: 5; err: [Inf, 4.1527109672445075, 1.6115440427324277, 0.44060428410666747, 0.3799920856388016, 0.3706573834954003] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 4.1527109672445075, 1.6115440427324277, 0.44060428410666747, 0.3799920856388016, 0.3706573834954003, 0.3701112248547325] ***
*** finished computation of 3 references, err: [Inf, 4.1527109672445075, 1.6115440427324277, 0.44060428410666747, 0.3799920856388016, 0.3706573834954003, 0.3701112248547325] ***
*** center 1: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 28, 11]]
** centroid: 2, normalized-entropy: 0.8582307926411409, [(2, 28), (3, 11)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 1, 29]]
** centroid: 3, normalized-entropy: 0.2108423003185322, [(2, 1), (3, 29)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8203258401527951] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8203258401527951, 0.5919953781942501] ***
*** starting iteration: 2; err: [Inf, 0.8203258401527951, 0.5919953781942501] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8203258401527951, 0.5919953781942501, 0.5815965438591386] ***
*** starting iteration: 3; err: [Inf, 0.8203258401527951, 0.5919953781942501, 0.5815965438591386] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8203258401527951, 0.5919953781942501, 0.5815965438591386, 0.5812173999209684] ***
*** finished computation of 3 references, err: [Inf, 0.8203258401527951, 0.5919953781942501, 0.5815965438591386, 0.5812173999209684] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 34, 27]]
** centroid: 1, normalized-entropy: 0.9904799742690307, [(2, 34), (3, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [24, 1, 0]]
** centroid: 3, normalized-entropy: 0.24229218908241482, [(1, 24), (2, 1)]
finished with 4 centroids; started with 3
[ Info: ========== BEST MODEL ==========
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.3, 1), 0.96)
[ Info: AKNC{Array{Float64,1}}[AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[5.547368421052632, 2.5999999999999996, 3.9210526315789473, 1.1947368421052633], [6.3500000000000005, 2.894444444444444, 4.650000000000001, 1.4666666666666666], [5.916666666666667, 2.6666666666666665, 5.033333333333332, 1.8666666666666665], [5.192857142857142, 3.6785714285714284, 1.4785714285714289, 0.26428571428571435], [7.525, 3.15, 6.125, 2.0749999999999997], [4.7294117647058815, 3.176470588235294, 1.4176470588235295, 0.211764705882353], [6.473684210526317, 3.0578947368421048, 5.484210526315789, 2.105263157894737], [7.666666666666667, 2.8000000000000003, 6.733333333333334, 2.1333333333333333]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 2, 3, 1, 3, 1, 3, 3], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.3, 1)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[5.518750000000001, 2.6874999999999996, 3.9875000000000003, 1.225], [4.9, 2.5, 4.5, 1.7], [4.83, 3.1950000000000003, 1.44, 0.23500000000000004], [5.4363636363636365, 3.7818181818181817, 1.5090909090909088, 0.30000000000000004], [7.454545454545454, 3.1545454545454548, 6.263636363636365, 2.0545454545454547], [6.408333333333332, 2.916666666666666, 4.558333333333333, 1.425], [5.9399999999999995, 2.7399999999999998, 4.96, 1.83], [6.9, 3.1, 4.9, 1.5], [6.561538461538462, 2.9384615384615382, 5.430769230769231, 2.0384615384615388], [6.483333333333333, 3.233333333333333, 5.683333333333334, 2.283333333333333]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 1, 1, 3, 2, 3, 2, 3, 3], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.3, 1)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[6.427272727272728, 3.0090909090909093, 4.590909090909091, 1.4181818181818182], [5.95, 2.95, 4.949999999999999, 1.7000000000000002], [5.9799999999999995, 2.88, 5.1, 1.8400000000000003], [6.45, 2.6, 4.75, 1.6], [6.266666666666667, 2.6999999999999997, 4.983333333333334, 1.75], [5.0289473684210515, 3.4421052631578952, 1.4789473684210526, 0.2394736842105263], [5.5600000000000005, 2.635, 3.95, 1.24], [6.76923076923077, 3.130769230769231, 5.700000000000001, 2.2153846153846155], [7.566666666666666, 3.1666666666666665, 6.566666666666666, 2.0]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 2, 3, 2, 3, 1, 2, 3, 3], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.3, 1))]
Test Summary: | Pass  Total
AKNC          |    1      1
[40, 26, 26, 33, 26, 22, 17, 30, 1, 12, 20, 24, 1, 9, 55, 1, 1, 6, 40, 48, 40, 17, 27, 10, 50, 30, 31, 1, 30, 29, 30, 22, 6, 1, 33, 37, 20, 29, 33, 28, 1, 42, 28, 19, 37, 26, 34, 18, 33, 26, 4, 39, 20, 40, 22, 24, 49, 45, 30, 46, 27, 27, 16, 49, 31, 50, 30, 36, 44, 46, 1, 36, 23, 63, 39, 46, 8, 39, 31, 21, 33, 45, 49, 28, 42, 38, 25, 26, 31, 32, 39, 34, 24, 53, 28, 24, 24, 33, 27, 41, 22, 34, 35, 30, 8, 14, 44, 35, 33, 37, 46, 38, 41, 32, 16, 8, 34, 35, 29, 44, 42, 21, 67, 2, 37, 38, 33, 31, 34, 18, 30, 44, 33, 21, 24, 43, 32, 44, 31, 38, 42, 33, 26, 38, 2, 34, 31, 39, 30, 47, 42, 40, 29, 37, 18, 39, 33, 20, 44, 11, 40, 16, 42, 39, 31, 57, 29, 33, 24, 40, 36, 33, 45, 68, 58, 35, 52, 27, 33, 24, 46, 23, 38, 33, 26, 60, 32, 26, 36, 41, 10, 34, 28, 28, 34, 33, 41, 33, 39, 19, 21, 8, 55, 43, 34, 68, 60, 62, 33, 44, 57, 37, 34, 46, 47, 22, 50, 12, 84, 55, 37, 45, 28, 47, 25, 1, 36, 26, 36, 27, 29, 41, 33, 58, 39, 48, 27, 42, 45, 60, 38, 34, 60, 15, 23, 29, 33, 28, 30, 26, 42, 41, 35, 40, 40, 36, 54, 49, 49, 33, 50, 44, 2, 43, 26, 63, 41, 55, 30, 42, 36, 48, 23, 38, 45, 33, 27, 51, 22, 37, 55, 22, 34, 35, 57, 32, 47, 26, 35, 38, 37, 35, 28, 9, 34, 1, 45, 78, 42, 18]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.5710000000000001, speedup = 0.40545730924038703, eval_ratio = 0.041789)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.40054563492063483,"recall":0.39930555555555547,"f1":null,"seconds":7.153116166591644e-5,"exhaustive_search_seconds":0.00038653984665870667,"evaluations":341.1796875,"distances_sum":1695.3950962974857}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5824652777777777,"recall":0.5824652777777777,"f1":0.5824652777777777,"seconds":0.00010352768003940582,"exhaustive_search_seconds":0.00038653984665870667,"evaluations":380.5078125,"distances_sum":1584.9660176253572}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6814236111111107,"recall":0.6814236111111107,"f1":0.6814236111111107,"seconds":0.00013841129839420319,"exhaustive_search_seconds":0.00038653984665870667,"evaluations":419.8984375,"distances_sum":1544.6408858181585}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7465277777777771,"recall":0.7465277777777771,"f1":0.7465277777777771,"seconds":0.00017016753554344177,"exhaustive_search_seconds":0.00038653984665870667,"evaluations":457.9375,"distances_sum":1524.8006417908125}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7942708333333324,"recall":0.7942708333333324,"f1":0.7942708333333324,"seconds":0.00019030645489692688,"exhaustive_search_seconds":0.00038653984665870667,"evaluations":498.3359375,"distances_sum":1513.4594604828515}
KCenters.DeloneInvIndex> reached performance {"precision":0.832465277777777,"recall":0.832465277777777,"f1":0.832465277777777,"seconds":0.0002250075340270996,"exhaustive_search_seconds":0.00038653984665870667,"evaluations":538.09375,"distances_sum":1504.8301596142921}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7989999999999996, speedup = 1.6272641347310535, eval_ratio = 0.053925)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
   Testing KCenters tests passed 
