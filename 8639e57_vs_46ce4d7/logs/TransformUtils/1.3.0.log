Julia Version 1.3.0
Commit 46ce4d7933 (2019-11-26 06:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-6.0.1 (ORCJIT, skylake)

   Cloning default registries into `~/.julia`
   Cloning registry from "https://github.com/JuliaRegistries/General.git"
[?25l    Fetching: [>                                        ]  0.0 %    Fetching: [==============>                          ]  33.2 %    Fetching: [==============================>          ]  73.5 %[2K[?25h     Added registry `General` to `~/.julia/registries/General`
 Resolving package versions...
 Installed TransformUtils â”€ v0.2.2
  Updating `~/.julia/environments/v1.3/Project.toml`
  [9b8138ad] + TransformUtils v0.2.2
  Updating `~/.julia/environments/v1.3/Manifest.toml`
  [9b8138ad] + TransformUtils v0.2.2
  [2a0f44e3] + Base64 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [de0858da] + Printf 
  [9abbd945] + Profile 
  [9a3f8284] + Random 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [8dfed614] + Test 
  [4ec0a83e] + Unicode 
   Testing TransformUtils
    Status `/tmp/jl_l2SKpL/Manifest.toml`
  [9b8138ad] TransformUtils v0.2.2
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [9abbd945] Profile  [`@stdlib/Profile`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [8dfed614] Test  [`@stdlib/Test`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
Test Summary:                               |
Constructors SO3, Quaternion, AngleAxis...  | No tests
Test Summary:                           | Pass  Total
Ensure basic quaternion operations hold |   10     10
Test Summary:                                       | Pass  Total
Comparison functions for SO3, Quaternion, AngleAxis |    5      5
Test Summary:                                        | Pass  Total
Trivial case quaterion -> SO3 -> Euler -> quaternion |    2      2
â”Œ Warning: Need better coverage on convert function tests
â”” @ Main ~/.julia/packages/TransformUtils/x61q0/test/runtests.jl:67
dAA = AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = so3([0.0 -0.0082451980214203 -0.049563206142433466; 0.0082451980214203 0.0 0.049084546915796064; 0.049563206142433466 -0.049084546915796064 0.0])
dAA = so3([0.0 0.08622996820811052 -0.027688300307363963; -0.08622996820811052 0.0 0.04241485040844618; 0.027688300307363963 -0.04241485040844618 0.0])
dAA = so3([0.0 -0.05911255518851297 0.05288705787001755; 0.05911255518851297 0.0 -0.13224231037879272; -0.05288705787001755 0.13224231037879272 0.0])
dAA = Quaternion(0.99448679697289, [0.027373198827793634, -0.048398812903072894, -0.0889059814754292])
dAA = SO3([0.9954749126277728 0.061284105838925185 -0.07262201250482994; -0.06412640601139169 0.9972379607935519 -0.037473371937692915; 0.07012490556706943 0.04196079031479197 0.9966553013431313])
Test Summary:                        | Pass  Total
Compare SO3 and quaternion rotations |   24     24
Test Summary:       | Pass  Total
Basic SE3 mechanics |    4      4
Compare operations on two different SE3 transforms
xi = SE3(SO3([0.974501209860305 0.21698697983579027 -0.057131799923896914; -0.2096851646468132 0.9712918001576298 0.11235822477055107; 0.07987192064700016 -0.09751353510304696 0.9920239849740863]), [-0.4908454691579606, -0.49563206142433464, 0.082451980214203])
xj = SE3(SO3([0.874195008427636 0.4143187838387141 -0.25322526058553935; -0.4497153730641862 0.8875096550046346 -0.10041262621450656; 0.18313702648548494 0.20165950915333325 0.9621820367779121]), [1.3224231037879273, 0.5288705787001755, 0.5911255518851297])
Dx = SE3(SO3([0.960830241458714 0.23376348029620198 -0.14886195745789704; -0.2649742584566975 0.9322681004364419 -0.24630231680589465; 0.08120276752496038 0.2760993013182671 0.957692688892346]), [1.59283814851356, 1.3389441266803361, 0.5161323842192922])
Test Summary:         | Pass  Total
SE3 âŠ• and âŠ– mechanics |    6      6
TransformUtils.convert(Euler, q) = Euler(0.7853981633974484, 0.0, 1.5707963267948963, Quaternion(1.0, [0.0, 0.0, 0.0]))
Test Summary:              | Pass  Total
Previous discovered issues |    3      3
Test Summary:      | Pass  Total
test SO3 logmap... |  301    301
Test Summary:                              | Pass  Total
test in-place and efficient inverse SE3... |    1      1
   Testing TransformUtils tests passed 
