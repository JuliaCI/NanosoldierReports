Julia Version 1.5.0-DEV.17
Commit 9b7ea2f0b3 (2020-01-07 01:14 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed OrderedCollections ─ v1.1.0
 Installed LabelledArrays ───── v1.0.0
 Installed MacroTools ───────── v0.5.3
 Installed StaticArrays ─────── v0.12.1
 Installed DataStructures ───── v0.17.7
  Updating `~/.julia/environments/v1.5/Project.toml`
  [2ee39098] + LabelledArrays v1.0.0
  Updating `~/.julia/environments/v1.5/Manifest.toml`
  [864edb3b] + DataStructures v0.17.7
  [2ee39098] + LabelledArrays v1.0.0
  [1914dd2f] + MacroTools v0.5.3
  [bac558e1] + OrderedCollections v1.1.0
  [90137ffa] + StaticArrays v0.12.1
  [2a0f44e3] + Base64 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [9a3f8284] + Random 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
   Testing LabelledArrays
 Installed RecursiveFactorization ────── v0.1.0
 Installed GenericSVD ────────────────── v0.2.2
 Installed Parameters ────────────────── v0.12.0
 Installed FunctionWrappers ──────────── v1.0.0
 Installed ExponentialUtilities ──────── v1.6.0
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed DiffResults ───────────────── v1.0.2
 Installed LightGraphs ───────────────── v1.3.0
 Installed OpenSpecFun_jll ───────────── v0.5.3+1
 Installed Requires ──────────────────── v1.0.0
 Installed DocStringExtensions ───────── v0.8.1
 Installed RecipesBase ───────────────── v0.7.0
 Installed TreeViews ─────────────────── v0.3.0
 Installed OrdinaryDiffEq ────────────── v5.26.7
 Installed SpecialFunctions ──────────── v0.9.0
 Installed SimpleTraits ──────────────── v0.9.1
 Installed ZygoteRules ───────────────── v0.2.0
 Installed ArnoldiMethod ─────────────── v0.0.4
 Installed DiffEqDiffTools ───────────── v1.7.0
 Installed Inflate ───────────────────── v0.1.1
 Installed DiffEqBase ────────────────── v6.10.0
 Installed TableTraits ───────────────── v1.0.0
 Installed ArrayInterface ────────────── v2.3.1
 Installed IterativeSolvers ──────────── v0.8.1
 Installed Roots ─────────────────────── v0.8.4
 Installed NaNMath ───────────────────── v0.3.3
 Installed Reexport ──────────────────── v0.2.0
 Installed Compat ────────────────────── v2.2.0
 Installed CommonSubexpressions ──────── v0.2.0
 Installed MuladdMacro ───────────────── v0.2.1
 Installed Adapt ─────────────────────── v1.0.0
 Installed RecursiveArrayTools ───────── v1.2.1
 Installed DiffRules ─────────────────── v1.0.0
 Installed SparseDiffTools ───────────── v1.2.0
 Installed ForwardDiff ───────────────── v0.10.8
 Installed VertexSafeGraphs ──────────── v0.1.0
  Updating `/tmp/jl_u9jdQF/Project.toml`
  [1dea7af3] + OrdinaryDiffEq v5.26.7
  Updating `/tmp/jl_u9jdQF/Manifest.toml`
  [79e6a3ab] + Adapt v1.0.0
  [ec485272] + ArnoldiMethod v0.0.4
  [4fba245c] + ArrayInterface v2.3.1
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v2.2.0
  [2b5f629d] + DiffEqBase v6.10.0
  [01453d9d] + DiffEqDiffTools v1.7.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.0
  [ffbed154] + DocStringExtensions v0.8.1
  [d4d017d3] + ExponentialUtilities v1.6.0
  [f6369f11] + ForwardDiff v0.10.8
  [069b7b12] + FunctionWrappers v1.0.0
  [01680d73] + GenericSVD v0.2.2
  [d25df0c9] + Inflate v0.1.1
  [42fd0dbc] + IterativeSolvers v0.8.1
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [093fc24a] + LightGraphs v1.3.0
  [46d2c3a1] + MuladdMacro v0.2.1
  [77ba4419] + NaNMath v0.3.3
  [efe28fd5] + OpenSpecFun_jll v0.5.3+1
  [1dea7af3] + OrdinaryDiffEq v5.26.7
  [d96e819e] + Parameters v0.12.0
  [3cdcf5f2] + RecipesBase v0.7.0
  [731186ca] + RecursiveArrayTools v1.2.1
  [f2c3362d] + RecursiveFactorization v0.1.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.0
  [f2b01f46] + Roots v0.8.4
  [699a6c99] + SimpleTraits v0.9.1
  [47a9eef4] + SparseDiffTools v1.2.0
  [276daf66] + SpecialFunctions v0.9.0
  [3783bdb8] + TableTraits v1.0.0
  [a2a6695c] + TreeViews v0.3.0
  [19fa3120] + VertexSafeGraphs v0.1.0
  [700de1a5] + ZygoteRules v0.2.0
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [76f85450] + LibGit2 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [ea8e919c] + SHA 
  [1a1011a3] + SharedArrays 
  [4607b0f0] + SuiteSparse 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
Running sandbox
Status `/tmp/jl_u9jdQF/Project.toml`
  [2ee39098] LabelledArrays v1.0.0
  [1914dd2f] MacroTools v0.5.3
  [1dea7af3] OrdinaryDiffEq v5.26.7
  [90137ffa] StaticArrays v0.12.1
  [b77e0a4c] InteractiveUtils 
  [37e2e46d] LinearAlgebra 
  [8dfed614] Test 
3-element SLArray{Tuple{3},Int64,1,3,(:a, :b, :c)} with indices SOneTo(3):
 :a => 1
 :b => 2
 :c => 33-element SLArray{Tuple{3},Float64,1,3,(a = 1:2, b = 3)} with indices SOneTo(3):
 :a => 1.0
 :a => 2.0
 :b => 3.03-element SLArray{Tuple{3},Float64,1,3,(a = 1:2, b = 2:3)} with indices SOneTo(3):
 :a => 1.0
 :a => 2.0
 :b => 3.02-element SLArray{Tuple{2},Int64,1,2,(a = 1, b = 2)} with indices SOneTo(2):
 :a => 1
 :b => 22×2 SLArray{Tuple{2,2},Int64,2,4,(a = (2, Colon()), b = 3)} with indices SOneTo(2)×SOneTo(2):
 nothing => 1  :b => 3
      :a => 2  :a => 4Test Summary: | Pass  Total
SLArrays      |   38     38
 17.199115 seconds (15.70 M allocations: 809.323 MiB, 1.61% gc time)
3-element LArray{Float64,1,Array{Float64,1},(:a, :b, :c)}:
 :a => 1.0
 :b => 2.0
 :c => 3.0(i, s) = (1, :a)
(i, s) = (2, :b)
(i, s) = (3, :c)
  0.008139 seconds (974 allocations: 56.461 KiB)
  0.000010 seconds (5 allocations: 176 bytes)
  0.012143 seconds (5.27 k allocations: 300.729 KiB)
  0.000009 seconds (5 allocations: 176 bytes)
Variables
  #self#::Core.Compiler.Const(var"#g#29"(), false)
  x::LArray{Float64,1,Array{Float64,1},(:a, :b, :c)}

Body::Float64
1 ─ %1 = Base.getproperty(x, :a)::Float64
└──      return %1
Variables
  #unused#::Core.Compiler.Const(Core.var"#Type##kw"(), false)
  @_2::NamedTuple{(:a, :b, :c, :d),NTuple{4,Int64}}
  @_3::Type{LArray}
  size::Tuple{Int64,Int64}
  kwargs...::Base.Iterators.Pairs{Symbol,Int64,NTuple{4,Symbol},NamedTuple{(:a, :b, :c, :d),NTuple{4,Int64}}}

Body::LArray{Int64,2,Array{Int64,2},(:a, :b, :c, :d)}
1 ─      (kwargs... = Base.pairs(@_2))
│   %2 = LabelledArrays.:(var"#LArray#7")(kwargs..., @_3, size)::LArray{Int64,2,Array{Int64,2},(:a, :b, :c, :d)}
└──      return %2
Variables
  #self#::Core.Compiler.Const(convert, false)
  #unused#::Type{NamedTuple}
  x::LArray{Int64,2,Array{Int64,2},(:a, :b, :c, :d)}
  tup::NTuple{4,Int64}

Body::NamedTuple{(:a, :b, :c, :d),NTuple{4,Int64}}
1 ─ %1 = LabelledArrays.length($(Expr(:static_parameter, 4)))::Core.Compiler.Const(4, false)
│   %2 = Core.apply_type(LabelledArrays.NTuple, %1, $(Expr(:static_parameter, 1)))::Core.Compiler.Const(NTuple{4,Int64}, false)
│        (tup = (%2)(x))
│   %4 = $(Expr(:static_parameter, 4))::Core.Compiler.Const((:a, :b, :c, :d), false)
│   %5 = LabelledArrays.typeof(tup)::Core.Compiler.Const(NTuple{4,Int64}, false)
│   %6 = Core.apply_type(LabelledArrays.NamedTuple, %4, %5)::Core.Compiler.Const(NamedTuple{(:a, :b, :c, :d),NTuple{4,Int64}}, false)
│   %7 = (%6)(tup)::NamedTuple{(:a, :b, :c, :d),NTuple{4,Int64}}
└──      return %7
Variables
  #self#::Core.Compiler.Const(collect, false)
  itr::Base.Generator{UnitRange{Int64},LabelledArrays.var"#9#10"{(:a, :b, :c, :d),LArray{Int64,2,Array{Int64,2},(:a, :b, :c, :d)}}}
  isz::Base.HasShape{1}
  et::Type{Pair{Symbol,Int64}}
  y::UNION{NOTHING, TUPLE{PAIR{SYMBOL,INT64},INT64}}
  v1::Pair{Symbol,Int64}
  @_7::Int64
  st::Int64
  @_9::Bool
  @_10::Type{Pair{Symbol,Int64}}

Body::Array{Pair{Symbol,Int64},1}
1 ─       Core.NewvarNode(:(et))
│         Core.NewvarNode(:(y))
│         Core.NewvarNode(:(v1))
│         Core.NewvarNode(:(@_7))
│         Core.NewvarNode(:(st))
│   %6  = Base.getproperty(itr, :iter)::UnitRange{Int64}
│         (isz = Base.IteratorSize(%6))
│   %8  = (itr isa Base.Generator)::Core.Compiler.Const(true, false)
│         %8
│   %10 = Base.getproperty(itr, :f)::LabelledArrays.var"#9#10"{(:a, :b, :c, :d),LArray{Int64,2,Array{Int64,2},(:a, :b, :c, :d)}}
│         (@_9 = %10 isa Base.Type)
└──       goto #3
2 ─       Core.Compiler.Const(:(@_9 = false), false)
3 ┄       goto #5 if not @_9::Core.Compiler.Const(false, false)
4 ─       Core.Compiler.Const(:(@_10 = Base.getproperty(itr, :f)), false)
└──       Core.Compiler.Const(:(goto %22), false)
5 ┄ %17 = Core.Compiler::Core.Compiler.Const(Core.Compiler, false)
│   %18 = Base.getproperty(%17, :return_type)::Core.Compiler.Const(Core.Compiler.return_type, false)
│   %19 = Base.typeof(itr)::Core.Compiler.Const(Base.Generator{UnitRange{Int64},LabelledArrays.var"#9#10"{(:a, :b, :c, :d),LArray{Int64,2,Array{Int64,2},(:a, :b, :c, :d)}}}, false)
│   %20 = Core.apply_type(Base.Tuple, %19)::Core.Compiler.Const(Tuple{Base.Generator{UnitRange{Int64},LabelledArrays.var"#9#10"{(:a, :b, :c, :d),LArray{Int64,2,Array{Int64,2},(:a, :b, :c, :d)}}}}, false)
│         (@_10 = (%18)(Base.first, %20))
│         (et = @_10::Core.Compiler.Const(Pair{Symbol,Int64}, false))
│   %23 = (isz isa Base.SizeUnknown)::Core.Compiler.Const(false, false)
└──       goto #7 if not %23
6 ─       Core.Compiler.Const(:(Core.apply_type(Base.Vector, et)), false)
│         Core.Compiler.Const(:((%25)()), false)
│         Core.Compiler.Const(:(Base.grow_to!(%26, itr)), false)
└──       Core.Compiler.Const(:(return %27), false)
7 ┄       (y = Base.iterate(itr))
│   %30 = (y === Base.nothing)::Bool
└──       goto #9 if not %30
8 ─ %32 = et::Core.Compiler.Const(Pair{Symbol,Int64}, false)::Core.Compiler.Const(Pair{Symbol,Int64}, false)
│   %33 = Base.getproperty(itr, :iter)::UnitRange{Int64}
│   %34 = Base._array_for(%32, %33, isz)::Array{Pair{Symbol,Int64},1}
└──       return %34
9 ─ %36 = Base.indexed_iterate(y::Tuple{Pair{Symbol,Int64},Int64}, 1)::Core.Compiler.PartialStruct(Tuple{Pair{Symbol,Int64},Int64}, Any[Pair{Symbol,Int64}, Core.Compiler.Const(2, false)])
│         (v1 = Core.getfield(%36, 1))
│         (@_7 = Core.getfield(%36, 2))
│   %39 = Base.indexed_iterate(y::Tuple{Pair{Symbol,Int64},Int64}, 2, @_7::Core.Compiler.Const(2, false))::Core.Compiler.PartialStruct(Tuple{Int64,Int64}, Any[Int64, Core.Compiler.Const(3, false)])
│         (st = Core.getfield(%39, 1))
│   %41 = Base.typeof(v1)::Core.Compiler.Const(Pair{Symbol,Int64}, false)
│   %42 = Base.getproperty(itr, :iter)::UnitRange{Int64}
│   %43 = Base._array_for(%41, %42, isz)::Array{Pair{Symbol,Int64},1}
│   %44 = v1::Pair{Symbol,Int64}
│   %45 = Base.collect_to_with_first!(%43, %44, itr, st)::Array{Pair{Symbol,Int64},1}
└──       return %45
2×2 LArray{Float64,2,Array{Float64,2},(:a, :b, :c, :d)}:
 :a => 1.93e-322  :c => 6.92358282857335e-310
 :b => 7.0e-323   :d => 6.9235828264192e-3103-element LArray{Float64,1,Array{Float64,1},(a = 1:2, b = 3)}:
 :a => 1.0
 :a => 2.0
 :b => 3.02-element LArray{Float64,1,Array{Float64,1},(a = 1, b = 2)}:
 :a => 1.0
 :b => 2.02×2 LArray{Int64,2,Array{Int64,2},(a = (2, Colon()), b = 2:3)}:
 nothing => 1  :b => 2
      :a => 3  :a => 4Test Summary: | Pass  Total
LArrays       |   46     46
 21.155074 seconds (18.70 M allocations: 905.450 MiB, 2.79% gc time)
WARNING: Method definition ldiv!(AbstractArray{T, N} where N where T, AbstractArray{T, 2} where T, AbstractArray{T, N} where N where T) in module LinearAlgebra at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:247 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/8fdjX/src/init.jl:6.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition ldiv!(AbstractArray{T, N} where N where T, LinearAlgebra.Diagonal{T, V} where V<:AbstractArray{T, 1} where T, AbstractArray{T, N} where N where T) in module LinearAlgebra at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/diagonal.jl:430 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/8fdjX/src/init.jl:7.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition ldiv!(AbstractArray{T, N} where N where T, LinearAlgebra.Diagonal{T, V} where V<:AbstractArray{T, 1} where T, AbstractArray{T, N} where N where T) in module LinearAlgebra at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/diagonal.jl:430 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/8fdjX/src/init.jl:7.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition ldiv!(AbstractArray{T, N} where N where T, AbstractArray{T, 2} where T, AbstractArray{T, N} where N where T) in module LinearAlgebra at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:247 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/8fdjX/src/init.jl:6.
  ** incremental compilation may be fatally broken for this module **

Test Summary: | Pass  Total
DiffEq        |    9      9
302.708535 seconds (70.30 M allocations: 3.457 GiB, 0.86% gc time)
341.077016 seconds (104.71 M allocations: 5.132 GiB, 1.02% gc time)
   Testing LabelledArrays tests passed 
