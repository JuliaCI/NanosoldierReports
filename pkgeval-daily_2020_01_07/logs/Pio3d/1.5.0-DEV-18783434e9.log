Julia Version 1.5.0-DEV.11
Commit 18783434e9 (2020-01-04 00:48 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed Pio3d ────────────── v0.0.2
 Installed VersionParsing ───── v1.2.0
 Installed Conda ────────────── v1.3.0
 Installed Parsers ──────────── v0.3.10
 Installed OrderedCollections ─ v1.1.0
 Installed PyCall ───────────── v1.91.2
 Installed DataStructures ───── v0.17.7
 Installed MacroTools ───────── v0.5.3
 Installed JSON ─────────────── v0.21.0
  Updating `~/.julia/environments/v1.5/Project.toml`
  [276a7f50] + Pio3d v0.0.2
  Updating `~/.julia/environments/v1.5/Manifest.toml`
  [8f4d0f93] + Conda v1.3.0
  [864edb3b] + DataStructures v0.17.7
  [682c06a0] + JSON v0.21.0
  [1914dd2f] + MacroTools v0.5.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.10
  [276a7f50] + Pio3d v0.0.2
  [438e738f] + PyCall v1.91.2
  [81def892] + VersionParsing v1.2.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building Conda ─→ `~/.julia/packages/Conda/kLXeC/deps/build.log`
  Updating `/tmp/jl_gfMsN7/Project.toml`
 [no changes]
  Updating `/tmp/jl_gfMsN7/Manifest.toml`
 [no changes]
  Building PyCall → `~/.julia/packages/PyCall/ttONZ/deps/build.log`
  Updating `/tmp/jl_Eyapa2/Project.toml`
 [no changes]
  Updating `/tmp/jl_Eyapa2/Manifest.toml`
 [no changes]
   Testing Pio3d
  Updating `/tmp/jl_E80iZt/Project.toml`
 [no changes]
  Updating `/tmp/jl_E80iZt/Manifest.toml`
 [no changes]
Running sandbox
Status `/tmp/jl_E80iZt/Project.toml`
  [276a7f50] Pio3d v0.0.2
  [438e738f] PyCall v1.91.2
  [8dfed614] Test 
Pio3d.jl: Error During Test at /home/pkgeval/.julia/packages/Pio3d/qsitX/test/runtests.jl:6
  Test threw exception
  Expression: "nrn4" in Pio3d.get_labels()
  PyError (PyImport_ImportModule
  
  The Python package io3d.datasets could not be found by pyimport. Usually this means
  that you did not install io3d.datasets in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the io3d.datasets module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the io3d.datasets module, you can use `pyimport_conda("io3d.datasets", PKG)`,
  where PKG is the Anaconda package the contains the module io3d.datasets,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'io3d'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/ttONZ/src/PyCall.jl:544
   [2] get_labels() at /home/pkgeval/.julia/packages/Pio3d/qsitX/src/Pio3d.jl:52
   [3] macro expansion at /home/pkgeval/.julia/packages/Pio3d/qsitX/test/runtests.jl:6 [inlined]
   [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1116 [inlined]
   [5] top-level scope at /home/pkgeval/.julia/packages/Pio3d/qsitX/test/runtests.jl:6
  
Pio3d.jl: Error During Test at /home/pkgeval/.julia/packages/Pio3d/qsitX/test/runtests.jl:4
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package io3d.datasets could not be found by pyimport. Usually this means
  that you did not install io3d.datasets in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the io3d.datasets module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the io3d.datasets module, you can use `pyimport_conda("io3d.datasets", PKG)`,
  where PKG is the Anaconda package the contains the module io3d.datasets,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'io3d'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/ttONZ/src/PyCall.jl:544
   [2] datasets_download(::String) at /home/pkgeval/.julia/packages/Pio3d/qsitX/src/Pio3d.jl:33
   [3] macro expansion at /home/pkgeval/.julia/packages/Pio3d/qsitX/test/runtests.jl:7 [inlined]
   [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1116 [inlined]
   [5] top-level scope at /home/pkgeval/.julia/packages/Pio3d/qsitX/test/runtests.jl:6
   [6] include(::String) at ./client.jl:439
   [7] top-level scope at none:6
   [8] eval(::Module, ::Any) at ./boot.jl:331
   [9] exec_options(::Base.JLOptions) at ./client.jl:264
   [10] _start() at ./client.jl:484
  
Test Summary: | Error  Total
Pio3d.jl      |     2      2
ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/Pio3d/qsitX/test/runtests.jl:4
err = ProcessFailedException(Base.Process[Process(`/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so -g1 --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --inline=yes --startup-file=no --track-allocation=none --eval 'append!(empty!(Base.DEPOT_PATH), ["/home/pkgeval/.julia", "/opt/julia/local/share/julia", "/opt/julia/share/julia", "/usr/local/share/julia"])
append!(empty!(Base.DL_LOAD_PATH), String[])

cd("/home/pkgeval/.julia/packages/Pio3d/qsitX/test")
append!(empty!(ARGS), String[])
include("/home/pkgeval/.julia/packages/Pio3d/qsitX/test/runtests.jl")
'`, ProcessExited(1))])
ERROR: Package Pio3d errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:54
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1471
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:313
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:300
 [5] #test#66 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:294 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:294 [inlined]
 [7] #test#65 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:293 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:293 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:292
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:292
 [11] top-level scope at none:13
