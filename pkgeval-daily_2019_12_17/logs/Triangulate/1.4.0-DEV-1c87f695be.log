Julia Version 1.4.0-DEV.596
Commit 1c87f695be (2019-12-12 22:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed URIParser ─────────── v0.4.0
 Installed Compat ────────────── v2.2.0
 Installed BinDeps ───────────── v0.8.10
 Installed BinaryProvider ────── v0.5.8
 Installed Triangulate ───────── v0.2.0
 Installed DocStringExtensions ─ v0.8.1
  Updating `~/.julia/environments/v1.4/Project.toml`
  [f7e6ffb2] + Triangulate v0.2.0
  Updating `~/.julia/environments/v1.4/Manifest.toml`
  [9e28174c] + BinDeps v0.8.10
  [b99e7846] + BinaryProvider v0.5.8
  [34da2185] + Compat v2.2.0
  [ffbed154] + DocStringExtensions v0.8.1
  [f7e6ffb2] + Triangulate v0.2.0
  [30578b45] + URIParser v0.4.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building Triangulate → `~/.julia/packages/Triangulate/o51SS/deps/build.log`
   Testing Triangulate
Status `/tmp/jl_zniIRc/Manifest.toml`
  [9e28174c] BinDeps v0.8.10
  [b99e7846] BinaryProvider v0.5.8
  [34da2185] Compat v2.2.0
  [ffbed154] DocStringExtensions v0.8.1
  [f7e6ffb2] Triangulate v0.2.0
  [30578b45] URIParser v0.4.0
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
Directory /home/pkgeval/.julia/packages/Triangulate/o51SS/test:
  runtests:
  test_ctriangulate:
   compile:  1.272081 seconds (1.76 M allocations: 89.035 MiB, 2.12% gc time)
       run:  0.001754 seconds (73 allocations: 4.766 KiB)
  test_triangulate:
   compile:  0.596060 seconds (445.08 k allocations: 22.788 MiB, 8.41% gc time)
       run:  0.001424 seconds (134 allocations: 24.527 KiB)
  6.070803 seconds (3.22 M allocations: 163.175 MiB, 1.41% gc time)
Directory /home/pkgeval/.julia/packages/Triangulate/o51SS/test/../examples:
  TriangleExamples:
   compile:  0.851134 seconds (832.13 k allocations: 42.065 MiB, 1.52% gc time)
       run:Constructing Delaunay triangulation by divide-and-conquer method.

Writing vertices.
Writing triangles.
Writing segments.

Statistics:

  Input vertices: 20

  Mesh vertices: 20
  Mesh triangles: 31
  Mesh edges: 50
  Mesh exterior boundary edges: 7

Constructing Delaunay triangulation by divide-and-conquer method.
Recovering segments in Delaunay triangulation.
Removing unwanted triangles.

Writing vertices.
Writing triangles.
Writing segments.

Statistics:

  Input vertices: 20
  Input segments: 2
  Input holes: 0

  Mesh vertices: 20
  Mesh triangles: 30
  Mesh edges: 49
  Mesh exterior boundary edges: 8
  Mesh interior boundary edges: 2
  Mesh subsegments (constrained edges): 10

Constructing Delaunay triangulation by divide-and-conquer method.
Recovering segments in Delaunay triangulation.
Removing unwanted triangles.
Adding Steiner points to enforce quality.

Writing vertices.
Writing triangles.
Writing segments.

Statistics:

  Input vertices: 20
  Input segments: 2
  Input holes: 0

  Mesh vertices: 41
  Mesh triangles: 54
  Mesh edges: 94
  Mesh exterior boundary edges: 26
  Mesh interior boundary edges: 7
  Mesh subsegments (constrained edges): 33

Constructing Delaunay triangulation by divide-and-conquer method.
Recovering segments in Delaunay triangulation.
Removing unwanted triangles.
Adding Steiner points to enforce quality.

Writing vertices.
Writing triangles.
Writing segments.

Statistics:

  Input vertices: 4
  Input segments: 4
  Input holes: 0

  Mesh vertices: 87
  Mesh triangles: 151
  Mesh edges: 237
  Mesh exterior boundary edges: 21
  Mesh interior boundary edges: 0
  Mesh subsegments (constrained edges): 21

Constructing Delaunay triangulation by divide-and-conquer method.
Recovering segments in Delaunay triangulation.
Removing unwanted triangles.
Adding Steiner points to enforce quality.

Writing vertices.
Writing triangles.
Writing segments.

Statistics:

  Input vertices: 4
  Input segments: 4
  Input holes: 0

  Mesh vertices: 84
  Mesh triangles: 134
  Mesh edges: 217
  Mesh exterior boundary edges: 32
  Mesh interior boundary edges: 0
  Mesh subsegments (constrained edges): 32

Constructing Delaunay triangulation by divide-and-conquer method.
Recovering segments in Delaunay triangulation.
Removing unwanted triangles.
Adding Steiner points to enforce quality.

Writing vertices.
Writing triangles.
Writing segments.

Statistics:

  Input vertices: 4
  Input segments: 4
  Input holes: 0

  Mesh vertices: 420
  Mesh triangles: 790
  Mesh edges: 1209
  Mesh exterior boundary edges: 48
  Mesh interior boundary edges: 0
  Mesh subsegments (constrained edges): 48

Constructing Delaunay triangulation by divide-and-conquer method.

Writing vertices.
Writing triangles.
Writing segments.

Statistics:

  Input vertices: 20

  Mesh vertices: 20
  Mesh triangles: 30
  Mesh edges: 49
  Mesh exterior boundary edges: 8

Constructing Delaunay triangulation by divide-and-conquer method.
Recovering segments in Delaunay triangulation.
Removing unwanted triangles.

Writing vertices.
Writing triangles.
Writing segments.

Statistics:

  Input vertices: 20
  Input segments: 2
  Input holes: 0

  Mesh vertices: 21
  Mesh triangles: 31
  Mesh edges: 51
  Mesh exterior boundary edges: 9
  Mesh interior boundary edges: 4
  Mesh subsegments (constrained edges): 13

Constructing Delaunay triangulation by divide-and-conquer method.
Recovering segments in Delaunay triangulation.
Removing unwanted triangles.
Adding Steiner points to enforce quality.

Writing vertices.
Writing triangles.
Writing segments.

Statistics:

  Input vertices: 20
  Input segments: 2
  Input holes: 0

  Mesh vertices: 75
  Mesh triangles: 105
  Mesh edges: 179
  Mesh exterior boundary edges: 43
  Mesh interior boundary edges: 21
  Mesh subsegments (constrained edges): 64

Constructing Delaunay triangulation by divide-and-conquer method.
Recovering segments in Delaunay triangulation.
Removing unwanted triangles.
Adding Steiner points to enforce quality.

Writing vertices.
Writing triangles.
Writing segments.

Statistics:

  Input vertices: 4
  Input se  0.003879 seconds (17.65 k allocations: 360.844 KiB)
  1.127151 seconds (937.42 k allocations: 46.887 MiB, 1.14% gc time)
  7.198792 seconds (4.16 M allocations: 210.067 MiB, 1.37% gc time)
gments: 4
  Input holes: 0

  Mesh vertices: 87
  Mesh triangles: 151
  Mesh edges: 237
  Mesh exterior boundary edges: 21
  Mesh interior boundary edges: 0
  Mesh subsegments (constrained edges): 21

Constructing Delaunay triangulation by divide-and-conquer method.
Recovering segments in Delaunay triangulation.
Removing unwanted triangles.
Adding Steiner points to enforce quality.

Writing vertices.
Writing triangles.
Writing segments.

Statistics:

  Input vertices: 4
  Input segments: 4
  Input holes: 0

  Mesh vertices: 84
  Mesh triangles: 134
  Mesh edges: 217
  Mesh exterior boundary edges: 32
  Mesh interior boundary edges: 0
  Mesh subsegments (constrained edges): 32

Constructing Delaunay triangulation by divide-and-conquer method.
Recovering segments in Delaunay triangulation.
Removing unwanted triangles.
Adding Steiner points to enforce quality.

Writing vertices.
Writing triangles.
Writing segments.

Statistics:

  Input vertices: 4
  Input segments: 4
  Input holes: 0

  Mesh vertices: 420
  Mesh triangles: 790
  Mesh edges: 1209
  Mesh exterior boundary edges: 48
  Mesh interior boundary edges: 0
  Mesh subsegments (constrained edges): 48

   Testing Triangulate tests passed 
