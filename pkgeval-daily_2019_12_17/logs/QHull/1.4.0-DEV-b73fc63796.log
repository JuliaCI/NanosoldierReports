Julia Version 1.4.0-DEV.622
Commit b73fc63796 (2019-12-17 04:07 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed RecipesBase ────────── v0.7.0
 Installed QHull ──────────────── v0.1.2
 Installed Compat ─────────────── v2.2.0
 Installed FixedPointNumbers ──── v0.7.0
 Installed PyCall ─────────────── v1.91.2
 Installed SpecialFunctions ───── v0.9.0
 Installed IterTools ──────────── v1.3.0
 Installed ForwardDiff ────────── v0.10.7
 Installed DiffResults ────────── v0.0.4
 Installed NaNMath ────────────── v0.3.3
 Installed Calculus ───────────── v0.5.1
 Installed OrderedCollections ─── v1.1.0
 Installed Conda ──────────────── v1.3.0
 Installed JSON ───────────────── v0.21.0
 Installed ColorTypes ─────────── v0.8.0
 Installed MacroTools ─────────── v0.5.3
 Installed Polyhedra ──────────── v0.5.6
 Installed JuMP ───────────────── v0.20.1
 Installed MathOptInterface ───── v0.9.7
 Installed ParameterJuMP ──────── v0.1.2
 Installed Parsers ────────────── v0.3.10
 Installed VersionParsing ─────── v1.2.0
 Installed OpenSpecFun_jll ────── v0.5.3+1
 Installed DataStructures ─────── v0.17.6
 Installed BenchmarkTools ─────── v0.4.3
 Installed StaticArrays ───────── v0.12.1
 Installed DiffRules ──────────── v0.1.0
 Installed GeometryTypes ──────── v0.7.6
 Installed CommonSubexpressions ─ v0.2.0
  Updating `~/.julia/environments/v1.4/Project.toml`
  [a8468747] + QHull v0.1.2
  Updating `~/.julia/environments/v1.4/Manifest.toml`
  [6e4b80f9] + BenchmarkTools v0.4.3
  [49dc2e85] + Calculus v0.5.1
  [3da002f7] + ColorTypes v0.8.0
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v2.2.0
  [8f4d0f93] + Conda v1.3.0
  [864edb3b] + DataStructures v0.17.6
  [163ba53b] + DiffResults v0.0.4
  [b552c78f] + DiffRules v0.1.0
  [53c48c17] + FixedPointNumbers v0.7.0
  [f6369f11] + ForwardDiff v0.10.7
  [4d00f742] + GeometryTypes v0.7.6
  [c8e1da08] + IterTools v1.3.0
  [682c06a0] + JSON v0.21.0
  [4076af6c] + JuMP v0.20.1
  [1914dd2f] + MacroTools v0.5.3
  [b8f27783] + MathOptInterface v0.9.7
  [77ba4419] + NaNMath v0.3.3
  [efe28fd5] + OpenSpecFun_jll v0.5.3+1
  [bac558e1] + OrderedCollections v1.1.0
  [774612a8] + ParameterJuMP v0.1.2
  [69de0a69] + Parsers v0.3.10
  [67491407] + Polyhedra v0.5.6
  [438e738f] + PyCall v1.91.2
  [a8468747] + QHull v0.1.2
  [3cdcf5f2] + RecipesBase v0.7.0
  [276daf66] + SpecialFunctions v0.9.0
  [90137ffa] + StaticArrays v0.12.1
  [81def892] + VersionParsing v1.2.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building Conda ─→ `~/.julia/packages/Conda/kLXeC/deps/build.log`
Path `/home/pkgeval/.julia/packages/Conda/kLXeC` exists and looks like the correct package. Using existing path.
  Updating `/tmp/jl_9Lw8D9/Project.toml`
  [8f4d0f93] + Conda v1.3.0 [`~/.julia/packages/Conda/kLXeC`]
  Updating `/tmp/jl_9Lw8D9/Manifest.toml`
  [8f4d0f93] ~ Conda v1.3.0 ⇒ v1.3.0 [`~/.julia/packages/Conda/kLXeC`]
  Building PyCall → `~/.julia/packages/PyCall/ttONZ/deps/build.log`
Path `/home/pkgeval/.julia/packages/PyCall/ttONZ` exists and looks like the correct package. Using existing path.
  Updating `/tmp/jl_kLr6hA/Project.toml`
  [438e738f] + PyCall v1.91.2 [`~/.julia/packages/PyCall/ttONZ`]
  Updating `/tmp/jl_kLr6hA/Manifest.toml`
  [438e738f] ~ PyCall v1.91.2 ⇒ v1.91.2 [`~/.julia/packages/PyCall/ttONZ`]
   Testing QHull
Path `/home/pkgeval/.julia/packages/QHull/Nu3bw` exists and looks like the correct package. Using existing path.
 Installed Combinatorics ── v1.0.0
 Installed BinaryProvider ─ v0.5.8
 Installed Polynomials ──── v0.6.0
 Installed GLPK ─────────── v0.12.0
  Updating `/tmp/jl_dWzGsF/Project.toml`
  [861a8166] + Combinatorics v1.0.0
  [60bf3e95] + GLPK v0.12.0
  [a8468747] + QHull v0.1.2 [`~/.julia/packages/QHull/Nu3bw`]
  Updating `/tmp/jl_dWzGsF/Manifest.toml`
  [b99e7846] + BinaryProvider v0.5.8
  [861a8166] + Combinatorics v1.0.0
  [60bf3e95] + GLPK v0.12.0
  [f27b6e38] + Polynomials v0.6.0
  [a8468747] ~ QHull v0.1.2 ⇒ v0.1.2 [`~/.julia/packages/QHull/Nu3bw`]
  Building GLPK → `~/.julia/packages/GLPK/J1b5G/deps/build.log`
Path `/home/pkgeval/.julia/packages/GLPK/J1b5G` exists and looks like the correct package. Using existing path.
  Updating `/tmp/jl_yPDdkh/Project.toml`
  [60bf3e95] + GLPK v0.12.0 [`~/.julia/packages/GLPK/J1b5G`]
  Updating `/tmp/jl_yPDdkh/Manifest.toml`
  [60bf3e95] ~ GLPK v0.12.0 ⇒ v0.12.0 [`~/.julia/packages/GLPK/J1b5G`]
Running sandbox
Status `/tmp/jl_dWzGsF/Project.toml`
  [861a8166] Combinatorics v1.0.0
  [60bf3e95] GLPK v0.12.0
  [4d00f742] GeometryTypes v0.7.6
  [4076af6c] JuMP v0.20.1
  [67491407] Polyhedra v0.5.6
  [438e738f] PyCall v1.91.2
  [a8468747] QHull v0.1.2 [`~/.julia/packages/QHull/Nu3bw`]
  [3cdcf5f2] RecipesBase v0.7.0
  [90137ffa] StaticArrays v0.12.1
  [8dfed614] Test 
ERROR: LoadError: InitError: PyError (PyImport_ImportModule

The Python package scipy.spatial could not be found by pyimport. Usually this means
that you did not install scipy.spatial in the Python version being used by PyCall.

PyCall is currently configured to use the Python version at:

/usr/bin/python3

and you should use whatever mechanism you usually use (apt-get, pip, conda,
etcetera) to install the Python package containing the scipy.spatial module.

One alternative is to re-configure PyCall to use a different Python
version on your system: set ENV["PYTHON"] to the path/name of the python
executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.

Another alternative is to configure PyCall to use a Julia-specific Python
distribution via the Conda.jl package (which installs a private Anaconda
Python distribution), which has the advantage that packages can be installed
and kept up-to-date via Julia.  As explained in the PyCall documentation,
set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
To install the scipy.spatial module, you can use `pyimport_conda("scipy.spatial", PKG)`,
where PKG is the Anaconda package the contains the module scipy.spatial,
or alternatively you can use the Conda package directly (via
`using Conda` followed by `Conda.add` etcetera).

) <class 'ModuleNotFoundError'>
ModuleNotFoundError("No module named 'scipy'",)

Stacktrace:
 [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/ttONZ/src/PyCall.jl:544
 [2] pyimport_conda(::String, ::String, ::String) at /home/pkgeval/.julia/packages/PyCall/ttONZ/src/PyCall.jl:702
 [3] pyimport_conda at /home/pkgeval/.julia/packages/PyCall/ttONZ/src/PyCall.jl:701 [inlined]
 [4] __init__() at /home/pkgeval/.julia/packages/QHull/Nu3bw/src/QHull.jl:16
 [5] _include_from_serialized(::String, ::Array{Any,1}) at ./loading.jl:690
 [6] _require_from_serialized(::String) at ./loading.jl:741
 [7] _require(::Base.PkgId) at ./loading.jl:1032
 [8] require(::Base.PkgId) at ./loading.jl:920
 [9] require(::Module, ::Symbol) at ./loading.jl:915
 [10] include(::String) at ./client.jl:439
 [11] top-level scope at none:6
during initialization of module QHull
in expression starting at /home/pkgeval/.julia/packages/QHull/Nu3bw/test/runtests.jl:2
err = ProcessFailedException(Base.Process[Process(`/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so -g1 --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --inline=yes --startup-file=no --track-allocation=none --eval 'append!(empty!(Base.DEPOT_PATH), ["/home/pkgeval/.julia", "/opt/julia/local/share/julia", "/opt/julia/share/julia", "/usr/local/share/julia"])
append!(empty!(Base.DL_LOAD_PATH), String[])

cd("/home/pkgeval/.julia/packages/QHull/Nu3bw/test")
append!(empty!(ARGS), String[])
include("/home/pkgeval/.julia/packages/QHull/Nu3bw/test/runtests.jl")
'`, ProcessExited(1))])
ERROR: Package QHull errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/Types.jl:54
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/Operations.jl:1475
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:313
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:300
 [5] #test#68 at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:294 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:294 [inlined]
 [7] #test#67 at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:293 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:293 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:292
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:292
 [11] top-level scope at none:12
