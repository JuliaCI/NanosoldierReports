Julia Version 1.4.0-DEV.564
Commit 1d8d9c1793 (2019-12-06 23:22 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)

   Cloning default registries into `~/.julia`
   Cloning registry from "https://github.com/JuliaRegistries/General.git"
[?25l    Fetching: [>                                        ]  0.0 %    Fetching: [=============>                           ]  30.6 %    Fetching: [================================>        ]  78.7 %[2K[?25h     Added registry `General` to `~/.julia/registries/General`
 Resolving package versions...
 Installed TransformUtils â”€ v0.2.2
  Updating `~/.julia/environments/v1.4/Project.toml`
  [9b8138ad] + TransformUtils v0.2.2
  Updating `~/.julia/environments/v1.4/Manifest.toml`
  [9b8138ad] + TransformUtils v0.2.2
  [2a0f44e3] + Base64 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [de0858da] + Printf 
  [9abbd945] + Profile 
  [9a3f8284] + Random 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [8dfed614] + Test 
  [4ec0a83e] + Unicode 
   Testing TransformUtils
Status `/tmp/jl_zTkFR6/Manifest.toml`
  [9b8138ad] TransformUtils v0.2.2
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [9abbd945] Profile  [`@stdlib/Profile`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [8dfed614] Test  [`@stdlib/Test`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
Test Summary:                               |
Constructors SO3, Quaternion, AngleAxis...  | No tests
Test Summary:                           | Pass  Total
Ensure basic quaternion operations hold |   10     10
Test Summary:                                       | Pass  Total
Comparison functions for SO3, Quaternion, AngleAxis |    5      5
Test Summary:                                        | Pass  Total
Trivial case quaterion -> SO3 -> Euler -> quaternion |    2      2
â”Œ Warning: Need better coverage on convert function tests
â”” @ Main ~/.julia/packages/TransformUtils/x61q0/test/runtests.jl:67
dAA = AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = so3([0.0 -0.013509621341996356 0.0948372659050995; 0.013509621341996356 0.0 0.003563014406860396; -0.0948372659050995 -0.003563014406860396 0.0])
dAA = so3([0.0 -0.0009136681344764272 0.058104036702427725; 0.0009136681344764272 0.0 0.06136966198981521; -0.058104036702427725 -0.06136966198981521 0.0])
dAA = so3([0.0 0.15910246590863342 0.1379344918256313; -0.15910246590863342 0.0 -0.08992161473886046; -0.1379344918256313 0.08992161473886046 0.0])
dAA = Quaternion(0.9983894090589812, [-0.04697230242830863, -0.029204146716047468, 0.012621747027634125])
dAA = SO3([0.9975370377115685 -0.07008488601752506 0.002822613246466077; 0.07007910011799624 0.9975392288564858 0.0020991948598213517; -0.0029627892737190266 -0.0018962184257520639 0.9999938130985618])
Test Summary:                        | Pass  Total
Compare SO3 and quaternion rotations |   24     24
Test Summary:       | Pass  Total
Basic SE3 mechanics |    4      4
Compare operations on two different SE3 transforms
xi = SE3(SO3([0.9894863465169055 -0.013369020219525346 0.14400708091964207; -0.008834595769809162 0.9882716372787744 0.15245038821831336; -0.14435622596275674 -0.15211982201113802 0.977763181847777]), [-0.03563014406860396, 0.948372659050995, 0.13509621341996356])
xj = SE3(SO3([0.9874264426628613 -0.052218766783082876 -0.14920529724450543; 0.08586603479834047 0.9696570899726606 0.22889331998501347; 0.13272544744011003 -0.2388269839473873 0.9619488694002489]), [0.8992161473886044, 1.379344918256313, -1.5910246590863342])
Dx = SE3(SO3([0.9571266468151872 -0.025760123128336206 -0.28852209276367247; 0.051467871278600225 0.9953130319447485 0.08187201394250448; 0.2850607657717311 -0.0932115041041886 0.9539664434980245]), [1.1703864705013411, 0.6759968811493006, -1.487411062787139])
Test Summary:         | Pass  Total
SE3 âŠ• and âŠ– mechanics |    6      6
TransformUtils.convert(Euler, q) = Euler(0.7853981633974484, 0.0, 1.5707963267948963, Quaternion(1.0, [0.0, 0.0, 0.0]))
Test Summary:              | Pass  Total
Previous discovered issues |    3      3
Test Summary:      | Pass  Total
test SO3 logmap... |  301    301
Test Summary:                              | Pass  Total
test in-place and efficient inverse SE3... |    1      1
   Testing TransformUtils tests passed 
