Julia Version 1.4.0-DEV.564
Commit 1d8d9c1793 (2019-12-06 23:22 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)

   Cloning default registries into `~/.julia`
   Cloning registry from "https://github.com/JuliaRegistries/General.git"
[?25l    Fetching: [>                                        ]  0.0 %    Fetching: [==============>                          ]  33.1 %    Fetching: [================================>        ]  78.4 %[2K[?25h     Added registry `General` to `~/.julia/registries/General`
 Resolving package versions...
 Installed VersionParsing â”€â”€â”€â”€â”€ v1.1.3
 Installed Conda â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.3.0
 Installed Compat â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v2.2.0
 Installed Gym â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.3
 Installed OrderedCollections â”€ v1.1.0
 Installed PyCall â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.91.2
 Installed MacroTools â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.3
 Installed JSON â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.21.0
 Installed Parsers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.10
 Installed DataStructures â”€â”€â”€â”€â”€ v0.17.6
  Updating `~/.julia/environments/v1.4/Project.toml`
  [b0807396] + Gym v1.1.3
  Updating `~/.julia/environments/v1.4/Manifest.toml`
  [34da2185] + Compat v2.2.0
  [8f4d0f93] + Conda v1.3.0
  [864edb3b] + DataStructures v0.17.6
  [b0807396] + Gym v1.1.3
  [682c06a0] + JSON v0.21.0
  [1914dd2f] + MacroTools v0.5.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.10
  [438e738f] + PyCall v1.91.2
  [81def892] + VersionParsing v1.1.3
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building Conda â”€â†’ `~/.julia/packages/Conda/kLXeC/deps/build.log`
  Building PyCall â†’ `~/.julia/packages/PyCall/ttONZ/deps/build.log`
  Building Gym â”€â”€â”€â†’ `~/.julia/packages/Gym/QZ2GY/deps/build.log`
â”Œ Error: Error building `Gym`: 
â”‚ Cloning into 'gym'...
â”‚ â”Œ Warning: Parsing command "pip install --user -e .[$env]". Special characters "#{}()[]<>|&*?~;" should now be quoted in commands
â”‚ â”‚   caller = shell_parse(::String, ::Bool; special::String) at shell.jl:107
â”‚ â”” @ Base ./shell.jl:107
â”‚ [ Info: Downloading OpenAi gym
â”‚ [ Info: Installing OpenAi gym
â”‚ ERROR: LoadError: IOError: could not spawn `pip install --user -e .`: no such file or directory (ENOENT)
â”‚ Stacktrace:
â”‚  [1] _spawn_primitive(::String, ::Cmd, ::Array{Any,1}) at ./process.jl:99
â”‚  [2] #546 at ./process.jl:112 [inlined]
â”‚  [3] setup_stdios(::Base.var"#546#547"{Cmd}, ::Array{Any,1}) at ./process.jl:196
â”‚  [4] _spawn at ./process.jl:111 [inlined]
â”‚  [5] run(::Cmd; wait::Bool) at ./process.jl:439
â”‚  [6] run at ./process.jl:438 [inlined]
â”‚  [7] install_envs() at /home/pkgeval/.julia/packages/Gym/QZ2GY/deps/build.jl:10
â”‚  [8] top-level scope at /home/pkgeval/.julia/packages/Gym/QZ2GY/deps/build.jl:46
â”‚  [9] include(::String) at ./client.jl:439
â”‚  [10] top-level scope at none:5
â”‚ in expression starting at /home/pkgeval/.julia/packages/Gym/QZ2GY/deps/build.jl:31
â”‚ caused by [exception 1]
â”‚ PyError (PyImport_ImportModule
â”‚ 
â”‚ The Python package gym could not be found by pyimport. Usually this means
â”‚ that you did not install gym in the Python version being used by PyCall.
â”‚ 
â”‚ PyCall is currently configured to use the Python version at:
â”‚ 
â”‚ /usr/bin/python3
â”‚ 
â”‚ and you should use whatever mechanism you usually use (apt-get, pip, conda,
â”‚ etcetera) to install the Python package containing the gym module.
â”‚ 
â”‚ One alternative is to re-configure PyCall to use a different Python
â”‚ version on your system: set ENV["PYTHON"] to the path/name of the python
â”‚ executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
â”‚ 
â”‚ Another alternative is to configure PyCall to use a Julia-specific Python
â”‚ distribution via the Conda.jl package (which installs a private Anaconda
â”‚ Python distribution), which has the advantage that packages can be installed
â”‚ and kept up-to-date via Julia.  As explained in the PyCall documentation,
â”‚ set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
â”‚ To install the gym module, you can use `pyimport_conda("gym", PKG)`,
â”‚ where PKG is the Anaconda package the contains the module gym,
â”‚ or alternatively you can use the Conda package directly (via
â”‚ `using Conda` followed by `Conda.add` etcetera).
â”‚ 
â”‚ ) <class 'ModuleNotFoundError'>
â”‚ ModuleNotFoundError("No module named 'gym'",)
â”‚ 
â”‚ Stacktrace:
â”‚  [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/ttONZ/src/PyCall.jl:544
â”‚  [2] top-level scope at /home/pkgeval/.julia/packages/Gym/QZ2GY/deps/build.jl:33
â”‚  [3] include(::String) at ./client.jl:439
â”‚  [4] top-level scope at none:5
â”” @ Pkg.Operations /workspace/srcdir/julia/usr/share/julia/stdlib/v1.4/Pkg/src/backwards_compatible_isolation.jl:602
   Testing Gym
 Resolving package versions...
Status `/tmp/jl_QDWAwl/Manifest.toml`
  [34da2185] Compat v2.2.0
  [8f4d0f93] Conda v1.3.0
  [864edb3b] DataStructures v0.17.6
  [b0807396] Gym v1.1.3
  [682c06a0] JSON v0.21.0
  [1914dd2f] MacroTools v0.5.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.10
  [438e738f] PyCall v1.91.2
  [81def892] VersionParsing v1.1.3
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
ERROR: LoadError: InitError: PyError (PyImport_ImportModule

The Python package gym could not be found by pyimport. Usually this means
that you did not install gym in the Python version being used by PyCall.

PyCall is currently configured to use the Python version at:

/usr/bin/python3

and you should use whatever mechanism you usually use (apt-get, pip, conda,
etcetera) to install the Python package containing the gym module.

One alternative is to re-configure PyCall to use a different Python
version on your system: set ENV["PYTHON"] to the path/name of the python
executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.

Another alternative is to configure PyCall to use a Julia-specific Python
distribution via the Conda.jl package (which installs a private Anaconda
Python distribution), which has the advantage that packages can be installed
and kept up-to-date via Julia.  As explained in the PyCall documentation,
set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
To install the gym module, you can use `pyimport_conda("gym", PKG)`,
where PKG is the Anaconda package the contains the module gym,
or alternatively you can use the Conda package directly (via
`using Conda` followed by `Conda.add` etcetera).

) <class 'ModuleNotFoundError'>
ModuleNotFoundError("No module named 'gym'",)

Stacktrace:
 [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/ttONZ/src/PyCall.jl:544
 [2] __init__() at /home/pkgeval/.julia/packages/Gym/QZ2GY/src/Gym.jl:10
 [3] _include_from_serialized(::String, ::Array{Any,1}) at ./loading.jl:690
 [4] _require_from_serialized(::String) at ./loading.jl:741
 [5] _require(::Base.PkgId) at ./loading.jl:1032
 [6] require(::Base.PkgId) at ./loading.jl:920
 [7] require(::Module, ::Symbol) at ./loading.jl:915
 [8] include(::String) at ./client.jl:439
 [9] top-level scope at none:6
during initialization of module Gym
in expression starting at /home/pkgeval/.julia/packages/Gym/QZ2GY/test/runtests.jl:1
ERROR: Package Gym errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.4/Pkg/src/Types.jl:54
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd) at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.4/Pkg/src/Operations.jl:1391
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:287
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:274
 [5] #test#56 at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:268 [inlined]
 [6] test at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:268 [inlined]
 [7] #test#55 at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:267 [inlined]
 [8] test at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:267 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:266
 [10] test(::String) at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:266
 [11] top-level scope at none:12
