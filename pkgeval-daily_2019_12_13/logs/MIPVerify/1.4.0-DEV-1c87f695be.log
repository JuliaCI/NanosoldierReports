Julia Version 1.4.0-DEV.596
Commit 1c87f695be (2019-12-12 22:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed Nullables ─────────────────── v1.0.0
 Installed OpenSpecFun_jll ───────────── v0.5.3+1
 Installed FillArrays ────────────────── v0.8.2
 Installed Compat ────────────────────── v2.2.0
 Installed ConditionalJuMP ───────────── v0.1.0
 Installed TableTraits ───────────────── v1.0.0
 Installed DiffRules ─────────────────── v0.1.0
 Installed MIPVerify ─────────────────── v0.2.0
 Installed ProgressMeter ─────────────── v1.2.0
 Installed MathProgBase ──────────────── v0.7.7
 Installed WeakRefStrings ────────────── v0.6.1
 Installed Calculus ──────────────────── v0.5.1
 Installed SpecialFunctions ──────────── v0.9.0
 Installed ReverseDiffSparse ─────────── v0.8.6
 Installed CMake ─────────────────────── v1.1.2
 Installed CodecZlib ─────────────────── v0.6.0
 Installed DataValueInterfaces ───────── v1.0.0
 Installed DiffResults ───────────────── v0.0.4
 Installed Mocking ───────────────────── v0.7.0
 Installed DataStructures ────────────── v0.17.6
 Installed AutoHashEquals ────────────── v0.2.0
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed CategoricalArrays ─────────── v0.7.4
 Installed DocStringExtensions ───────── v0.8.1
 Installed TimeZones ─────────────────── v0.10.3
 Installed BinaryProvider ────────────── v0.5.8
 Installed SetRounding ───────────────── v0.2.0
 Installed Tables ────────────────────── v0.2.11
 Installed Missings ──────────────────── v0.4.3
 Installed CommonSubexpressions ──────── v0.2.0
 Installed StaticArrays ──────────────── v0.12.1
 Installed JSON ──────────────────────── v0.21.0
 Installed JuMP ──────────────────────── v0.18.6
 Installed EzXML ─────────────────────── v0.9.5
 Installed FilePathsBase ─────────────── v0.7.0
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed CMakeWrapper ──────────────── v0.2.3
 Installed BufferedStreams ───────────── v1.0.0
 Installed URIParser ─────────────────── v0.4.0
 Installed LazyArrays ────────────────── v0.14.10
 Installed ArrayLayouts ──────────────── v0.1.5
 Installed RecipesBase ───────────────── v0.7.0
 Installed NaNMath ───────────────────── v0.3.3
 Installed InvertedIndices ───────────── v1.0.0
 Installed Parsers ───────────────────── v0.3.10
 Installed Blosc ─────────────────────── v0.5.1
 Installed ErrorfreeArithmetic ───────── v0.4.0
 Installed HDF5 ──────────────────────── v0.12.5
 Installed CSV ───────────────────────── v0.5.18
 Installed Memento ───────────────────── v0.12.1
 Installed TranscodingStreams ────────── v0.9.5
 Installed DataAPI ───────────────────── v1.1.0
 Installed Reexport ──────────────────── v0.2.0
 Installed Syslogs ───────────────────── v0.3.0
 Installed PooledArrays ──────────────── v0.5.2
 Installed MacroTools ────────────────── v0.5.3
 Installed ForwardDiff ───────────────── v0.10.7
 Installed Parameters ────────────────── v0.12.0
 Installed DataFrames ────────────────── v0.20.0
 Installed FastRounding ──────────────── v0.2.0
 Installed OrderedCollections ────────── v1.1.0
 Installed MAT ───────────────────────── v0.7.0
 Installed IntervalArithmetic ────────── v0.16.2
 Installed BinDeps ───────────────────── v1.0.0
 Installed CRlibm ────────────────────── v0.8.0
  Updating `~/.julia/environments/v1.4/Project.toml`
  [e5e5f8be] + MIPVerify v0.2.0
  Updating `~/.julia/environments/v1.4/Manifest.toml`
  [4c555306] + ArrayLayouts v0.1.5
  [15f4f7f2] + AutoHashEquals v0.2.0
  [9e28174c] + BinDeps v1.0.0
  [b99e7846] + BinaryProvider v0.5.8
  [a74b3585] + Blosc v0.5.1
  [e1450e63] + BufferedStreams v1.0.0
  [631607c0] + CMake v1.1.2
  [d5fb7624] + CMakeWrapper v0.2.3
  [96374032] + CRlibm v0.8.0
  [336ed68f] + CSV v0.5.18
  [49dc2e85] + Calculus v0.5.1
  [324d7699] + CategoricalArrays v0.7.4
  [944b1d66] + CodecZlib v0.6.0
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v2.2.0
  [ae04f764] + ConditionalJuMP v0.1.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.6
  [e2d170a0] + DataValueInterfaces v1.0.0
  [163ba53b] + DiffResults v0.0.4
  [b552c78f] + DiffRules v0.1.0
  [ffbed154] + DocStringExtensions v0.8.1
  [90fa49ef] + ErrorfreeArithmetic v0.4.0
  [8f5d6c58] + EzXML v0.9.5
  [fa42c844] + FastRounding v0.2.0
  [48062228] + FilePathsBase v0.7.0
  [1a297f60] + FillArrays v0.8.2
  [f6369f11] + ForwardDiff v0.10.7
  [f67ccb44] + HDF5 v0.12.5
  [d1acc4aa] + IntervalArithmetic v0.16.2
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [4076af6c] + JuMP v0.18.6
  [5078a376] + LazyArrays v0.14.10
  [23992714] + MAT v0.7.0
  [e5e5f8be] + MIPVerify v0.2.0
  [1914dd2f] + MacroTools v0.5.3
  [fdba3010] + MathProgBase v0.7.7
  [f28f55f0] + Memento v0.12.1
  [e1d29d7a] + Missings v0.4.3
  [78c3b35d] + Mocking v0.7.0
  [77ba4419] + NaNMath v0.3.3
  [4d1e1d77] + Nullables v1.0.0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+1
  [bac558e1] + OrderedCollections v1.1.0
  [d96e819e] + Parameters v0.12.0
  [69de0a69] + Parsers v0.3.10
  [2dfb63ee] + PooledArrays v0.5.2
  [92933f4c] + ProgressMeter v1.2.0
  [3cdcf5f2] + RecipesBase v0.7.0
  [189a3867] + Reexport v0.2.0
  [89212889] + ReverseDiffSparse v0.8.6
  [3cc68bcd] + SetRounding v0.2.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.9.0
  [90137ffa] + StaticArrays v0.12.1
  [cea106d9] + Syslogs v0.3.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [f269a46b] + TimeZones v0.10.3
  [3bb67fe8] + TranscodingStreams v0.9.5
  [30578b45] + URIParser v0.4.0
  [ea10d353] + WeakRefStrings v0.6.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building CodecZlib → `~/.julia/packages/CodecZlib/5t9zO/deps/build.log`
  Building CMake ────→ `~/.julia/packages/CMake/nSK2r/deps/build.log`
  Building EzXML ────→ `~/.julia/packages/EzXML/QtGgF/deps/build.log`
  Building TimeZones → `~/.julia/packages/TimeZones/pjvlM/deps/build.log`
  Building Blosc ────→ `~/.julia/packages/Blosc/lzFr0/deps/build.log`
  Building HDF5 ─────→ `~/.julia/packages/HDF5/Zh9on/deps/build.log`
  Building CRlibm ───→ `~/.julia/packages/CRlibm/NFCH5/deps/build.log`
No changes
   Testing MIPVerify
 Resolving package versions...

gzip: stdin: not in gzip format
tar: Child returned status 1
tar: Error is not recoverable: exiting now
┌ Warning: failed to extract archive downloaded from https://github.com/JuliaCI/BenchmarkTools.jl.git
└ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/Operations.jl:481

gzip: stdin: not in gzip format
tar: Child returned status 1
tar: Error is not recoverable: exiting now
┌ Warning: failed to extract archive downloaded from https://github.com/JuliaOpt/Cbc.jl.git
└ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/Operations.jl:481

gzip: stdin: not in gzip format
tar: Child returned status 1
tar: Error is not recoverable: exiting now
┌ Warning: failed to extract archive downloaded from https://github.com/JuliaOpt/MathOptInterface.jl.git
└ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/Operations.jl:481
   Cloning [6e4b80f9-dd63-53aa-95a3-0cdb28fa8baf] BenchmarkTools from https://github.com/JuliaCI/BenchmarkTools.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h Installed BenchmarkTools ─── v0.4.3
   Cloning [9961bab8-2fa3-5c5a-9d89-47fab24efd76] Cbc from https://github.com/JuliaOpt/Cbc.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h Installed[?25l Cbc ────────────── v0.6.6
   Cloning [b8f27783-ece8-5eb3-8dc8-9495eed66fee] MathOptInterface from https://github.com/JuliaOpt/MathOptInterface.jl.git
    Fetching: [>                                        ]  0.0 %    Resolving Deltas: [========>                                ]  19.0 %[2K[?25h Installed MathOptInterface ─ v0.9.7
  Building Cbc → `~/.julia/packages/Cbc/vWzyC/deps/build.log`
Status `/tmp/jl_iiOHsk/Manifest.toml`
  [4c555306] ArrayLayouts v0.1.5
  [15f4f7f2] AutoHashEquals v0.2.0
  [6e4b80f9] BenchmarkTools v0.4.3
  [9e28174c] BinDeps v1.0.0
  [b99e7846] BinaryProvider v0.5.8
  [a74b3585] Blosc v0.5.1
  [e1450e63] BufferedStreams v1.0.0
  [631607c0] CMake v1.1.2
  [d5fb7624] CMakeWrapper v0.2.3
  [96374032] CRlibm v0.8.0
  [336ed68f] CSV v0.5.18
  [49dc2e85] Calculus v0.5.1
  [324d7699] CategoricalArrays v0.7.4
  [9961bab8] Cbc v0.6.6
  [944b1d66] CodecZlib v0.6.0
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v2.2.0
  [ae04f764] ConditionalJuMP v0.1.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.0
  [864edb3b] DataStructures v0.17.6
  [e2d170a0] DataValueInterfaces v1.0.0
  [163ba53b] DiffResults v0.0.4
  [b552c78f] DiffRules v0.1.0
  [ffbed154] DocStringExtensions v0.8.1
  [90fa49ef] ErrorfreeArithmetic v0.4.0
  [8f5d6c58] EzXML v0.9.5
  [fa42c844] FastRounding v0.2.0
  [48062228] FilePathsBase v0.7.0
  [1a297f60] FillArrays v0.8.2
  [f6369f11] ForwardDiff v0.10.7
  [f67ccb44] HDF5 v0.12.5
  [d1acc4aa] IntervalArithmetic v0.16.2
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [4076af6c] JuMP v0.18.6
  [5078a376] LazyArrays v0.14.10
  [23992714] MAT v0.7.0
  [e5e5f8be] MIPVerify v0.2.0
  [1914dd2f] MacroTools v0.5.3
  [b8f27783] MathOptInterface v0.9.7
  [fdba3010] MathProgBase v0.7.7
  [f28f55f0] Memento v0.12.1
  [e1d29d7a] Missings v0.4.3
  [78c3b35d] Mocking v0.7.0
  [77ba4419] NaNMath v0.3.3
  [4d1e1d77] Nullables v1.0.0
  [efe28fd5] OpenSpecFun_jll v0.5.3+1
  [bac558e1] OrderedCollections v1.1.0
  [d96e819e] Parameters v0.12.0
  [69de0a69] Parsers v0.3.10
  [2dfb63ee] PooledArrays v0.5.2
  [92933f4c] ProgressMeter v1.2.0
  [3cdcf5f2] RecipesBase v0.7.0
  [189a3867] Reexport v0.2.0
  [89212889] ReverseDiffSparse v0.8.6
  [3cc68bcd] SetRounding v0.2.0
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.9.0
  [90137ffa] StaticArrays v0.12.1
  [cea106d9] Syslogs v0.3.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [f269a46b] TimeZones v0.10.3
  [3bb67fe8] TranscodingStreams v0.9.5
  [30578b45] URIParser v0.4.0
  [ea10d353] WeakRefStrings v0.6.1
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [9fa8497b] Future  [`@stdlib/Future`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 3, target labels are [1]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(32 -> 16) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (16,). (5 zeroed, 5 as-is, 6 rectified). ... 
  Calculating upper bounds:  33%|███████▋               |  ETA: 0:00:02[K  Calculating upper bounds:  50%|███████████▌           |  ETA: 0:00:02[K  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:01[K
  Calculating lower bounds:  17%|███▉                   |  ETA: 0:00:01[K  Calculating lower bounds:  50%|███████████▌           |  ETA: 0:00:00[K  Calculating lower bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]:   Behavior of ReLUs - split: 6, zero_output: 0, linear_in_input: 0, constant_output: 0
  Imposing relu constraint:  17%|███▉                   |  ETA: 0:00:02[K  Imposing relu constraint: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]: Applying Linear(16 -> 8) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (8,). (3 zeroed, 3 as-is, 2 rectified). ... 
[info | MIPVerify]:   Behavior of ReLUs - split: 2, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(8 -> 4) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 3, target labels are [2]
[notice | MIPVerify]: Loading model from cache.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 3, target labels are [3]
[notice | MIPVerify]: Loading model from cache.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 3, target labels are [1]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(32 -> 16) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (16,). (5 zeroed, 5 as-is, 6 rectified). ... 
[info | MIPVerify]:   Behavior of ReLUs - split: 3, zero_output: 2, linear_in_input: 1, constant_output: 0
[info | MIPVerify]: Applying Linear(16 -> 8) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (8,). (3 zeroed, 3 as-is, 2 rectified). ... 
[info | MIPVerify]:   Behavior of ReLUs - split: 1, zero_output: 0, linear_in_input: 1, constant_output: 0
[info | MIPVerify]: Applying Linear(8 -> 4) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
┌ Warning: Not solved to optimality, status: Infeasible
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:212
┌ Warning: Infeasibility ray (Farkas proof) not available
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:223
Infeasible
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 3, target labels are [1]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(32 -> 16) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (16,). (5 zeroed, 5 as-is, 6 rectified). ... 
[info | MIPVerify]:   Behavior of ReLUs - split: 4, zero_output: 2, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(16 -> 8) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (8,). (3 zeroed, 3 as-is, 2 rectified). ... 
[info | MIPVerify]:   Behavior of ReLUs - split: 1, zero_output: 0, linear_in_input: 1, constant_output: 0
[info | MIPVerify]: Applying Linear(8 -> 4) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Conv2d(1, 1, kernel_size=(5, 5), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Applying Conv2d(1, 2, kernel_size=(2, 2), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Specifying max pooling with a 2x2 filter and a stride of (2, 2) ... 
  Calculating upper bounds:  50%|███████████▌           |  ETA: 0:00:00[K  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:00[K
  Calculating lower bounds:  50%|███████████▌           |  ETA: 0:00:00[K  Calculating lower bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Applying ReLU() ...
  Calculating upper bounds:  12%|██▉                    |  ETA: 0:00:01[K  Calculating upper bounds:  34%|███████▉               |  ETA: 0:00:00[K  Calculating upper bounds:  56%|█████████████          |  ETA: 0:00:00[K  Calculating upper bounds:  78%|██████████████████     |  ETA: 0:00:00[K  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:00[K
  Calculating lower bounds:   3%|▊                      |  ETA: 0:00:05[K  Calculating lower bounds:  59%|█████████████▋         |  ETA: 0:00:00[K  Calculating lower bounds:  94%|█████████████████████▌ |  ETA: 0:00:00[K  Calculating lower bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]:   Behavior of ReLUs - split: 7, zero_output: 0, linear_in_input: 25, constant_output: 0
  Imposing relu constraint:   3%|▊                      |  ETA: 0:00:06[K  Imposing relu constraint: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(32 -> 5) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 4, zero_output: 1, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(5 -> 3) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
┌ Warning: Not solved to optimality, status: Infeasible
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:212
┌ Warning: Infeasibility ray (Farkas proof) not available
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:223
Infeasible
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [3]
[notice | MIPVerify]: Loading model from cache.
┌ Warning: Not solved to optimality, status: Infeasible
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:212
┌ Warning: Infeasibility ray (Farkas proof) not available
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:223
Infeasible
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [1]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Conv2d(1, 2, kernel_size=(2, 2), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Specifying max pooling with a 2x2 filter and a stride of (2, 2) ... 
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
  Calculating upper bounds:  53%|████████████▎          |  ETA: 0:00:00[K[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]:   Behavior of ReLUs - split: 9, zero_output: 0, linear_in_input: 23, constant_output: 0
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(32 -> 5) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 5, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(5 -> 3) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2]
[notice | MIPVerify]: Loading model from cache.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [1]
[notice | MIPVerify]: Loading model from cache.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2]
[notice | MIPVerify]: Loading model from cache.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [3]
[notice | MIPVerify]: Loading model from cache.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2]
[notice | MIPVerify]: Loading model from cache.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2, 3]
[notice | MIPVerify]: Loading model from cache.
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Conv2d(1, 2, kernel_size=(2, 2), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Specifying max pooling with a 2x2 filter and a stride of (2, 2) ... 
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
  Calculating upper bounds:  75%|█████████████████▎     |  ETA: 0:00:00[K  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
  Calculating upper bounds:  47%|██████████▊            |  ETA: 0:00:00[K[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
  Calculating upper bounds:  88%|████████████████████▏  |  ETA: 0:00:00[K[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]:   Behavior of ReLUs - split: 8, zero_output: 0, linear_in_input: 24, constant_output: 0
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(32 -> 5) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 5, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(5 -> 3) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
┌ Warning: Not solved to optimality, status: Infeasible
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:212
┌ Warning: Infeasibility ray (Farkas proof) not available
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:223
Infeasible
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Conv2d(1, 2, kernel_size=(2, 2), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Specifying max pooling with a 2x2 filter and a stride of (2, 2) ... 
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Applying ReLU() ...
  Calculating upper bounds:  47%|██████████▊            |  ETA: 0:00:00[K[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
  Calculating upper bounds:  91%|████████████████████▉  |  ETA: 0:00:00[K  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]:   Behavior of ReLUs - split: 8, zero_output: 0, linear_in_input: 24, constant_output: 0
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(32 -> 5) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 5, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(5 -> 3) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
Optimal
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]:   Behavior of ReLUs - split: 1, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
┌ Warning: Not solved to optimality, status: Infeasible
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:212
┌ Warning: Infeasibility ray (Farkas proof) not available
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:223
┌ Warning: Not solved to optimality, status: Infeasible
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:212
┌ Warning: Infeasibility ray (Farkas proof) not available
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:223
[info | MIPVerify]: Applying Linear(2 -> 2) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 2, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(2 -> 2) ... 
[info | MIPVerify]: Applying Linear(2 -> 2) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 2, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(2 -> 2) ... 
[info | MIPVerify]: Applying Linear(2 -> 2) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 2, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(2 -> 2) ... 
[info | MIPVerify]: Applying Conv2d(2, 1, kernel_size=(3, 3), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Applying Conv2d(2, 1, kernel_size=(3, 3), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Applying Linear(2 -> 2) ... 
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
Computing fraction correct... 48%|██████████▋           |  ETA: 0:00:01[KComputing fraction correct...100%|██████████████████████| Time: 0:00:01[K
Computing fraction correct...  0%|                      |  ETA: 0:06:11[KComputing fraction correct...  1%|▎                     |  ETA: 0:03:49[KComputing fraction correct...  1%|▍                     |  ETA: 0:03:28[KComputing fraction correct...  2%|▌                     |  ETA: 0:03:15[KComputing fraction correct...  3%|▋                     |  ETA: 0:03:09[KComputing fraction correct...  3%|▊                     |  ETA: 0:03:05[KComputing fraction correct...  4%|▉                     |  ETA: 0:03:01[KComputing fraction correct...  4%|█                     |  ETA: 0:02:57[KComputing fraction correct...  5%|█▏                    |  ETA: 0:02:55[KComputing fraction correct...  6%|█▎                    |  ETA: 0:02:50[KComputing fraction correct...  6%|█▍                    |  ETA: 0:02:47[KComputing fraction correct...  7%|█▌                    |  ETA: 0:02:46[KComputing fraction correct...  7%|█▋                    |  ETA: 0:02:44[KComputing fraction correct...  8%|█▊                    |  ETA: 0:02:42[KComputing fraction correct...  9%|█▉                    |  ETA: 0:02:41[KComputing fraction correct...  9%|██                    |  ETA: 0:02:40[KComputing fraction correct... 10%|██▏                   |  ETA: 0:02:40[KComputing fraction correct... 10%|██▎                   |  ETA: 0:02:39[KComputing fraction correct... 11%|██▍                   |  ETA: 0:02:38[KComputing fraction correct... 11%|██▌                   |  ETA: 0:02:35[KComputing fraction correct... 12%|██▋                   |  ETA: 0:02:33[KComputing fraction correct... 13%|██▉                   |  ETA: 0:02:31[KComputing fraction correct... 13%|███                   |  ETA: 0:02:29[KComputing fraction correct... 14%|███▏                  |  ETA: 0:02:27[KComputing fraction correct... 15%|███▎                  |  ETA: 0:02:26[KComputing fraction correct... 15%|███▍                  |  ETA: 0:02:25[KComputing fraction correct... 16%|███▌                  |  ETA: 0:02:24[KComputing fraction correct... 16%|███▋                  |  ETA: 0:02:23[KComputing fraction correct... 17%|███▊                  |  ETA: 0:02:22[KComputing fraction correct... 18%|███▉                  |  ETA: 0:02:21[KComputing fraction correct... 18%|████                  |  ETA: 0:02:19[KComputing fraction correct... 19%|████▏                 |  ETA: 0:02:18[KComputing fraction correct... 20%|████▎                 |  ETA: 0:02:18[KComputing fraction correct... 20%|████▍                 |  ETA: 0:02:17[KComputing fraction correct... 21%|████▌                 |  ETA: 0:02:17[KComputing fraction correct... 21%|████▋                 |  ETA: 0:02:15[KComputing fraction correct... 22%|████▊                 |  ETA: 0:02:15[KComputing fraction correct... 22%|████▉                 |  ETA: 0:02:14[KComputing fraction correct... 23%|█████                 |  ETA: 0:02:13[KComputing fraction correct... 23%|█████▏                |  ETA: 0:02:12[KComputing fraction correct... 24%|█████▎                |  ETA: 0:02:11[KComputing fraction correct... 25%|█████▍                |  ETA: 0:02:09[KComputing fraction correct... 25%|█████▌                |  ETA: 0:02:08[KComputing fraction correct... 26%|█████▊                |  ETA: 0:02:07[KComputing fraction correct... 27%|█████▉                |  ETA: 0:02:06[KComputing fraction correct... 27%|██████                |  ETA: 0:02:05[KComputing fraction correct... 28%|██████▏               |  ETA: 0:02:04[KComputing fraction correct... 28%|██████▎               |  ETA: 0:02:03[KComputing fraction correct... 29%|██████▍               |  ETA: 0:02:02[KComputing fraction correct... 29%|██████▌               |  ETA: 0:02:01[KComputing fraction correct... 30%|██████▋               |  ETA: 0:02:00[KComputing fraction correct... 31%|██████▊               |  ETA: 0:01:59[KComputing fraction correct... 31%|██████▉               |  ETA: 0:01:58[KComputing fraction correct... 32%|███████               |  ETA: 0:01:57[KComputing fraction correct... 32%|███████▏              |  ETA: 0:01:56[KComputing fraction correct... 33%|███████▎              |  ETA: 0:01:55[KComputing fraction correct... 34%|███████▍              |  ETA: 0:01:54[KComputing fraction correct... 34%|███████▌              |  ETA: 0:01:53[KComputing fraction correct... 35%|███████▋              |  ETA: 0:01:52[KComputing fraction correct... 35%|███████▊              |  ETA: 0:01:51[KComputing fraction correct... 36%|███████▉              |  ETA: 0:01:50[KComputing fraction correct... 36%|████████              |  ETA: 0:01:49[KComputing fraction correct... 37%|████████▏             |  ETA: 0:01:48[KComputing fraction correct... 38%|████████▎             |  ETA: 0:01:47[KComputing fraction correct... 38%|████████▍             |  ETA: 0:01:46[KComputing fraction correct... 39%|████████▌             |  ETA: 0:01:45[KComputing fraction correct... 39%|████████▊             |  ETA: 0:01:44[KComputing fraction correct... 40%|████████▊             |  ETA: 0:01:43[KComputing fraction correct... 41%|████████▉             |  ETA: 0:01:42[KComputing fraction correct... 41%|█████████             |  ETA: 0:01:41[KComputing fraction correct... 42%|█████████▏            |  ETA: 0:01:40[KComputing fraction correct... 42%|█████████▎            |  ETA: 0:01:39[KComputing fraction correct... 43%|█████████▍            |  ETA: 0:01:38[KComputing fraction correct... 43%|█████████▌            |  ETA: 0:01:38[KComputing fraction correct... 44%|█████████▋            |  ETA: 0:01:36[KComputing fraction correct... 45%|█████████▊            |  ETA: 0:01:35[KComputing fraction correct... 45%|██████████            |  ETA: 0:01:34[KComputing fraction correct... 46%|██████████▏           |  ETA: 0:01:33[KComputing fraction correct... 46%|██████████▎           |  ETA: 0:01:32[KComputing fraction correct... 47%|██████████▍           |  ETA: 0:01:31[KComputing fraction correct... 48%|██████████▌           |  ETA: 0:01:30[KComputing fraction correct... 48%|██████████▋           |  ETA: 0:01:29[KComputing fraction correct... 49%|██████████▊           |  ETA: 0:01:28[KComputing fraction correct... 49%|██████████▉           |  ETA: 0:01:27[KComputing fraction correct... 50%|███████████           |  ETA: 0:01:26[KComputing fraction correct... 51%|███████████▏          |  ETA: 0:01:25[KComputing fraction correct... 51%|███████████▎          |  ETA: 0:01:24[KComputing fraction correct... 52%|███████████▍          |  ETA: 0:01:22[KComputing fraction correct... 52%|███████████▌          |  ETA: 0:01:21[KComputing fraction correct... 53%|███████████▋          |  ETA: 0:01:21[KComputing fraction correct... 54%|███████████▊          |  ETA: 0:01:20[KComputing fraction correct... 54%|███████████▉          |  ETA: 0:01:18[KComputing fraction correct... 55%|████████████▏         |  ETA: 0:01:17[KComputing fraction correct... 55%|████████████▎         |  ETA: 0:01:16[KComputing fraction correct... 56%|████████████▍         |  ETA: 0:01:15[KComputing fraction correct... 57%|████████████▌         |  ETA: 0:01:14[KComputing fraction correct... 57%|████████████▋         |  ETA: 0:01:14[KComputing fraction correct... 58%|████████████▊         |  ETA: 0:01:13[KComputing fraction correct... 58%|████████████▉         |  ETA: 0:01:11[KComputing fraction correct... 59%|█████████████         |  ETA: 0:01:10[KComputing fraction correct... 59%|█████████████▏        |  ETA: 0:01:09[KComputing fraction correct... 60%|█████████████▎        |  ETA: 0:01:09[KComputing fraction correct... 61%|█████████████▍        |  ETA: 0:01:08[KComputing fraction correct... 61%|█████████████▌        |  ETA: 0:01:07[KComputing fraction correct... 62%|█████████████▋        |  ETA: 0:01:06[KComputing fraction correct... 62%|█████████████▊        |  ETA: 0:01:05[KComputing fraction correct... 63%|█████████████▉        |  ETA: 0:01:04[KComputing fraction correct... 63%|██████████████        |  ETA: 0:01:03[KComputing fraction correct... 64%|██████████████▏       |  ETA: 0:01:02[KComputing fraction correct... 65%|██████████████▎       |  ETA: 0:01:01[KComputing fraction correct... 65%|██████████████▍       |  ETA: 0:01:00[KComputing fraction correct... 66%|██████████████▌       |  ETA: 0:00:59[KComputing fraction correct... 66%|██████████████▋       |  ETA: 0:00:58[KComputing fraction correct... 67%|██████████████▊       |  ETA: 0:00:57[KComputing fraction correct... 68%|██████████████▉       |  ETA: 0:00:56[KComputing fraction correct... 68%|███████████████       |  ETA: 0:00:54[KComputing fraction correct... 69%|███████████████▏      |  ETA: 0:00:53[KComputing fraction correct... 70%|███████████████▎      |  ETA: 0:00:52[KComputing fraction correct... 70%|███████████████▍      |  ETA: 0:00:51[KComputing fraction correct... 71%|███████████████▌      |  ETA: 0:00:50[KComputing fraction correct... 71%|███████████████▋      |  ETA: 0:00:49[KComputing fraction correct... 72%|███████████████▊      |  ETA: 0:00:48[KComputing fraction correct... 72%|███████████████▉      |  ETA: 0:00:47[KComputing fraction correct... 73%|████████████████      |  ETA: 0:00:46[KComputing fraction correct... 74%|████████████████▎     |  ETA: 0:00:45[KComputing fraction correct... 74%|████████████████▍     |  ETA: 0:00:44[KComputing fraction correct... 75%|████████████████▌     |  ETA: 0:00:43[KComputing fraction correct... 75%|████████████████▌     |  ETA: 0:00:43[KComputing fraction correct... 76%|████████████████▋     |  ETA: 0:00:42[KComputing fraction correct... 76%|████████████████▊     |  ETA: 0:00:41[KComputing fraction correct... 77%|████████████████▉     |  ETA: 0:00:40[KComputing fraction correct... 77%|█████████████████     |  ETA: 0:00:39[KComputing fraction correct... 78%|█████████████████▏    |  ETA: 0:00:38[KComputing fraction correct... 79%|█████████████████▎    |  ETA: 0:00:37[KComputing fraction correct... 79%|█████████████████▌    |  ETA: 0:00:36[KComputing fraction correct... 80%|█████████████████▋    |  ETA: 0:00:35[KComputing fraction correct... 80%|█████████████████▊    |  ETA: 0:00:34[KComputing fraction correct... 81%|█████████████████▉    |  ETA: 0:00:33[KComputing fraction correct... 82%|██████████████████    |  ETA: 0:00:32[KComputing fraction correct... 82%|██████████████████▏   |  ETA: 0:00:31[KComputing fraction correct... 83%|██████████████████▎   |  ETA: 0:00:30[KComputing fraction correct... 83%|██████████████████▍   |  ETA: 0:00:29[KComputing fraction correct... 84%|██████████████████▌   |  ETA: 0:00:28[KComputing fraction correct... 84%|██████████████████▌   |  ETA: 0:00:27[KComputing fraction correct... 85%|██████████████████▋   |  ETA: 0:00:26[KComputing fraction correct... 86%|██████████████████▉   |  ETA: 0:00:25[KComputing fraction correct... 86%|███████████████████   |  ETA: 0:00:24[KComputing fraction correct... 87%|███████████████████▏  |  ETA: 0:00:23[KComputing fraction correct... 87%|███████████████████▎  |  ETA: 0:00:22[KComputing fraction correct... 88%|███████████████████▍  |  ETA: 0:00:21[KComputing fraction correct... 89%|███████████████████▌  |  ETA: 0:00:20[KComputing fraction correct... 89%|███████████████████▋  |  ETA: 0:00:19[KComputing fraction correct... 90%|███████████████████▊  |  ETA: 0:00:17[KComputing fraction correct... 90%|███████████████████▉  |  ETA: 0:00:16[KComputing fraction correct... 91%|████████████████████  |  ETA: 0:00:15[KComputing fraction correct... 92%|████████████████████▏ |  ETA: 0:00:14[KComputing fraction correct... 92%|████████████████████▎ |  ETA: 0:00:14[KComputing fraction correct... 93%|████████████████████▍ |  ETA: 0:00:13[KComputing fraction correct... 93%|████████████████████▌ |  ETA: 0:00:12[KComputing fraction correct... 94%|████████████████████▋ |  ETA: 0:00:11[KComputing fraction correct... 94%|████████████████████▊ |  ETA: 0:00:10[KComputing fraction correct... 95%|████████████████████▉ |  ETA: 0:00:09[KComputing fraction correct... 96%|█████████████████████ |  ETA: 0:00:08[KComputing fraction correct... 96%|█████████████████████▏|  ETA: 0:00:07[KComputing fraction correct... 97%|█████████████████████▎|  ETA: 0:00:06[KComputing fraction correct... 97%|█████████████████████▍|  ETA: 0:00:05[KComputing fraction correct... 98%|█████████████████████▌|  ETA: 0:00:04[KComputing fraction correct... 98%|█████████████████████▋|  ETA: 0:00:03[KComputing fraction correct... 99%|█████████████████████▊|  ETA: 0:00:02[KComputing fraction correct...100%|█████████████████████▉|  ETA: 0:00:01[KComputing fraction correct...100%|██████████████████████| Time: 0:02:52[K
Computing fraction correct... 11%|██▍                   |  ETA: 0:00:09[KComputing fraction correct... 21%|████▌                 |  ETA: 0:00:08[KComputing fraction correct... 30%|██████▋               |  ETA: 0:00:07[KComputing fraction correct... 40%|████████▉             |  ETA: 0:00:06[KComputing fraction correct... 50%|███████████▏          |  ETA: 0:00:05[KComputing fraction correct... 55%|████████████▏         |  ETA: 0:00:05[KComputing fraction correct... 65%|██████████████▍       |  ETA: 0:00:04[KComputing fraction correct... 75%|████████████████▌     |  ETA: 0:00:03[KComputing fraction correct... 85%|██████████████████▊   |  ETA: 0:00:02[KComputing fraction correct... 95%|████████████████████▊ |  ETA: 0:00:01[KComputing fraction correct...100%|██████████████████████| Time: 0:00:10[K
[info | MIPVerify]: Working on index 1
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 8, target labels are [1, 2, 3, 4, 5, 6, 7, 9, 10]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Conv2d(1, 16, kernel_size=(4, 4), stride=(2, 2), padding=same) ... 
[info | MIPVerify]: Applying ReLU() ...
  Calculating lower bounds:   0%|                       |  ETA: 0:03:27[K  Calculating lower bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]:   Behavior of ReLUs - split: 37, zero_output: 2249, linear_in_input: 850, constant_output: 0
[info | MIPVerify]: Applying Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=same) ... 
[info | MIPVerify]: Applying ReLU() ...
  Calculating upper bounds:   2%|▍                      |  ETA: 0:00:06[K  Calculating upper bounds:   5%|█                      |  ETA: 0:00:04[K  Calculating upper bounds:   7%|█▋                     |  ETA: 0:00:04[K  Calculating upper bounds:   8%|█▉                     |  ETA: 0:00:05[K  Calculating upper bounds:  11%|██▌                    |  ETA: 0:00:04[K  Calculating upper bounds:  13%|███                    |  ETA: 0:00:04[K  Calculating upper bounds:  15%|███▍                   |  ETA: 0:00:04[K  Calculating upper bounds:  17%|████                   |  ETA: 0:00:04[K  Calculating upper bounds:  19%|████▍                  |  ETA: 0:00:04[K  Calculating upper bounds:  20%|████▋                  |  ETA: 0:00:04[K  Calculating upper bounds:  21%|████▊                  |  ETA: 0:00:04[K  Calculating upper bounds:  21%|████▉                  |  ETA: 0:00:05[K  Calculating upper bounds:  22%|█████▏                 |  ETA: 0:00:05[K  Calculating upper bounds:  23%|█████▎                 |  ETA: 0:00:05[K  Calculating upper bounds:  24%|█████▋                 |  ETA: 0:00:05[K  Calculating upper bounds:  25%|█████▊                 |  ETA: 0:00:05[K  Calculating upper bounds:  26%|██████                 |  ETA: 0:00:05[K  Calculating upper bounds:  27%|██████▏                |  ETA: 0:00:05[K  Calculating upper bounds:  28%|██████▍                |  ETA: 0:00:05[K  Calculating upper bounds:  28%|██████▌                |  ETA: 0:00:05[K  Calculating upper bounds:  29%|██████▊                |  ETA: 0:00:05[K  Calculating upper bounds:  31%|███████                |  ETA: 0:00:05[K  Calculating upper bounds:  34%|███████▊               |  ETA: 0:00:05[K  Calculating upper bounds:  40%|█████████▏             |  ETA: 0:00:04[K  Calculating upper bounds:  42%|█████████▊             |  ETA: 0:00:04[K  Calculating upper bounds:  45%|██████████▎            |  ETA: 0:00:03[K  Calculating upper bounds:  46%|██████████▋            |  ETA: 0:00:03[K  Calculating upper bounds:  47%|██████████▉            |  ETA: 0:00:03[K  Calculating upper bounds:  48%|███████████▏           |  ETA: 0:00:03[K  Calculating upper bounds:  49%|███████████▍           |  ETA: 0:00:03[K  Calculating upper bounds:  51%|███████████▋           |  ETA: 0:00:03[K  Calculating upper bounds:  52%|████████████           |  ETA: 0:00:03[K  Calculating upper bounds:  54%|████████████▌          |  ETA: 0:00:03[K  Calculating upper bounds:  60%|█████████████▉         |  ETA: 0:00:02[K  Calculating upper bounds:  62%|██████████████▎        |  ETA: 0:00:02[K  Calculating upper bounds:  64%|██████████████▋        |  ETA: 0:00:02[K  Calculating upper bounds:  65%|██████████████▉        |  ETA: 0:00:02[K  Calculating upper bounds:  67%|███████████████▍       |  ETA: 0:00:02[K  Calculating upper bounds:  67%|███████████████▌       |  ETA: 0:00:02[K  Calculating upper bounds:  68%|███████████████▊       |  ETA: 0:00:02[K  Calculating upper bounds:  69%|███████████████▉       |  ETA: 0:00:02[K  Calculating upper bounds:  70%|████████████████▏      |  ETA: 0:00:02[K  Calculating upper bounds:  71%|████████████████▍      |  ETA: 0:00:02[K  Calculating upper bounds:  72%|████████████████▌      |  ETA: 0:00:02[K  Calculating upper bounds:  73%|████████████████▉      |  ETA: 0:00:02[K  Calculating upper bounds:  74%|█████████████████      |  ETA: 0:00:02[K  Calculating upper bounds:  76%|█████████████████▋     |  ETA: 0:00:02[K  Calculating upper bounds:  79%|██████████████████▏    |  ETA: 0:00:01[K  Calculating upper bounds:  81%|██████████████████▌    |  ETA: 0:00:01[K  Calculating upper bounds:  83%|███████████████████▏   |  ETA: 0:00:01[K  Calculating upper bounds:  84%|███████████████████▍   |  ETA: 0:00:01[K  Calculating upper bounds:  85%|███████████████████▌   |  ETA: 0:00:01[K  Calculating upper bounds:  86%|███████████████████▋   |  ETA: 0:00:01[K  Calculating upper bounds:  87%|████████████████████   |  ETA: 0:00:01[K  Calculating upper bounds:  88%|████████████████████▏  |  ETA: 0:00:01[K  Calculating upper bounds:  89%|████████████████████▌  |  ETA: 0:00:01[K  Calculating upper bounds:  90%|████████████████████▊  |  ETA: 0:00:01[K  Calculating upper bounds:  92%|█████████████████████  |  ETA: 0:00:01[K  Calculating upper bounds:  92%|█████████████████████▎ |  ETA: 0:00:01[K  Calculating upper bounds:  93%|█████████████████████▌ |  ETA: 0:00:00[K  Calculating upper bounds:  95%|█████████████████████▊ |  ETA: 0:00:00[K  Calculating upper bounds:  95%|██████████████████████ |  ETA: 0:00:00[K  Calculating upper bounds:  96%|██████████████████████▏|  ETA: 0:00:00[K  Calculating upper bounds:  98%|██████████████████████▌|  ETA: 0:00:00[K  Calculating upper bounds:  98%|██████████████████████▋|  ETA: 0:00:00[K  Calculating upper bounds:  99%|██████████████████████▊|  ETA: 0:00:00[K  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:07[K
  Calculating lower bounds:   5%|█▎                     |  ETA: 0:00:02[K  Calculating lower bounds:  18%|████▏                  |  ETA: 0:00:01[K  Calculating lower bounds:  38%|████████▊              |  ETA: 0:00:01[K  Calculating lower bounds:  52%|████████████           |  ETA: 0:00:00[K  Calculating lower bounds:  67%|███████████████▌       |  ETA: 0:00:00[K  Calculating lower bounds:  84%|███████████████████▎   |  ETA: 0:00:00[K  Calculating lower bounds:  99%|██████████████████████▉|  ETA: 0:00:00[K[info | MIPVerify]:   Behavior of ReLUs - split: 77, zero_output: 846, linear_in_input: 645, constant_output: 0
[info | MIPVerify]: Applying Flatten() ... 
  Calculating lower bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]: Applying Linear(1568 -> 100) ... 
[info | MIPVerify]: Applying ReLU() ...
  Calculating upper bounds:  11%|██▌                    |  ETA: 0:00:01[K  Calculating upper bounds:  67%|███████████████▍       |  ETA: 0:00:00[K  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]:   Behavior of ReLUs - split: 1, zero_output: 91, linear_in_input: 8, constant_output: 0
[info | MIPVerify]: Applying Linear(100 -> 10) ... 
  Calculating upper bounds:  56%|████████████▊          |  ETA: 0:00:00[K  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:00[K
  Calculating lower bounds:  44%|██████████▎            |  ETA: 0:00:00[K  Calculating lower bounds:  89%|████████████████████▌  |  ETA: 0:00:00[K  Calculating lower bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
┌ Warning: Not solved to optimality, status: Infeasible
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:212
┌ Warning: Infeasibility ray (Farkas proof) not available
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:223
[info | MIPVerify]: Working on index 9
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 6, target labels are [1, 2, 3, 4, 5, 7, 8, 9, 10]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Conv2d(1, 16, kernel_size=(4, 4), stride=(2, 2), padding=same) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 48, zero_output: 2200, linear_in_input: 888, constant_output: 0
[info | MIPVerify]: Applying Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=same) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 94, zero_output: 799, linear_in_input: 675, constant_output: 0
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(1568 -> 100) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 0, zero_output: 91, linear_in_input: 9, constant_output: 0
[info | MIPVerify]: Applying Linear(100 -> 10) ... 
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2

signal (15): Terminated
in expression starting at none:12
epoll_pwait at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
uv__io_poll at /workspace/srcdir/libuv/src/unix/linux-core.c:270
uv_run at /workspace/srcdir/libuv/src/unix/core.c:359
jl_task_get_next at /buildworker/worker/package_linux64/build/src/partr.c:449
poptaskref at ./task.jl:662
wait at ./task.jl:669
wait at ./condition.jl:106
wait at ./process.jl:622
success at ./process.jl:483 [inlined]
#run#562 at ./process.jl:440
run at ./process.jl:438 [inlined]
#45 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/backwards_compatible_isolation.jl:554
#46 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/backwards_compatible_isolation.jl:565
#36 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/backwards_compatible_isolation.jl:524 [inlined]
withenv at ./env.jl:161
#34 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/backwards_compatible_isolation.jl:523
#mktempdir#20 at ./file.jl:673
mktempdir at ./file.jl:671 [inlined]
mktempdir at ./file.jl:671 [inlined]
#with_dependencies_loadable_at_toplevel#31 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/backwards_compatible_isolation.jl:472
with_dependencies_loadable_at_toplevel##kw at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/backwards_compatible_isolation.jl:398 [inlined]
#backwards_compatibility_for_test#44 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/backwards_compatible_isolation.jl:560
backwards_compatibility_for_test##kw at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/backwards_compatible_isolation.jl:533 [inlined]
#test#129 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/Operations.jl:1369
test##kw at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/Operations.jl:1338 [inlined]
#test#57 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:287
test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:274
#test#56 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:268 [inlined]
test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:268 [inlined]
#test#55 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:267 [inlined]
test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:267 [inlined]
#test#54 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:266
test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:266
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2158 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2322
jl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1657 [inlined]
do_apply at /buildworker/worker/package_linux64/build/src/builtins.c:636
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2144 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2322
jl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1657 [inlined]
do_call at /buildworker/worker/package_linux64/build/src/interpreter.c:369
eval_value at /buildworker/worker/package_linux64/build/src/interpreter.c:458
eval_stmt_value at /buildworker/worker/package_linux64/build/src/interpreter.c:409 [inlined]
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:819
jl_interpret_toplevel_thunk at /buildworker/worker/package_linux64/build/src/interpreter.c:913
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:814
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:764
jl_toplevel_eval_in at /buildworker/worker/package_linux64/build/src/toplevel.c:843
eval at ./boot.jl:331
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2144 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2322
exec_options at ./client.jl:264
_start at ./client.jl:484
jfptr__start_2075.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2144 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2322
jl_apply at /buildworker/worker/package_linux64/build/ui/../src/julia.h:1657 [inlined]
true_main at /buildworker/worker/package_linux64/build/ui/repl.c:96
main at /buildworker/worker/package_linux64/build/ui/repl.c:217
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
_start at /opt/julia/bin/julia (unknown line)
unknown function (ip: (nil))
Allocations: 22974742 (Pool: 22967619; Big: 7123); GC: 26
