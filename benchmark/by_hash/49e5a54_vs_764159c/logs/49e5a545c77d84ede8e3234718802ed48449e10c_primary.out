cset: moving following pidspec: 1535320
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.234559884 seconds)
loading group "shootout"... done (took 0.7895199 seconds)
loading group "string"... done (took 0.217478512 seconds)
loading group "linalg"... done (took 3.146804777 seconds)
loading group "parallel"... done (took 0.021619708 seconds)
loading group "find"... done (took 1.172885583 seconds)
loading group "tuple"... done (took 0.684564179 seconds)
loading group "union"... done (took 3.029454408 seconds)
loading group "dates"... done (took 0.156647189 seconds)
loading group "micro"... done (took 0.057911495 seconds)
loading group "simd"... done (took 0.390072045 seconds)
loading group "io"... done (took 1.392626345 seconds)
loading group "random"... done (took 2.285642234 seconds)
loading group "problem"... done (took 1.145303803 seconds)
loading group "array"... done (took 4.326251153 seconds)
loading group "misc"... done (took 1.108595807 seconds)
loading group "scalar"... done (took 3.448099327 seconds)
loading group "sort"... done (took 0.30630275 seconds)
loading group "sparse"... done (took 3.506319396 seconds)
loading group "collection"... done (took 6.002560703 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.473914188 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.071748973 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.250487159 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.074664192 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.273256967 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.083577122 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.086424179 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.072595688 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.138261151 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.157782018 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.211225376 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.362976721 seconds)
done (took 4.980927534 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.299471945 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.03273352 seconds)
    (2/2) benchmarking "String"...
    done (took 0.122236823 seconds)
  done (took 0.745149201 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.135876227 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.015617194 seconds)
    (3/3) benchmarking "different"...
    done (took 0.022997548 seconds)
  done (took 0.760735365 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020668935 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.097662215 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021360889 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.021976363 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.021915016 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.021326487 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.021171698 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.021187403 seconds)
  done (took 0.810855462 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.028915251 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.022463439 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020662151 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022032664 seconds)
  done (took 0.676762564 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.022611689 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.091368126 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.026370521 seconds)
    (4/4) benchmarking "different"...
    done (took 0.026321362 seconds)
  done (took 0.746039409 seconds)
done (took 4.655972091 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.191251615 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.774352735 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.859747684 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.174005147 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.33920899 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.285091604 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.076426662 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.22843238 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.14564515 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.030682018 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.178742262 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.035929676 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.503387123 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.446228563 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.026582154 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.152213701 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.579693741 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.038774114 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.070028023 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.213225354 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.035170372 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.038645162 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.042763221 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.027184317 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.099019875 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.134500108 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.583862995 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.065088357 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.023964895 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.048534635 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.026843682 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.03205987 seconds)
  done (took 9.127531228 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.156557439 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.139971568 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.023421166 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.058873505 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.052991897 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.024696248 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.029836993 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.02307145 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.041987534 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.087607035 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.045043118 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.14995934 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.020895536 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.024257181 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.139638741 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.115059241 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.037274736 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.036603138 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.022181296 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.035850586 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.048220055 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.034170966 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.032288775 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.031952204 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.067462453 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.089395829 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.04115885 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.068152395 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.02239128 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.033814257 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.054752145 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.062951031 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.02260817 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.021279376 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.064074901 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.043571347 seconds)
  done (took 2.652294721 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.618564606 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.113022283 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.138047084 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.176823116 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.067942082 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.053883246 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.171935056 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.073464459 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.05342034 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023690622 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.192580904 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.630648114 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.160625028 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.014318112 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.027625029 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.165973884 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.883201915 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.958903404 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023182614 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023358337 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.128805635 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026187228 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.167579358 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.02454262 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.132646893 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.689675654 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.029765338 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025042041 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.050386287 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.253505268 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.021031731 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.093040905 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.046201157 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.025074822 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.559277277 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.021735635 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019699629 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.041636635 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.050742366 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021907723 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.022897697 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.030595402 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.020936991 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071381837 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.032392447 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.475578738 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024684635 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.657273841 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 4.648467158 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.028467265 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.025838015 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.055295682 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019712242 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023029658 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.547134343 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.090018387 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.02261771 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.282946073 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.02527089 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023874945 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024092318 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.05389632 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022682144 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024143591 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.025948991 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.040410441 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.96880432 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.033106906 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.042407347 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.021533347 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022590658 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.02110651 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.387661779 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029245157 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.024866975 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020353944 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025947532 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022453982 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021906938 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.060705689 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.048206501 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.044720754 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.02602876 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.022840566 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022125675 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.539714228 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.966603383 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02508146 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.024357872 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.506554686 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020572963 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022506314 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024145287 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.044178226 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023317272 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019935965 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058371346 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024882143 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.126053849 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.291214342 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.024801614 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.020530934 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.346662853 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.024418859 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058556356 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.075448547 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022603588 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.064365726 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.023266323 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.020405127 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.027033996 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.020336011 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.02455557 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.021359124 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.022067647 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.021227708 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.022985104 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.023853284 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022817325 seconds)
  done (took 22.951310433 seconds)
done (took 36.931614543 seconds)
(4/20) benchmarking "parallel"...
done (took 0.794722367 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.202501769 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.049232837 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019632116 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.152732431 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.042997155 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.12838569 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.165349026 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.120784785 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.043949335 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.043610697 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.043529739 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.170090275 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.178033709 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.044937797 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.111536741 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.179438739 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.045798842 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.02005627 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.044727929 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.044506669 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.044835739 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.019639839 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.043799491 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.044602561 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.112124519 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.04416586 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.019432126 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.111856575 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.045092433 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.113431963 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.046431226 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.04629865 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.047094101 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.114669038 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.047761091 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.114215886 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.019861912 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.047271382 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.047663771 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.048501214 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.047724046 seconds)
  done (took 3.776941471 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.046044751 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.038333684 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.053908332 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018078637 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028477011 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040600153 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018853519 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038719565 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.056214328 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.038623841 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.038444726 seconds)
  done (took 1.144831582 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.041220177 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039079319 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.046842878 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.01802118 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029635726 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.038800104 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018037699 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038577817 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.054568341 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.038909277 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.038950352 seconds)
  done (took 1.081499588 seconds)
done (took 6.666318766 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.146992967 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.117432426 seconds)
  done (took 0.928436015 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.566808136 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.199967341 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.124155649 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.243344532 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.118415855 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.149902944 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.713197472 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.15309514 seconds)
  done (took 6.988389839 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.075083408 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.139109632 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.024171008 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.022594358 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.022905297 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.022850269 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024211018 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.023087346 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022287183 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.024711694 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.024413829 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.022527396 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.023318364 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.024512833 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.022611759 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022823313 seconds)
  done (took 1.355106728 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.027914881 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.025447321 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.026242374 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.016898695 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.026638456 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.025403965 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.026463168 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.027711331 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.0259169 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.026182893 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.024171044 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.027327947 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.025893914 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.024733969 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.027301426 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.016874741 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.027484062 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.026490829 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.028710776 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.026749784 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.025922334 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.024203678 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.027655607 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.025590574 seconds)
  done (took 1.305504499 seconds)
done (took 11.253464356 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.131414718 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.028909139 seconds)
  done (took 0.837781889 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.122725141 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.121366062 seconds)
  done (took 0.931817016 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.027862832 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.015829128 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.031211582 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023791994 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.016133361 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.015783202 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.030102798 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.016055717 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.015890609 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.015976836 seconds)
  done (took 0.905901071 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019164021 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022699554 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.020847269 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.019130738 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.020686503 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.016919725 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.019100731 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.017050223 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.022299104 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.016209705 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.019715895 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.037523451 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.01925708 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.038017544 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.019266778 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.019728366 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.021085646 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.019044811 seconds)
  done (took 1.075177212 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017685401 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.016704553 seconds)
  done (took 0.724493219 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020423146 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016922465 seconds)
    (3/7) benchmarking "month"...
    done (took 0.018447833 seconds)
    (4/7) benchmarking "year"...
    done (took 0.018301856 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016505485 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.015953406 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016458505 seconds)
  done (took 0.805466173 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.389544484 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.090100209 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.326940416 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.024580566 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.036457327 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.232765805 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.019649988 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.02360588 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.023451769 seconds)
  done (took 1.853546292 seconds)
done (took 7.823695595 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.044644123 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.140616729 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.145614756 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.434641963 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.033862979 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.022339865 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.056574881 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.22001222 seconds)
done (took 1.804182007 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.273043508 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.264797233 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.182679635 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.020791616 seconds)
  done (took 2.162132722 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.307485032 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.136287693 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.030713964 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.022847405 seconds)
  done (took 1.212759122 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.021894828 seconds)
    (2/2) benchmarking "read"...
    done (took 0.02728798 seconds)
  done (took 0.752312302 seconds)
done (took 5.105304526 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.029163198 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.016631367 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.022558841 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018138574 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.017823521 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.017297237 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.017368334 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.018152514 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.016251847 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.018114269 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018123588 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018112883 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.017851963 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017867858 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017390693 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018143081 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.016293956 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.017815037 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017795561 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.017784783 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.01621666 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018110277 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.017410065 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.017811279 seconds)
  done (took 1.126908828 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.037240635 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.022134612 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.022103032 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.0219552 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.023161752 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.022055191 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.022117886 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.021973613 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.022207746 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.020991385 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.023148327 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.023223187 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.020902758 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.023306057 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021057387 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.023302841 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.022231331 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.022076917 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021014891 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.023257166 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.022159325 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.022049001 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.023282671 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.022130384 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.0231675 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.023138405 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.021124449 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.022150121 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.02254296 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.023211137 seconds)
  done (took 1.387267749 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.022973603 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015039535 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.015258197 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.025352761 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.014964627 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.015094443 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.015509276 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.014772277 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015105179 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.015922032 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.01544162 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.014852102 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.015686275 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.014876868 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.014971949 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015489261 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.020277628 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.035769375 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.01521551 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.014946796 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.01967226 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.015162855 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.014940942 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.01492858 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.015366683 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.015303592 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.014938732 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015332951 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.015016945 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015506109 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.015063996 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.019764143 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.02123805 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.015415582 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.02535963 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020197233 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.015413927 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.019533238 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.015753415 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.014849389 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.014831781 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.01486476 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.014992349 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015023676 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.025453014 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.0151942 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.015993993 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015481647 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015184866 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.014890304 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.014960212 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.01636282 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020698769 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.016108752 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.014838146 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.016019264 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.014864362 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.015543149 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.014983429 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.014860648 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.014846513 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019046219 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.016198604 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.015556872 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.036536693 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.016131024 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.025517406 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015036302 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015393833 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.019219471 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.015543731 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.034706595 seconds)
  done (took 1.963792779 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.026989338 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.024858406 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.033969218 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.024601513 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018343111 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015848721 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018739243 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015797383 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025164472 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.020881789 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018157301 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020959086 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02606934 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019974541 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017204885 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.025068342 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019303049 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018502074 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.015907398 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019191134 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016846663 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.01874871 seconds)
  done (took 1.17037324 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.103885007 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.02250158 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.068106075 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.022247649 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.020812034 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.021979419 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.022491602 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.02246704 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.023117098 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023805454 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.023840323 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022813677 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.020879835 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.023709271 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023696132 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023549517 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022716575 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.023508022 seconds)
  done (took 1.248922778 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.033906188 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.02105455 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.048347334 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.020867171 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.020834389 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.020489718 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024632719 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.024860434 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.021526095 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.022184011 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.025138005 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.02115363 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.021118862 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021399692 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020868549 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.021166776 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.020630256 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020973208 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.024324492 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.02751499 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.028468642 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.027684436 seconds)
  done (took 1.247205854 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.036404458 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020847924 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.039339056 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.023007341 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015352224 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015336244 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.022948689 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.021845282 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.022928709 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.020858094 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021960166 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.01546268 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.023896248 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.021908695 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.024005288 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021858541 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020860504 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.021944356 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020872389 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.01540722 seconds)
  done (took 1.167897869 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.125250559 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017432407 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017211935 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021466396 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017144769 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.017311404 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021604861 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.017259742 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.017171168 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.041291816 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.017233799 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017245466 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.021669277 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.019895678 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017262577 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021571964 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.021514235 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.021499377 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.017268789 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017262345 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.041235463 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.017183992 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.021491417 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017178348 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017172149 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017232406 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017242488 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.019942232 seconds)
  done (took 1.379591581 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.038624737 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.014804353 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.014940098 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.018730774 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.018832049 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.024573667 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.018740341 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.018965432 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.014701909 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.015035927 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.016922053 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.014719918 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.014695885 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.023953423 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.01464077 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.016891363 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024012597 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.018788222 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.0267992 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024655682 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.016944434 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.023904737 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.016926464 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.014997798 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024706208 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.016900575 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.01876249 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.019538553 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.016892822 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.0150272 seconds)
  done (took 1.28845747 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.029182575 seconds)
    (2/2) benchmarking "in"...
    done (took 0.026064021 seconds)
  done (took 0.762380248 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018292049 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.032905861 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.01479948 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.028294152 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.024060029 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.019188013 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.023539548 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.02401733 seconds)
  done (took 0.885576456 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.123846032 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.145791165 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.016971108 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.017198494 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.121206589 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.083139433 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.130971801 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.028414181 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.030253536 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019680447 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.016786724 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.130614944 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.016428917 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.030595233 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.017799477 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.026112836 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023648475 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.034234831 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.029404037 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.015372811 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.0290069 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016997641 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.016198728 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.017097403 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.017316826 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.023158986 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.031904205 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.028734029 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.024641414 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.014704349 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.03476547 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.015542388 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.01610948 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024541393 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.122451895 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.015801164 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.052943038 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.015716113 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.019728324 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.01541465 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.027388913 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.036454273 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.029948257 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.033235097 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.016966599 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.017379298 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.015507505 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.017055784 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019742508 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.024715363 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.015723197 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023002355 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.015396542 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.01693054 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.025996701 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.015849783 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.020065216 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.024784628 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029231565 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.026088185 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.028040054 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.030892528 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.024287168 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.023561166 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.016314873 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.03540264 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.017278233 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.029063827 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.030498511 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.016789873 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028245232 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.015597864 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.014924041 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.015779835 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.049343354 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.016951024 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.016489422 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.015816023 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.015883286 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.016995418 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024995327 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020112254 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023032276 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018559957 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.031472213 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.024689794 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.015556192 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.022458639 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.033759428 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019837316 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.015768468 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.032461329 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.019781686 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.015540592 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.033393294 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.026182625 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.017058037 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.016305077 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019587143 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.029328197 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.017475052 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.015229006 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024568295 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.017627727 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.124053553 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020628032 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024157491 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.015920861 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.026169758 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.02211549 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.017449588 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.015176867 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.020834013 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.016872099 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.015215339 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025428471 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.016124063 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.030629231 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.023005899 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.030618316 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.031030277 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.026552532 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.031925193 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.015979996 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.015247855 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.034379209 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.025418009 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.017355054 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.034144459 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.016010399 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.026533044 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.016177935 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.017543099 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.025349037 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.015508474 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017692952 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.016263323 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.022639868 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.017728803 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017954513 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.022179866 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.024735828 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.028431547 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.017307064 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.024952255 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.016561346 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.032023976 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.025902606 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.021252997 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019521118 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.016969538 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.028187949 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.023089718 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.025202869 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.016083933 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.016886478 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.016206736 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.027270676 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025768573 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.017952871 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.02526704 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.021164938 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.017032935 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.01629831 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.017240701 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020163012 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019502026 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.016760487 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023996 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.024875352 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.030286426 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.023449011 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.025323508 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.015638139 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.01604343 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.01788157 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.015980412 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020958388 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.025306223 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031718579 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.027829486 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.037714429 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.016496757 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.02593494 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.017985814 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.033337798 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.02961337 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.017283522 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020957891 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.015494447 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018041497 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.025535191 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.027590524 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.030360351 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031300389 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.021299124 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.021142542 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.016224516 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.031379811 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.01676257 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024652725 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.025404182 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.022409597 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.016225351 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.01802072 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.025373374 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021362756 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.01729738 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.032346732 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.023992091 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.016269989 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.030711302 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.016616967 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.026905365 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.016302853 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020162768 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021826648 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.018293807 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.025913234 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.031545445 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015539539 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.01667473 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.031976033 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.018142165 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018016417 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.024311541 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.03157324 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021290419 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.024095977 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026885857 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.026938139 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.021126752 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.026542091 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.017427541 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.025471028 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.019762127 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.028200118 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.016450497 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034745024 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.015533161 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.031614237 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.017123062 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.027500469 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.016766728 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025638006 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.017253344 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.033626714 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.018005796 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.01730144 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.028057624 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.015518447 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.025411674 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.016214155 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021671915 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.023334536 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.025461028 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.018168383 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025710188 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.018060104 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.025235681 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.021363126 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.025201059 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.025426921 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.021164251 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.016202859 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.024457227 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.171894286 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.030471345 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.017040366 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.016799099 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.015871947 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.024754267 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.016785198 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.016322804 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023670731 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020688974 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021725428 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.016697425 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.016823245 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.016717669 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023737729 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024633587 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.032958541 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.023898508 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.022824342 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.024383464 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.015259992 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030645938 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.01531481 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.022833691 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.014709305 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.021027422 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.024387162 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.015548339 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033770616 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.016651529 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.02313777 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026705276 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023824665 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019529612 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.032753154 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.018015187 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.023587462 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.023033696 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020284892 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.022340064 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.016614332 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.023646906 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.024531427 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.025432521 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.015900301 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.022716184 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024160309 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.016656241 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.022486478 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.016533067 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.023659588 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.016734182 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.014705617 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.02031947 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026061307 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.02042201 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.020588581 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.015463559 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.014562217 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.015504749 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.021493984 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020397266 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.023701878 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030413959 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.01460421 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.015881562 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.015124762 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019385963 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.032729871 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.024479733 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.023121845 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020303647 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.014699656 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.016352767 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.016530617 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.015266818 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.017707013 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.01474845 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.015084791 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025341303 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.016565402 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.020048223 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.0154146 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.016288126 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.025005683 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.019117663 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.015681064 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.022416125 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.015214138 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020883491 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.01481749 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.016711166 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020285255 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.015122637 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019552744 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.025496525 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.031391285 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.022353354 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.024193229 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.016243163 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.023234103 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030578909 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022804071 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.01630158 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.024703923 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.01516024 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.033811173 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.024656761 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.0239617 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025068 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.016460595 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.032370825 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020541463 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.025382697 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.030769906 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.016491667 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.022846409 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.015561137 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031115257 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020542089 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.01551573 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.023973642 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023391541 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.021930603 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.026913288 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.016385255 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.024009751 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020125971 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.019923175 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.017052772 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.017012983 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.024214929 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.031631098 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.016352793 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.021505166 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.023907173 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.024283718 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020957328 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.028077615 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.024092866 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017010127 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.017732304 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020011235 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.016831281 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.028044086 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016398798 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020931788 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020830892 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.01590399 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.023013504 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032563651 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.025200735 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025333302 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.01592673 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.015434583 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.033850232 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020092441 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.019266752 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.023969071 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.025726017 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028156885 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.025211545 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.032865356 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.016452585 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.02222503 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.02798648 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.016852863 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.015869337 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.02006445 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.017552034 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.024948229 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025652536 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.023310067 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017779878 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.023124843 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.029522495 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.01737853 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.02099526 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.021912217 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.016834706 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.026451284 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.024086135 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.024696818 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.017741413 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.016000064 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.019847684 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.024718407 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.0235132 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.02495378 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017100709 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.024618316 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.030093132 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.02355136 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019456212 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.016036936 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019392439 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.025071134 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.022395819 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.016045326 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.021141171 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020042219 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.024578476 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.025361491 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020979553 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.015984578 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.033114884 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.024600092 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.025011276 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.017761002 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.017871199 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016392773 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.015986519 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.027037767 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.016021062 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.017626266 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021126164 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.134667324 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.034622342 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.024238807 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.031938338 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017056031 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020880997 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.01601602 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025540732 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.021011088 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.016120578 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.026515247 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.015607563 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031333896 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.027720401 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.023553655 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.016091041 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021547753 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.024615686 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.031114554 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025599867 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.024842734 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.019402882 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025505949 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.017819809 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.027082672 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.016142439 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.015346177 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.026121986 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024668354 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028504419 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.01617545 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.026256687 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.018161368 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.024328734 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.024833635 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.017844089 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017992579 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.017866579 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025628709 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.021354531 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.025457898 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.021379916 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.03337818 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.017281397 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.027233661 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.025086469 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.027137437 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.030026612 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.028464951 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.024807801 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.016645527 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023596302 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.024771537 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.017395457 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021498871 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.01966059 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.03867769 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.017971083 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.017960529 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.030642635 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.024718457 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.016392999 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.024279862 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.021364825 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.026240516 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.017195895 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.026538597 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.021989925 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.017195396 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.021224849 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.02129925 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.01537118 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.016142175 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.016476496 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.025852711 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.02146133 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.016377573 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.035765641 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.017811638 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.024768846 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027229002 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.023262759 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.01778337 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.015421037 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.017118458 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.029549521 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031745924 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.020434611 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.178673405 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.017129191 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.024615401 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.014882796 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.024115749 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.02332075 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024021537 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.015399157 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.015607365 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.030296163 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.030746577 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020533795 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.032182833 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.024215869 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.016662671 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.036476874 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.024258371 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016111825 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.025759579 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017060268 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.014989933 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.01484047 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.016665144 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.026497811 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.015264387 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.01710595 seconds)
  done (took 15.122259086 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.060458671 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.016501369 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.015296858 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.015292129 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021989925 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016350966 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.015303554 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016365219 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.016409502 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017398651 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.015349753 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015338194 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020416612 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.029583183 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022578354 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018605785 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015270891 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.016343189 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015283726 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016353374 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.02084115 seconds)
  done (took 1.174201029 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020203976 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.019397937 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.01878568 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019004228 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.01831983 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015496325 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018694673 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.0155011 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019144949 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015879452 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019160563 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015490164 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.015819016 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.015834699 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015843867 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016823077 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019107654 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018394933 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015512881 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.01872985 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016856613 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.01871804 seconds)
  done (took 1.131812757 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.018087834 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.01594149 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.023798313 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.014849793 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.014725751 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.017381805 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.014782049 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.019536946 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019590942 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.01960025 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.023646369 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.015569137 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.014813438 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.020911578 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.014792696 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.015521511 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.059585778 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.015631951 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.015691196 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.014985344 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.016992889 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.02385215 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.015065978 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.015152231 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.01966724 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.017511052 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.015086674 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.017105988 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.015523021 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.019704803 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.015698291 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.014777874 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.023699199 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.022939304 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019651693 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.019628687 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.01610937 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.015607242 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.015021837 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.014978764 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023074236 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.01606128 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015178236 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.015936766 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.023597896 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.015078373 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.014761847 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.023721839 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.014865335 seconds)
  done (took 1.65100499 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.027124432 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.068080019 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.022767096 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.050003993 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.027553748 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.020027092 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.021675356 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.052585616 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.016107749 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.01647238 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.028339282 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.028943023 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017446152 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.01858983 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.021715149 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017401574 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017911193 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016809992 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.019530769 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017088664 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.01947926 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.022854451 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.027352463 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.028452452 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018219316 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016870714 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017023434 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.018467661 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.02821179 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.019998945 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.018642629 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.01909376 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.027821811 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.023860101 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017066366 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.017224516 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.028321269 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.017573226 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.01739224 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.016032552 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.0170879 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.018453842 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.022930656 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.028555239 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017589177 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.023924552 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017421894 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.015774722 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.028469423 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.017367686 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.020643107 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.029564918 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018423503 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.017745137 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018740665 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.028174323 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.017613457 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.016483734 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.017767065 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.028607284 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.016135868 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018260605 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.029271737 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.017110857 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.020278305 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.029431145 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.024080223 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018767714 seconds)
  done (took 2.409439905 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.026472042 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.021917301 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.025894922 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.025969894 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.021879545 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.021984165 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.021928023 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.021879147 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.021800587 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.024457238 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.021923123 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.13140632 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.019459064 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.022727791 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.022029806 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.022084164 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.022032028 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.022093918 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.022124992 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.022022474 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.022041541 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.026173061 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.022057727 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.026298176 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.054842156 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.019161622 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.021896949 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.022044881 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.026460645 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.021963317 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.028564699 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.021985194 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.022060326 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.026460432 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.028487806 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.021919757 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.015608007 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022066216 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.022326955 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.022314739 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.019236391 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.026869006 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.02220569 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.019317717 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.022438824 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.022144043 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.026891013 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.029043481 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.023084118 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.025028046 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.022342747 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.027132616 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.023475428 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.023931435 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.029031175 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.061976499 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.029011916 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.029106324 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.023920826 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.028901046 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.029071603 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.03598128 seconds)
  done (took 2.417882155 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.029649552 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.02060862 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.025725523 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.015072464 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.014947441 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.020462271 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.014975664 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.015018391 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020495071 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.020432726 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021827503 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020626254 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.022233031 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.02177892 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.020465101 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.022258595 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020472903 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.020566173 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020400897 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.020525131 seconds)
  done (took 1.181496964 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.018701683 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020006951 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.01564002 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.019399628 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.015647177 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.018860877 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.015643627 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015574798 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015693183 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015704068 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.019897032 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019875185 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015695019 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.021547788 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.018993581 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.019019088 seconds)
  done (took 1.037967491 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020020851 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.023617836 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.120638293 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.016273621 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.018050601 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.015684539 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.016386528 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.015313236 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.017518278 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.028987478 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.016339394 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.018320059 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.01647576 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.015220668 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.015709795 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.018277851 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.017498087 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.016425675 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.016428676 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.121124047 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.024492117 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.016920397 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.018422841 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.016976297 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.018105081 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.024253857 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.017586993 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.017967488 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.016289516 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.018387471 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.017910447 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.027184518 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.017999994 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.016842294 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.015147928 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.016035893 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.016432045 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.018374983 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.018313359 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.016402783 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.015364543 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.018008047 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.016469482 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.016753333 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.017519977 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.01831212 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.017494074 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.026436394 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.01625062 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.01790978 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.016355176 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.017387332 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.016758845 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.027371496 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.018217767 seconds)
  done (took 1.962594416 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.035105791 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.02150965 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.01487042 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014730378 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.021039889 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.0223537 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.021254369 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.021796468 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022377442 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.014886526 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.022473264 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.02075876 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022442282 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.02139212 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.022530158 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021392809 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.014911823 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.022270624 seconds)
  done (took 1.140039558 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.023687164 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020337181 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.020310856 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.016797596 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.016702277 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020330689 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.015237433 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.016432383 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016405476 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.016792818 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016812015 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.016391075 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016350687 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.016382167 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.020035361 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016741081 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016389446 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.015353189 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.016759611 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.015256018 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020463578 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.015352668 seconds)
  done (took 1.138934257 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.180267887 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.140814047 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.038053881 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.033395415 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.025029962 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.0507934 seconds)
  done (took 1.222259772 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.053325281 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024334678 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.021399909 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.046692953 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020681213 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019361929 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019469163 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019648326 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022561947 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027892216 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019713241 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022232705 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022772467 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024112827 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02113583 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020653476 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.01962119 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019645161 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021598186 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030636147 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019893214 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022201825 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019788087 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019535624 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019662677 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024096832 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022644283 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02793508 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019527781 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022170926 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020698 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019886724 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022393268 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028155154 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021431435 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022666936 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019767253 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030669743 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020679982 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024209186 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.021120567 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.021317288 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022620953 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022204168 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022383125 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020150715 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022526591 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019990141 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020049083 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.033197447 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021117095 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024320964 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021563946 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022591316 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022905688 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.033100515 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028335338 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025289722 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022985968 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0302271 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026408703 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022519176 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026261792 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030294336 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023151953 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026326829 seconds)
  done (took 2.336727602 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.029919793 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.049072987 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.019591888 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027815035 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023751148 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019697359 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019620509 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019622729 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019587551 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022081007 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.058989198 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019885492 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024036916 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024101999 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019850744 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019550314 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019594429 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023858033 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022004964 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.032567553 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019768328 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024040343 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024042299 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024021637 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027962834 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02081539 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019669261 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019652344 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019690901 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019617592 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022294414 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019839237 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024040936 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.021845393 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023935728 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019875905 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019668965 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0222383 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019690507 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020790642 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024126263 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030188651 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.01991206 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019912686 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028350744 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019856891 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019887686 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022138024 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.01997505 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022137111 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028329378 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028324044 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028245756 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024557715 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020149776 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02009264 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019883626 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.020117168 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021091478 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022155221 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02620913 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021207444 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.035832016 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021253582 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021118226 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026365311 seconds)
  done (took 2.334470028 seconds)
done (took 50.584966004 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.213302882 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.176345026 seconds)
  done (took 1.133106497 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.131353206 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.129175191 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.157223687 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.023339719 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.081077024 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.173752533 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.124430341 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026006415 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.023785782 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.02502551 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.023312186 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.024667983 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.024843566 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023196543 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.085560933 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.025923562 seconds)
  done (took 1.867013232 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.072235898 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.264900601 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.066339567 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.022646853 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.101592499 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.028222239 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.02360639 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.027493613 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.027959078 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.022788109 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.068580986 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.043603689 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.026587972 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.027610374 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.02347902 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.026492488 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.027457922 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.028037684 seconds)
  done (took 1.692542136 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.088937162 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.031718076 seconds)
  done (took 0.883237794 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.135787766 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.063085583 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.105468991 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.306303585 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.095410747 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.285930555 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.102068964 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.098417911 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.068637807 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.095694557 seconds)
  done (took 2.114384383 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.058879671 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.054334819 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.272865373 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.053367306 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.033563243 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.02863835 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.029553958 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.028936733 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.029983882 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.028894419 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.070944071 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.02746173 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024081678 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.06663124 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.046374975 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.05759431 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023315334 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.028448334 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.032176594 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023189598 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.027516558 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.028820451 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.127319793 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.028966252 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.047917413 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.02683862 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.028235241 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.028857336 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.028786452 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.029738522 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.029822416 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.051085921 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.028795399 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.03701643 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.027399611 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.047391874 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024082217 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.046653317 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.026673573 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.0239997 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.026420372 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.029861268 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.024455443 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.029475589 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.030096143 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.028916858 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.02916067 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023355204 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.03010114 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.026681693 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.02418118 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.027458193 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.027789344 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.028246846 seconds)
  done (took 2.927228769 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.074729562 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.065160136 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023724011 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.072667947 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.064294502 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023951731 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076924262 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.059160321 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075126288 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023400116 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023046691 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023020457 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030405486 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.034604869 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.074531889 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.067685327 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025030114 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023670674 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.067096598 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.066644476 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022486024 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.078943256 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067489313 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.065970898 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.02220406 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023654271 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.02241274 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.02306192 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.029640923 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.030351701 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.022822859 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.031894125 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.033776941 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.029469592 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.02214432 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022418528 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022382049 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.030533143 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.030952276 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.030870781 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.028883589 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022228837 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022413738 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023010786 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023462296 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022018583 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.030902476 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.029906896 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.030914355 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.02300923 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023033667 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022391033 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023222182 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.029514842 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.028325177 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.029905314 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031944593 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022921505 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022805939 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024066985 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032735674 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.030497265 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030359547 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023701792 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.030469432 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022621257 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.031485562 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.035826699 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022617764 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023204846 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.022874962 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022792159 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023141631 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.028765307 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.028879409 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023272632 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023070668 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022577785 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.030582468 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.029083732 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022557396 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.030001658 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022274925 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022880374 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023183301 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023442472 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.031267873 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.030722852 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023612173 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023280492 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023353577 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023302282 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022517155 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.031437998 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.031436221 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.03158885 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.032435509 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023797989 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.033045393 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.031782146 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.02394823 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.030751996 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023436643 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023823873 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023740264 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.030490483 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.03022363 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.031922604 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023397666 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023096471 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.031306484 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033766963 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023274182 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.030258597 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033164233 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.031218794 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.022948857 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.033989468 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023500621 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.032840102 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023693771 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032268033 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02370989 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.031146873 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023683969 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.022819592 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023521172 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.033625587 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024040691 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023467203 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023862358 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023461855 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.031185134 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.034413499 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024190989 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.031461652 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.031363592 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024070432 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.032534452 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023712936 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.032509743 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023661838 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023902447 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022782743 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034547586 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023337867 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023855489 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023468853 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.033088591 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023402418 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.032936431 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.030274715 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.022868413 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.033015869 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.03261973 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.03049621 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.033424849 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024398522 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.02367888 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023264283 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023619389 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.032401775 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.034107788 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024349642 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023724688 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.030256715 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.033062201 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023067655 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.030526488 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030471897 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.031131394 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023831535 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.02371702 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.034052212 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.034793181 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.031148152 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.033214368 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031981429 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023520636 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.030744678 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.033192649 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023633351 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.037877839 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023479326 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.03441172 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.033481377 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.030232246 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.033178777 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.034470544 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.033513223 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.033182507 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.035252354 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023141706 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023376936 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.177472856 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.02297039 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023039056 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.028367709 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.02332237 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023175553 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.034556359 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022999068 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.030456954 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022357607 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.02921826 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022241929 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023205184 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03304399 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022636434 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02310286 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.028409571 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022765731 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.028202263 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.031124676 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.028168589 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022484131 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023063046 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.030746868 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.029636504 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022515365 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022457704 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023067579 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.029734022 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.029186933 seconds)
  done (took 7.6323208 seconds)
done (took 19.022419205 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.134836402 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.069446867 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.128674542 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.079597484 seconds)
  done (took 1.16808078 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.055190584 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019363866 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.135423664 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.146392393 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.01957509 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.129400029 seconds)
  done (took 1.284145247 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.242172426 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.143966364 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.147658076 seconds)
  done (took 1.313789834 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.147831502 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.273055635 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.54027508 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.141212195 seconds)
  done (took 1.890571184 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.162403412 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.155280646 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.030016142 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.172878898 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.036800413 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.016025364 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.099924338 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.016757768 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.049202738 seconds)
  done (took 1.579850052 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.089839295 seconds)
done (took 8.102397504 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.196290066 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.131869825 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.033084817 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.02747517 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.120640182 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.125216835 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.141813378 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.02971774 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.132168054 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.295992635 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.176756947 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.047975384 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.147175199 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.04075288 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.254168767 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.030578672 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.02925902 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024214831 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.137843324 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.129512364 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.233233265 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.027772936 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.094483011 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.030142831 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.098620115 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.077064751 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.186546658 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.301191672 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.263823291 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.030630278 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.116757505 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.040630097 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.113254978 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.119925312 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.128173524 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.047770456 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.019927512 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.234982299 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.098722801 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.311052503 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.161460405 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.027057664 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.136901565 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.02492972 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.01930548 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.140370277 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.032478339 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.026516022 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.042548351 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.027020445 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.038355795 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.027956836 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.128117091 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.023645918 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.092145228 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.133134982 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.17833647 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.10083338 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.025858233 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.037159614 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.029955326 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.155561168 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.037097218 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.025313991 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.031494264 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.020051612 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.131686823 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.039725593 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.020410602 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.030731407 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.028914212 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.095760042 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.14846626 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.063886747 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.031679735 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.105350178 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.096449557 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.045604619 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.047353538 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.02919441 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.019609968 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.186320011 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.025506162 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.037741404 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.026719136 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.052464469 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.019812784 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.034151711 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.165646396 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.145200659 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.084838425 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.021027328 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.231862966 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.021912493 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.044586181 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.021117849 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.020416784 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.181669695 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.020189327 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.020356901 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.030412092 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.029054782 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.022402892 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.165042876 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.100959051 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.028470823 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.027197836 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.020905237 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.026166774 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.021487939 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.020971947 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020404203 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.094875243 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.037097712 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.019732666 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.101836604 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.118765084 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.030718719 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.198465348 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.083940543 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.023572634 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.030013223 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.027250296 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.134229864 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.026549942 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.13038332 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.021632222 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.040420932 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.113877739 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.095969649 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.099478927 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.019540534 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.135519806 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.029321412 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.019098855 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.026807024 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.046127808 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.02897835 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.036220988 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.027654812 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.135371638 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.029346925 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.025297615 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.113849215 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.018873986 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.103522139 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.097155336 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.1259954 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.024348605 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.028977093 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.09109186 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.041377685 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.048529127 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.039889803 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.024077833 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.019618803 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.019226397 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.0322946 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.0186939 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.019531896 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.03208053 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.026111337 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.035272433 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.231341021 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.029066351 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023625954 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.242088241 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.031443941 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.08903226 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.038827104 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.019784214 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.098594529 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021276321 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.039418837 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.081085036 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.019942638 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.095669166 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.020378607 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.019812784 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.025660246 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.021510124 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.029155328 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.032920795 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.020281421 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.032590858 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.027376242 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.019673154 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.09886958 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.021993751 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.182360784 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.097833081 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.092826479 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.020035735 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.038341197 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.019673245 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.130062358 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.020002728 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.067633451 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.109414122 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.034403192 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.040268189 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021040613 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.097334354 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.033827415 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.024831355 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.09798745 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.127890722 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.089295289 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.026105999 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.237895437 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.028649172 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.020272948 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.025706273 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.028629528 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020192245 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.098456585 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.024603088 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.019292549 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.019526017 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.021794022 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.018915578 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.043216932 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.019127637 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.027716341 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.02533727 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.022681114 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.021840244 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.018955751 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.02807138 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.098851786 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.116640346 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.025806626 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.039200046 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032194913 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.029960249 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.065732556 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.027520988 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.154929086 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.019035839 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.029233407 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.03954863 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.01933586 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.024814494 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.025308361 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.036844026 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.023291615 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.021124883 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.028854527 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.02019153 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.020135616 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.019891954 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.020137236 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.028728613 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.021265165 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.019490136 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.019391171 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.035749628 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.024854257 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.025458475 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.030661947 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.039905797 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.464123012 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.021391232 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.022372766 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.032414606 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.025394059 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.02029212 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.021351196 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.019805322 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.022124068 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.020144618 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.019516578 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.047018807 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.02522651 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.020418735 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.040014128 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.025750268 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.02970547 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.116510778 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.036580323 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.025336224 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.019479202 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.252548454 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.092661771 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.040857106 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.039089771 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.020377971 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.030894533 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.020302572 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.020739439 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.01969525 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.04622414 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.025853611 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020416895 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.01953019 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.01972844 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.067135761 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.02836848 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.019719414 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.028285121 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.020252688 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.020088618 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.046510536 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.020761475 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.020031646 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037548961 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.032144893 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.104121388 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.031901031 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.023118476 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.069650685 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.019512088 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.020071612 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020434869 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.104799797 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.032302394 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.021693926 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.020077146 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.027437656 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.029170682 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.071886812 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.026258028 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.023576844 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.027656781 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.01935098 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.020311492 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.046277601 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.048037868 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.021276848 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023687701 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019934684 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.02031997 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.095385048 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.027581123 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.025046186 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.107548758 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.022429447 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.02815659 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019483923 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.652032958 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.030769058 seconds)
  done (took 21.835048031 seconds)
done (took 22.630820781 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.14740594 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.032812558 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.03994742 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.028294155 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.031508985 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.031157602 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.041727754 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.029075185 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032155385 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.039391074 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.140947163 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.019759767 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.027224797 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.033487147 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.028174931 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.031941416 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.030882959 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.031609759 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.020768 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.031801923 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.0305814 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.030551834 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.028489432 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.031184632 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.020231564 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.028168964 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.143995839 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.034116842 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.029874703 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.029106332 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.027340672 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.041503377 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.027317123 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.026803513 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.028872401 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.025142199 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.029369674 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.026113138 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.143352928 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.025406684 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.020164946 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.031142994 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.026788877 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027440431 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.028183811 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.030513347 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.024994059 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.031952356 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.027753785 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.039026326 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.142939274 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.028255747 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.029735208 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.027891207 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.025000785 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.028585095 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.029584902 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.029834807 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.024894462 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.038432493 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.028091345 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027360914 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019439223 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.027845452 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.026625579 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.026939443 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.018714927 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028122189 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.019495805 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019384169 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.027723519 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.027820224 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.026252963 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024442887 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.027672475 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019377484 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.032609764 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.038180646 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.026371488 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.0280216 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.019851989 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.02491951 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.02452657 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.019931352 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028166424 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.030300417 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.028377593 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.019890858 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.02765749 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.038635924 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.025982848 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019368929 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.03015371 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.027975044 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.027810398 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019462456 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.027740016 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.027806466 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.027202886 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019363112 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.018673967 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.027891729 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024579477 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.027839194 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.019778513 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.027854035 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.027792202 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.018737445 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.027774043 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.026521239 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028162477 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.03000272 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.027736046 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.030459698 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.019902686 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.018621108 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.028991348 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.019747637 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028054836 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027403974 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.024768365 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027137263 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.019951796 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.027124934 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.02790081 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025400613 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.01976562 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.019872869 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.019745761 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.027953695 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.026545374 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.018740001 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.019396681 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.027993251 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.027835811 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.027287181 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.027637454 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.027916842 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.019925219 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025456326 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.024801857 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.027966756 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.027532671 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.019780066 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.027528422 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.027438199 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.02824046 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.024841698 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.027969992 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020054964 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.027859566 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.026469683 seconds)
done (took 5.575851529 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.074796473 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.062138345 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.17042969 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.138212163 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.03266504 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.033335379 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.024633806 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.03939269 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.026283883 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.044470076 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.044885041 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.042494714 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.155597487 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.040346512 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.019966141 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.031560222 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.020460618 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.046261877 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.140010146 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.044570266 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.061605328 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.018773941 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.035173322 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.038000457 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.031618216 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.037895378 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.043890842 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.02086884 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.037310493 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.036578486 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.046543181 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.022487953 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.020323479 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.038699345 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.035726349 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.028368971 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.019729608 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.026544441 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.03141878 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.019859152 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.062549972 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.037683747 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.026255988 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.026424817 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.020676424 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.034354448 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.020701713 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.027637549 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.033345881 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.026289931 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.032099067 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.036244848 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.021864495 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.037289512 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.018869964 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.02708139 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.026693796 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.019665281 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020665522 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.019803302 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.019741961 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.022707586 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.032065202 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.038067377 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.023707946 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.026865172 seconds)
  done (took 3.480701813 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.046058841 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.066100073 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.034042003 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034532164 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019682411 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020129234 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020131949 seconds)
  done (took 1.133272859 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.091624489 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.135546474 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.138470578 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.139765873 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.152357871 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.136724388 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.032592426 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.04971413 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.054812017 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.155435605 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.146746059 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.140983963 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.024087274 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.032459033 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.051848132 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.143906636 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.032754653 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.027634681 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.135152144 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.141680647 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025087035 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.05146318 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.033077473 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.023213482 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.144919706 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.137584104 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024122626 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.061470839 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022878238 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.020652416 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020646113 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.042816557 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.137754468 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.035491789 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020990134 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.019711082 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.135277096 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.0212949 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.137621041 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.027692956 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.134958182 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023125083 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023414126 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.021163012 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021929266 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.135191826 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.022027923 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.020761058 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.020340718 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.139797478 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.031709735 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.138494659 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.022289103 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.025719973 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.027754574 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027344822 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.02779433 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021163882 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.140847835 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.030900595 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022599629 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.143315218 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.142452039 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.138470759 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.143084922 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.029826891 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.139274976 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.134924111 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.020716847 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.028542022 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021534183 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.146055355 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024744428 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.023435063 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.019485644 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.028183562 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.150490769 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.149901967 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.149955863 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.034882805 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.022598914 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.02159203 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.15041637 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.150901928 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026540525 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021204328 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021554528 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.036580825 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.045266715 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023407132 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025873307 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021305086 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.031754221 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.02360708 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.022936389 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.145421948 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.020529522 seconds)
  done (took 7.543993288 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.03851561 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.021304903 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.02082739 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021180908 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021360708 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.021187838 seconds)
  done (took 1.117305957 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.060035539 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.021615761 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.021534893 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.021434938 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.043709042 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.128844665 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.128726991 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022733172 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.0380277 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.03344069 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.12864704 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.131889239 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.131208056 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.022723926 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.128657258 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.03304651 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.129066799 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026025047 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.032328182 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022681564 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.031752322 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.022279863 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022471399 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.148165684 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.016678093 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.032695843 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.03061047 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.032531318 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.032130596 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.022325953 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.022192361 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.016366399 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.031179616 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.022276007 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.130187291 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.03159053 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021947425 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.017428949 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.025525835 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.016361164 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.132742405 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022843753 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.025894618 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.017574747 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.022429281 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.031433747 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.017513354 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.031300074 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.131078918 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.01775667 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.017534735 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.022063495 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.016496991 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.017420318 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.031528746 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022533308 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.017442571 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.131315977 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.022635668 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.031523072 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.021708621 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.016460321 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022408411 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.016376026 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.026377128 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.017456793 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.031363184 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022659131 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022600996 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.021529383 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.017405898 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.021467054 seconds)
  done (took 3.971545379 seconds)
done (took 18.138498947 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.449471738 seconds)
  done (took 1.3439407 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.962606796 seconds)
  done (took 1.869428477 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.049881158 seconds)
  done (took 0.97410797 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.292715937 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.454374642 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.690918238 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.089142304 seconds)
  done (took 2.435106343 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.833540105 seconds)
  done (took 1.767406403 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.206347068 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.171319814 seconds)
  done (took 1.328096704 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.485866828 seconds)
  done (took 1.405840026 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.303779071 seconds)
  done (took 2.230604533 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.192273743 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.132919893 seconds)
  done (took 1.252854159 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.59245553 seconds)
  done (took 1.516334304 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 6.666062341 seconds)
  done (took 7.592800129 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.185101538 seconds)
  done (took 1.167282716 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.240258691 seconds)
  done (took 1.168306386 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.693683952 seconds)
  done (took 1.619822952 seconds)
done (took 28.605091509 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.043326407 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.036768868 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.036720972 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.034008228 seconds)
  done (took 1.065186851 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.030278019 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.024652593 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.026807606 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.027114138 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.024628059 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.026385286 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.02709791 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.023566658 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.024574723 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.023938769 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.022479953 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.023823651 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.026320713 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.023612893 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.02604434 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.027399888 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.02397424 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.024617186 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.025739135 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.023616548 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.026419372 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.02385192 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.023940958 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.025216464 seconds)
  done (took 1.533805698 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.034008051 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.025335574 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.027113082 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.024303389 seconds)
  done (took 1.042664009 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.03217308 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.029712779 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.037948212 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.037843628 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.029539498 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.03020633 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.036320829 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.036534411 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.04312108 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.039201651 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.021538622 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.021274309 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.020522958 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.033679254 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.035909731 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.015607248 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.016810734 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.030421394 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.029382295 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.032093964 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023368419 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.019141154 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.029752645 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.030088906 seconds)
  done (took 1.639702299 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.03686971 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019431992 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.034726306 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.043437573 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.043538676 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.019253642 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.032462288 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.044096663 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.081857048 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.01929797 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.025255188 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.019278106 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.056068373 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.019301709 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.033614412 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.064118943 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.066791501 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.023359386 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.049305394 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.019224921 seconds)
  done (took 1.688121774 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.028531402 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.023579337 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.024730551 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019057998 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.029922083 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.026356138 seconds)
  done (took 1.089548584 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.023943688 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021141436 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.020908305 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.02522931 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.020819725 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.020745297 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.020790593 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.019722009 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019674058 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.02048925 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020452464 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.020863311 seconds)
  done (took 1.186229645 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.157120973 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.026246321 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.027669359 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019791409 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021374138 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020479923 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.033446234 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.022344302 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.036430805 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020417798 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.020674134 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.022733412 seconds)
  done (took 1.360100742 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058961403 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06285591 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09492213 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072003577 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076464001 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049157849 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.192577009 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.032757014 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.111066786 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086792369 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074330477 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04469146 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038984439 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.023174749 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053334998 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070040994 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087430523 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026344009 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071377748 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.228018826 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082877357 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.082951372 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099086935 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075456971 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.045191735 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098908122 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.049398526 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055376091 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.074172729 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.079259664 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074223265 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.056326782 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.0250125 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024476513 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111070568 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.055863843 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072093462 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.046240522 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.05819607 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042477555 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.079936982 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.023916419 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.037027451 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.063681131 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041014638 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088507895 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.048738202 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071179372 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035516564 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093930596 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084166558 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170081197 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.040946531 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059230157 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098080896 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06924918 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088658356 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062601839 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035947113 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.07534105 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.065411332 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058161552 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065487372 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035349465 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132822299 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.199859723 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.076758575 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066422564 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.043578782 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.047474109 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062885269 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086669325 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076034748 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.069132682 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.081077388 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04480788 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079410615 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.052560291 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.075466759 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054883065 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.025933395 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.072004615 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078648798 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049774572 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.05210557 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078431747 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.045421466 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029043483 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.04210054 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.07078313 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033599544 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.060831141 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038451571 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.081784682 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08687175 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051203979 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067753722 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.071245416 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.031976859 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116257365 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.061939942 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026639811 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.071275389 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066357726 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104656208 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050136028 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.029044244 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.053119785 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056242831 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.112325761 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057518423 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034522035 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070711557 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09646208 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049515667 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.243722401 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.049900381 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097719546 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070681229 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040645303 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029608862 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.048981097 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068734895 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066598586 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080493065 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050897084 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.037988652 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041257406 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076643126 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048857846 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034042353 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.074431933 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.059404921 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.02951629 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045374024 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.031761075 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108535809 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.041490937 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.253853105 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083728311 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.029414161 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058644991 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048893342 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057507898 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.052861516 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069786074 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090241757 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.14247365 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042622793 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.036067257 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060408324 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092894751 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076892448 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043411313 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.037523961 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051544397 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062201412 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.052064207 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.073500967 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.045925348 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062558398 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055087587 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089794706 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093260951 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053897114 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058077438 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058436621 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.06574159 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.028889444 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109247507 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056803581 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07514868 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.040795433 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093328526 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.069056579 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060264493 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040079299 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057228279 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.056121081 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059633906 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09551798 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.047073496 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.025950823 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047305519 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100488365 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03105596 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072798404 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.044169102 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.046068313 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069808638 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.047619665 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.035910283 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022404065 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077506231 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112951123 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.024343366 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.071187823 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.070363359 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.059143883 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.078788997 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.023853533 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083885493 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092625829 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08303684 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105944906 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154353465 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078748546 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.073917082 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.240237041 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.065174761 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032914954 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.076475586 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084270488 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045419901 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044273951 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085651405 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07045309 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.084593935 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.064482506 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0729402 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.056198727 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057877879 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05514232 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.051932703 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092380277 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073439166 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.076109678 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.036819057 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062540693 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068375822 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086627981 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034348401 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092357411 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.038178534 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095401854 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.032062617 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.079036866 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.030102376 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.121894895 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033269985 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.053017161 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.023575429 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.026294669 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094520493 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.075017961 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058107205 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051943026 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.086940643 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090136342 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.031687445 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.066061657 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068001216 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.05769788 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068492011 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062736316 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.042321173 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049536493 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.060772455 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038993519 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.034928477 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081416609 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051148074 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090916762 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037594484 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.292573813 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094380819 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066061003 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048894121 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030736623 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06331903 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.081899189 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047496995 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04088098 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076450921 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060624593 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098702042 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.045751502 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.057517067 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082379523 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.036509103 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.05150202 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.024381473 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.044781455 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.031257658 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088293071 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03117844 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.233382704 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.023003464 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080700325 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038215155 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.049710072 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.05586012 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060278133 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085200916 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046613345 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090016134 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041557465 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.06777298 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05989955 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064315211 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038768914 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053880949 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055814172 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.072178068 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.04583977 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071860575 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092238438 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054221076 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091608677 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042761075 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.074186283 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058683235 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.073997664 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.065484845 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146797378 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090772965 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066742963 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064719118 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029119981 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048838683 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064026147 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063139534 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127356698 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078454201 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026094781 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057212214 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047141351 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.060163774 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061406525 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033468961 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09571707 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054248274 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.040938743 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061546692 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.04281514 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057862481 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029665653 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.055744652 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.049604718 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048692728 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051341931 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069270305 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083755134 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064955378 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099743339 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.05755192 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.045901521 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.073693871 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073836474 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07162387 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038590735 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039055332 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100617375 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.074338605 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.082337906 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.053681558 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067529953 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.068213349 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.213680329 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081762971 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058526657 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.075170362 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032588822 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.029770301 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022234777 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.025480602 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.074141966 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062352668 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061092186 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056185046 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.025571744 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.057003502 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058610649 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025425882 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038042814 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046001404 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.050625943 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.03494195 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056673465 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.066038055 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.046355512 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052934862 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054913523 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090461177 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.049907155 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040669372 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092357164 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099595291 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040926666 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046469462 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.025215844 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.032603833 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075713926 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096642594 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100762609 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.032806051 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040036272 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.037613642 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040895444 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025253168 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.041782703 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.042450501 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057932861 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050733105 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.066640189 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057657841 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029154966 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.061030471 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053755033 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046383384 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.060815329 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070894836 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079197734 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.091057211 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066691692 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068769923 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029832568 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.033082885 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.030544068 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03392124 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.060723852 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.033146218 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030537928 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102982545 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.046335207 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066385445 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068181224 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.042587238 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029805015 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08911313 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.023850852 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090300102 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.025270159 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034884224 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.036519272 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033484991 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051061589 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100154149 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063772072 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066251673 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062867675 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067741611 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.297160017 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106781609 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038084276 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090614425 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028727467 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.029492552 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029423504 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059448346 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041823352 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.068635283 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09273686 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040489386 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052284618 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030957111 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091940734 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.048476473 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052818581 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037725395 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032099855 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091730148 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032530773 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.037445199 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041423464 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062611505 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.025527106 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052930263 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.036072655 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032639578 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142139595 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.664961836 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049818039 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.02818758 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049406891 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093350714 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086236447 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049424068 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063898683 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.071032806 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.057481361 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.047413983 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066983202 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.153971201 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027696473 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048632258 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.050924803 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05560482 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062816594 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.050012011 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.04082329 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.048947002 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.039839687 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.033239958 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067153983 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040170945 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.050403767 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.059239431 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036830142 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.043121436 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084620363 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.056594478 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.038326898 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043768724 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.065856955 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041287986 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061799884 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.023954124 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.064435522 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043433679 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07623778 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.054459967 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.065488104 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080471489 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04889198 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094179778 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.065356109 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079372925 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041670793 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.032640414 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083995971 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.046483075 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032233722 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105394557 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.054121757 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.0589033 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065158307 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.050548105 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066770467 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072459834 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068564945 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057425197 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033363793 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056764432 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.065495266 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043360717 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035365444 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.028212161 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.03019776 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067162035 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042769991 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.0414557 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.07292113 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044867882 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.058329478 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.055354668 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080169063 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044597561 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061907859 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066744611 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048910189 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093620522 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056975489 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.08561995 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136258284 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092748187 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086940653 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091976394 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.033660299 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.036051543 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.023563739 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.070617422 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034717273 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.042712572 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033794079 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091463376 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.039455381 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070184595 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.212303903 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.035414716 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.050196005 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054000899 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.024939799 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.038726469 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067812433 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041675492 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035380009 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07040139 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.03697923 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085747112 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065888564 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056205873 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.051891938 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036046983 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066703954 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.060306492 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.086168288 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054829003 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.030093599 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083236954 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062528545 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10073905 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.029423189 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035958719 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085786836 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060732187 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092473431 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.036526047 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119110401 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100266793 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.060988892 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091666445 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025917998 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.373106176 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042320659 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.07608376 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037951253 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058558648 seconds)
  done (took 40.428660855 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.134699411 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.257156708 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.13045374 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.11137437 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.078612484 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.078625649 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.248187507 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.092042371 seconds)
  done (took 2.223904657 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.02881781 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.054293089 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.036293404 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.293847115 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.057650564 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.021775428 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.028240844 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.036965702 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.025021447 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.021114799 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.059862317 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.021332259 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.025192081 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.447298901 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.020361611 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.024916442 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.024984934 seconds)
  done (took 2.312750702 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.30311982 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.595639441 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.207692528 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.469955049 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.103561076 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.563740761 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.02903657 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.034321904 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.636668258 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.365559742 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.097447583 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.180381077 seconds)
  done (took 17.656757204 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.030962925 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.146881458 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.146369626 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.027577378 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.027241068 seconds)
  done (took 1.45249033 seconds)
done (took 75.681985348 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.040451114 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.121098108 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020564775 seconds)
  done (took 1.236804126 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.150484467 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.146589359 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.147293919 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.148363238 seconds)
  done (took 1.656564491 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.030503859 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029607171 seconds)
  done (took 1.131184478 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.174185067 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.278219026 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.043263074 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.039861522 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.034839235 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.034777125 seconds)
  done (took 1.18428507 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.026855293 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.02453268 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.024585581 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.025114457 seconds)
  done (took 1.164536391 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.13014558 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.01954054 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.022084282 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.023421169 seconds)
  done (took 1.259891186 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.04002656 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.038576918 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.068120998 seconds)
  done (took 1.215356538 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.039263089 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.03811202 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.032928347 seconds)
  done (took 1.180364549 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.055608548 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.046717557 seconds)
  done (took 1.16907792 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.035818262 seconds)
  done (took 1.104935209 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.044389495 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.049986318 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.206654841 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.174258435 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.211213766 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.193533351 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.032619172 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.029922499 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.032112142 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.034214022 seconds)
  done (took 2.073489571 seconds)
done (took 15.979901669 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.035932707 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.14267249 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.270053254 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.038851073 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.7795845 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.266256079 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.684088151 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.042361099 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.052709385 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021705904 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.03717397 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.758158874 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.689669199 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.102330412 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.671512517 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.092698284 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.515068422 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021881309 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021006287 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021518668 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.663818188 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021210213 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021351896 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021815073 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.512974335 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.409531119 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022188971 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.089365751 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021702907 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.024954642 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.392535922 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022619645 seconds)
  done (took 12.550787469 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.026127663 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.075081417 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026409752 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.036078546 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.02335588 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023780069 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.039478554 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.021941916 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.06390115 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021793394 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037687757 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021294782 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.0260052 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022791732 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.040670543 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021782914 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023652065 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022371695 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021610228 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022171656 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.039389559 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.02133897 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021974289 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022062482 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.021792744 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.035626994 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022539374 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021505736 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021705362 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025123137 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026310397 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022894482 seconds)
  done (took 2.002115603 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077480345 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.076072886 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027206654 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.060104573 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071818159 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024624672 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.1025798 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.0433462 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.066529206 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022194575 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037901421 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021921085 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.057013816 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022985767 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.04090353 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021996515 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.02398207 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022402878 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021501024 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021963259 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.039509035 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021716759 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.02182162 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022354566 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022130261 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037366516 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022542509 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021798109 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021732995 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025210136 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.02696868 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022770312 seconds)
  done (took 2.254386479 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.025657556 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.025746065 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.031423307 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.034393393 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.020157958 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.022725107 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.023963526 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.020311068 seconds)
  done (took 1.287615837 seconds)
done (took 19.182624603 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.035464312 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.021969044 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.02482013 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.045963612 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.028255331 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.136224692 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.024656764 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.027031877 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.025509531 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.024888344 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.027078599 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.019455495 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.024186839 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.0243355 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.025910333 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.020078293 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.140158108 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.024594832 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.13747446 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.138933743 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.022880708 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.02573778 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.028593197 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.13789938 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.137612463 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.137979808 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.029339612 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.026124506 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.025745923 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.02308496 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.13607779 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.137965217 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.022810062 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.132938716 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.020380206 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.02019728 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.024679505 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.021729498 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.14097949 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.029324213 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.022457637 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.029112804 seconds)
  done (took 3.375995853 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.141738648 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.14682201 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.140328919 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.032587895 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028860481 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.03186435 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.146310299 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.029218021 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.028056054 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.144974396 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.023763182 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027632193 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.029842894 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.020801102 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027402431 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.024144433 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.029582457 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022054266 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027478353 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027814317 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.146290584 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.021370221 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028589381 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028944919 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023834395 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029641657 seconds)
  done (took 2.5107257 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.031000914 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.042594861 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.045009988 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.107618273 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.062089929 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.043365607 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.036633185 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.047129123 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.052713919 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021084111 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.043054446 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.049069818 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.050106883 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.027446223 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.059720884 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.039791241 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.03398533 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022693759 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.027379034 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.05104116 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.044210436 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.040212841 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.053484396 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.03237184 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.02026414 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.027529611 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.025276398 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.036694675 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.031572099 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.033102885 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.024675603 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.024479061 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.021944492 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.031650503 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.024476518 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019498351 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.043878698 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033292154 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.035548781 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.059191539 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.031183301 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022259895 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.046986943 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.080125915 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.019867795 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.023792915 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.02515321 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.033374821 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022427082 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.022988431 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035854666 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.020558944 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.0398277 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022351353 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022559844 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.041570812 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.02269839 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.023160711 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.041368047 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.027352929 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.042641032 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.02656637 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.040810137 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.02005685 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.032361205 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022374132 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.035217188 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.02690634 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.054558357 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028211642 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.06692305 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022124173 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019517626 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.033109986 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.03241042 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.021835821 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.052310825 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.03916716 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.03276045 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.02477965 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.03910283 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.023892636 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.024388361 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.064638996 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.020335702 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.019463659 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019336864 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.023467011 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.024277836 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021609675 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033133991 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020477198 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024312578 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.047459084 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.020724281 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.02166931 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.023513574 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.022325879 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020387066 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.030304484 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.024182165 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.039524689 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.033423361 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.021695441 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.024323613 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.029646083 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.030287836 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.019715914 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.022184243 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.023301784 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.030498735 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.022485418 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024350841 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.022808256 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026350765 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.028298611 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.026641624 seconds)
  done (took 4.951010011 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.231045479 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.221742233 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.022128199 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.2180041 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.029590307 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.149828069 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.220231855 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.220431482 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.021770142 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.0225767 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.020880928 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.1644882 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.15968215 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.17187725 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.151365555 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.023806691 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.053909468 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.169634894 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.223970772 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.217952242 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.052853701 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.028661611 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.023820668 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.022840341 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.022255248 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.030004621 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.037793489 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.029937512 seconds)
  done (took 4.072117209 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.029773633 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.065195482 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.025308814 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.045832065 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.037287669 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.022248965 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023476404 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022348931 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.041895194 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027182797 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.022037855 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025742921 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.025110473 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.023839416 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.021933604 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.027866269 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.028238946 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.020625369 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.02525911 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.026152342 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.032625845 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.044268017 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025522616 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021568218 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.024815989 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021505203 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.026643383 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.029804016 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.02129284 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021346757 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.018832039 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.03006259 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.036318115 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.022809234 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021363353 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.022231949 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.02202689 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.021911352 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.021875149 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020021756 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.01997526 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026866006 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020462221 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.026331208 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.034898691 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.023808052 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.023284765 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024141974 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.024219181 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018698658 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.024692341 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.024933914 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.024166069 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.029971137 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.023910468 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024362062 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.023111543 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.036158311 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.02757017 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.02120703 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.020968087 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.020238186 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.02365881 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.028039593 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.037771511 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.023706914 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020198244 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.022025466 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.023304985 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.034899915 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.021168673 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.028026267 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018880701 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.021929217 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.02402436 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024569349 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.023093857 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.020132917 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021308794 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.02111027 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.021769779 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021548952 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.020954261 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024162289 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019777642 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.020139782 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.022212573 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.023249535 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.026640455 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.020641234 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.024989751 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.023196818 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.020431019 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.024148468 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.026881574 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024448147 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.039092281 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.029008637 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.022411373 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019571138 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.037781646 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.024205687 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.021111373 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.023634303 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.030162625 seconds)
  done (took 3.813072225 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.051891846 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.023983257 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.041263797 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.056721919 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.031953219 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.027573123 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.035342173 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.023179242 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.043026513 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021086942 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.03094835 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020266921 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.034842263 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.030659326 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.023895055 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.031681149 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.024609268 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.042385388 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.036688438 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020694582 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.030481737 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.034091127 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.034310207 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.039250526 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.038794252 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.039970103 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.033959192 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024543809 seconds)
  done (took 2.043047098 seconds)
done (took 21.842289691 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.150960307 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.309972501 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.115182786 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.657822635 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.205187608 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.118689433 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.212364431 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.095998324 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.172368775 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.199141219 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.750063119 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.285862097 seconds)
done (took 59.450637146 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.172720564 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.248876175 seconds)
    (2/2) benchmarking "String"...
    done (took 1.333858402 seconds)
  done (took 3.703087519 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.537480528 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.100178306 seconds)
    (3/3) benchmarking "different"...
    done (took 1.133372468 seconds)
  done (took 4.859680705 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.372214175 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.742015516 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.362901704 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.088314592 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.105014869 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.491299257 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.259203728 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.789899667 seconds)
  done (took 26.938962864 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.162676144 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.746177088 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.483739262 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.582076048 seconds)
  done (took 18.157463099 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.550724532 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.609968786 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.608847701 seconds)
    (4/4) benchmarking "different"...
    done (took 1.714124676 seconds)
  done (took 7.703676975 seconds)
done (took 71.098231485 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.088536842 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.47680722 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.101738492 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.28280271 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.153338714 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.183455234 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.103207598 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.100999028 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.100242635 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.100910265 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.098941399 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.100604242 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.107036394 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.153435384 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.110000281 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.140116854 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.387222265 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.101901887 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.137630302 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.94432508 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.4283407 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.099613518 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.112764995 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.175481848 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.437934881 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.101552194 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.540505239 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.099901714 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.701580281 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.109676925 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.109656027 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.102872516 seconds)
  done (took 182.08259323 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.087861321 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.974204237 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.96212768 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.113621413 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.475376357 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.449033813 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.948934 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.487762216 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.100323852 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.123176418 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.098626185 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.092673163 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.133362651 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.674922822 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.133940995 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.142575339 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.003433106 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.900485048 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.146408678 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.020067501 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.092922473 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.677531335 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.676885095 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.924831984 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.112306727 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.144497342 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.111440753 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.127655523 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.61514054 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.977877948 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.10311871 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.134939539 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.28757826 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.337887457 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.091132961 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.105707785 seconds)
  done (took 152.691595916 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.276133112 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.096840289 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.134046527 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.209124882 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.113808647 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.915108718 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.101859066 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.088516689 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.088260992 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.095037656 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.090169847 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.158104442 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.099673079 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.19069472 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.130374346 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.093205976 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.089390738 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.174277384 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.111856079 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.088508146 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.08818462 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.195274969 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.441434622 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.200758106 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.100362295 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.097029808 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.198151473 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.106231864 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.090736102 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.088085806 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.1979426 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.099457483 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.221966258 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.209434748 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.105618268 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.146491551 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.106921023 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.294669191 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.101264264 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.088524864 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.089894053 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.136861675 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.099214208 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.178467879 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.204651465 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.103878255 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.107702286 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.570920838 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.685395213 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.102403083 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.088485667 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.087505017 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.092891492 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.089830449 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.191727045 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.104085286 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.122853882 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.713647137 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.110299772 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.088335577 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.088487127 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.088257089 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.088724162 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.095022999 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.124524233 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.708165501 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.80056574 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.453050537 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.836509491 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.100431933 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.088877001 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.088577134 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.121464976 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.164074713 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.090498115 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.088060438 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.265972449 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.099377769 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.088299543 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.012096977 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.014885469 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.100912389 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.19783648 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.100186033 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.088688437 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.177484296 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.199955393 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.111158478 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.108067934 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.143964287 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.092144096 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.088301926 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.09523967 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.014278109 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.101047595 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.100597022 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.45352765 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.100585015 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.088290756 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.136061232 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.463517686 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.100229716 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.170765841 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.494861378 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.040414127 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.100400096 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.088167011 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.106725035 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.090046025 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.100590701 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.100236958 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.090368934 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.089100934 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.093334338 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.088751262 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.08801585 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.088167305 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.107433993 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.090506821 seconds)
  done (took 324.92352194 seconds)
done (took 662.180694554 seconds)
(4/20) benchmarking "parallel"...
done (took 1.092817601 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.34200277 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.108243828 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.27469896 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.352563578 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.295325993 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.27352273 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.300480542 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.395444022 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.332558676 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.264424295 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.323840483 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.269760015 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.387800918 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.357877271 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.353168241 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.382680401 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.296776023 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.793360711 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.308280186 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.268820621 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.30129044 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.262928645 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.252573614 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.326597705 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.355152684 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.295182374 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.49791936 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.333244684 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.303442659 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.343756445 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.364055609 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.381922617 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.312620755 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.346531294 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.370106527 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.359862259 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.283702348 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.360688014 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.283911823 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.306705503 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.316946621 seconds)
  done (took 62.73057894 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.539326496 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.287484845 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.40884242 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.41401964 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.850314128 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.409254925 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.50341195 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.283671755 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.293158112 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.44890183 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.428363268 seconds)
  done (took 17.985266153 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.338858401 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.283851286 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.436821844 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.41705252 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.508691805 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.41033921 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.453269301 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.288089235 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.299418735 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.419174532 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.437563697 seconds)
  done (took 17.410796758 seconds)
done (took 99.218672418 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.700717093 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.172643038 seconds)
  done (took 3.963130679 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.120151528 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.111569521 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.101493149 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.104143851 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.102486019 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.101012207 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.153598964 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.113397584 seconds)
  done (took 10.004433793 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.102122142 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.101175392 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.102319315 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.101454252 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.101681205 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.101538498 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.100277345 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.101275421 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.100494464 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.102010192 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.101711273 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.100557386 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.101430493 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.100457913 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.10028062 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.100551486 seconds)
  done (took 18.71090098 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.102075471 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.102109315 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.102102798 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.103164249 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.102015079 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.103530541 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.10153155 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.110432278 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.101545708 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.101516836 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.101167128 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.101803512 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.101847532 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.101576617 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.101960057 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.101351403 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.10382351 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.101105558 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.101519126 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.102252185 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.102143502 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.101267102 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.102376154 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.104962545 seconds)
  done (took 27.551271333 seconds)
done (took 61.351211844 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.703267995 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.898511254 seconds)
  done (took 6.691876392 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.100769459 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.101169545 seconds)
  done (took 3.356254191 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.099886261 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.100411558 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.10026215 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.099653671 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.100483036 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.099962755 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.100077467 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.100661117 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.100594402 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.100447824 seconds)
  done (took 12.091939728 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.099844543 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.100187032 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.09997499 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.100140916 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.10014975 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.101228745 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.10151833 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.100588037 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.100989535 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.099783703 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.102490679 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.290451103 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.100395621 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.330404761 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.101128641 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.100599259 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.100848397 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.100101681 seconds)
  done (took 21.321428684 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.099818879 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.100526049 seconds)
  done (took 3.289879353 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.099905919 seconds)
    (2/7) benchmarking "second"...
    done (took 1.100647135 seconds)
    (3/7) benchmarking "month"...
    done (took 1.100701574 seconds)
    (4/7) benchmarking "year"...
    done (took 1.099791211 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.100370205 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.099963539 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.100138899 seconds)
  done (took 8.791426854 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.549218776 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.26799102 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.315212542 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.561329912 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.732990828 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.050879593 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.730716289 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.049455474 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.86142849 seconds)
  done (took 16.209430973 seconds)
done (took 72.845858081 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.861905563 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.095505059 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.562583923 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.187846961 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.169088305 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.463687638 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.107318268 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.71099082 seconds)
done (took 37.259394873 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.223154963 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.089724696 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.127656003 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.12783894 seconds)
  done (took 19.436407337 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.091340379 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.669927573 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.129871309 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.173669231 seconds)
  done (took 19.235763862 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.504155643 seconds)
    (2/2) benchmarking "read"...
    done (took 1.611839076 seconds)
  done (took 4.227271986 seconds)
done (took 50.218292431 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.100434708 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.100815254 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.102171256 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.101408298 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.102063579 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.10189505 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.101954704 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.100684588 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.101022096 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.101317966 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.101172552 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.100755104 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.101837797 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.101657466 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.101866639 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.101352302 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.101597002 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.102028776 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.102278581 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.102479914 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.102323133 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.10100146 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.104413419 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.101814746 seconds)
  done (took 27.531007703 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.169028422 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.162444993 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.172770935 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.16397032 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.205020182 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.164211344 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.164754391 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.138584173 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.169391464 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.152483496 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.141816292 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.194157398 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.137770268 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.19727529 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.137150734 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.197734916 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.172701415 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.144443807 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.137572812 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.205100153 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.164239765 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.143937704 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.199665435 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.144271378 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.191215656 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.140019226 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.152197075 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.162505383 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.134991884 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.191410843 seconds)
  done (took 36.044184177 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.134984414 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.101344689 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.100977173 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.188718275 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.101106847 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.101670938 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.101609884 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.101372837 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.101785977 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.101498204 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.101279183 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.101590365 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.101588672 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.101288962 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.101487352 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.101219338 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.132044942 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.287669403 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.102237743 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.103200649 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.15188934 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.10161639 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.101439057 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.101351892 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.101514671 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.101539696 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.102028507 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.101464179 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.10111271 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.101217015 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.101316798 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.148104899 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.134589641 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.101206371 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.224325737 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.158584557 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.133498385 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.157099907 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.10207426 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.101935568 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.102740415 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.102283629 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.101753679 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.10170855 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.167458732 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.102277264 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.102582735 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.102245556 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.102004024 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.131947477 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.15869515 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.106604905 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.119695343 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.104365372 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.109601144 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.106775776 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.107865315 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.104444536 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.108847142 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.103784555 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.1046497 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.180056318 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.105055297 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.109655901 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.48356 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.105413009 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.173639581 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.10481167 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.109457445 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.324626013 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.108137634 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.31423188 seconds)
  done (took 82.360042065 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.109049089 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.118281501 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.19457641 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.187080441 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.108722498 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.113232634 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.107587223 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.110899379 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.773591079 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.109254563 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.110160324 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.112624224 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.784658068 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.111627392 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.111067253 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.190506676 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.107808987 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.113379471 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.111425881 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.117704138 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.108566886 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.110505994 seconds)
  done (took 27.1382334 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.144253038 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.125270077 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.149229703 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.113489658 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.110789803 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.110605014 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.145930506 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.126377086 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.148766135 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.149318931 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.153395975 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.143061299 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.113561008 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.150044127 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.152108152 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.127449229 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.153020311 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.126798596 seconds)
  done (took 21.543843946 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.28950322 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.274352414 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.200314788 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.152745263 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.373906092 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.348317921 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.212643217 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.287436244 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.150647258 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.278524217 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.292361716 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.156324655 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.348630095 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.156952452 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.155036447 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.369007802 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.200310598 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.152313939 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.22341719 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.214021379 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.292574976 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.221741765 seconds)
  done (took 28.451151087 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.156748572 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.169051061 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.189380155 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.1947092 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.107467313 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.110673149 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.169867946 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.15063039 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.1264467 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.159282446 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.148662921 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.118125686 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.126295117 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.166365259 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.203190553 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.153347655 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.171324939 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.169359027 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.149252348 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.112992173 seconds)
  done (took 24.157794948 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.113196595 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.108816603 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.116355402 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.111236829 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.117656449 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.109728877 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.112845809 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.121662716 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.114352683 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.38176733 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.113731299 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.112388552 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.110674056 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.117348733 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.111485142 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.117070848 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.109527986 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.116218457 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.11488568 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.115141207 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.3727526 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.117980512 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.113122146 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.111146637 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.114868911 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.11278819 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.116755305 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.124739222 seconds)
  done (took 32.830719502 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.170988356 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.110371685 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.107843424 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.11322395 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.109469049 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.182373701 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.1085239 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.116985771 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.108525079 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.11512067 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.107321132 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.11047714 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.11307486 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.17109997 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.106641407 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.111276563 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.232981206 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.121088896 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.183217894 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.098706121 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.122640224 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.220595662 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.117804619 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.110276878 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.100046767 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.117132874 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.113404114 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.111255626 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.112166151 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.107719549 seconds)
  done (took 52.932577284 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.136142916 seconds)
    (2/2) benchmarking "in"...
    done (took 1.127132025 seconds)
  done (took 3.360928914 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.10795452 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.213251137 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.114625362 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.306888004 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.27754052 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.283474447 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.279413077 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.207855511 seconds)
  done (took 10.890861592 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.112132823 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.210777379 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.234876772 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.107020916 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.108809406 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.362104943 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.119141453 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.882022349 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.755024777 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.02183794 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.133862004 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.632247734 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.076144402 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.381238405 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.219709967 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.893877315 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.224584912 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.455047688 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.993226085 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.21265033 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.690385033 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.163823873 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.113760557 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.106645899 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.111437322 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.086598456 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.82040979 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.688554147 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.132401148 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.207185305 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.72787548 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.149543677 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.107336463 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.265998065 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.199207475 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.111637918 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.164372548 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.19197347 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.108510652 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.11481883 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.564035298 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.690434726 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.284306601 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.238713163 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.172196638 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.110838994 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.113560263 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.106854428 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.314817573 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.758918861 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.073933601 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.033781782 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.247332891 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.108219827 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.495245465 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.217149239 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.112534164 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.038836296 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.506412215 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.191448573 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.481267629 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.153203711 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.026077653 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.213908553 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.107865828 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.331217042 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.922316714 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.756058074 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.712247756 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.199792567 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.391084976 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.256037075 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.111492698 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.110841888 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.018375469 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.409116314 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.12389095 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.10895735 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.110072655 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.112536595 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.257349925 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.203543843 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.877877878 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.244257921 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.318025224 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.453447201 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.210584143 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.112691101 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.650113911 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.976301703 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.203852945 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.489002536 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.38840369 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.244898599 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.985287236 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.321708647 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.144643384 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.114127908 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.895275477 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.472977245 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.242586472 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.112609249 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.47874967 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.13309844 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.130948325 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.110544501 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.698643434 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.212614211 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.157413641 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.132984287 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.111742216 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.115306858 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.723127814 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.206470541 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.131349962 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.617332516 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.077889505 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.406025378 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.400724904 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.240972662 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.344679026 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 4.927433115 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.339471148 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.916826891 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.131854263 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.367851794 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.096957195 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.686634576 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.256384215 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.210298433 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.840694841 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.141693449 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.10845952 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.095132786 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.141726806 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.112369233 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.111322985 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.111983319 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.111398171 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.111384546 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.201663969 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.372849068 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.575708458 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.214322944 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.298568884 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.220399124 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.643188637 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.332811182 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.724176024 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.242215472 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.113259509 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.527084553 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.407774997 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.68962197 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.20971596 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.112401024 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.108832217 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.888150654 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.994865584 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.186805135 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.106173234 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.74459979 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.208462749 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.124982933 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.109895642 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.586667086 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.236070167 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.110700606 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.109506711 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.758389553 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.634194856 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.217159474 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.36674395 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.220648232 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.11278584 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.109445778 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.114800477 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.841661712 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.762410703 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.062771871 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.701798922 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.684012843 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.152636669 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.167067944 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.17258249 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.261573817 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.260295594 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.241409378 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.107880845 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.113480333 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.110186019 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.616609551 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.918513999 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.818830995 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.938319027 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.107839596 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.081911988 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.193849036 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.743952292 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.266096407 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.707100657 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 3.935278552 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.182618732 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.110924429 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.106739555 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.228688738 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.233469794 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.241877253 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.414585427 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.239479742 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.109268324 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.663759629 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.214211996 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.653919451 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.188832811 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.881436984 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.079746573 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.208767419 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.172682828 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.519119424 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.162865277 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.114087353 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.583831739 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.181261407 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.109952995 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.045096032 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.508997033 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.967143698 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.782511364 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.493149937 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.118454467 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.66597765 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.290277206 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.246172612 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.827550684 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.185463288 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.37275939 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.147790686 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.305957258 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.233573272 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.688110884 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.275469121 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.520786866 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.211185941 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.007046213 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.205793856 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.453319469 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.197130586 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.110039466 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.206663213 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.176206755 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.664179915 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.21246986 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.228753799 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.340463655 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 3.860755733 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.180134759 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.376361268 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.152377249 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.948103581 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.026521558 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.41043765 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 3.916225667 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.09567177 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.19452284 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.79941369 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.189940489 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.330497788 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.240288632 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.113062852 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.112980223 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.182595561 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.169377276 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.11295152 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.382851941 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.00131324 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.160990492 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.195940282 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.130244215 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.111513892 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.217554746 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.110158315 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.187633579 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.436959691 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.670913241 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.807009099 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.210310232 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.53875919 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.163008986 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.827017175 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.207223076 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.12602798 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.67743276 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.205152611 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.265493657 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.22530488 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.173165076 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.520945618 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.248299497 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.310386437 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.125846497 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.201334543 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.788259051 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.626085672 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.299646931 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.2558891 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.272769269 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.668585563 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.071402104 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.733945044 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.097782657 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.837893233 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.127162118 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.139649108 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.11273287 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.115954304 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.658962591 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.067727623 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.127323792 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.839293358 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.548018422 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.124350875 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.856674189 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.21346571 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.127855575 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.108800107 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.114419423 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.037546558 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.075656225 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.236738803 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.188729963 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.112433098 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.112476036 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.016369138 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.244271155 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.765052325 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.856833676 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.99168833 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.238673293 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.113712798 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.113326171 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.115604595 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.108125113 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.109942472 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.117485065 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.364576847 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.242730451 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.744106025 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.212735788 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.135115438 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.214406546 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.142944294 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.113014203 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.142428433 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.141653311 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.191689096 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.172701986 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.114857902 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.518997003 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.248874455 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.102720072 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.291311914 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.321734938 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.281534307 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.346154875 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.258317829 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.539809217 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.426291965 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.876835491 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.127246266 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.040837271 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.202694477 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.777152762 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.068586857 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.469958131 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.706735988 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.090843408 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.271432751 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.925447238 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.503425188 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.143931707 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.145323049 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.115190809 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.107947382 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.086024645 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.293728557 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.151863233 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.308859552 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.22122 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.101001846 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.29812916 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.177882641 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.10098902 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.26495098 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.127457272 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.111938094 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.113161612 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.434566009 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.809445978 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.14161349 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.114024701 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.035124314 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.872502605 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.925183018 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.764077963 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 4.9888935 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.238879091 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.11106434 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.287574936 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.157459327 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.596232163 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.226104648 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.833700027 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.405171836 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.15565552 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.162807689 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.467238978 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.702408954 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.353585015 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.195117873 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.114437269 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.364764492 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.006242949 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.242677719 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.00650188 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.333819709 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.653706751 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.552815679 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.234871901 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.189998357 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.028181493 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.679764309 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.09328398 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.135732461 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.896521735 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.242524902 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.340205055 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.922261782 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.288167004 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.247227191 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.771014232 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.753028333 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.24248255 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.660346899 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.240266575 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.113664831 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.56971213 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.132259666 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.150626069 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.197537913 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.111865828 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.133917248 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.67789842 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.679849247 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.210734829 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.155887393 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.111678187 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.582048299 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.932314534 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.20898717 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.12696836 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.113753862 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.260597806 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.252843267 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.114566094 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.522369373 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.714492876 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.24243643 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.623085943 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.15003648 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.246378722 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.261933632 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.397590817 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.239444038 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.174153412 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.108826213 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.114227249 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.114304127 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.408922823 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.240484105 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.108904833 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.649329542 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.246371022 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.687068855 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.172640434 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.253784262 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.148234361 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.526758269 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.248528979 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.622916852 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.988164176 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.199454298 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.416234404 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.157450304 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.14717309 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.707804272 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.183122484 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.113621146 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.930711968 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.27447342 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.298589457 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.372692785 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.273176949 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.163900618 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.695264002 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.187471066 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.587923657 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.222651144 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.109654535 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.621547353 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.128339072 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.391000102 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.229709881 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.454738771 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.191034019 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.479512046 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.322645936 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.196020466 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.117277577 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.110867734 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.009032839 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.117696785 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.66760757 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.014379844 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.453319223 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.206170375 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.998220827 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.588924821 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.606936006 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.391497403 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.156186931 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.284929993 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.270409951 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.027485743 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.321118966 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.13622745 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.238620297 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.200841499 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.790619946 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.136141793 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.108711036 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.409688511 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.234618813 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.114094309 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.115082633 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.031792711 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.777310432 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.183057777 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.262465524 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.172230853 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.115996699 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.654931061 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.353741464 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.144602298 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.117003959 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.110903657 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.861870569 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.185717024 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.112982696 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.340930044 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.225125886 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.308739824 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.864575572 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.516607573 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.202504109 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.112357105 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.115740994 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.630773027 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.536061897 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.236313596 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.474476935 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.134841949 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.63768092 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.079438339 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.46341912 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.600622331 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.982209685 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.19771319 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.117697076 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.082419215 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.71968767 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.094233603 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.87273018 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.454482668 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.16623722 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.803427108 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.978583974 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.13804693 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.16975343 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.129156232 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.116345592 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.109088489 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.114431379 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.622243064 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.088825999 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.129388251 seconds)
  done (took 1404.264804082 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.39598866 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.113541715 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.11564306 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.112930149 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.116639275 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.111217272 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.115896618 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.114845902 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.117295421 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.110046093 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.113535271 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.114997817 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.114922555 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.398584854 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.118475149 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.112685987 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.11104037 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.118915653 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.113091424 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.117361746 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.109874908 seconds)
  done (took 25.068341401 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.112743021 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.116323031 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.111649859 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.110482897 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.118710206 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.111830871 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.115370279 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.109384071 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.114801574 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.114018816 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.115804437 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.109114713 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.112567072 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.11693882 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.115052835 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.114185674 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.109922983 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.118621988 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.111936458 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.118343396 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.109405769 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.115360065 seconds)
  done (took 25.607094168 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.113765074 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.114063523 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.712136575 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.201068267 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.112138798 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.111884699 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.113271931 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.285528996 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.069337075 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.027153142 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.533288274 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.137632516 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.137324424 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.246138357 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.201429277 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.114279165 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.234713358 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.112926834 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.116441627 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.108819565 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.114513882 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.22953592 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.207189435 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.118848148 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.87918991 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.24498821 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.116931712 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.109255476 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.114636781 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.108065399 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.197641315 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.126152293 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.849249369 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.751854546 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.337703205 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.035397421 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.211629756 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.134815222 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.108320015 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.113446421 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.327421197 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.877882854 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.13427251 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.10937999 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.361941141 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.190224296 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.115823905 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.481232209 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.136601716 seconds)
  done (took 87.752523796 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.122321796 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.246953093 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.17692599 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.11265586 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.241380391 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.112923841 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.168195855 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.114052514 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.115430426 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.112961823 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.246765784 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.27410069 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.113549133 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.114306163 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.183872139 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.110453271 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.115231316 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.114274951 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.115093501 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.114687371 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.112918694 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.170699373 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.234116648 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.284370267 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.118365257 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.111519294 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.114265019 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.114875881 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.270855819 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.1136932 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.116841861 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.113520076 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.246132369 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.234954027 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.118906806 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.10961144 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.244598527 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.118134735 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.109628345 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.114384214 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.114549214 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.115581624 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.161849221 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.251872975 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.120483282 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.214976268 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.115394004 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.11485225 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.264490647 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.116960003 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.113482199 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.294594546 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.114357165 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.116458221 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.11095201 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.235101618 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.115972891 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.113533147 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.109880654 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.259320407 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.121995805 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.109072723 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.27382237 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.116250673 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.109786679 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.293482365 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.225090971 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.117150692 seconds)
  done (took 79.849463025 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.11500339 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.111951871 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.113321083 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.11679163 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.11413747 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.113756475 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.11179739 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.11770325 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.112330128 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.115236271 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.110159102 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.113248355 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.115289405 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.115263315 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.109274736 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.110123027 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.118483172 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.112602641 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.112803187 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.109767744 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.114679396 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.115273265 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.117651221 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.109174243 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.47781302 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.115333335 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.114311806 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.112280345 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.118532411 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.110047204 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.478569325 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.115387534 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.116336715 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.115777737 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.4742554 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.116046353 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.110988501 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.114980569 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.112928025 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.118872019 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.109413661 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.113609539 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.112720961 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.114251503 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.113190408 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.111815731 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.114080032 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.475868911 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.113075216 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.114469595 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.111006848 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.113973622 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.115018317 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.114700164 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.112377869 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.206036463 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.114797957 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.114948402 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.112215095 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.115967228 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.114049308 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.210435066 seconds)
  done (took 71.799313914 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.117862053 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.112093949 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.115701475 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.114881592 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.113783907 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.116748603 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.113850169 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.112307979 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.110534219 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.119160106 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.112784608 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.11525525 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.111733687 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.114012647 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.117483478 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.11806056 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.11108822 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.112564616 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.118881137 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.115162043 seconds)
  done (took 23.394007243 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.11122242 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.115027697 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.117026693 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.118896074 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.110058021 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.114559534 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.116799419 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.114532492 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.114878735 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.112022542 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.113703018 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.113663355 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.120212653 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.11118348 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.116525499 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.113032951 seconds)
  done (took 18.93708483 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.115692999 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.112762287 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.112984645 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.114188798 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.119069009 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.110228396 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.118535633 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.113115311 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.117156857 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.57327189 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.11494654 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.121123658 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.113538666 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.113741161 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.110023179 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.114621676 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.1164903 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.119366803 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.110334509 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.111444069 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.691632331 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.120995791 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.110219868 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.116301218 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.112829075 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.692450713 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.114576662 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.11942911 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.11487642 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.112135717 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.112182389 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.589362076 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.122342925 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.115578306 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.113088444 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.1131495 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.111912593 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.115407186 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.118735482 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.109654511 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.115227475 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.114542101 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.114000053 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.11370463 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.115518259 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.112745293 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.11524238 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.579592162 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.115605997 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.115268779 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.115448371 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.116052554 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.113408549 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.587867692 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.115514924 seconds)
  done (took 65.445047057 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.158090932 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.170336727 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.119068753 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.115465964 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.178567699 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.157159442 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.159933552 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.132185472 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.154024584 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.116217896 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.178437466 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.12821013 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.156719048 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.171724808 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.172724027 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.159648006 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.115879408 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.19100603 seconds)
  done (took 21.840723556 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.115475222 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.114899777 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.113947893 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.112181922 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.119955082 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.115512034 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.112654223 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.114492696 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.113361851 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.116598447 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.118029766 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.112738691 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.111584206 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.119544037 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.115301036 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.114709987 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.11291407 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.110310846 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.118024282 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.11932401 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.110386162 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.114874158 seconds)
  done (took 25.630460147 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.145772418 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.159823145 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.113457067 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.115056521 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.117300017 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.136110482 seconds)
  done (took 7.892531553 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.170460154 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.111491804 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.153263835 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.162623502 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.118969724 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.11561493 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.112752351 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.120184294 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.115131692 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.419750242 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.120702608 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.115357221 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.109900131 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.121078879 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.115409121 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.110357938 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.117695909 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.11006539 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.164510911 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.197032133 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.116942279 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.115898714 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.109870527 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.117001183 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.109352999 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.113629332 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.112766919 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.430816847 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.118479953 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.11278391 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.11663661 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.110760109 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.119465654 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.417328379 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.165310636 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.117357739 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.109750688 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.200334681 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.113840493 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.113547846 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.15887582 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.110487689 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.11370884 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.11200958 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.116260669 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.115363527 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.121327581 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.110904413 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.116768288 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.430843352 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.109134459 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.118807182 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.111197688 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.114398057 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.108954936 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.423600313 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.425643501 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.113228716 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.120712556 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.4245459 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.111773384 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.122413189 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.115741992 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.422706996 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.117391096 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.110795144 seconds)
  done (took 77.630592075 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.115347338 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.152783838 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.110052919 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.432484736 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.116500035 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.113277737 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.114067573 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.116618394 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.110055152 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.172649948 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.199034939 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.11260888 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.112721896 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.115188432 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.118359413 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.112672943 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.118022899 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.118456581 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.164468457 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.425606326 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.118471581 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.114272942 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.113774964 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.111344742 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.415249986 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.114820721 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.116440343 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.109450451 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.117308961 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.119283935 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.110401909 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.11924931 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.110390824 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.150680714 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.113901655 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.116329902 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.111699293 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.115367258 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.114432165 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.110514219 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.118797712 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.195655053 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.119675231 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.11372004 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.422255425 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.121414465 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.111749365 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.180058693 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.116734692 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.169285802 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.422192243 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.413994284 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.429921411 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.119165998 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.109813531 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.114364093 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.115937304 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.116674872 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.11002051 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.114539883 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.119179422 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.110549925 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.429855698 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.116945695 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.116709937 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.115006204 seconds)
  done (took 77.62380996 seconds)
done (took 2361.072657178 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.145148889 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.220645423 seconds)
  done (took 13.466029613 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.113452798 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.114770331 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.274000997 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.118290607 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.127760165 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.20950681 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.121173009 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.122244678 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.118982108 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.197230009 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.11954485 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.244408885 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.222427311 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.116768808 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.145408454 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.121303863 seconds)
  done (took 39.64645174 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.098293303 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.279974563 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.058277713 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.838493891 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.270991487 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.004958842 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.424305024 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.337993028 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.406797336 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.565846179 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.374333224 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.610646082 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.925930754 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.230688968 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.734161176 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.798450897 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.895163054 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.943601884 seconds)
  done (took 59.907062049 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.110555972 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.254000513 seconds)
  done (took 8.48053303 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.1140673 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.141954091 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.139144431 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.123546031 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.127976775 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.14306251 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.150093264 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.145572282 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.134492137 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.141234638 seconds)
  done (took 62.480714797 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.033042681 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.773351024 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.450882815 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.683896078 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.620675131 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.508840386 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.273302137 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.475016966 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.201091522 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.101357116 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 4.931798345 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.545459806 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.843719374 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.051831922 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.609567269 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.413058848 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.685008978 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.645240946 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.421206139 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.41621551 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.339609035 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 4.830303104 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.574353363 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.965134234 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.119715473 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.173204852 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.235928266 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.217204417 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.196585091 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.997858291 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 4.934793786 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.143771308 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.074250579 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.121487493 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.041345461 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.759315314 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.761317128 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.321073557 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.432162341 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.409977018 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.498104769 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.361971866 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.242338464 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.345775551 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.342928774 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.291384059 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.05134797 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.349799478 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.209257668 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.226369182 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.519533771 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.301183481 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.253688386 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.229109828 seconds)
  done (took 149.672062963 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.10486949 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.519096105 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.262298136 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.102921737 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.547877773 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.32081197 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.851756369 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.608515396 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.10962943 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.327306903 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.27942267 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.250194371 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.102833288 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.117247556 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.113476028 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.112673372 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.303746059 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.522800407 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.106476588 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.113710769 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.326224541 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.362171107 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.246767426 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.108236364 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.283334999 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.363178284 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.495277247 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.244728891 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.487944939 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.106469604 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.512056515 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.111706907 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.115480823 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.008422428 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.483541538 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.424088844 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.536808701 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.109099909 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.842157515 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.10928597 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.740249093 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.306747971 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.434458349 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.247024177 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.358696346 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.351178421 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.721026923 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.107822128 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.888264445 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.289001987 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.332925557 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.328677399 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.395867469 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.108085634 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.670703996 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.111124038 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.11550284 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.37175131 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.263207751 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.240664105 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.106367951 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.111928924 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.114053292 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.359706605 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.114031659 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.232149103 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.108453855 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.111072328 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.238562255 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.232159613 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.277375864 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.354177574 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.35901994 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.302696025 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.113242701 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.348932704 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.496615719 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.351855709 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.109002032 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.1102476 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.502415805 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.541276604 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.276205515 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.348746391 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.416920549 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.412131508 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.684518567 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.11067156 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.341952708 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.275737973 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.45795873 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.374330214 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.454787975 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.041396667 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.111868297 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.110199087 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.363925713 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.247279796 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.111273779 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.629393362 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.400003488 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.217426983 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.298294905 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.606000105 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.220116785 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.105429555 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.68045298 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.106492025 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.339398661 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.404064687 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.122737009 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.11189197 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.271664508 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.048597553 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.114307287 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.518233535 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.49879904 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.11201838 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.271676281 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.113719191 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.366818175 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.092288231 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.350822111 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.045053719 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.393866485 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.297846466 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.388176824 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.110554546 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.377514496 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.381091328 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.521138359 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.432648958 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.109903527 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.11610685 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.437976579 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.107898098 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.109484441 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.302189855 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.039112719 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.290603986 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.103732542 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.482344503 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.280641081 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.465533733 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.118799747 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.35084735 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.357537247 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.467688162 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.122946159 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.249654995 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.101549204 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.268127998 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.278696531 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.111134876 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.111149821 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.938008289 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.114070937 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.291294408 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.340604848 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.757874661 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.579594325 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.4717694 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.102144175 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.593963758 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.312020088 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.555950679 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.618371359 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.289174482 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.813840638 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.326335716 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.111565411 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.358126067 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.412276178 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.110850727 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.111718592 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.870960993 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.234840125 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.116002502 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.277975664 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.407939311 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.526750725 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.32419803 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.108324589 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.453159515 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.123883196 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.289749174 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.614385956 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.440130471 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.115146035 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.112353712 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.111977484 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.118036736 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.329499998 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.380197649 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.800443664 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.266495779 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.409287212 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.334167972 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.421374501 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.574100209 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.125318279 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.457661957 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.106857345 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.548336974 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.11592027 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.263998282 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.43605004 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.111179686 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.332821739 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.465319174 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.294642863 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.554497267 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.115963248 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.112966346 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.722289775 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.2936654 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.582762306 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.110122297 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.221941553 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.480451771 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.236846056 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.336174477 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.33865022 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.109538057 seconds)
  done (took 730.064493535 seconds)
done (took 1064.820737753 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.102580669 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.112526924 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.111770864 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.109763314 seconds)
  done (took 25.537247293 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.94087936 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.926159161 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.203078734 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.113120091 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.267922632 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.342308818 seconds)
  done (took 10.906557505 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 4.614479258 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.109921685 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.116495696 seconds)
  done (took 17.943728375 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.422500548 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.600528794 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.294247853 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.208797221 seconds)
  done (took 6.636542648 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.115277532 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.115589569 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.109134007 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.111409796 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.110842635 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.109309188 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.116678547 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.109743963 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.114406652 seconds)
  done (took 11.118388539 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.513274636 seconds)
done (took 77.764211927 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.537088675 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.397359486 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.112449024 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.307648209 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.241981029 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.435295321 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.227598033 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.128331061 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.415897052 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.561416389 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.607122285 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.360262862 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.591378549 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.622140741 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.328312813 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.135523045 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.131649617 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.176181662 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.799497449 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.322155169 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.795762272 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.245320377 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 6.10147816 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.140218017 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.070447396 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.186915644 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.364506799 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.103100127 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 3.620269527 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.135099417 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.207744708 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.592865009 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.341138358 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.399791288 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.209118089 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.033483366 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.552045021 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.112568812 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.297213192 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.691560016 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.374360305 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.192719827 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.104681935 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.411292665 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.535368008 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.1294079 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.06738119 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.275866706 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.769611106 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.29956078 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.483936597 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.115969092 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.746683579 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.189141616 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.191978226 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.099431153 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.106376722 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.588495528 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.330818584 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.377469036 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.131348374 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.103763218 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.076171153 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.139221687 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 6.102583409 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 3.346356049 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.552757302 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.205212995 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.585369599 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.138840164 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.127658184 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.140798097 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.82800385 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.181946348 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.101045301 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.127749074 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.399430233 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.301497875 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.110837262 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 6.194240995 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 3.318065483 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.109265555 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.326311429 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.402704333 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.272565397 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.481165439 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.605323234 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.514660877 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.711527222 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.117533566 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.468185821 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.719085169 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 7.404622967 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.113645915 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.184630019 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.302279076 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.643935283 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.601762115 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.245961016 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.777203994 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.140219343 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.126108758 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.634714285 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.471910866 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.982290596 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.149597377 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.251514428 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.103479792 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.284405102 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.101720789 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.585150977 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.6424931 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.11556349 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.173374243 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.568528513 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.112262306 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.398542077 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.546134619 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.235973719 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.110025432 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.341957241 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.115885971 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.234284302 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.627266647 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.515706166 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.312185036 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.110153955 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.63054861 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.112875931 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.357921509 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.116394565 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.750808104 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.660651741 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.140267701 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.364878729 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.2358081 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.099372146 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.291481662 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.165386269 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.249423844 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.407330284 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.384275305 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.237659627 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.103355005 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.427423501 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.39068642 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.353272051 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.404828218 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.276134866 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.419972795 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.194601773 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.128106978 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.245180985 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.524469562 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.715180157 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.797404575 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.378562971 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.243037158 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.682931485 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.431801738 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.959822747 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.213665803 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.159960021 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.117740545 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.127693746 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.176486973 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.101831374 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.110243853 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.343817938 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.474032575 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.886137473 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.005023721 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.101535116 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.398895987 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.246083558 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.08087415 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.74424822 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.110722115 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.55387506 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.570026673 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.258058683 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.137853258 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.103861392 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.23024762 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.943674722 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.150803603 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.451186388 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.777766643 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.595289105 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.461015937 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.340313909 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.14822295 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.547001787 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.355525795 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.388958664 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.313624307 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.744378057 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.191077234 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.497120519 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.247170594 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.393240234 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.112689647 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.410938013 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.323036164 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.590591341 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.418633583 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.347369467 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.338433926 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.444426842 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.112277092 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 6.111285454 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 7.941902451 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.359826363 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.142070511 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 6.100357678 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 7.857482678 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 1.566078132 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.025248558 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.239869959 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.581358212 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.235027134 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.29879422 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.597353737 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.133054306 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.414967369 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.333225028 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.293079615 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.313371658 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.145737775 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.253498768 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.283272139 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.25178615 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.367889903 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.092834651 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.492141198 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.104790654 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 3.057827198 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.102661969 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 1.776302353 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.148046938 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.120785103 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.447878 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.315674982 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.425966025 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.353463507 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.272150781 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.102898972 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.207503004 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.699662425 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.022559826 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.653519131 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.056096165 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.140669562 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.101833666 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.635596599 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.532403535 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.178802279 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.246686997 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.743812732 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.143713256 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.309778671 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.11591817 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.114639507 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 3.000982219 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.239938696 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.356661549 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.830941937 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.111489912 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.494971076 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.197512115 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.650104514 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.627525167 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.160821572 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.236420597 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 6.10730864 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 4.96550072 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.523869328 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.140675473 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.257923633 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.428219968 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.230401806 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.230586462 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.103554734 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.156781322 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.717284347 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.47969621 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.600479359 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.149113893 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.507604613 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.113738903 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 2.571061509 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.133540311 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.193300077 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.536371593 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.281723304 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.453670265 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.126011611 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.157216307 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.361538382 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.13921188 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.104585789 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.263538523 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.216119101 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.730700882 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 2.901432988 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.359640539 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.04779005 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.349471397 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.112594445 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 2.164785504 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.244927363 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.194646215 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.695756162 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.602098098 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.114613192 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.386829291 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.108191772 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.544903919 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.137741905 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.127386658 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.235452349 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.208317403 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.100807224 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.140217584 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.288969025 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.606228188 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.264992982 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.0967187 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.122295278 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.496100078 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.236114614 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.421016765 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 6.117489091 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.12796552 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.312193009 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.782966082 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.350562345 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.141237432 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.330249169 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.116157166 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.752695246 seconds)
  done (took 868.922067939 seconds)
done (took 870.244888822 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.151862698 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.490743397 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.316316516 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 1.989860549 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.91571281 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.760306684 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.336057611 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.341720456 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.195188273 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.328488582 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.045417492 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.915992361 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.209423964 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.225721801 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.188950472 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.213872787 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.285106054 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.355395595 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.228226785 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.049784721 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.478225609 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.05529266 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.542740282 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.411590199 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.482097921 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.21940449 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.174930719 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.46695348 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.468430314 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.302031834 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.29395043 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.314872157 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.943041864 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.361612146 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.19094519 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.193540546 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.984072174 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.209955592 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.139918395 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.191133565 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.485104739 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.238614252 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.822229102 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.957264739 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.889167426 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.532591467 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.989213084 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.222769141 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.208919356 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.292727083 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.143016127 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.133949393 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.466303975 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.328508529 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.946576379 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.941507051 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.4672402 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.981954122 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.855909546 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.29279048 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.484172921 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.2114351 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.288613966 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.345359506 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.232878098 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.404265703 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.52829431 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.141761328 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.310987052 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.336710118 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.358914913 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.337263024 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.229402901 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.251047276 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.234154316 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.331833474 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.734746499 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.314228278 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.906165175 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.218664089 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.060772524 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 1.991186563 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.067848839 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.191697201 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.151669143 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.909354039 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.93033268 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.061397094 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.227457395 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.309941471 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.068116644 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.315913432 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.571060009 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.179843227 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.153392581 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.311402956 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.940189427 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.136968844 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.08475908 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.313885442 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.90101442 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.179077859 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.138227227 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.194175174 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.213928637 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.13368683 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.175635318 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.535329297 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.335320876 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.280948806 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.485924031 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.235991102 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.341943437 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.228224323 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.187171003 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.895351939 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.398396985 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.992060633 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.139123509 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.785840706 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.385792733 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.193505745 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.485764072 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.413189608 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.156138308 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.201574204 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.213974734 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.05176444 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.218714481 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.20641596 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.309719975 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.565871774 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.289267368 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.99161114 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.337963618 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.786268769 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.352849421 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.338917273 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.191095633 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.010813953 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.206378136 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.066576731 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.411338662 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.489770547 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.35081243 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.41389408 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.224510169 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.360416224 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.142807967 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.225050022 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.333785852 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.220400618 seconds)
done (took 241.40031292 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.45354995 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 3.427593978 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.400227617 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.331959279 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.494020613 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.399301856 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.183709694 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.555241003 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.162012935 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.530876077 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.313894423 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.230499575 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 3.455475279 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.333668099 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.464128699 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.394780541 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.166349835 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.363550096 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.562424123 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.516455245 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.12701949 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.32347849 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.255663627 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.510821589 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.103433301 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.12441325 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.419568809 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.24132543 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.38052485 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.10888563 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.13379985 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.375040128 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.418130973 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 3.216863315 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.50282433 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.10500059 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.447516639 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.17056987 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.372120612 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.447839391 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.302120404 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 3.891537249 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.119674606 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.149965494 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.216198854 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.38572361 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.178547939 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 3.343850827 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.109748258 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.107266092 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.374127908 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.150335722 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.239362335 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.374081429 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.338444305 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 3.202467941 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.49622793 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.512040934 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.522342124 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.41382843 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.367189624 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.552713564 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.502925489 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.235273398 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.129939743 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.411394403 seconds)
  done (took 125.258061837 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.506459856 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.445709014 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.54886176 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.424429124 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.665606088 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.573831468 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.50141821 seconds)
  done (took 13.773172732 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.170530176 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.156657966 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.402749957 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.364613921 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.162163122 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.287953213 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.251706818 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.125850698 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.408190036 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.204807401 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.470310389 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.405944162 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.066993184 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.117458752 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.252981187 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.499660097 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.147235735 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.229494002 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.22428235 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.420876646 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.124294179 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.109297226 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.31659989 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.14089791 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.163314296 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.202835682 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.158222158 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.137262715 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.168320584 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.137277197 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.165927662 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.269300991 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.15661413 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.101800574 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.151549441 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.473637448 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.163541272 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.164810338 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.294094354 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.108565167 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.149424388 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.164011071 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.296482959 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.17047533 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.13720896 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.350971951 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.14476742 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.169384135 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.142858428 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.151631143 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.34968237 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.155865601 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.145196074 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.081649392 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.375385951 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.111818466 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.228132406 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.149234802 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.162811516 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.221341914 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.159249578 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.416129096 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.402821335 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.144450255 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.38015244 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.441698718 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.154901856 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.141974313 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.143575278 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.380290479 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.156149308 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.406905939 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.159412256 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.206864535 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.168250635 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.290713874 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.347822043 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.953612728 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.927528132 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.069832461 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.510509451 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.142823017 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.470443739 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.115771654 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.080940222 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.148964059 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.162848618 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.848896885 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.073929352 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.164700711 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.471135487 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.146791157 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.217342328 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.20645596 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.139233743 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.221458227 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.348218616 seconds)
  done (took 144.100927624 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.265414026 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.338087698 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.49954242 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.07506365 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.152493149 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.361187026 seconds)
  done (took 14.796265049 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.584987366 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.955514633 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.185315567 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.178460369 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.216932907 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.113724148 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.116637183 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.313792742 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.29399382 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.169805171 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.112914133 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.116453925 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.112444224 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.299379313 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.117647386 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.167614411 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.112148858 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.182978464 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.162234427 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.225099127 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.313800927 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.213070612 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.225453652 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.831859298 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.16294956 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.170019334 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.873128855 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.172312625 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.169144213 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.525203855 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.314875515 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.114154983 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.83673613 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.30026737 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.877509593 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.838407554 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.296274402 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.128312813 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.161726971 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.11585241 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.114734042 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.225630316 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.177164557 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.118516675 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.48539493 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.740381556 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.165679442 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.453961869 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.115472807 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.116856467 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.113894621 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.177609076 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.112731762 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.117971403 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.501495994 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.692024299 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.085125457 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.126891383 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.213194615 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.833303038 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.25202148 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.12016254 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.553256217 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.078746874 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.103114475 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.118626637 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.833783791 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.307402574 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.230705797 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.170308127 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.117814252 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.184644663 seconds)
  done (took 113.288140175 seconds)
done (took 412.330555042 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.357794121 seconds)
  done (took 7.464102864 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.218801369 seconds)
  done (took 7.418537154 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.108785348 seconds)
  done (took 7.233030622 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.125570306 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.160592602 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.129348018 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.140072116 seconds)
  done (took 25.703654018 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.734557142 seconds)
  done (took 7.847194792 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.101606617 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.127265248 seconds)
  done (took 13.44168719 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.219514486 seconds)
  done (took 7.345860861 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.319189037 seconds)
  done (took 7.445111576 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.101634531 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.142419122 seconds)
  done (took 13.385947597 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.101064845 seconds)
  done (took 7.215563702 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 6.318358778 seconds)
  done (took 7.468173683 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.115082923 seconds)
  done (took 7.34719052 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.126355031 seconds)
  done (took 7.238685594 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.530800668 seconds)
  done (took 7.645938391 seconds)
done (took 135.308181295 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.1020226 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.114040143 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.11563978 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.113280197 seconds)
  done (took 25.546723673 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.44214398 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.437607714 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.418779241 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.492361562 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.384970751 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.381411601 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.44340525 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.441246096 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.381317771 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.486751243 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.44095537 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.594541652 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.488323312 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.419186914 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.420912392 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.487839305 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.490354497 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.442304204 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.381560515 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.415773892 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.487369845 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.488691006 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.85784874 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.854499525 seconds)
  done (took 36.695493705 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.325005244 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.563752171 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.272222153 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.432318551 seconds)
  done (took 6.701262494 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.142733645 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.491869739 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.475243091 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.531190417 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.476389687 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.283262816 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.472341075 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.326317022 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.267357733 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.252575345 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.737275492 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.267206765 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.277131508 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.528623416 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.285542227 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.114310336 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.11578057 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.292921608 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.495110106 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.315513001 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.380511036 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.473017931 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.469906982 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.474247145 seconds)
  done (took 34.053998976 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.871194611 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.048466756 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.477299248 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.033420991 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.829499902 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.914564912 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.399933963 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.624917027 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.383578557 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.358413252 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.855640522 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.912079801 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.260632224 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.005631341 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.875889655 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.298853372 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.296608645 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.964146336 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.529608667 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.413454484 seconds)
  done (took 38.45857078 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.102698772 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.374937486 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.343926047 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.285852001 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.105931856 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.112226444 seconds)
  done (took 26.433437036 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.478255652 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.255410244 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.403785148 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.379465655 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.278428773 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.244827447 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.623210898 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.341380591 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.864750018 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.765687045 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.527510166 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.543231894 seconds)
  done (took 21.8225664 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.10221888 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.152993244 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.113407566 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.283121997 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.911215093 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.990040905 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.434109529 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.105401226 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.168852835 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.314195438 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.976160192 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.283843703 seconds)
  done (took 39.960780463 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.316435762 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.27928206 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.413646662 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.146594332 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.4987626 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.15461409 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.479162444 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.070150411 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.703976071 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.874578375 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.652519535 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.123877708 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.643781203 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.082819791 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.110663368 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.404398816 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.948916675 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.608927956 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.420539622 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.145617273 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.077594548 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.255122641 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.11493272 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.53603817 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.391214471 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.112273414 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.31328278 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.354439364 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.106100629 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.30854598 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.110217765 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.655449707 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.297839531 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.415094543 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.498878711 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.352475269 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.118116622 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.11208578 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.70048921 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.411491977 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.255283722 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.27484432 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.103122527 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.132108856 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.366036528 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.89578351 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.309871803 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.657247061 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.091523104 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.365876093 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.868278081 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.001471376 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.566914954 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.810326373 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.253443332 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.395295545 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.2757212 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.109795809 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.432993246 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.289570837 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.316431874 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.118137497 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.329112298 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.079574389 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.482193247 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.314670075 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.240028759 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.31609487 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.431122556 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.403339064 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.481951319 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.360756082 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.804753456 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.238498959 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.679555701 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.023960109 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.47656106 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.112267186 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.835690878 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.643340907 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.09185128 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.226089143 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.793890715 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.076013526 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.108648057 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.281753836 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.978748647 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.08483927 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.123423259 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.305327436 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.360193612 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.234719458 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.248366462 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.301915001 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.818944331 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.089374912 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.1129818 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.365493495 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.078038357 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.675459498 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.106252863 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.145545554 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.111562758 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.741548787 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.484875364 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.891243035 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.892234836 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.730454144 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.411746114 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.713623187 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.264109402 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.941346059 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.486012108 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.439118786 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.103683168 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.812992439 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.113087746 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.35112421 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.327867732 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.107947938 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.089776627 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.5359426 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.301319259 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.105299667 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.391153723 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.105548422 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.263615359 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.105523115 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.673654641 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.540623203 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.35465901 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.560345949 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.20300492 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.258789522 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.074824302 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.259891137 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.546765718 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.175421137 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.476209841 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.414404197 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.293888564 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.680095132 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.10401005 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.971749654 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.464284446 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.332933874 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.452841221 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.766375885 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.267992323 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.116524732 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.102119627 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.248665222 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.124681947 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.6547423 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.113958835 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.856234988 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.09338604 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.407823239 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.104019512 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.276670308 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.112341756 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.336240322 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.528646238 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.272192838 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.294116855 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.39480588 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.284238385 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.103309455 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.08802725 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.383330968 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.329809644 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.566973841 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.343885715 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.531090558 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.605431693 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.597898926 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.304722415 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.49877495 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.893507543 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.360409781 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.356815552 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.148851462 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.08429943 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.65406782 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.334718803 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.395540807 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.341539485 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.894197487 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.891836117 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.869382808 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.204854307 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.121046962 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.087689308 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.26110411 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.481245222 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.108351676 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.604035101 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.187540724 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.529979683 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.593396006 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.138104857 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.404758531 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.723577533 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.676215873 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.469483113 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.438812347 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.088724075 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.977348813 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.705461655 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.275321686 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.122180567 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.531917526 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.741658479 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.299205768 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.110851257 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.461218737 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.988827064 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.910004486 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.617698911 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.667558776 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.109049965 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.273877748 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.49401881 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.116139964 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.949619745 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.442397161 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.311563077 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.824585467 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.542472506 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.328074032 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.438335761 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.10721874 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.114068414 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.394049002 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.423495299 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.390021734 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.550906179 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.335036495 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.786980534 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.209967255 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.736349413 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.283070652 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.137097343 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.456886209 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.237058656 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.933065413 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.298952878 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.897247794 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.408541039 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 4.666271813 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.412955876 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.109877301 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.466428386 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.6785468 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.115458991 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.025580964 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.231840033 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.111134589 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.325188905 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.864309185 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.150129615 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.244352131 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.351158096 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.348428815 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.299229122 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.480220471 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.500337916 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.423380596 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.084937378 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.2620086 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.199218675 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.405680079 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.103593231 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.402568953 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.812336942 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.534512407 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.060337131 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.588883246 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.475465023 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.140890058 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.466861166 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.317963093 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.393574026 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 1.993645066 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.66684647 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.116184422 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.254132982 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.083159579 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.707841999 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.562667089 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.477128053 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.465802735 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.128918319 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.507231287 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.447099728 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.315537603 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.115268092 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.372655974 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.105320138 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.43579218 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.103673189 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.095982274 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.573464786 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.111304924 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.983060975 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.33942212 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.444522403 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.266997901 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.624661454 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.261328123 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.270626869 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.876559565 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.286602047 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.250816907 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.453646129 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.730582935 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.265362767 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.121424377 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.329789279 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.749668618 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.46735331 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.675443553 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.60871148 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.39651699 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.890135498 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.109591986 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.317049074 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.266012834 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.108666982 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.33645474 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.47777616 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.133352178 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.326959331 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.414033654 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.403692902 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.659715998 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.089166469 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.806671154 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.338859968 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.633409648 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.66059969 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.899854281 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.357095062 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.37586311 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.364573105 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.227567729 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.279469867 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.304330315 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.828933127 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.146126181 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.98973162 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.897151706 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.183063662 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.641809475 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.121060426 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.965758706 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.278350891 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.349510401 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.305064391 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.246249697 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.073769501 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.859258037 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.896038497 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.397103189 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.28293557 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.29579585 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.164524278 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.3617258 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.616827357 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.420360789 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.885332681 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.472541566 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.305882869 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.078303644 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.113078566 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.818013407 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.465600315 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.124794698 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.39765118 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.428632554 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.137167373 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.176038396 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.122329998 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.295858525 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.00272116 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.8396261 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.345540602 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.499404494 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.542320608 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.110684557 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.895226386 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.310021633 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.472733791 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.485741268 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.929849222 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.493315304 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.408412567 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.25868549 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.083650903 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.305413748 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.119147557 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.306495772 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.9151761 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.41896526 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.122285374 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.047716657 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.750178302 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.111772508 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.11810508 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.537465482 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.333859113 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.303119501 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.111904185 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.866999421 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.500953194 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.25495265 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.090192444 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.874528555 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.078329852 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.311821854 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.188105095 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.267355134 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.955145498 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.116084564 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.870691892 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.533367286 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.225525411 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.278166539 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.081150128 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.710047643 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.253549957 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.547765846 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.062030751 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.359999035 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.62312716 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.297714397 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.110064742 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.444019283 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.246116008 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.411324654 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.381690844 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.474206498 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.503814317 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.376217315 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.372517118 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.497776879 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.357021095 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.360267241 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.084362003 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.210303456 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.119246822 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.488915935 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.472740869 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.105681428 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.641674204 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.360362573 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.170515302 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.362365441 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.298805035 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.760597486 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.324924368 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.160491589 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.350970736 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.159797171 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.421932129 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.110286606 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.309300307 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.109337095 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.151821934 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.313668836 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.354718655 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.494430673 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.425882958 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.000677744 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.270796837 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.799778781 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.925570118 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.642517604 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.113217962 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.788671259 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.575173571 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.10839666 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.477959061 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.723117422 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.298359355 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.805580631 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.305992598 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.142073006 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.263854149 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.616359539 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.122635574 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.780060724 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.483820539 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.109669602 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.471869249 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.149583993 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.274015799 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.896611384 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.610979971 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.11055015 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.721590049 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.475684215 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.67186781 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.813124328 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.124546734 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.284609655 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.686638214 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.093521964 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.114228038 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.279376561 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.646665877 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.115843997 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.655242052 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.149722667 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.350742548 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.113556055 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.259075261 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.111063878 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.31740374 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.711177264 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.358436537 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.386370596 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.305818351 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.113051601 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.893805029 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.810317312 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.211425997 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.344299353 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.10432704 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.499893796 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.824540061 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.113353647 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.748237271 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.292191268 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.083803179 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.495518243 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.370956693 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.135155452 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.319582712 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.10606369 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.500838659 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.270114906 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.603493449 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.346901859 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.108733786 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.40303707 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.136737468 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.658584851 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.46396542 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.949502017 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.108001231 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.428416316 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.107406295 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.715599893 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.762132618 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.271417908 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.16472951 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.974210241 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.824433656 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.910446758 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.364006421 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.11333164 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.327524298 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.614406224 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.087420749 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.716556225 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.113491643 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.297889407 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.439342648 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.079196407 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.305605437 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.126107606 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.100644628 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.614740229 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.109633063 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.419462191 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08255994 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.67292333 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.126597139 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.147146347 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.347421408 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.46703946 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.109727992 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.102184388 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.289090868 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.11267692 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.113047995 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.488889873 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.260265129 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.362348396 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.464399439 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.233046949 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.547799778 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.01747444 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.701656012 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.24996814 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.422815315 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.107360751 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.66653495 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.124882612 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.725300654 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.712910988 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.252515955 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.659583793 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.357590454 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.854568841 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.2644394 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.609137596 seconds)
  done (took 1944.99190415 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.185424007 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.260313191 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.140157212 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.186817973 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.163393319 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.13310862 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.249660768 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.137475545 seconds)
  done (took 50.568935479 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.11376403 seconds)
    (2/17) benchmarking "4467"...
    done (took 6.143012504 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.485447466 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.363171037 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.132034141 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.230866544 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.363072094 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.769201447 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.132843063 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.058611252 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.259295312 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.247012011 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.135704388 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.147588478 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 5.953669684 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.247394259 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.110623821 seconds)
  done (took 93.049601832 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.150082865 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.749120513 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.136182488 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.76326614 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.171454588 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.52657626 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.128589543 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.121914266 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.464851813 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.798997437 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.166329375 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.269302289 seconds)
  done (took 85.595154328 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.145383156 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.147312723 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.143523777 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.144431259 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.144019667 seconds)
  done (took 6.838851899 seconds)
done (took 2411.858921629 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.33947481 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.58142069 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.658740285 seconds)
  done (took 4.345717203 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.18155143 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.244515809 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.311760076 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.258497826 seconds)
  done (took 6.126018876 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.3865166 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.598829056 seconds)
  done (took 4.095145086 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.457110099 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.13448993 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.664087042 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.107893558 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.118574585 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.120067143 seconds)
  done (took 19.469977361 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.138520224 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.139446048 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.143677571 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.131575091 seconds)
  done (took 5.668744543 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.105351145 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.135749393 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.114390482 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.098471037 seconds)
  done (took 18.562240974 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.423720483 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.364175226 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.871142323 seconds)
  done (took 5.778987965 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.92961066 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.243332677 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.913179961 seconds)
  done (took 6.196005197 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.812376528 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.029615291 seconds)
  done (took 5.953988171 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.288898342 seconds)
  done (took 2.399512539 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.602406386 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.600737794 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.757129658 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.825924591 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.007820257 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.404248792 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.528536676 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.356101505 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.617954723 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.65890936 seconds)
  done (took 17.46664923 seconds)
done (took 107.770407292 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.050446801 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.533226169 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.271869061 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.902640596 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.288402792 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.268394763 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.146425406 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.726555884 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.517793576 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.516686893 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.92177074 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.290980715 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.184127413 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.518661497 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.186012575 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.469854923 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.520416909 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.062327072 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.125861758 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.46772413 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.164271747 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.50744547 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.675350441 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.521581166 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.535939024 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.28137271 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.163183377 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.482374251 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.338385834 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.17818079 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.291345328 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.688537352 seconds)
  done (took 151.908428864 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.107901509 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.130500543 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.13449572 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.117846935 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.050431522 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.129381091 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.115982944 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.120150256 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.903440679 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.908185792 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.134482106 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.050600576 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.131653995 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.11509864 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.133685134 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.115333933 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.178144094 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.130134077 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.133368777 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.129625259 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.129893568 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.825278003 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.12943368 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.843927655 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.173887944 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.132841406 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.120109174 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.131322246 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.134956521 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.129965064 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.135733293 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.116433009 seconds)
  done (took 188.106307808 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.109602676 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.135007116 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.132353502 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.120372451 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.130373794 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.136501179 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.116885405 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.11541458 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.130698896 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.132576222 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.13026551 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.134751969 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.132158431 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.119276513 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.133268164 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.114404322 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.131594912 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.133327709 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.131488043 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.13496932 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.132551269 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.121505585 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.132616641 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.130734229 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.133281271 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.133579389 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.114370746 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.128226322 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.127917384 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.129668172 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.131881722 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.114791396 seconds)
  done (took 197.21765512 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.41900034 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.14774539 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.071910015 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.683706967 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.01988743 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.141329836 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.680738486 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.420510973 seconds)
  done (took 13.71690701 seconds)
done (took 552.081255185 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.795314422 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.022221034 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.289653043 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.358399381 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.677469929 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.435222543 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.352998671 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.582428664 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.85503184 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.542065324 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.576954845 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.3477113 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.924044263 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.346841582 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.313941499 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.622180311 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.520554297 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.815350758 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.330074362 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.960779835 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.335103606 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.044225265 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.615855399 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.91063857 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.585280822 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.086783168 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.288344143 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.519758315 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.330463255 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.33924567 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.176776788 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.576746271 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.346765419 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.34131413 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.661116428 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.598982898 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.518125409 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.579582974 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.298545895 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.821816551 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.94769276 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.729828125 seconds)
  done (took 75.42885062 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.139212078 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.153040909 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.304791193 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.216752609 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.785080292 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.213649738 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.383170685 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.356649165 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.227511835 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.341827644 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.394903554 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.848685141 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.384331976 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.786191082 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.369783565 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.403827506 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.21865212 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.763617808 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.372452862 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.359036322 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.180069474 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.302817084 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.179547986 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.332500106 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.175245195 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.186129939 seconds)
  done (took 36.515988314 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.187154989 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.294105766 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.39697263 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.260798717 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.366963454 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.13473762 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.44438688 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.32608021 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.90757726 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.7298711 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.251455424 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.283152773 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.716985592 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.413037673 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.580615206 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.314324348 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.304358888 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.309285546 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.303387217 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 6.117997709 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.196208212 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.223631563 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.449748313 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 6.144463843 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.764715883 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 6.130878909 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.435896591 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.688746178 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.544207116 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.326293032 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.27402654 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.426138308 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.537825184 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.401463186 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.289794978 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.163993617 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.168615957 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.250564113 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.115922542 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.310890867 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.441366613 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.726886351 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.504886494 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.707714836 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.601347779 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.365985222 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.570994052 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.261178182 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.26970732 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 6.111933913 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.448068642 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.915558099 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.370786354 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.338308474 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.266913983 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.589313608 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.326688873 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.508240389 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.289533157 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.553207949 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.225331548 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.535399695 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.304716353 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.606293091 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.412512972 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.347882879 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.299298494 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.847787489 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.504214064 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.502848524 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.755311252 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.222163155 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.188308831 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.24480096 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.293643463 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.600444749 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.058479286 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.458532806 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.538634633 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.429353426 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.443938887 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.6948117 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.13751808 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.474749922 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.324732315 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.153030525 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.238526979 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.485088905 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.421910428 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.67942209 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.717235395 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.534609081 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.465445589 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.424540107 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.865205992 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.609046744 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.148631245 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.161672297 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.383594494 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.720757791 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.230043455 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.300319074 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.753578271 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.853144402 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.353845688 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 6.119298868 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.450337176 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.616472117 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.555058947 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.140035348 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.305297491 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.338586792 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.370933131 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.424143628 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.143695843 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.691385938 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.273263455 seconds)
  done (took 255.146307806 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.109510831 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.128640524 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.117485261 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.129720591 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.116268314 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.657069455 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.163089056 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.118293826 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.655414123 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.161407923 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.12084923 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.115351696 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.118173469 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.121243466 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.257924507 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.290631181 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.960892093 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.117384381 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.115938792 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.119870819 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.823797978 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.115353058 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.120822463 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.118750669 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.118096245 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.117807155 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.129783124 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.124851769 seconds)
  done (took 151.479459688 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.165302674 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.592232675 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.199941303 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.265709691 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.207448687 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.18841457 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.678202014 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.307203039 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.248705973 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.184979888 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.176949207 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.398234026 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.494096096 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.759356303 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.313252664 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.336298164 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.808957314 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.317992317 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.185365838 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.177724239 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.335459705 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.514552564 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.433804607 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.428782451 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.317731161 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.431651749 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.240310954 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.176188928 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.286940607 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.664281162 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.192814614 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.514502184 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.327169007 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.18570991 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.671747058 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.519365659 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.745281489 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.804236071 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.365762155 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.13717479 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.135023811 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.420776654 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.468575313 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.213824209 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.171775416 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.797943559 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.196106843 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.442008575 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.1994548 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.133432933 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.272586465 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.287867765 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.414758015 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.012571581 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.347946764 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.350373846 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.756593584 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.159216052 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.179481843 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.485695305 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.149904989 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.661691626 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.813875603 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.219944052 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.193137233 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.02538731 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.262871435 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.687307125 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.783998624 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.219508455 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.514486389 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.37105094 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.152730976 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.433654038 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.350817297 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.606869627 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.750191597 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.311815669 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.280366288 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.255816345 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.448671656 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.164137683 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.72937669 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.27590467 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.151057872 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.661671756 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.56608999 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.149816133 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.167652927 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.286124514 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.334726053 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.389271925 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.437924737 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.240057645 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.069791016 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.435141691 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.498113174 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.191508938 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.300043926 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.162273722 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.546427954 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.363352511 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.151799039 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.48837605 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.580870731 seconds)
  done (took 156.707367565 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.86507982 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.22580931 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.407982396 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.776796616 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.501787085 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.578686207 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.440417048 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.245463782 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.453830244 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.416963856 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.381171797 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.263732673 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.881446454 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.89523758 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.222459744 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.357819991 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.253172126 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.801860373 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.46965497 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.04163764 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.577654364 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.893347935 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.491669377 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.568919695 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.545731358 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.682995097 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.840313882 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.290261034 seconds)
  done (took 48.495649414 seconds)
done (took 724.884256007 seconds)
SAVING RESULT...
DONE!
