cset: moving following pidspec: 1998025
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 1.147954626 seconds)
loading group "string"... done (took 0.26814132 seconds)
loading group "linalg"... done (took 4.754196141 seconds)
loading group "parallel"... done (took 0.021692452 seconds)
loading group "find"... done (took 1.40609501 seconds)
loading group "tuple"... done (took 0.889385478 seconds)
loading group "dates"... done (took 0.249023823 seconds)
loading group "micro"... done (took 0.060387338 seconds)
loading group "io"... done (took 1.350949405 seconds)
loading group "frontend"... done (took 0.012621564 seconds)
loading group "scalar"... done (took 4.951518509 seconds)
loading group "sparse"... done (took 4.361616824 seconds)
loading group "alloc"... done (took 0.016651463 seconds)
loading group "broadcast"... done (took 0.389612978 seconds)
loading group "union"... done (took 3.70871287 seconds)
loading group "simd"... done (took 2.970060555 seconds)
loading group "random"... done (took 2.915887612 seconds)
loading group "inference"... done (took 1.591105039 seconds)
loading group "problem"... done (took 1.134714734 seconds)
loading group "array"... done (took 4.691884717 seconds)
loading group "misc"... done (took 0.937902113 seconds)
loading group "sort"... done (took 0.366999119 seconds)
loading group "collection"... done (took 6.094586107 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/6) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.216809781 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.026031336 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.163120932 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.020579588 seconds)
  done (took 1.909733423 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.289277983 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.041553285 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.034268063 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.025237526 seconds)
  done (took 1.059076619 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.022859327 seconds)
    (2/2) benchmarking "read"...
    done (took 0.029951678 seconds)
  done (took 0.7168511 seconds)
done (took 4.676153145 seconds)
(2/6) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.462235178 seconds)
  done (took 1.124620556 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.27929147 seconds)
  done (took 1.951918108 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.058089824 seconds)
  done (took 0.748048545 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.504475493 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.488187964 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.803481166 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.078523979 seconds)
  done (took 2.546190148 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.646474897 seconds)
  done (took 1.328596364 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.243757644 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.21132355 seconds)
  done (took 1.152813152 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.487482455 seconds)
  done (took 1.167578192 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.153777971 seconds)
  done (took 1.841901453 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.217681288 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.116578396 seconds)
  done (took 1.018455311 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.419247118 seconds)
  done (took 1.103097267 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 3.077320973 seconds)
  done (took 3.765898668 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.175891675 seconds)
  done (took 0.875743342 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.256930761 seconds)
  done (took 0.948531841 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.604876668 seconds)
  done (took 1.295082756 seconds)
done (took 21.533003178 seconds)
(3/6) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.040232168 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.11182412 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.021268578 seconds)
  done (took 0.853674961 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.026656647 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.033325822 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.033795675 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.034125272 seconds)
  done (took 0.823882483 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.027995798 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029581814 seconds)
  done (took 0.752290737 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.174885412 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.125666103 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.070552091 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.036743852 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.033838705 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.036473825 seconds)
  done (took 0.804081846 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.0221982 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.021792308 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.021943944 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.021726424 seconds)
  done (took 0.783447674 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.021107327 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.020676122 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.020954378 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.043384867 seconds)
  done (took 0.80230607 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.054594301 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.054843032 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.122014033 seconds)
  done (took 0.927203315 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.039460363 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.029837804 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.031777513 seconds)
  done (took 0.798845913 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.060320974 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.041363746 seconds)
  done (took 0.798435231 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.031685252 seconds)
  done (took 0.731870524 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.03946673 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.050049495 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.088041488 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.044387157 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.090707073 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.069929831 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.019199817 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.019208516 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.029047397 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.019274678 seconds)
  done (took 1.168579763 seconds)
done (took 10.3894249 seconds)
(4/6) benchmarking "tuple"...
  (1/1) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.037779502 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.020647168 seconds)
  done (took 0.756125436 seconds)
done (took 1.458186898 seconds)
(5/6) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.038809576 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.226372754 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.037236399 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.324796842 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.041039161 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.022546747 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.071429237 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.136371503 seconds)
done (took 1.604143247 seconds)
(6/6) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.347056635 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.082193257 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.087605174 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.066307873 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.101342327 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.080389098 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.086972066 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.043252646 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.499510117 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.061087276 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.10518558 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.380286416 seconds)
done (took 3.650832105 seconds)
RUNNING BENCHMARKS...
(1/6) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 5.764270886 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 4.768065204 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 4.743585401 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 5.747664719 seconds)
  done (took 15.96866726 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 5.707349942 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.075604052 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 5.714545455 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 2.478912282 seconds)
  done (took 16.69921728 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.933144811 seconds)
    (2/2) benchmarking "read"...
    done (took 1.036051639 seconds)
  done (took 2.676795216 seconds)
done (took 41.895227708 seconds)
(2/6) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 5.915046438 seconds)
  done (took 6.622729974 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 5.724752791 seconds)
  done (took 6.439690647 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 5.713851318 seconds)
  done (took 6.440907769 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 5.717805007 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 5.764057043 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 5.710563195 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 5.748238618 seconds)
  done (took 23.65829581 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 5.763631965 seconds)
  done (took 6.477216198 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 5.710265203 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 5.725615085 seconds)
  done (took 12.174116218 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 5.708998405 seconds)
  done (took 6.431527405 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 5.846654303 seconds)
  done (took 6.562151896 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 5.722973433 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 5.722483674 seconds)
  done (took 12.16663798 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 5.677286081 seconds)
  done (took 6.384419741 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 6.733602707 seconds)
  done (took 7.452331074 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 5.720799913 seconds)
  done (took 6.429873463 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 5.763741236 seconds)
  done (took 6.474454034 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 5.847359687 seconds)
  done (took 6.555986188 seconds)
done (took 120.979307872 seconds)
(3/6) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.917023232 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.326305838 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.231719646 seconds)
  done (took 3.267880248 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.863395299 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.911069863 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.057103217 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.952057683 seconds)
  done (took 4.696664729 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.978580746 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.090742811 seconds)
  done (took 2.778314239 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.206691089 seconds)
  (6/15) benchmarking "18129"...
  done (took 5.723728548 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.026060858 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 5.70969506 seconds)
    (2/3) benchmarking "Float64"...
    done (took 5.709289038 seconds)
    (3/3) benchmarking "Float16"...
    done (took 5.713120826 seconds)
  done (took 17.845930194 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.750404249 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.750087935 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.750547249 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.748882401 seconds)
  done (took 3.707844127 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 3.258123734 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 1.161788682 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 5.42340046 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 5.71208332 seconds)
  done (took 16.2638336 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.883163865 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.796281684 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.487704024 seconds)
  done (took 3.900915485 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.345167133 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.773413879 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.320482996 seconds)
  done (took 4.147593958 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 1.800566889 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 1.543758354 seconds)
  done (took 4.057265777 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.87163617 seconds)
  done (took 1.578248988 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.556538183 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.028458815 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.15666094 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.156221773 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 1.191077021 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.87900871 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.993592409 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.967088933 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.071535954 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.362961396 seconds)
  done (took 12.076392279 seconds)
done (took 83.913503579 seconds)
(4/6) benchmarking "tuple"...
  (1/1) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.078770411 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.776877355 seconds)
  done (took 2.565391946 seconds)
done (took 3.300044173 seconds)
(5/6) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 3.812583603 seconds)
  (2/8) benchmarking "printfd"...
  done (took 5.712865648 seconds)
  (3/8) benchmarking "parseint"...
  done (took 1.771682385 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 5.715397288 seconds)
  (5/8) benchmarking "pisum"...
  done (took 5.731592528 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.096638292 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 5.73798752 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.056068094 seconds)
done (took 32.34716845 seconds)
(6/6) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 5.722407217 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.847559149 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 5.719960884 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.193415327 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.00886037 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.110707126 seconds)
  (7/12) benchmarking "nbody"...
  done (took 1.761227663 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 5.715003385 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 5.851087038 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 5.735539714 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.027606803 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.525359558 seconds)
done (took 52.931316949 seconds)
SAVING RESULT...
DONE!
