cset: moving following pidspec: 3528011
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 2.819406579 seconds)
loading group "shootout"... done (took 1.187981433 seconds)
loading group "string"... done (took 0.75309149 seconds)
loading group "linalg"... done (took 9.59167949 seconds)
loading group "parallel"... done (took 0.02307463 seconds)
loading group "find"... done (took 3.850629218 seconds)
loading group "tuple"... done (took 2.506857762 seconds)
loading group "union"... done (took 15.075663074 seconds)
loading group "dates"... done (took 1.984938274 seconds)
loading group "micro"... done (took 0.239376909 seconds)
loading group "simd"... done (took 7.354831313 seconds)
loading group "io"... done (took 1.805461186 seconds)
loading group "random"... done (took 14.146900732 seconds)
loading group "problem"... done (took 1.932052542 seconds)
loading group "array"... done (took 40.178919771 seconds)
loading group "misc"... done (took 2.420849311 seconds)
loading group "scalar"... done (took 76.247941407 seconds)
loading group "sort"... done (took 6.123763621 seconds)
loading group "sparse"... done (took 21.985262495 seconds)
loading group "collection"... done (took 28.432007561 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.555724255 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.129913147 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.162646872 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.134616878 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.283038884 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.136843273 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.143617885 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.126411099 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.108539825 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.176694979 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.151393753 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.464429541 seconds)
done (took 6.163481533 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.340493095 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.269108796 seconds)
    (2/2) benchmarking "String"...
    done (took 0.198684056 seconds)
  done (took 1.778097684 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.135459491 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.066967711 seconds)
    (3/3) benchmarking "different"...
    done (took 0.074840982 seconds)
  done (took 1.582017043 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.072612754 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.153178098 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.073641772 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.077444642 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.074139737 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.073564813 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.073050761 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.074040256 seconds)
  done (took 1.905005604 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.079826507 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.074731621 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.073099741 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.075545642 seconds)
  done (took 1.601186855 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.073266633 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.136625384 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.072078607 seconds)
    (4/4) benchmarking "different"...
    done (took 0.071819429 seconds)
  done (took 1.656957074 seconds)
done (took 10.269849969 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.215733903 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.867574051 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.967057325 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.180907001 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.360773404 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.364262928 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.13518029 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.242607014 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.146993274 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.085226625 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.180519489 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.090206563 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.549700117 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.524857779 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.08123816 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.205324568 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.65020869 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.090891801 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.125391053 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.292676193 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.088271934 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.093100508 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.099790149 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.083885137 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.215294456 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.295700195 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.648667604 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.104098077 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.076791707 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.101109867 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.077626439 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.084277116 seconds)
  done (took 11.672420638 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.143066649 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.141518047 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.075088091 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.112186039 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.103835018 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.076936164 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.083350233 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.075492762 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.097242069 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.145373434 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.100027249 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.154848018 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.075628721 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.07727184 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.140831164 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.173316928 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.090024535 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.09131735 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.075531393 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.090498626 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.104372985 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.088350209 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.086983049 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.086571063 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.123120882 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.14306948 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.094121371 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.118640434 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.077124273 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.087627873 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.104243348 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.12177445 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.075215605 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.074324396 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120261225 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.093701696 seconds)
  done (took 5.061108482 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.105312212 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.113698302 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.135283814 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.126642401 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.117793015 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.102909105 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.176824999 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.133774634 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.109811907 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.076351273 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.210470218 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.758726773 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.164656011 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.247266745 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.080913412 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.180317126 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.396199979 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.989589654 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.078662119 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.076368039 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.128505447 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079135718 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.170949536 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.076444703 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.195166265 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.706645638 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.082753108 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.078324689 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.110432588 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.145989494 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.077612676 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.161205971 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.106901429 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.081662233 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.612685688 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.076096613 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.074052901 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.100173359 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.113820689 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.076454686 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.077146142 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.090710451 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.077695162 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.138394146 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.090778479 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.620183209 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.080216386 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.738095403 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.388855098 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.084562136 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.083561503 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.113771127 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.073530366 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.078168275 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.776733636 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.175332146 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.076617614 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.323910833 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.077784126 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.07774617 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.078926295 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.113703626 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.077491706 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07807964 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.083672718 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101856522 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.098616544 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.165486528 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.101524501 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.074337302 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076459496 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.074303014 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.762471828 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.085521892 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.081332658 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.076102509 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081608269 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.07670335 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.07606261 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.119692126 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.102727374 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.101534314 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.08127176 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.078104312 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.077430933 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.604138863 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.045081558 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.077557114 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.076956061 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.544542255 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.073854439 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.076039006 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.078478485 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.099458799 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.077161309 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.072622749 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.112278701 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.078306751 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.127145182 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.615161287 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.078275151 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.073490852 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.69026984 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.080479107 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.111695597 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.137861783 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.078711929 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.119452351 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.077996409 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.074612854 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.083471943 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.07455101 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.079503928 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.07535262 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.076437034 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.07545916 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.077662121 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.079041933 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.077650449 seconds)
  done (took 26.213661112 seconds)
done (took 45.361897307 seconds)
(4/20) benchmarking "parallel"...
done (took 1.529938139 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.293950687 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.105564066 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.073527961 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.23090229 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.100924193 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.200250524 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.245735994 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.190998515 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.103152862 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.101995972 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.10284043 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.248524027 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.261170715 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.103792871 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.181558031 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.260743496 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.102746003 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.074542525 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.100825506 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.104410677 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.10552886 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074352461 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.102299615 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.104040936 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.1797188 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.101897968 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.073655149 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.180015424 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.102665995 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.183269622 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.102414186 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.100991712 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.102996972 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.181146475 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.104691444 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.18122964 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.074544521 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.104348945 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.104029229 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.105818857 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.103349579 seconds)
  done (took 7.117391752 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.100629439 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.093882279 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.096976714 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.070436406 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.079969804 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.092631049 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.070246486 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.092852333 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.111218372 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.093716856 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.092855715 seconds)
  done (took 2.495291314 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.092542461 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.093479987 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.095944213 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.069263482 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.081607716 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.096153708 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.070029288 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.093085426 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098630233 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.094754631 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.093134889 seconds)
  done (took 2.409493913 seconds)
done (took 13.433344558 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.229103577 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.122100241 seconds)
  done (took 1.765747407 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.615175201 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.236088259 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.131530653 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.256416459 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.124224352 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.154172014 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.484260087 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.155226729 seconds)
  done (took 7.635101456 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.14214004 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.147262086 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.077962098 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.076119547 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.077439651 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.077289855 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.082540522 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.077544923 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.0755229 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.079306093 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.078545762 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.076885175 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.078088902 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.079004245 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.077486571 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.077996007 seconds)
  done (took 2.936475747 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.079599135 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.079711597 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.081082635 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.070348374 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.082058154 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.083428649 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.085153574 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.084957287 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.08334228 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.082722523 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.079409512 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.082888727 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.081028154 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.080108171 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.083255116 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.070767208 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.083424442 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.082747792 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.083992123 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.083486033 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.083993638 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.081501455 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.084948044 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.081333883 seconds)
  done (took 3.410825693 seconds)
done (took 17.172045134 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.206578281 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.084783084 seconds)
  done (took 1.736168498 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.128378325 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.129410769 seconds)
  done (took 1.710471305 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.081201589 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.068754144 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.087500861 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.079235917 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.069861302 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.069870686 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.087172444 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.070081039 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.06916881 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.069742623 seconds)
  done (took 2.213515114 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.070913919 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.077372301 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.075331958 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.072990659 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.075564509 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.070690466 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.0734345 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.071192902 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.077556289 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.069889755 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.073905473 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.094274714 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.073803111 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.095236856 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.074227457 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.074128122 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.07521553 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.073339927 seconds)
  done (took 2.824113159 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.069218103 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.069555822 seconds)
  done (took 1.596982073 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.071701423 seconds)
    (2/7) benchmarking "second"...
    done (took 0.069442044 seconds)
    (3/7) benchmarking "month"...
    done (took 0.071965581 seconds)
    (4/7) benchmarking "year"...
    done (took 0.071995988 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.069851663 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.07054566 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.070840893 seconds)
  done (took 1.950506821 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.496729575 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.229608896 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.478596162 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.080394191 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.096258837 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.303132166 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.075341798 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.080223983 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.079925304 seconds)
  done (took 3.379292502 seconds)
done (took 16.867379274 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.095271112 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.203706693 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.152725401 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.49780913 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.09035907 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.078529257 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.107545523 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.259754929 seconds)
done (took 2.955453387 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.552990568 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.483861408 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.323192438 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.076848212 seconds)
  done (took 3.346294873 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.455906511 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.203005079 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.085184632 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.075654909 seconds)
  done (took 2.313743215 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.073058077 seconds)
    (2/2) benchmarking "read"...
    done (took 0.080232668 seconds)
  done (took 1.649700702 seconds)
done (took 9.342386309 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079815721 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.067904701 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.074074472 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.070113608 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.072204641 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.069560552 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.069865936 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.070636929 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.069010658 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.07065148 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.070815668 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070546003 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070455819 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070074197 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.070199523 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.07023891 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.068658964 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.071004453 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069628487 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.0705158 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.068975601 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.071474771 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.070272648 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.071223488 seconds)
  done (took 3.175569792 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.088084611 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.074045533 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.074884071 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.074671149 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.075242986 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.074473888 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.074730285 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.073869682 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.074405419 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.073726662 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.074826315 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.075229758 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.07322659 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.074427497 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.073075073 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.074772467 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.074043003 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073501957 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.072903439 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.074046828 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.073181396 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073643368 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.075353331 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.074565511 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.074754401 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.073963831 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.073710691 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.074425954 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.075185553 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.075526623 seconds)
  done (took 3.748538354 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.073680238 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.065965617 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.066817634 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.077718268 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.066068015 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.066315376 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.066195939 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.066157306 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.066254001 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.067728741 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.066782377 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.06712491 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.066748492 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.066474616 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.066496735 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.067169406 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.072679002 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.089767266 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.068025887 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.066715757 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.072892803 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.067295597 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.06651521 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.066888554 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.067527766 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.066350378 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.066702188 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.067180195 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.066894292 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.067552554 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.067049064 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.072704913 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.074418827 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.067287281 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.079093679 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.073870067 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.066917003 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.074789429 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.069081976 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.067123678 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.066524784 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.067327914 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.067160542 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.06740592 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.079036447 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.067231883 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.068305772 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.068124787 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.068049333 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.067507513 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.067311511 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.06868188 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.073817847 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.068845128 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.06701606 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.06828793 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.067068722 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.067824328 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.0672984 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.067418381 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.067644224 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.071836245 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.069054697 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.068365113 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.090932683 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.069385412 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.080240456 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.06797348 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.067469067 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.071570912 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.067765477 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.089447799 seconds)
  done (took 6.526993546 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.079558773 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.077285911 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.086198717 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.076898812 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070972119 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.068203824 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.070759638 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067984775 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.077508865 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.071219153 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06728415 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.070105413 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.078456414 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.074846716 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069448995 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.077704298 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.071239362 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070366552 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.067747332 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.071616717 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068992227 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.071362809 seconds)
  done (took 3.12608573 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.156486852 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.073601943 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.117947193 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.076936538 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.074511639 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.077240118 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.074009986 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.073676033 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.073549232 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.074157592 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073415655 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.074120713 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.076006026 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074995578 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.07471068 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.074565863 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.073506953 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.075022007 seconds)
  done (took 2.977763167 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.084039199 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.073315945 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.101936509 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.072880239 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.072955566 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.072913339 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.077306379 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.076790091 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.073248369 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.071956224 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.076403835 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.073058177 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.073269024 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073354918 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.073610679 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073256672 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.072666165 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073588742 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077072008 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.07653497 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.076723988 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.077285713 seconds)
  done (took 3.181952574 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.086740776 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071750894 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.089332857 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.07291779 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.06661642 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.066348574 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.074155024 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.072952956 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.075063261 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.072965662 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.073350821 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.067364395 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.075018361 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.07180023 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.087557407 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072924173 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072096806 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.073181492 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.072404192 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.067039648 seconds)
  done (took 2.983735612 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.124237224 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068973133 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069277671 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073783176 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069871487 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069208564 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074351129 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069016897 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069848971 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.094882658 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.06990762 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069844015 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07394787 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072276645 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069411594 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073789745 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073941103 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074760571 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06961073 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070069674 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.095969473 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069821639 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074972939 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069302454 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.068917399 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069420022 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069912091 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072630824 seconds)
  done (took 3.607856613 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071521099 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.069313714 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.070357415 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.071004329 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.070657198 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.07039901 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.069877132 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.070690338 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.072417843 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070759245 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.070281556 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.071288173 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.070888295 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.070561751 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070634061 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.070537926 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070987168 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.071141002 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.0703127 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071139544 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.070535642 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.071052648 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.070656256 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.07095693 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07103708 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.0712654 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.071106777 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.071324299 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070520288 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070914838 seconds)
  done (took 3.644110168 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.07995836 seconds)
    (2/2) benchmarking "in"...
    done (took 0.078846267 seconds)
  done (took 1.675980328 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.067325008 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.083679981 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.065465281 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.080564628 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.075910606 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.070769877 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.076261641 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.075513637 seconds)
  done (took 2.101931389 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.118999675 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.146510388 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.067845139 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.068651063 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.119049229 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.14395077 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.131848387 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.081550496 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.083882429 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.072338574 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.068994351 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.129756579 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.068069501 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.083512777 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069680184 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.082904184 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.077293555 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.089090449 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.083716462 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.06720528 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.082407195 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068650711 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.067991973 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.069134371 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.070225343 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.07630546 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.086718514 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.082592264 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078691405 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.065261216 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.087601733 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.066147319 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.067324576 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.078068157 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.120535418 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.06690659 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.107648319 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.066713631 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.071634692 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.066668266 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.081301324 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.091431601 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.083801766 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.087186144 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.068053369 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.069018721 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.066303504 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.068563545 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.072209825 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.078320383 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.067508288 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.076415592 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.066178457 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.068717962 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.080724198 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.06827623 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.072705873 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.079127785 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.08474758 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.080139341 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.081747393 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.084617561 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.078118855 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.076591474 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.068270728 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.090007384 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.069218202 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.083399416 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.084425468 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.068478183 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082249745 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.067114328 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.066054401 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.067772858 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.105560485 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.069451926 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.069666163 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.068469436 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.068317517 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.070042003 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.079450299 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.073247804 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.076954797 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.071051967 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.085577145 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.078970071 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.067994605 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.07637789 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.08944484 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.073718535 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.06894594 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.089267295 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.073984022 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.068404258 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.089743668 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.080074092 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.070890126 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.070980865 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.074287485 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.241204883 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.068736297 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.065730827 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076943493 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.068335619 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.116410253 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.070994493 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.077494395 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.067455196 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.078908475 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.072138607 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.068465666 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.065036774 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.072107525 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.067569432 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.064952243 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.078180008 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.066369407 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.083031071 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.074575418 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.083488144 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.084991668 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.07870723 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.084897353 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.066042222 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.064901714 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.085921235 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.076971886 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.067838731 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.086671785 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.06630763 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.079327899 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.066053498 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.067034766 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.077957007 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.065397211 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067982116 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.066437256 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.072338033 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.067855718 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068742916 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.074182024 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.075660807 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.080818045 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.06778029 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.078399402 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.068095925 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.086323398 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.079994173 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.07404799 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.07149385 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.067718679 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.080269059 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.075133746 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.078039855 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.067999907 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.067910596 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.067518039 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.079785753 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078280666 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.069300862 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.075996307 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.073131852 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.067718723 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.06748749 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.068292144 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.071069959 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.070311285 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.06791175 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.076547114 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.077127561 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.083063751 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.074920217 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.077849425 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.070072687 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.06754654 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.069323328 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.066854402 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.073729503 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.078826238 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.085367208 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.080285705 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.091354331 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.067306475 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.078658917 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.068382119 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.086850545 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.08394758 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.069024099 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.07205833 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.067059587 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069427658 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.079031701 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.08088023 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.084116787 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.08472255 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.073681396 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.073717318 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.068389949 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.085674234 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.069181847 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.079567268 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.080385834 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.076164073 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.068923662 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.070441128 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.079606131 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.074507743 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.069969228 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.086489056 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.076630234 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.228954885 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.084550982 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.068752932 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.0804634 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.067224067 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.073210386 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.07437783 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.068217314 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.078912587 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.085272039 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.066653771 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.068507283 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.086002878 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.069052482 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068212529 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.077580762 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.084986276 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.073398809 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.076061784 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.079344508 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.079006389 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.072797886 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.078993438 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.067992004 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.078402548 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.06955309 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.080808634 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.06702604 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.087967346 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.066451423 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.083979908 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.067199779 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.080266652 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.067294683 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.077935625 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.067709298 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.085519615 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.068625058 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.067461377 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.080762432 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.065536077 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.077946567 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.066654416 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.073768209 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.075019621 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.078283096 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.069054004 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.07903493 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.0692112 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.078620653 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.074654717 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.078131532 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.078261778 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.074194329 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.068005613 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.078229735 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080258533 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.078132887 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.069854571 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.069543765 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.068777441 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.079270955 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.069471738 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.069642398 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.078194019 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.074975776 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.076690889 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070037233 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.069931109 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.069817334 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.078907762 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.079354647 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.089435894 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.077581821 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.076572796 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.07948589 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.067492462 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.086977428 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.068111755 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.07692026 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.067091181 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.07443081 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.078243214 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.068144651 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.090549193 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.070112495 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.077753154 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.082949368 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.079363045 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.073847583 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.09004991 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.072568126 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.079419402 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.078130588 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.074409855 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.076418046 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.070349141 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.078576816 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.079083633 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.080580416 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.070075149 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.07764739 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.079323555 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.069851181 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.077091647 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.069925538 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.079357143 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.072243902 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.068913654 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.074771486 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.083044463 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.076258155 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.076096622 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.070768549 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.069041735 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.070065207 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.242449504 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.073807886 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.077465642 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.085144238 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.0666503 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.071977258 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.066418808 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.071778153 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.088027644 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.0779562 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.07752664 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.074632144 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.067172639 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.069081093 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.069465361 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.067690982 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.070818134 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.066735579 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.067309537 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080042363 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.068908549 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.073030266 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.067511327 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.068177441 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.078922901 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.071418806 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.067183218 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.074747218 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.066447033 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.073482698 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.06610233 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.068445299 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.073219991 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.066417112 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.071676636 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.078688086 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.086076493 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.075537129 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.077701265 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.068291466 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.077633969 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.085015101 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.074418024 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.068004562 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.078437392 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.066736604 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.087469657 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.078888554 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.078207552 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.07926644 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.068711915 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.088655727 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.073132778 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.079299734 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.086096406 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.069008469 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.075654642 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.067896364 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.086119719 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.07390143 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.067750492 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.07761871 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.077544739 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.075323964 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.081165415 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.06893877 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.077921251 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.073079894 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.072428445 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.069256989 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.069874743 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.07840375 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.086819042 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.068680171 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.073587257 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.078295659 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.077682039 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.073798613 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.082864504 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.077589941 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.069350487 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.070338149 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.073747319 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.069124305 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.082039844 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.067950209 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.073829796 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.073823098 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.067315541 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.07523892 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.086149493 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.07882886 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078122166 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.066303209 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.066644001 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.088756693 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.073207988 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.071862513 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.077555566 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.079754197 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.083257414 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.078383096 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.087341646 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.068572105 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.075682404 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.082652049 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.070188456 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.069433978 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.073759246 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.070740563 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.080879546 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.080419921 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.077806553 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.071173491 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.07725234 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.085473903 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.234784839 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.073682981 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.0728968 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.068456446 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.079798759 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.078230619 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.078012212 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.068267835 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.067175309 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.071899449 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.077552618 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.076333835 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.077188478 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06763421 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.07403396 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.082557746 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.076000926 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.069478806 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.066705758 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070120606 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.07762094 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.072570045 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.066321914 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.07273139 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.071621413 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.073993493 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.078277204 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.073568559 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.06679876 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.086317658 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.076781826 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.078229435 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.06860739 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.068885856 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.067494143 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.065635275 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078858337 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.065747444 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.067763358 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.073229014 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.068756551 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.086065453 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.075932659 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.084329391 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068246084 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.072356685 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.358393704 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082346257 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.073526316 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.067998498 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.080208032 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.066747453 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.085703833 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.080605764 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.073565172 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.067314309 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.074408967 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.076188371 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.085038509 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078747914 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.077794293 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.070817059 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077968304 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.069412998 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.08033841 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.066805294 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.066494549 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.079362225 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078420209 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081493912 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.067162476 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.079596098 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.069138072 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.076487459 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.077337012 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.068883857 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068929041 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.069421496 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.078453916 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.074166356 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.078932545 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.073778998 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.08765738 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.068776021 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.080759999 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.078637537 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.079455663 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.084254074 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.081700097 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.077302767 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.068555076 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.077849033 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.077719487 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.06871684 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.074695694 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.070470813 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.092347147 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.069506991 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.06917249 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.084687023 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.075919557 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.068064375 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.075541115 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.074275847 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.081835525 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.070722656 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.081666681 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.076160349 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.069528259 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.074990818 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.075523727 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.06740396 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.068275576 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.069797853 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.241276037 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.0731071 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.067901159 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.088436353 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.068448669 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.078579411 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080451674 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.074966008 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.068481402 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.066060326 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.067909473 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.082695143 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.085337945 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.072191134 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.078557002 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.068587438 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.077710896 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.066196439 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.077011102 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.07683186 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.077615396 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.066791636 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.067256521 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.084529073 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.085160932 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.073336606 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.084852834 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.077578404 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.068830774 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090621342 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.077964106 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068118378 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.079755626 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06917866 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.06513356 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.065620089 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.068108207 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.080033318 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.066480249 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.069198067 seconds)
  done (took 47.670374789 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.110725954 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067471456 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065190547 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.066203005 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07339177 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068262875 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066476638 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.068407549 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06805968 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069018767 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066708743 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06683048 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072031025 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.08205061 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074830803 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.070726084 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.066893058 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.068887615 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.066690602 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068309667 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073793942 seconds)
  done (took 3.111014073 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.070791025 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.070862477 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069594636 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.070257791 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069905231 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.0673003 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.070628836 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067187707 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.070942772 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067251858 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.071196274 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067953858 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.06769807 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.066861987 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066303738 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06827043 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.070465454 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.073473103 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.066962997 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.070322099 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067999125 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.070324619 seconds)
  done (took 3.12259327 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.068607949 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.066838638 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.077096337 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.066146662 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.065415353 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.069199695 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.065730056 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.072336932 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.072376595 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.071733109 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.076929732 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.06697648 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.065765333 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.073987277 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.065985521 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.067341828 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.114864629 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.068211765 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.067416619 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.066684223 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.069563829 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.077819777 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.06679932 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.066236688 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.073459296 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.070250234 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.06632549 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.069159589 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.067416801 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.071918225 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.067699092 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.066219406 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.077070094 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.076757269 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.072035536 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.072541761 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.068587181 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.067140127 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.066380902 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.066246732 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.077029039 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.068119864 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.066980255 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.068218369 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.077703448 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.067057722 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.066231237 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.077743697 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.067428092 seconds)
  done (took 5.064588612 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.078987806 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.131520726 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.073190277 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.112928148 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.080190672 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.072515442 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.074285197 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.116280142 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.067169545 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.069056724 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.080684799 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.081244585 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.070073983 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.070967517 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.073956435 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.069922272 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.07027306 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.069289468 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.07185143 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.069450722 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.072351238 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.076231341 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.080457311 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.080793541 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.071030014 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.068961341 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.068968908 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.070235868 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.080780067 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.072697003 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.071106129 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.07255818 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.081173687 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.074410726 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.069549676 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.069621023 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.081201034 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.069758957 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.070179841 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.068288403 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.06964875 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.070362315 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.074186716 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.0820194 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.070473428 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.07630665 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.070410769 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.067424116 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.081118792 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.069353621 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.073019377 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.082073801 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.071497228 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.069964829 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.071651326 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.081517073 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.07003679 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.069782301 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.071131989 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.080055753 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.068579655 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.071595526 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.081492152 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.069859944 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.073044942 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.081775169 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.075041834 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.071026153 seconds)
  done (took 6.883330927 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.076706174 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.106438023 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.08298974 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.082119082 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.078780243 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.078492107 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.078274498 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.078665767 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07807017 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.081756302 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.078499551 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.165056204 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.074934073 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.07992482 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07808075 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.078603044 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.079344942 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.079505148 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.079896284 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.079635496 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.079279199 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.083779227 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.079230806 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.083671422 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.082840675 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.07469322 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.078433224 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.078346904 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.083546966 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.078623062 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.083097889 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.078626777 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.079396851 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.08644735 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.082506069 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.07808431 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068654322 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07805717 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.078231788 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.079418244 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.076389424 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.08470352 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.079265175 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.076205388 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.079375158 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.079068001 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.084535752 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.083645068 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.08051976 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.081658556 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.078693718 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.08406579 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.079451051 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.079105044 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.083712289 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.086288541 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.083736825 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.083586568 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.078849391 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.084656987 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.084244139 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.087208822 seconds)
  done (took 6.739614727 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.082943583 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.072696603 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.087825151 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.066562354 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06701307 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.077764231 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066840414 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.067156977 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.073634631 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.073493831 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.074441771 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.07730904 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07939524 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.074595088 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.077797327 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.078539918 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.076894694 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.077627445 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.074174599 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.078695324 seconds)
  done (took 3.152299672 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.068714092 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.071389732 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066694305 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.084744544 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.067193799 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.075595135 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.068263245 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067778837 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067187548 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067756423 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072874572 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072277168 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067588371 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.076529044 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071886612 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.076015342 seconds)
  done (took 2.762128258 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.070112803 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.074325148 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.122293543 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.069185157 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.070165124 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.068496897 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.068438078 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.067701993 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.069467855 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.083053357 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.069464603 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.071451216 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.068869365 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.068576681 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.068144132 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.070728139 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.070096653 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.068976408 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.068945476 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.124583003 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.078163325 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.069699151 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.071022769 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.069812495 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.071561005 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.078445488 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.070213676 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.07068667 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.068113972 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.070656332 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.07029954 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.081056105 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.0709586 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.069125377 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.067599235 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.068275362 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.069011988 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.070921976 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.070981469 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.068321717 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.066919461 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.069864033 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.06868763 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.069217953 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.070290962 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.07139032 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.070390871 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.080842654 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.069744053 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.07109066 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.069569791 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.070381507 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.069980491 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.082071971 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.072134595 seconds)
  done (took 5.631699165 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.087967532 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.07308573 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.066437764 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.066815657 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.074047399 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.073597324 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.073015916 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.073602897 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.074303009 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.067117691 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.074404121 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.073813846 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.07472117 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073672909 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.074737326 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.074061684 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.067501168 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.074470511 seconds)
  done (took 2.975570157 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078356495 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.072842569 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.073057924 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.068697289 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.06771603 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.073239172 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067949719 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.068746673 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069353032 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.069414458 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069718794 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.069125805 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069553508 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.068930062 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072941935 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068998087 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.069009072 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068076581 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.069568075 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067490716 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.073164833 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06790727 seconds)
  done (took 3.180717013 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.14817876 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.093615947 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.195436383 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.089589857 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.101162697 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.080344696 seconds)
  done (took 2.345545915 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.104802563 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.107574685 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.073124479 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072519497 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076960534 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075672238 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075890622 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076047977 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078542112 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.082213255 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076061566 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079011391 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079584344 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.081265166 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077415516 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077850899 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075894831 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076207347 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073813926 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.08531484 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076663127 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.08043095 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076245451 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076213992 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076332067 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.081203885 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079368282 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081876859 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076176982 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078823112 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077544564 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076789029 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079834842 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.082392718 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073576258 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080333608 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076963272 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.084540334 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078500065 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.081119837 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.073136528 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078306251 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080285525 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.079799493 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079934378 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077008167 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.079095669 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077276903 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076203935 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.088489097 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078484775 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.081484985 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078353018 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.08038352 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080069619 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.08818446 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.083087103 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.08160006 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079056362 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.082871496 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.082450787 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079111755 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.081863967 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.083464018 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078822626 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.082338547 seconds)
  done (took 6.916627771 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.114749924 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.073299723 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076072059 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.081429797 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.080738336 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075893293 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076348847 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076857513 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075861008 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073431667 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.114939161 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076127902 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081133835 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.081250945 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077071339 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076233636 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075751129 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.080678459 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073552849 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.087891075 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076540845 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081664032 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.082152614 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.082100655 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.083302227 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079082421 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077319564 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076841777 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07675351 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076654936 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.079487353 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076156626 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.081127577 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.074691819 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081834789 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076665052 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075345829 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.079514641 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075567581 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078071792 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.081033846 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.084629128 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076836677 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077260598 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.083446243 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076892758 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076485438 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073901621 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076401132 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074054525 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.082354575 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.085636981 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.082908491 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.081250407 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07672696 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077254332 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0771305 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077388168 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077008416 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078436459 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.082464062 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077487193 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.087894514 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07653165 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077140459 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.082578948 seconds)
  done (took 6.921623132 seconds)
done (took 144.724612502 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.262345257 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.231653282 seconds)
  done (took 2.103748231 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.130411356 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.131313575 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.154872326 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.078913508 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.164820745 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.240028368 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.183508914 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.080598007 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.079521659 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.082513106 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.080523544 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.081860779 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.082550674 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.07872748 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.145592806 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.079425852 seconds)
  done (took 3.511256958 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.131338997 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.248685994 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.117253924 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.078574765 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.166462387 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.085331763 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.080527519 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.084427114 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.085426544 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.077632083 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.128975743 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.093189771 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.082407091 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.084522942 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.0804247 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.082408398 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.0840738 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.085504044 seconds)
  done (took 3.523248842 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.147295598 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.089930701 seconds)
  done (took 1.88479573 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.173693504 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.115616411 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.158393481 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.379114422 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.149744795 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.152253902 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.155767545 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.149974847 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.123314784 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.147787804 seconds)
  done (took 3.342845764 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.116212636 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.115235437 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.354024088 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.113200336 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.090977055 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.084909776 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.082833836 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.088321754 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.083088356 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.085214723 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.135379733 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.083592423 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.08028336 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.136353163 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.107387644 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.117530919 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.078976141 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.087141714 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.088626689 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.078671109 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.084674746 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.088835703 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.193543251 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.087781917 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.112012173 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.084028265 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.085515681 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.082323284 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.082054207 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.085697934 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.086588787 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.109751881 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.086821984 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.092168124 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.084213694 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.10633444 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.079099105 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.109351462 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.082498387 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.079563237 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.083044253 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.086802308 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.079215386 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.08581127 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.08257356 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.085092062 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.088852056 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.078655145 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.083089508 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.082948545 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.080492495 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.084333006 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.084035832 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.085378774 seconds)
  done (took 6.937500009 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.132503803 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.120875333 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.077801445 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.129184221 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.12101245 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.077301576 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.136972978 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.115591071 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.134569143 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.077320028 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.078335923 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.077701427 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.084592378 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.088049163 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.132390603 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.124720918 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.079411729 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.077962265 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.12458856 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.124868434 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.077068668 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.136373802 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.127876762 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.123399265 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.075375812 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.076612399 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.075166044 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.077122519 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.085041148 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.084610678 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.076635098 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.087015868 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.089195152 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.084163851 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.075395278 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.075885944 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.075076994 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.084912721 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.09003708 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.08622006 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.083485478 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.076256803 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.075873176 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.075623412 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.076824163 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.075918291 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.086802321 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.085230281 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.087051325 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.078106284 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.076889698 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.076976528 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.078290448 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.084719372 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.083906978 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.084894807 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.088445848 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.078048165 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07740082 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.07836064 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.088040518 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.085648751 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.084505032 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.078273066 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.086464273 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.076866125 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.086666649 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.089301129 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.07714436 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.077839438 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.077221514 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.077624724 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.076771627 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.084218247 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.083885308 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.077371196 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.078200219 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.076933689 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.085959427 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.085142301 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.077998613 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.086987301 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.077273738 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.077205847 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.078188089 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.079501107 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.090807804 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.088926206 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.07934461 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.079036827 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.078683295 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.079054468 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.077568401 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.244186797 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.084404436 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.084865006 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.085516727 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.076805617 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.086648578 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.0851311 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.077071729 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.084403156 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.076475024 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.076920687 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.076839996 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.082913442 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.082945834 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.085495609 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.076717693 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.076604839 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.08570458 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.086937153 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.076776567 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.082786956 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.086364951 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.083908892 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.076711147 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.086579785 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.077082301 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.085692658 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.076862048 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.085542457 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.077254808 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.083556925 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.077005371 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.075874488 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.076092709 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.086505422 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.077032685 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.076722011 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.077167031 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.076292661 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.083391931 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.087680071 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07666912 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.083861429 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.084745715 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.07821207 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.087158131 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.07837532 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.086839003 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.07738956 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.078099475 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.076595868 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.089189161 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.077649214 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.078112094 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.076666096 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.086705115 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.077572252 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.086576734 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.083739125 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.076563784 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.087655874 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.086126913 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.083979327 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.086603456 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07710927 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.078004831 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.077591404 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.078498852 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.086878869 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.088598729 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.080134117 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.078456228 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.083712798 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.08713033 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.077371982 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.084816227 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.084178193 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.084592618 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.078240976 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.077782443 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.088057886 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.088712235 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.084305927 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.087352372 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.085915519 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.077539299 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.084132846 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.090250647 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.079136284 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.093370161 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.079519224 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.089877345 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.091206259 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.086578176 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.247847177 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.087788602 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.086370369 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.085750401 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.087997341 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.07730256 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.077198408 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.083449418 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.077155846 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.081014956 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.08331218 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.077449279 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.07843274 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.089451164 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.077097343 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.086238793 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.07698658 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.084132606 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.076511184 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.07707077 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.088029983 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.076623874 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.077406475 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.084143212 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.07694293 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.083032056 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.086496291 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.082920097 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.076480728 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.076743595 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.086680638 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.085769765 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.075968907 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.076429111 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.077621702 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.085584694 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.084702524 seconds)
  done (took 20.918345611 seconds)
done (took 43.882802327 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.212180632 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.127802216 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.225534428 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.148766684 seconds)
  done (took 2.376304074 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.110800849 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.072649767 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.136712808 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.147260777 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.072585711 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.134418792 seconds)
  done (took 2.366125526 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.271781293 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.197143329 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.201023888 seconds)
  done (took 2.375634899 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.193537772 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.343721304 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.616047181 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.190862698 seconds)
  done (took 3.051164652 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.180060432 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.164878256 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.085777781 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.181027289 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.093675648 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.069301272 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.157651982 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.077561313 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.107634543 seconds)
  done (took 2.885781389 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.15521446 seconds)
done (took 14.921296151 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.327595073 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.138042273 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.088265896 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.081067063 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.196873498 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.194682356 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.287184821 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.083047668 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.275227873 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.388760188 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.227667421 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.103751131 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.156532681 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.099526629 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.3473231 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.085475791 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.082410818 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.077447224 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.208200058 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.206219351 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.244112053 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.081994667 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.153557754 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.084921713 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.166703303 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.137859044 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.233850079 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.380112074 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.345760788 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.084529768 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.189491023 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.102817486 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.182651129 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.194340864 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.196001744 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.109127262 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.075137435 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.333785523 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.167720817 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.396843379 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.21810805 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.08071224 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.207323728 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.079032046 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.142727291 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.144840294 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.088147295 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.080802182 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.099352768 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.080247096 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.096480315 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.080610691 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.204484448 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.07644138 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.155261625 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.201524681 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.399079643 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.231253899 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.079551036 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.091575402 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.082517082 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.215947904 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.099008915 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.078925633 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.086198068 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.07349396 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.193145289 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.09428532 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.075251323 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.082805624 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.081526186 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.166350977 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.145966198 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.121339763 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.085468679 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.179627189 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.156385624 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.101776334 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.106429249 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.083036113 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.073017273 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.231196244 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.079193974 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.092298322 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.079198968 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.111005299 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.073997311 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.094022973 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.214302432 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.21071494 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.135400241 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.074080593 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.292745124 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.074246847 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.104145675 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.14140774 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.074233475 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.229909358 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.074626799 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.074519377 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.083153719 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.081101329 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.075655138 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.213817239 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.164510654 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.079438717 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.079824327 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.073572744 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.079060369 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.076571098 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.073187362 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.073592979 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.158059788 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.09519597 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.074524225 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.166631913 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.190224579 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.085446148 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.09326095 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.139259882 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.076284265 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.082531183 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.081972886 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.188283511 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.08282458 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.198179828 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.077192651 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.098315263 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.17867294 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.156102102 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.166487754 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.075785748 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.219170433 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.084329141 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.074358483 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.082828111 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.105898185 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.083827974 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.089851652 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.082715499 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.219409948 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.083790829 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.079135296 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.179682869 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.074470755 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.171454358 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.158628297 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.378044545 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.081770307 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.086586923 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.229415608 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.100954169 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.105665557 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.09905162 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.080071421 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.075545842 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.074282502 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.090076462 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.074388293 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.076070152 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.089305805 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.080391464 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.073915444 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.245240567 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.084454906 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.07796258 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.264433695 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.085973109 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.147564939 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.095486367 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.075247285 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.16669105 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.074854515 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.096190584 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.222866661 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.073890181 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.156242643 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.075604696 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.075402454 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.081483752 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.076464673 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.082103315 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.086868069 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.074130598 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.087693083 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.081262495 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.073669458 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.165095516 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.076675063 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.233378504 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.166255188 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.168562848 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.074694147 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.093239199 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.074623739 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.198595671 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.075697587 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.126878453 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.177609751 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.091327474 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.096126426 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.074993888 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.157258155 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.090470318 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.073705311 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.16382468 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.192137071 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.148750252 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.08215254 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.249565352 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.083303089 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.074353055 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.081923354 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.08178625 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.073994231 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.158605886 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.079196572 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.074760855 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.07452516 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.075869981 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.074006403 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.101774812 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.074631898 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.081787104 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.073962927 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.076055863 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.077694872 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.073987548 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.081674843 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.158219619 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.193425678 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.079803561 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.09568106 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.088304296 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.085631964 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.207209434 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.081213734 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.205629623 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.074676254 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.084486568 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.097823771 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.075109312 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.080829236 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.074304135 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.094295894 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.077316759 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.076181848 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.275628455 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.078940868 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.075535385 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.076062583 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.077227157 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.084115745 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.077981664 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.074869528 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.074940261 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.074671872 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.079078982 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.080262171 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.084631105 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.095559284 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.476583116 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.074810071 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.077474002 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.073663519 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.072007402 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.074535071 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.075514667 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.074438441 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.0763512 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.075363698 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.074383211 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.103372098 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.079771451 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.074576175 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.096571639 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.073821226 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.084089206 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.188829086 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.091559142 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.079086183 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.073986851 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.267631488 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.163907499 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.097142955 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.094256157 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.074046519 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.084366883 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.075011479 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.076454793 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.074312711 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.102771994 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.080293258 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.074728925 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.075003358 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.074846869 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.206046261 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.082652325 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.075339065 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.083066124 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.074920203 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.074562295 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.103083144 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.07473909 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.075931447 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.096412659 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.086975915 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.159836164 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.08693397 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.076344832 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.209513295 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.074595505 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.075059756 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.074578381 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.172780009 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.087487316 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.077149272 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.074850488 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.080750263 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.082558757 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.273381438 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.079971885 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.077042144 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.081913086 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.073713495 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.074136905 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.100646621 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.103726618 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.076786419 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.076703321 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.074904134 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.073785251 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.155017522 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.081820888 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.078864573 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.168385776 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.077408651 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.082560869 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.075176939 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.475521682 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.081751617 seconds)
  done (took 43.02571229 seconds)
done (took 44.744142361 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.16126516 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.089530237 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.08893253 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.08471529 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.088704716 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.088322947 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.089874631 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.084595995 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.089045312 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.087530604 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.140273144 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.073115892 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.081907977 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.090440866 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.083260375 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.090672768 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.087558983 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.090515551 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.07340329 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.090302964 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.10245178 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.087871868 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.08362229 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.089848517 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.073965298 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.08307881 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.153582805 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.095954292 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.079239829 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.084634552 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.082236775 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.089850236 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.082336776 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.081180457 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.084289811 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.079597372 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.084308358 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.080380384 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.155334671 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.079556032 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.074327625 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.087637205 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.082016658 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.091777804 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.083133963 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.086637792 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.07974266 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.088603404 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.072325601 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.087141171 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.153787474 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.079015621 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.078756682 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.082021269 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.078360336 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.084183328 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.078417522 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.086252159 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.079104413 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.086580435 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.083099016 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.082406473 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.073298799 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.083648926 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.085159833 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.082267466 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.072479428 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.079867511 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.073866861 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.073351129 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.072421121 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.083230668 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.081808025 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.079348565 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.071776247 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.072185715 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.072880335 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.087687469 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.081500357 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.082987942 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.074128039 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.078999485 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.079025491 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.074543764 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.079733832 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.086793638 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.073510081 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.074161542 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.072958664 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.086470884 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.0802327 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.074251626 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.087714713 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.0799602 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.079695934 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.074064469 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.072719243 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.079292943 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.082832469 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.074516855 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.072567064 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.079596331 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.078990918 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.084346816 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.075157742 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.080246731 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.080872926 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.074019443 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.084414434 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.082629791 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.25142502 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.088295726 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.083382365 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.085196251 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.072795609 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.07128494 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.083193841 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.07339625 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.079355233 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.081301581 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.078784047 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.081541783 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.072682741 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.071839731 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.077857601 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.079715499 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.07286227 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.073229601 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.073363812 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.082814283 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.080051187 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.072205284 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.073531987 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.082531807 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.081818227 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.071816709 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.070673694 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.081263978 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.073571283 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.079426111 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.078834626 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.082417642 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.072416578 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.072869692 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.071481384 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.071607138 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.071243388 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.077993048 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.078249935 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.072490501 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.081814192 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.080738396 seconds)
done (took 14.655993116 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.086661644 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.119554611 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.175462465 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.139564389 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.086787639 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.075281143 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.079140277 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.094621645 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.077350546 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.10169189 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.102286624 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.097883391 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.162657017 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.072255619 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.074087755 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.074948998 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.07151987 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.08720349 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.143848921 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.099049302 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.119812725 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.073113187 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.090676978 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.094272117 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.087237004 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.094369925 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.075342768 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.075262464 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.077935938 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.093363663 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.102684111 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.073545927 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.075054466 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.093953313 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.091747941 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.08288169 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.074345121 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.080834903 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.07422186 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.073582067 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.075841691 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.092980159 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.081568955 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.081434105 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.074551263 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.075083513 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.074397498 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.081862838 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.089472657 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.081357487 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.088296885 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.091757112 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.076370076 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.074498057 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.072409123 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.082353 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.07404047 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.074089995 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.074421126 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.072407549 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.074012061 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.07673795 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.079861512 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.085082691 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.077934152 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.081482684 seconds)
  done (took 7.588200857 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.093624535 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.104106214 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.089539978 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.092295204 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.072745562 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.072747197 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.074400455 seconds)
  done (took 2.465971773 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.12191667 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.135367031 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.143992826 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.146011322 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.159769642 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.144722157 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.087908587 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.109412438 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.074143681 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.160173086 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.154539736 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.149785843 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.078160461 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.088242736 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.110119196 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.152336513 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.088982902 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.082051457 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.143337267 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.149724134 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.0788765 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.108235634 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.088982416 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.07513912 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.146622068 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.139981233 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.078558406 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.075297239 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.07692032 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.073733442 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.073671019 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.098780749 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.138936206 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.0917314 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.075085617 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.073001392 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.136283414 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.075516883 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.140233347 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.08171265 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.138276411 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.076445022 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.077424535 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.074700728 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.075182599 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.143366254 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.075986485 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.07494201 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.074694082 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.142941461 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.073677451 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.141768137 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.077020577 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.080206903 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.083055909 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.081532912 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.082593248 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.074484652 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.144063454 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.085306225 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.07676702 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.152535245 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.153058866 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.314723644 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.147478802 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.083796256 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.137026999 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.136523851 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.073981159 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.083804655 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.074805472 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.147666784 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.077702937 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.076615339 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.079561509 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.082506323 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.151884769 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.152007308 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.151628383 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.088673606 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.077729291 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.074573404 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.14997296 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.152601615 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.078644919 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.073595488 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.075098241 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.090062266 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.100500693 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.07699065 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.079261162 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.073386988 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.084409999 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.075797297 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.075450869 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.143007158 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.073131784 seconds)
  done (took 12.108359549 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.076937583 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.076195247 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.074565351 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.075112339 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.075120196 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.074935811 seconds)
  done (took 2.339015067 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.101525814 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.073428872 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.087789536 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.075037665 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.098977146 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.141465656 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.142413151 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.076583484 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.092137896 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.087837283 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.142538098 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.143780541 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.144798682 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.076176346 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.144091841 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.088328074 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.143652892 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.079670333 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.086754988 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.076261605 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.089606684 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.077225216 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.077448669 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.150990841 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.0777972 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.086624945 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.085568146 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.08833527 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.087718105 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.076832474 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.076722537 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.077699739 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.085539899 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.077134004 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.144873784 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.084974922 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.075366287 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.080203371 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.076926902 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.077667948 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.146344298 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.076615256 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.07993139 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.081285641 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.076842966 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.084879616 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.081067413 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07988897 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.14476783 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.0805304 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.079544042 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.078532368 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.07763417 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.0812272 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.085394061 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.076710293 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.080579558 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.145241123 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.076699007 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.085064362 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.076063987 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.078835948 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.076945419 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.07842688 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.082332644 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.080757269 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.085965046 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.078410942 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.078047653 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.076717143 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.081056647 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.076444777 seconds)
  done (took 8.466413166 seconds)
done (took 34.80041039 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.563039283 seconds)
  done (took 2.44378472 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.044634332 seconds)
  done (took 2.959447 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.106571177 seconds)
  done (took 2.013489811 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.35811479 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.4431638 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.830255102 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.147654769 seconds)
  done (took 3.666719744 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.923845207 seconds)
  done (took 2.842387725 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.287800479 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.245996499 seconds)
  done (took 2.464753074 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.503121032 seconds)
  done (took 2.401345644 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.531342658 seconds)
  done (took 3.452129208 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.249035289 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.175483342 seconds)
  done (took 2.33874864 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.733034951 seconds)
  done (took 2.638214309 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.980915395 seconds)
  done (took 6.896399544 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.282949344 seconds)
  done (took 2.240432391 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.253375223 seconds)
  done (took 2.172667627 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.785259937 seconds)
  done (took 2.696034599 seconds)
done (took 43.175929147 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.098782255 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.095348294 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.096309055 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.090393792 seconds)
  done (took 2.266211221 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.082647076 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.078135595 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.08131618 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.081911376 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.079218354 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.079898913 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.080171535 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.077682729 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.079126761 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.078621044 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.07585157 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.077564811 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.080621522 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.07832996 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.079889473 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.082480792 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.079670438 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.07855737 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.080801196 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.077298822 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.081093089 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.078480725 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.077817864 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.0799991 seconds)
  done (took 3.807630678 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.087387908 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.07961314 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.08334599 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.078739615 seconds)
  done (took 2.242823133 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.084460215 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.084540148 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.093830291 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.098462028 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.084025678 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.085649136 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.091195081 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.092849725 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.09919768 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.095850434 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.075936993 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.074978388 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.074684892 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.094558311 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.090725927 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.069258184 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.070220609 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.085469646 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.084038119 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.087644763 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.077496416 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.072819559 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.085175619 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.086429736 seconds)
  done (took 3.944420585 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.090636298 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.072931832 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.090546734 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.101517055 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.102153803 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.072509606 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.088388949 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.103565333 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.141540889 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.073018074 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.079499589 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.073309877 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.116966791 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.073633016 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.089025874 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.121729603 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.125237297 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.077682823 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.108463357 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.073466167 seconds)
  done (took 3.800380676 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.085535386 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.077284683 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.07847201 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.073250848 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.084646355 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.080280187 seconds)
  done (took 2.418667734 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.076564474 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.075973054 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.076568085 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.081629574 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.075547803 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.075926552 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.075235273 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.07329445 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.074275036 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.074714192 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.076020463 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.075754158 seconds)
  done (took 2.84017986 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.235628047 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.079821958 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.078366189 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.073628133 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.075096102 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.073926209 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.089936286 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.077315399 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.093339096 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.074419793 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.075128791 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.077472698 seconds)
  done (took 3.048156001 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.116232407 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121428972 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.157319795 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128142426 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129099445 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105050844 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.201229021 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.102994929 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.182892863 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.15144913 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129406148 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102736098 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096408308 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.078446074 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109720261 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131289943 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.15238705 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081659924 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126206332 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.246509914 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146821027 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.149034902 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.159414606 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129103083 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.102972627 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.159554515 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.106722448 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112073018 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.136392193 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141811384 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131694545 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.109086433 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.080619855 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.080028699 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.166359343 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.119237354 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134436575 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.104640314 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.118082343 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.099436545 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120607138 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.078550764 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.093908232 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.127189417 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.096152128 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148595463 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.104294562 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129124027 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.269363297 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.151366783 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139164343 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.171481764 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.094871153 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114848154 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148937593 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121957432 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145883482 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.119220221 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09181289 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.130635302 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.116167462 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10975372 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117168447 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088290943 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.192815911 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098514015 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.123591304 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122322937 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.105472664 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106060985 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.118762725 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.1515561 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141509609 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.140179489 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.152844414 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102341131 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132129082 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.112862578 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.142487126 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114297281 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.081062376 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.136829072 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.143989767 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112072898 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112639061 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.146294695 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104097531 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085705615 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.112366976 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.131962631 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089849981 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.128066937 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090247116 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.122807591 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.153269312 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111798317 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.308581805 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.1305116 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086851727 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.165223814 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119178328 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081159783 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.128430995 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123755884 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.168783721 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103508269 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.084644028 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.109284516 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112439871 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.164255979 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117778048 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088750173 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119119874 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150293791 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103103973 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.250370946 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104615522 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.152393312 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122634593 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096628542 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082167303 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.100746572 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125975585 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11878839 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.124087366 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104109379 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.094219791 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096497957 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12669022 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103258766 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089475858 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125025948 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.115950672 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.084775464 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098592549 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.086449043 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.157901047 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.087882927 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151064006 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141005386 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.086089879 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118574133 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107610975 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119152995 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.110529434 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134319057 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156627212 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.209602981 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.103199708 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.109652887 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.309685652 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.158946053 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.137237038 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.101378587 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.084461426 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109760555 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122682102 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.107650816 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.135354766 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102080085 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116635125 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.11241819 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.153632536 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.155928386 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108371334 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.110492525 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117738313 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.13156636 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083200468 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169220919 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112873079 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129138258 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095973596 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.154329642 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.12409848 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099515988 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09595104 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.111094668 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.116067798 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118084972 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.157308944 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.107120401 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.080252169 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102745875 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.158279464 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086101775 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120565616 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.101453049 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.103877257 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.132885961 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.106042447 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089752747 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.076372991 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141681264 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.175796816 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.078834516 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127317249 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.120115565 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116014678 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.140347308 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.078993753 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135454272 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.340812757 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128903991 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151177784 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.178149067 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127936778 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.131009017 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.123132973 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.116224173 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087878907 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.137268187 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.145822126 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104448499 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09918499 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14468483 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129592195 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.148137204 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.12687671 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129106303 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.115362414 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117834349 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112550144 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.116137735 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.159141574 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134826018 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.137727094 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093323539 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116935202 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.131422963 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149053153 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091100853 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.15474582 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.09504266 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132144279 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.087309248 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13703127 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.086746174 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.188466165 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090006675 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.111598061 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.077889721 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.083178589 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.158264785 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.12643026 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119891913 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113393366 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.154190982 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.152906315 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.089061241 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121478658 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.31284566 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.111948239 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12761549 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.120524446 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.098751363 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104287777 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119207878 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094006554 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.088932409 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.125915538 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101147067 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134986281 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093044484 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082265176 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149038462 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113366442 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102872757 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083716806 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116403755 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.132434707 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101028325 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094474069 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125515504 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114594726 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.153559678 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.101173878 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.107829817 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135995095 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08902595 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.102809866 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.077418117 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.095223087 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.085044182 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.141657906 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084561499 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127946778 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.075955206 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.14458843 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.09759342 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.104229844 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.113714602 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12246608 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142174103 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.106152751 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.155121569 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099822457 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.135405751 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120382913 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105947739 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098024469 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115292179 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.112648634 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.137500447 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.109208578 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138453429 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161143093 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116840578 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.343087889 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099652378 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134325035 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117216651 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.135925506 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121012008 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.178325557 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150358073 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121999576 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120502494 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083339016 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108149375 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115295243 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.123185497 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.186842682 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135326043 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.080170287 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114698362 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103218297 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.120304025 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114753953 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091678296 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157972903 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113539786 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.098508803 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123952481 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.100932245 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.115995147 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08551646 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110812978 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.116570892 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105813147 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.108169953 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.127029327 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142358454 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124656865 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.157633145 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.110716692 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.102625678 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.130756073 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123199136 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121353 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095425713 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096947565 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.153153741 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.134484574 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.141526461 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.113075107 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122639067 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125939478 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113119216 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.324711911 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117706306 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.136163978 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088973843 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.085157779 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.076359263 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.080006485 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.134391789 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118287712 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121688917 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10777208 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.080732314 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.113189609 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113252972 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080059815 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096540474 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102233539 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108011545 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.100883311 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117126306 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.124105384 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.107590304 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.115272182 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108529723 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.158524763 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.110695465 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09742952 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.157719336 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.163380681 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100139826 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102727944 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.080431532 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089283358 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124842102 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.165688932 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.169005981 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.088935304 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098052265 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.096691007 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095797969 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.080405108 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.099058072 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.101046511 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118220039 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110625338 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.126340185 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118448182 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085820558 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.11684434 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112098592 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105046985 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.121957066 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138016519 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.144534352 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.158595375 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128406492 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122681417 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.268772625 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.089990087 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084513201 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088681554 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.111229375 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.087989899 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085068502 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.154419667 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.10181151 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115397458 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118766558 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097558927 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083728827 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.146163851 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.077857083 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.146834363 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.079926881 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090890511 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.091168097 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08672941 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101885699 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149126966 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120509641 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122146864 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117469589 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114718787 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172718693 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.174940833 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091841993 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.158139238 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085439608 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085990471 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084913743 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1234895 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099810783 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128224841 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155750277 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099664212 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113122644 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087321346 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.157521624 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.111644854 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.117663162 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.097185982 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089775561 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.159443279 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089809947 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.09142063 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101042723 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.12611109 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.082115856 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115388553 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093638615 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088996727 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.18159284 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.722184089 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10341747 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.087253433 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.295272585 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.158848924 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145084542 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105388829 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118557699 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.130684098 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110509584 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104230362 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119048385 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.203451469 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083311178 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104066199 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.114515328 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.108268065 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112103727 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.109588239 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.097458746 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.101987267 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.096080685 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087799774 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117369155 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096410275 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10552766 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118133509 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091865278 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.097568818 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.14373956 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.114994333 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.092951988 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097430471 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.116562307 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097645144 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116644754 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.079678535 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125424677 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099921391 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131994839 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.108271196 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119992904 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138569733 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104750803 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.15167209 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.121310347 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.136952235 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.098820241 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.087733165 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141597064 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.101040663 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08705264 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.160296197 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.108856871 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.117035247 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116755419 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.110281543 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130652897 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.316396387 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124795078 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107295674 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089332495 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109939842 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.111737368 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.095941851 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088540599 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.083007541 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.084847818 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117103055 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.094171969 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095571382 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125083733 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098067244 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114786518 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.113617618 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132819233 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097538803 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.111976172 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121495867 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099635725 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120134868 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.111650979 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.140774282 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.187079213 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136082186 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.143338608 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148098527 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.087842882 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.085237777 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.076456716 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125501533 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090021986 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.100662705 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088891227 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.147938166 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.091312341 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123516334 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.257203126 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.089958242 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104928322 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10697861 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.078470934 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093382362 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119134437 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096366233 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089328764 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131468073 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.091302978 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.141719446 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124049627 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111043133 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107871096 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09135738 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127132035 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.11762968 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.147410303 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108044851 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.08793567 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.323834062 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.114020598 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149328238 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.081581668 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089077823 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.140981137 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114398764 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142890842 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088576168 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160551703 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.154620375 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109996922 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144198731 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078821099 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097531961 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.694984359 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.138480461 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092507065 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120352499 seconds)
  done (took 76.740101137 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.199360935 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.194715497 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.130398771 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.143340613 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.297488264 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.308375346 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.159463625 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.131670066 seconds)
  done (took 3.661924613 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.081105544 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.092427596 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.090333684 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.296863793 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.111740498 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.075721495 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.080770735 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.090922018 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.082298288 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.074787465 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.115048242 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.075473252 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.079079082 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.596546941 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.073627568 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.080828513 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.07880966 seconds)
  done (took 4.286812912 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.37026484 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.810460908 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.430936693 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.876564406 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.177019039 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.739832922 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.083218497 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.094414398 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.972572186 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.427634484 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.170334635 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.236128256 seconds)
  done (took 22.471883712 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.085890844 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.154804646 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.153706496 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.084733657 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.084221638 seconds)
  done (took 2.651050091 seconds)
done (took 136.169046123 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.095382508 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.199850711 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.07694262 seconds)
  done (took 2.422456765 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.154357613 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.154988231 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.153249713 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.15563533 seconds)
  done (took 2.727245702 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.08411295 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.085739455 seconds)
  done (took 2.281616902 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.248080847 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.256006781 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.101557852 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.092531868 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.090152075 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.089710139 seconds)
  done (took 2.391264914 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.079541965 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.079748317 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.079615834 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.079766692 seconds)
  done (took 2.416620606 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.195801537 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.074470303 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.076914373 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.079559305 seconds)
  done (took 2.518838977 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.093463658 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.095262338 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.127863501 seconds)
  done (took 2.419208251 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.092841976 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.09391358 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.087263146 seconds)
  done (took 2.376863347 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.120731817 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.106466476 seconds)
  done (took 2.3162143 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.08794403 seconds)
  done (took 2.186815876 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.101426197 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.107241228 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.21939771 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.185765954 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.224864762 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.208505394 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.08528039 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.085603483 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.081064646 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.079865434 seconds)
  done (took 3.464423174 seconds)
done (took 30.336959288 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.094467356 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.20753912 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.324940211 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.096171549 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.66496931 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.321912622 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.736220998 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.100697074 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.110847067 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.075852123 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.094423081 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.640738268 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.742218287 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.158079884 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.725578149 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.14790485 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.570322114 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.076834147 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.075558082 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.075963866 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.71705992 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.076262266 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.075796584 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.076531359 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.5680322 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.343366493 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.077922681 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.144089975 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.076063031 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.079866971 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.324426386 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.077473326 seconds)
  done (took 14.747324131 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085239004 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.141687387 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.080726504 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.093978791 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.078321467 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.077966593 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.07872663 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.076285497 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.123590215 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.075775315 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.095181069 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.076184578 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.080435764 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.077369812 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.098873907 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.076378075 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.078387716 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07674642 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.075468151 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.075766855 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.095645521 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.075366359 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.077240301 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.07702759 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.075750773 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.091010587 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.076908712 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.075364735 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.076719233 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.080418696 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.081950665 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.077165342 seconds)
  done (took 4.799995203 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.141273958 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.145361889 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.081698532 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.119980062 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.135305298 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.077781777 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.172259284 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.101171626 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.127543584 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.076424612 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.094696206 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.074794392 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.114637146 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.077366593 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.098595369 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.075832771 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.07919197 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.076583635 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.07579471 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.076394173 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.096982335 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.074287975 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.076940559 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.07702368 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.076949595 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.093276168 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.077555988 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.076504872 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.076308534 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.080893002 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.081814962 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.077269934 seconds)
  done (took 5.088523218 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.078076273 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.078900909 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.08656788 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.090459404 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.074581308 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.076280673 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.07674929 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.073697184 seconds)
  done (took 2.748648683 seconds)
done (took 29.497342116 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.088770481 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.075483542 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.07907066 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.097548111 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.082450095 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.144233201 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.073867577 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.083912652 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.080158377 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.081011954 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.081185731 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.076175349 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.077859376 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.072580483 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.0799037 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.074290951 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.147164469 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.078471187 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.14642651 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.147858858 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.077399205 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.079801009 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.083835722 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.146699607 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.148195415 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.148151041 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.084065082 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.080857465 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.074486934 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.07678237 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.223998652 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.226318743 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.084661512 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.141813984 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.074352947 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.073882532 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.079085766 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.077779552 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.151695267 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.083159634 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.076916745 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.083791639 seconds)
  done (took 6.338958717 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.228138626 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.235963561 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.229447485 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.08981186 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.101164772 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.089016493 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.235514457 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.086240338 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.085012983 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.234802382 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.079852369 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.084225576 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.087079888 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.077612943 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.085101511 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.080225193 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.086894432 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.079164019 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.085293376 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.084866018 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.235065419 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.077761721 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.089445958 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.085765963 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.079629827 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.086424775 seconds)
  done (took 5.271925062 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.08319408 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.099640173 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.103245538 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.163050498 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.121932139 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.092383064 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.093267454 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.103356851 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.111626272 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.07635704 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.100461004 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.103787949 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.106563111 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.083258031 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.118389174 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.095083883 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.089415216 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.078307589 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.082676384 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.113927237 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.10219063 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.097032382 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.110404298 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.098594996 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.075490702 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.086278542 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.083800519 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.093868175 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.083972852 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.089517926 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.079391709 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.132849515 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.076698198 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.089198529 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.0804246 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.073483779 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.100441515 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.090161738 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.092119136 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.11860041 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.087514369 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.07812086 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.107388533 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.148884373 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.076325887 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.078813575 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.080527111 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.089993633 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.078577718 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.109472921 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.093982406 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.076067167 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.096026901 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.077439058 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.078067654 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.097601777 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.077478 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.078198088 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.08897336 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.082229248 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.098043612 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.08223545 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.099608161 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.076037044 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.088554321 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.078095241 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.077499305 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.075003602 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.114038245 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084644647 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.132061815 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.076640038 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.073515448 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.089906917 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.088464918 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.083236996 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.075746611 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.097347312 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.09043919 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.079685687 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.088677016 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.080487079 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.079835746 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.114957818 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.074519206 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.07449561 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.073529138 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.078096082 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.079516699 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.076543824 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090757482 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.076136722 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.080664648 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.093302394 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.076415185 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.077540102 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.078455134 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.077016888 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.075738976 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087976747 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.080113972 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.078132586 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.089944634 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.07765896 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.079789403 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.092758205 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.087142616 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.076143733 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.078001574 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.080148577 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.080145441 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.08361706 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.082009856 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.079648614 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.082525395 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.086266164 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.08556852 seconds)
  done (took 12.60730552 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.24815125 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.236922145 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.077437595 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.232247782 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.085423579 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.159699742 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.236213202 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.237631054 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.078018911 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.078558762 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.07629447 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.174572232 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.169996352 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.181537647 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.161215304 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.079413163 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.10506383 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.183412671 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.239101044 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.233635866 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.103184229 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.085121932 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.079699723 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.078831912 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.077885712 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.085184102 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.093383934 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.086622063 seconds)
  done (took 6.1655782 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.083145308 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.122876214 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.080133028 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.102483984 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.09381309 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.075832509 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.078692145 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.077116404 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.095048444 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.081964576 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.076177877 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.081052968 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.080030715 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.0786038 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.077666315 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.084170659 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.082858447 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.084677799 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.080623429 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.080729041 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.087151975 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.173606598 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.080541018 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.076355849 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.079764609 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.076407138 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.082382416 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.084794835 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.076228018 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.081176389 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.073267325 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.081180966 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.09218343 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.077320668 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.076672143 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.076946864 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.076005817 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.076076621 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.076746182 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.074028066 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.073695059 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.082749697 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.074818436 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.080644031 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.091379542 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.07946822 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.077874594 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.078963862 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.078529814 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.072641364 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.080007167 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.079714222 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.078046741 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.085960407 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.0799068 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.078488385 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.077286919 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.108531822 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.082447245 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.075754119 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.143899244 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.074833128 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.07789647 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.084170544 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.09394258 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.078141385 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.074220082 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.07651725 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.088332427 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.091649087 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.076293116 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.082110602 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.072923879 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.076444266 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.078949817 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.078793423 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.077866165 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.073826682 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.075375028 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.076810465 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.0771929 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.076169576 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.076485073 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.079382467 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.073928588 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.075020918 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.077958579 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.077611071 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.082698751 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.075600664 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.079120908 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.078407011 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.074275479 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.079827173 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.08332372 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.079948365 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.10005911 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.085680424 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.07746928 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.073905557 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.092711538 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.078236303 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.075509887 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.080227329 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.081406219 seconds)
  done (took 10.832631798 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.107369417 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.077459725 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.09815186 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.11085205 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.086960305 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.081352702 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.090143244 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.075393367 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.100130524 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.075041321 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.085950961 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.073956229 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.09018453 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.085888915 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.078103372 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.087293318 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.07803711 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.099802429 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.09270652 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.074454383 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.086573231 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.089920787 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.08956638 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.096083602 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.096367023 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.095686165 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.087626353 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.077933399 seconds)
  done (took 4.681246667 seconds)
done (took 48.021660481 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.216224426 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.485790072 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.250185246 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.977625043 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.329284397 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.379357651 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.328111777 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.219088904 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.872296056 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.297571378 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.986001707 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.899452942 seconds)
done (took 73.464517602 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.432208258 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.382409023 seconds)
    (2/2) benchmarking "String"...
    done (took 2.459938281 seconds)
  done (took 7.057441638 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.653527405 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.202703496 seconds)
    (3/3) benchmarking "different"...
    done (took 2.253563122 seconds)
  done (took 9.303866894 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.507436824 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.769033459 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.482922925 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.206883277 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.208674541 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.700070257 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.391686813 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.864451976 seconds)
  done (took 35.808461012 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 7.235565184 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.569026083 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.65120845 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.723326508 seconds)
  done (took 23.4722973 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.64811442 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.619245219 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.632546287 seconds)
    (4/4) benchmarking "different"...
    done (took 2.911928939 seconds)
  done (took 13.073289818 seconds)
done (took 101.980282105 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.224811761 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.738825429 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.282452305 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.414146237 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.240264188 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.252912283 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.235588512 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.24971986 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.211401819 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.212170713 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 7.221986696 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.236487266 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.22859747 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.259569087 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.229230199 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.23005282 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.6651358 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.223566866 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.208290171 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 8.296751715 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.60525079 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.229895777 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.22311009 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.281676789 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.794186986 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.201036315 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.606972014 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.220705725 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 3.296368295 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.235662319 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.229538509 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.220999354 seconds)
  done (took 220.192053562 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.195131223 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 5.010454415 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 5.060749583 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.214786568 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.587495023 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.563557918 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.075225932 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.65784711 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.22814276 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.22267703 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 4.193650147 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.19529955 seconds)
    (13/36) benchmarking "trsv"...
    done (took 4.230408469 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.748719954 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.237166528 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.264685489 seconds)
    (17/36) benchmarking "trmv"...
    done (took 4.079594884 seconds)
    (18/36) benchmarking "symv"...
    done (took 4.024704655 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.264727274 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.142039652 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.239065284 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.749723652 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.706287451 seconds)
    (24/36) benchmarking "symv!"...
    done (took 4.023944631 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.224841571 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.26217237 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.218742899 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.228719772 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.716426022 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 4.053862243 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.257044661 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.23532014 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.608674242 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.43347365 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.220301788 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.226142583 seconds)
  done (took 193.777033814 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.432672341 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.21764186 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.252052357 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.314218532 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.238248513 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 5.115528655 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.226432948 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.219646848 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.234480386 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.23473831 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.220502526 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.290521057 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.220469324 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.47278013 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.225049221 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.214300182 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.217875887 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.457874246 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.232353809 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.238178624 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.223594518 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.323066706 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.555542876 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.336941502 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.213659785 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.228312295 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.323148821 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.212685597 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.204129511 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.209348159 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.322540979 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.203246905 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.328914743 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.332133386 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.233659458 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.266781986 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.222324659 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.555842488 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.212540134 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.228831781 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.235919618 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.279306291 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.236924977 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 6.490503404 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.31970431 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.229070603 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.242660504 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.692078132 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.76119288 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.214149972 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.212033427 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.214790344 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.213272759 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.213505594 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.80205599 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.235652625 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.278826765 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 12.123721044 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.225409686 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.220114108 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.230696205 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.220717922 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.229016944 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.22022137 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.268117123 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.878586008 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.722919834 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.575208769 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.059138133 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.218851644 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.222593742 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.228782586 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 13.598768794 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.289832847 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.230394155 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.20972066 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.38558954 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.220594149 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.206515557 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.165298478 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.164665415 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.220156279 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.342801519 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.215867308 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.218314248 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.336301603 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.382741682 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.219842902 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.236132144 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.291821108 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.205756965 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.205874765 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.226117859 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.17160121 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.233932144 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.244793222 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.681446592 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.237330933 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.224208541 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.356677254 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.572554167 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.211235491 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.277240084 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.630947028 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.186533747 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.231134171 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.225865541 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.250472441 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.238784071 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.252703535 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.282428783 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.242308947 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.250318784 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.246537972 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.231455602 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.234808966 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.224598825 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.243085926 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.216384935 seconds)
  done (took 461.27708791 seconds)
done (took 879.951062993 seconds)
(4/20) benchmarking "parallel"...
done (took 2.151792405 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.461549498 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 3.612837404 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 7.527384715 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.934040054 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.438444424 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.393537111 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.418810485 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.504817669 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.443219323 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.395962946 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.453445994 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.41275484 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.531117824 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.486743849 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.569637673 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.515047408 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.409264672 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 4.025321249 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.47179319 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.392431237 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.424005758 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.413129052 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.379184945 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.447685022 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.470887447 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.417120988 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.645061948 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.456785521 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.417878848 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.468424752 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.491117923 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.506756185 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.433230545 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.486794803 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.516889225 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.510154698 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.485017142 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.4941809 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.425333572 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.440882268 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.454881085 seconds)
  done (took 111.373303098 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 3.579169691 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.401856979 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.49329716 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.522049164 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 3.267732472 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.500190473 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.584170816 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.370468518 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.381298463 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.494547165 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.503920767 seconds)
  done (took 31.321104 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 3.472829674 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.406269959 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.507256965 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.541380283 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.638948802 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.528760406 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.577058805 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.390839089 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.385538272 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.530869537 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.507061026 seconds)
  done (took 30.696161786 seconds)
done (took 175.54468487 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.767425417 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.282652616 seconds)
  done (took 7.256214981 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.235151934 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.212878847 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.21697714 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.208211118 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.210075174 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.219830494 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.39341488 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.218204711 seconds)
  done (took 20.099389143 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.216065 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.221847262 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.227228318 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.230032819 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.226427121 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.228825056 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.241497195 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.240162977 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.233214208 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.233663903 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.242152548 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.230209771 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.234347148 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.233557794 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.215094664 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.231229339 seconds)
  done (took 37.876678249 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.221341579 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.21880287 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.222306434 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.220884313 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.221630374 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 2.228022337 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.227051219 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.233974855 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 2.219836207 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.225883124 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.24373969 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.234091036 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.223908207 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.24862232 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 2.247826861 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 2.259515601 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.261308443 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 2.241169349 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 2.243535683 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 2.236633548 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 2.234314378 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.223990976 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.227082913 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.227962229 seconds)
  done (took 55.793247239 seconds)
done (took 123.203107343 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.800344273 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 4.205758226 seconds)
  done (took 10.203808855 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.217930025 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.211641061 seconds)
  done (took 6.729461051 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.228431086 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.22306027 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.217836686 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.232464444 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.223845499 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.228684311 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.251653985 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.26038151 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.255776586 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.258491143 seconds)
  done (took 24.572014163 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.248428969 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.248990069 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.245596401 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.23693411 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.244944908 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.239002055 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.242485578 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.229039714 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.22973112 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.232357081 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.227304719 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.416013875 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.228515399 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.450393232 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.224814882 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.219650957 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.233259824 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.238775716 seconds)
  done (took 42.861387442 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.233930321 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.236622801 seconds)
  done (took 6.683234662 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.254130129 seconds)
    (2/7) benchmarking "second"...
    done (took 2.256601502 seconds)
    (3/7) benchmarking "month"...
    done (took 2.262914915 seconds)
    (4/7) benchmarking "year"...
    done (took 2.251913353 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.248949284 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.245757091 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.238712653 seconds)
  done (took 17.974633313 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.692728115 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.395363665 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.462736135 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.712783543 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.890610908 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.183888816 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.889917009 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.196946695 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.049749907 seconds)
  done (took 27.677953347 seconds)
done (took 138.860420153 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.879367375 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.243561541 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.860304994 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.365147166 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.317289443 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.566226813 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.280248503 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.770380349 seconds)
done (took 47.474861094 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.554704423 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.226676811 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.269014249 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.267267021 seconds)
  done (took 23.967423781 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.259098004 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.848504366 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.262940848 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.232829113 seconds)
  done (took 24.908437656 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.72297877 seconds)
    (2/2) benchmarking "read"...
    done (took 2.633372787 seconds)
  done (took 7.564685981 seconds)
done (took 66.167518886 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.226943354 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.219948048 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.234180321 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.229920808 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.235485164 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.235021226 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.237405221 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.243646714 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.247028681 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 2.247086565 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.249850049 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.24591283 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.251957595 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.244143734 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.231891654 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.23219174 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.234541878 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.239016505 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.234984564 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.218866518 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.221674084 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.231611742 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.22868695 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.233813986 seconds)
  done (took 55.848175203 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.294769869 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.291695373 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.300971999 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.29142745 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.314764031 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.295127521 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.28780054 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.274484487 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.299003054 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.293063538 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.288556593 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.334903749 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.291779842 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.328939275 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.274666559 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.327582191 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.305393115 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.276610465 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.266360059 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.32857507 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.293721148 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.275103116 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.317002445 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.270963279 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.314322409 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.271493177 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.281257293 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.29193559 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.268179741 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.324632022 seconds)
  done (took 71.08070912 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.262668473 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.234607738 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.237954246 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.328227703 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.24397684 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.241422735 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.249836883 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.264495948 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.259377369 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.261043543 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.250444191 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.243266919 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.237762171 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.242920609 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.247823924 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.247406355 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.259195268 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.414004895 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.232315387 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.229251436 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.279484222 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.222112124 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.224039753 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.229554215 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.220033399 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.227209529 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.228945337 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.219737809 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.231046884 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.225325264 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.235154482 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.293549399 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.282273235 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.250519269 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.369361579 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.305525472 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.236714731 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 4.039614196 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 4.298494293 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.267180447 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.223310432 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.227098037 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.217320684 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.221783906 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.283192171 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.222270031 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.21485284 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.227037519 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.232168855 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.2225323 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.222950374 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.224379725 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.247160789 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.225687842 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.245697954 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.2342606 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.243478439 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.24069959 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.233123841 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.248273697 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.250468376 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.317682554 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.242538938 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.233909536 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.612169887 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.238027968 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.29916429 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.2335898 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.226886662 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.440147584 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.236555511 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.448021896 seconds)
  done (took 168.723723394 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.226469923 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.239605771 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.319295842 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.322768174 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.240089238 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.236550515 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.227191549 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.235419287 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.896382734 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.246448186 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.25380756 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.259207533 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.915451395 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.257584243 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.254965718 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.334310269 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.255925854 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.23931463 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.248187019 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.254755022 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.244587686 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.234536215 seconds)
  done (took 53.158745628 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.292156506 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.267062801 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.276206787 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.257834835 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.248780896 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.257836635 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.281637549 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.249379548 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.290378657 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.284302122 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.279403823 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.279834956 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.255395427 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.304492322 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.29287173 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.337974334 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.294183108 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.326414297 seconds)
  done (took 43.292597498 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.428789435 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.420501112 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.321768478 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.289414395 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.497366704 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.48075777 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.357351583 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.418424924 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.291422039 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.405100346 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.418239842 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.2786785 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.464872905 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.282573906 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.281474316 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.492514047 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.312025876 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.281658298 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.36023019 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.359153395 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.438576766 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.370486044 seconds)
  done (took 54.488710022 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.295968339 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.305148647 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.333750959 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.320876711 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.242326184 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.240764167 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.304451594 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.295431181 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.253256269 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.275964838 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.288419045 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.245610203 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.324035132 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.294378688 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.32607997 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.279840626 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.292204979 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.295402341 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.284627276 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.24166122 seconds)
  done (took 47.973853057 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.246329433 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.250080616 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.260478328 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.26774439 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.257254932 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.264513703 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.256268523 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.261602511 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.253706815 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.499094382 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.262905964 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.253446737 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.248303766 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.250473651 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.239338805 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.237946357 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.245196138 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.239126242 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.238962666 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.238417826 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.46358121 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.242786003 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.239730281 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.240622361 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.245874691 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.248674353 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.242187364 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.245785766 seconds)
  done (took 65.652043878 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.31969674 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.305533138 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.304611474 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.390427458 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.378575136 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.293633098 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.368773799 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.363907831 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.289793253 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.280366846 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.335032777 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.292604429 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.280870161 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.296601206 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.295279594 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.333235612 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.294743917 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.371269365 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.316608344 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.282300424 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.328967166 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.288865386 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.33030644 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.273575044 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.283831118 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.345589613 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.338581088 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.422974836 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.321151669 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.29581508 seconds)
  done (took 71.855455207 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.27064863 seconds)
    (2/2) benchmarking "in"...
    done (took 2.266432537 seconds)
  done (took 6.763810162 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.252085364 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.35060329 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.256109481 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.424928386 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.404294247 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.417752962 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.407718913 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.332958384 seconds)
  done (took 21.067286428 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.235826685 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 5.566619656 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.393857163 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.24995678 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.239634807 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.804620101 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 4.202718422 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 4.150042881 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 5.04544131 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 3.219160335 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 3.425369183 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.992827973 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 4.287859598 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.585730969 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.351501897 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 4.084223263 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 4.468311674 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.787087153 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 4.272709829 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.352706853 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.999751264 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.352571632 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.264137914 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.267564538 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.263072319 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 3.238882973 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 5.268127098 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.650640116 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.389727141 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.36414751 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 5.026552596 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.31169058 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.241009883 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.493248778 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.346893773 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.249868219 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 4.41586367 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.340574904 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.255935716 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.258151945 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 6.060315208 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.961476041 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.495422633 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 4.481509026 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.322500039 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.252208207 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.251519689 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.264797385 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.509625863 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 4.082446924 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 4.279279593 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 3.240631022 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.373932729 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.240920263 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 5.801579006 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.392294962 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.246932822 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 3.249799996 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 6.974960045 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 4.485424647 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.861731452 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 5.550511312 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 4.382968258 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.376967929 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.251805058 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.679119818 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 4.148212406 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 5.075857661 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 5.006117222 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.350377484 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.839689766 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.270065671 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.269007268 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.266479996 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.288075598 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.65509666 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.300434653 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.268977985 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.255712368 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.249559532 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.509016103 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.36452378 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 3.083060146 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.37942045 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.642467674 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 5.804747002 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.372260808 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.23836309 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 4.938350611 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 3.189743697 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 3.415866466 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 5.960746362 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 3.463721915 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.41065473 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 4.274303197 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.514623657 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.295917086 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.264646087 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 3.10009007 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 4.753242747 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.400713013 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.254951292 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.869993092 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 4.357064105 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.294015766 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.25286601 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.955577142 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.355722974 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 4.362294236 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.288840999 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.27073639 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.278788314 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 3.003809986 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 3.458953193 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.311701749 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.9377681 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 4.295502198 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.698566723 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 5.629847733 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.430230005 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 4.600411822 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 6.236210248 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.70436874 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 4.129001294 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.295037013 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 4.627588693 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 4.563960543 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 4.940342731 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 4.561259994 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.374668537 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 6.156554402 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.294253588 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.25164211 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 5.411826017 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.299055834 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.25448742 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.250209938 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.2445955 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.239301328 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.250951266 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.356490194 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 4.627262544 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 5.942739604 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.389307526 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.499052372 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.393202274 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 6.164585489 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 4.440692005 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.911867359 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.382276667 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.241630503 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 5.854803484 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 5.656447869 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.952778796 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.36589306 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.24288493 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.243240067 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 4.095655871 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.272110115 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.346300935 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.270871 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 3.016379432 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 3.454933341 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.30613793 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.270854522 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.712279056 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.400179025 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.267052219 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 4.356914757 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 4.030727586 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.995819951 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.397533629 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.55638923 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.373048651 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.258044558 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.258981532 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.257249493 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 3.040698254 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 4.108853802 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 7.532068068 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 4.07364543 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 7.149438953 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.329628435 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 4.431793778 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.349756906 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 4.532437106 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.476771593 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.39715092 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.255966208 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.260066591 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.253694478 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.966755515 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 5.253343204 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 6.259713409 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 5.267104103 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.374380976 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 4.406627169 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 3.434297063 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 4.117954637 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.267886402 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.994764137 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 5.247352768 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.352740402 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.255132349 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.258704574 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.412546241 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 3.432122393 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.395998247 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 4.677582099 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.411722878 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.263301671 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.952043244 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.389777707 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.980696789 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.391331283 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 3.109698984 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.369061509 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.380382314 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 4.405602991 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 5.968313319 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.355890942 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.267534598 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 6.033984828 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.382648368 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.261653249 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 4.323343604 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 4.783689241 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 3.19881256 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 4.00796456 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.802098098 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 4.371523794 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.815476288 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 3.503419634 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.382538084 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 5.098714359 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.345894134 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 3.768225191 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 4.385505887 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 5.722122569 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.44920688 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 4.043705839 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.250517989 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 5.842371673 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.396745664 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.281961768 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.391848863 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 4.747825921 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.387008286 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.265868665 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 4.446036849 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.349000833 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.949662162 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.376315178 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.371253034 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 5.58868641 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 5.168749244 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.357355845 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.766720218 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 4.388944119 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 4.229572891 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 4.239117932 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.608468722 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 5.230695213 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 3.336058219 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 3.43064383 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 4.076393279 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.472076866 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 4.615900156 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.390717624 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.249571258 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.265474637 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 5.472543769 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.344318682 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.263917982 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 4.60302929 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 4.219499949 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.383273079 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 3.436605808 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.321520702 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.27290528 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.498718739 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.399177883 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 5.561132061 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.755101343 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.832205742 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 4.083866987 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.380409767 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.973031956 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.373190167 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 3.110657056 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 3.454165623 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.312333552 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.954988869 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.395142278 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 4.572311293 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.426430182 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.402180625 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.817380027 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.600318449 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.549766643 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 4.417446671 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.37428118 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 4.056354608 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.794421747 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 3.498089991 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 5.679968315 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.272319438 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 4.017914443 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 7.447610204 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 4.032275382 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 4.347363719 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 3.172834701 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 5.448003324 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.32101379 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.265877295 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.261609483 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 4.00130356 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 4.307796369 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.302642111 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 3.033762484 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.832575209 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 4.327277163 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 3.126898749 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 3.449133314 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.302102154 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.273804762 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.280421656 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.29180642 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 5.506040649 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 5.660328747 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.39987051 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.279176706 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.280817777 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 3.242188137 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 5.611364816 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 5.05946954 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 4.133823172 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 4.243744732 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.403477883 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.253654036 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.256690174 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.259218835 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.262081533 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.271631326 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.276427634 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.664563181 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.436906757 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 3.054475556 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 3.464354117 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.31958569 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 4.486967539 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.323419013 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.273543626 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 5.471680201 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.33440575 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 3.365217834 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.330401749 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.268702273 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.657596169 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.41730906 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.317758978 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 5.670247406 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 4.556152222 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.510664889 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 5.869158926 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.294715296 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.689652608 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.817675428 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 4.132453258 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.31203199 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 3.27119361 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 3.449484823 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 5.114615071 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.320141676 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.839305311 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 4.048448054 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 4.337619918 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 4.58578154 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 3.169171487 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.912540539 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 6.534123439 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.338894642 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.27768932 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.274878775 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.34051398 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.491414354 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.306284869 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 5.562591601 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.447188241 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.326874682 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 5.672241458 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.344350503 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 5.510269956 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.283198791 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.286639673 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.28500083 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.281964489 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 4.741185238 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 5.194886317 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.340601269 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.274217037 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.273605299 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 5.262582631 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 3.165411911 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 4.092482459 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 6.248901081 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.408260074 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.269308777 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.471204665 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.319421843 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 6.143809858 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.297381515 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 3.072807023 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.606972907 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.33801523 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 5.504339818 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.888785222 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 6.112719007 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.663531431 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.375381243 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.260793585 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 4.631785295 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 3.232336875 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.405541308 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 4.168779747 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 4.584137006 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.004175732 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 6.053901455 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 6.676820737 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.395313452 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 3.272604131 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 5.090854572 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 4.330130467 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.310205693 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 3.096443344 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.397021392 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 5.590050099 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 5.239942007 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.528216365 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.392995787 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 3.042869489 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 5.073088891 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.422396386 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.880004726 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.427931044 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.2794378 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 5.952347491 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.411318506 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 5.546531597 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.385167674 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.267331707 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.291690876 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.961779742 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.840774266 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 5.503717323 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.327605748 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.25243303 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 5.952329646 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 3.285269926 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 3.469855092 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.334803349 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.29595524 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 5.791002345 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.305294086 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.287279522 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.993622301 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.875025141 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.409869725 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.976099888 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 5.48457741 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.4110366 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 4.54118546 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 5.627802567 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.447531863 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.322362717 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.268603761 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.280339216 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.285831823 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.700517689 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.436583904 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.295620858 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.875898306 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.418654409 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 4.087165185 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 4.19623947 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.542777696 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.329817273 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.688390075 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.412291167 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.952432605 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 5.314009052 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 3.445509706 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.834670211 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 4.406986122 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.43158009 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 5.050963124 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.371349057 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.275283214 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 4.222208272 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 5.605882134 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 4.595829306 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.655408914 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 5.574300052 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.330745005 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.969431421 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.369124175 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 5.941686487 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.426340371 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.280002079 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.991609213 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 6.561586437 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 4.737195579 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.422600683 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 4.746017685 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.394755114 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 3.883637116 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 5.617450414 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.371997168 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.278779604 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.286155787 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.284063408 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.416146882 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 5.10896021 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 6.278064353 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 4.758524245 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.409228821 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 4.437942244 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 6.930618717 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.979490025 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.832541002 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 6.571169446 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 5.730358241 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.276568793 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 3.251200819 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 5.659010151 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.338209676 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.432304238 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.375778166 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 5.10527905 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.353869239 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.302792689 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.717046129 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.43583494 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.299346707 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.286256876 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 3.37555294 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 6.191493749 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.369981617 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 4.492052019 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.368120969 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.281481816 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.87683514 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.537867868 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.31037521 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.278093622 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.27550749 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 5.163822399 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.389060291 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.300282774 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 4.646104281 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.433640268 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 4.614382886 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.153455932 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.825374325 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.359572677 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.269068641 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.282690028 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 4.025061748 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 5.774111626 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.445140163 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.906322322 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 4.395113942 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 4.009386082 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 4.344541838 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 4.819691397 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.809455662 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.307906555 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.398136788 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.284106147 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.380480101 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 6.247961994 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 4.318794855 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 3.166874718 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 6.887877513 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.354766391 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 5.091624278 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 4.253745425 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.338161905 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 5.493062904 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.366557711 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.29992588 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.299268292 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.302517167 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.988331126 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 4.365646193 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.331876607 seconds)
  done (took 2143.867446962 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.550677658 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.284012875 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.29437776 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.28859325 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.290403658 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.282765381 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.284115924 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.284225489 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.294666563 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.281041022 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.28893473 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.292911999 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.30318899 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.556800873 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.300594408 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.298392617 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.308092899 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.307267116 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.302501246 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.301764343 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.306649114 seconds)
  done (took 50.958420332 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.289804814 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.298519085 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.293979034 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.291118828 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.287568042 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.277154875 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.275307356 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.276232009 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.282792313 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.26626702 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.275142439 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.272810475 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.274010705 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.270458694 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.275598726 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.283943111 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.284213401 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.289797758 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.293457263 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.295003823 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.313922729 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.309971768 seconds)
  done (took 52.550853406 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.302476207 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.299020176 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 4.03397091 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.399995728 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.285734714 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.288324934 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.275813413 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 3.468817054 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 3.291740861 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 3.266572353 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 5.039690062 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 4.38486652 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.324456931 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 3.452798472 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.375979662 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.281300189 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.39782404 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.292996615 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.300586579 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.29355104 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.294458673 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 4.535962129 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.42175979 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.293330924 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 3.140880222 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.426693851 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.271166804 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.285242877 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.276801224 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 3.332532512 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 3.455960751 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.318603584 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 4.135712502 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 5.051149728 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 3.595099942 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 3.289257927 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 3.475085465 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.323219979 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.294201694 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.301553872 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 3.749610534 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 4.141561 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.329342464 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.276168989 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 4.596167045 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.382802184 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.27531885 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.908616583 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 4.388959155 seconds)
  done (took 148.898096217 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.308691073 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.395587997 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.33392008 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.282038935 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.391256814 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.276042381 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.333840443 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.272569025 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.277725773 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.283813037 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.416504574 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.433947433 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.28419454 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.284727012 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.365080021 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.288503874 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.286990991 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.286445811 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.281296827 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.270553253 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.28211696 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.314676516 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.365395225 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.413576511 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.272426161 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.263882106 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.260156091 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.271417093 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.401682799 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.273308686 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.275404078 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.281976213 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.39961708 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.348298569 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.28805521 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.283119344 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.409712719 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.289699427 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.297175915 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.294773873 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.298934292 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.288330715 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.333214347 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.397135452 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.281190527 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.375345936 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.290181899 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.28192274 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.41565361 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.295164663 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.284766614 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.43659703 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.290354478 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.284514716 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.273176153 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.39611606 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.285560075 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.270542639 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.27901664 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.420395952 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.282877443 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.299349803 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.445545595 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.303936206 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.30698802 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.464683291 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.392170186 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.304251578 seconds)
  done (took 160.156753598 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.282458723 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.433207215 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.476727392 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.47102391 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.429902809 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.416309524 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.416597228 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.415050584 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.414482712 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.416483385 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.420197222 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.362894319 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.394097416 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.363979572 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.422578104 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.41138857 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.407654032 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.423835677 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.43517203 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.445344855 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.417389439 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.477288664 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.427765083 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.473987747 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.661274731 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.394428804 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.429018359 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.425434133 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.466672645 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.42621561 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.636778848 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.43040251 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.420211426 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.463154988 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.629384986 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.410860925 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.288425808 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.425915635 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.418461832 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.424592991 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.391783873 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.464013244 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.433713855 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.409135261 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.451863479 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.452469543 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.484263788 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.654326862 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.379965768 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.443193451 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.426522542 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.468429865 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.415923919 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.417767786 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.465368299 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.380811452 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.462357152 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.461712653 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.426374678 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.466391014 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.464282592 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.391558099 seconds)
  done (took 153.489404773 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.30272439 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.30272989 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.376608683 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.305744121 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.303554946 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.389337479 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.310676272 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.314537033 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.31570561 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.316511848 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.308791491 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.378409298 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.665078728 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.305260677 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.373553288 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.662434751 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.380460654 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.380250988 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.295758117 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.374431962 seconds)
  done (took 51.637049288 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.289500507 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.291772292 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.287787024 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.453731081 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.294576403 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.424127302 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.298912767 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.291568997 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.292684178 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.304390864 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.306506937 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.319481705 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.307445472 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.464026109 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.305986341 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.438298689 seconds)
  done (took 39.639761891 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.306311037 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.296654685 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.294167582 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.29771752 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.283724228 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.292016874 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.291714436 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.284777852 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.283268303 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.748842501 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.284901329 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.297714006 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.294482711 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.291433496 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.28568122 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.287144347 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.295293332 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.313883149 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.320333953 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.31346266 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.899392577 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.308578423 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.304526639 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.307641924 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.306283442 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.878347539 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.30159841 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.296364232 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.292430767 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.28662838 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.29165711 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.754708146 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.279081772 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.272466348 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.262593642 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.287747713 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.299715553 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.287271568 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.275549608 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.287795758 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.287029925 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.298489951 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.295535783 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.289113189 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.308568746 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.311918896 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.300929383 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.754108464 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.303362654 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.302563201 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.303822723 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.312538564 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.30130367 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.774755677 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.295094523 seconds)
  done (took 131.551934596 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.331110781 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.336023147 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.295622 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.280911263 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.345897312 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.330799819 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.336156374 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.308005844 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.328127811 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.288911786 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.361017157 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.314875014 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.332144149 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.355533779 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.380970005 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.356199504 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.30882833 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.369238294 seconds)
  done (took 44.230559555 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.300823351 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.304044169 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.304599838 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.284685913 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.289325771 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.283566849 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.286900506 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.292698082 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.287516559 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.282268338 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.291128172 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.286282012 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.285282496 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.283173175 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.281812356 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.289919768 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.283072426 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.284216273 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.289462534 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.296073405 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.299868947 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.306154698 seconds)
  done (took 52.667795571 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.925676798 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.89764537 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 3.089196127 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 3.482342763 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.540936162 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 3.092298733 seconds)
  done (took 20.300698171 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.367264863 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.345046159 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.325014811 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.330430964 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.346951448 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.362699365 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.372703362 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.377975547 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.352956585 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.587177446 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.371854406 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.36247957 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.366040144 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.438188566 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.368692636 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.384782671 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.394655371 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.395309069 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.354538867 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.386085626 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.381059498 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.366521124 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.392795968 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.369013546 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.387271333 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.416737934 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.355613239 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.583603769 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.366866723 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.360517467 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.357303786 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.390030971 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.365164589 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.58887141 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.337140723 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.347559315 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.380824037 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.390616849 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.366673093 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.432642077 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.351192915 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.370596964 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.374382365 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.402381369 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.37338346 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.385836117 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.389184868 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.401471296 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.387261874 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.593132266 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.359703717 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.415726217 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.350193784 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.363355428 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.360946118 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.576607499 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.585943292 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.405255203 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.354194565 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.579571457 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.421387894 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.357473277 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.418638889 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.60881918 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.37457181 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.432633875 seconds)
  done (took 160.788601558 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.421550637 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.336490124 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.395123277 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.59663089 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.42143782 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.384726826 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.379030529 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.381827132 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.400761807 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.357777284 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.390541967 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.381671552 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.411316966 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.416850855 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.389553038 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.379461921 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.387149784 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.420158856 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.368958552 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.598530163 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.388028862 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.431069551 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.447919373 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.450569579 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.60958031 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.391041691 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.399807541 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.391123794 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.37743572 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.381731061 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.396540948 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.388659936 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.412381226 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.326634019 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.420237909 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.39962038 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.382225936 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.393174538 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.389280092 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.379349803 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.429035642 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.387875854 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.378393683 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.384495986 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.58925632 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.39333904 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.39707802 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.378203341 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.400300745 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.391020075 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.600032277 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.569586275 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.589919906 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.432038616 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.382223597 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.382734999 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.375262319 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.379232968 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.382554248 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.371116174 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.416687535 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.390888793 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.597308777 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.409969993 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.397090515 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.428292893 seconds)
  done (took 161.892571953 seconds)
done (took 4034.693899297 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.324369802 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.409461706 seconds)
  done (took 17.011757558 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.342671137 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.347016782 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 2.477084752 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 2.331668353 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.360026528 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.440394457 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.409508199 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.322983492 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 2.317430392 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.397857061 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 2.303703545 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 2.440602929 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 2.411055105 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 2.310034439 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.3293631 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 2.342553681 seconds)
  done (took 60.219513004 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 7.32938875 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 3.861859562 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 4.404159734 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 4.087891538 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 7.338549774 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 3.230620795 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 3.669370126 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 7.044826764 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.592749991 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.747728696 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.582997696 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 6.211753015 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 7.095389384 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 7.561234139 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.980595863 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.807222378 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.890954927 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.965311927 seconds)
  done (took 83.684637451 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.327355888 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.43974865 seconds)
  done (took 12.058106662 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.319476792 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.312508722 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.329027637 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.311331424 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.311515243 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.337033963 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.312944248 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.351262438 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.312480828 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.346753679 seconds)
  done (took 75.536164653 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 7.326465586 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.96859644 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.6665842 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 3.768353359 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 4.958059648 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.76019436 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.460414689 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.674564663 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.390107507 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.30628544 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 6.586650114 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.713192781 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 4.145823096 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 4.551171848 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.961789973 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 3.53249399 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.856970568 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.83204156 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.646625164 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 4.492936284 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.656870566 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 6.477965273 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.727832816 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 3.093426204 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.323656313 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 4.911815165 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.499882107 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.4277955 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.382323034 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 4.459445638 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 6.518221872 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.499810946 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 6.519898929 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.48089445 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 5.470332344 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 3.919437486 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.984634335 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.493228736 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.811202229 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.629923919 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.735124302 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 5.047556423 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.361942595 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 4.995820215 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.446215478 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 4.683022512 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 3.255851401 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.564763535 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.392953644 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.419292149 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.921577495 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.494277686 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.450128772 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.413482129 seconds)
  done (took 220.357966759 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.30497242 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.742260575 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.470272398 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.315659951 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.702415402 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.52661246 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.150511097 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.750124186 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.325751264 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.516894182 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.473151483 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.427480277 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.30165571 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.305340282 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.307236956 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.297400343 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.506888287 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.75699746 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.341898015 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.316018151 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.528627276 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.559334755 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.440899726 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.308028345 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.467385489 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.551680068 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.708379409 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.419795545 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.663985259 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.307642368 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.728259636 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.32959945 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.323612005 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.228955264 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.695720385 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.612556429 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.747462162 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.320407331 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.015209962 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.299077252 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.911611953 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.508074525 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.630720598 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.453420026 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.569137064 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.540394997 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.902743855 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.30989096 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 3.034818278 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.480861166 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.523447166 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.530901654 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.589832127 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.313776711 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.843178809 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.306787008 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.312435923 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.599612375 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.477775937 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.44798415 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.334400241 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.314111313 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.307563436 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.545229888 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.307594437 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.423759151 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.310806127 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.308734233 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.416165141 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.438318204 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.474303292 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.575045593 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.571209144 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.555524645 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 5.295778335 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.55253674 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.718081354 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.556696849 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.31361002 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.308985509 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.694369188 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.71733319 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.45310788 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.545472164 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.617387522 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.595583885 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.866035414 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.315999244 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.552980339 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.479522715 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.529351765 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.583363778 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.698671354 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.162241069 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.31979878 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.313548814 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.592751716 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.421461961 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.31335654 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.800507534 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.584007211 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.918207941 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.474329387 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.751116282 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.433493342 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.321661913 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.835728192 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.310339694 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.518270576 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.603805314 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.325437059 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.309948236 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.469873934 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.071798372 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.31033264 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.331388196 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.739355144 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.34294134 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.48309047 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.325297798 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.547353916 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.151703841 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.550844352 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.301789805 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.574829792 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.500553432 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.587708135 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.324153357 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.573887741 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.588029403 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.726798537 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.560545444 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.89006116 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.325263753 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.614179699 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.311475432 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.312049357 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.497303874 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.297793286 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.490116417 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.308487162 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.577890258 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.497923049 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.730102096 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.336147236 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.55435835 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.569516393 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.737189642 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.321334115 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.446071636 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.319176298 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.352908372 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.471294022 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.324199497 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.311795099 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 6.165347639 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.349346551 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.503752191 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.572776986 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.077922889 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.726894393 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.682514916 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.338414657 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.754146678 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.52205929 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.822962493 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.81109473 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.483205266 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.326439204 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.338691569 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.337530393 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.566245366 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.509819435 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.342220139 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.300333523 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.02828839 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.431178096 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.325508371 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.504471072 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.554076545 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.750589078 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.552871172 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.338940584 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.710524626 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.329774919 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.504058251 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.823069588 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.552145037 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.311141833 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.310064008 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.311539045 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.319386614 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.534731002 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.571330667 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.880582363 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.450178268 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.600028125 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.52681082 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.622223868 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.77185959 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.327873578 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.583156896 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.315476832 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.740422631 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.322761246 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.5666072 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.588633141 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.352369461 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.535508146 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.666692793 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.385432098 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.75509878 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.324071202 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.318775097 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.314332757 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.472645004 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.761350423 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.313357492 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.457825149 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.71923518 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.458677753 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.532268392 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.577043246 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.283119326 seconds)
  done (took 999.746148938 seconds)
done (took 1470.8549165 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.315251237 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.314500939 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.328776104 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.31113023 seconds)
  done (took 31.559670181 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 3.322627781 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 3.397088616 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.510726835 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.344834469 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 3.732047835 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.377431452 seconds)
  done (took 19.984152654 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.31771808 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.317501979 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.319632555 seconds)
  done (took 24.251683643 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 2.609650325 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 2.714656524 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.482901227 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.422531599 seconds)
  done (took 12.524494506 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.33689093 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.33377066 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.3236547 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.360438404 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.334356095 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.330796911 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.350046953 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.330626114 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.313917715 seconds)
  done (took 23.306920903 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.832262745 seconds)
done (took 120.725857017 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 2.647154445 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 2.609714351 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 7.30866029 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 2.587971884 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 2.447588453 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 2.643786712 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.437306603 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.332901597 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 2.665881863 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 2.726500771 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 2.749759549 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 3.402748797 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 3.654206208 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 2.753550182 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 2.542790728 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.341952465 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 2.337439811 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 2.40605763 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 3.959790312 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 2.486055544 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 6.986445188 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 2.43179813 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 7.074711208 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.333021692 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 3.204447632 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 2.457256428 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 2.569420832 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.311587492 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 4.71429891 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 2.345236753 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 2.430735877 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 2.833637546 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 3.603277064 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 2.636403457 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.454473087 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 3.180002265 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 2.739685919 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 7.324383195 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 2.583285936 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 2.685447626 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 2.605834553 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 2.4374755 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 7.471430894 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 2.472782699 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 2.701488599 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.337395668 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 3.346954658 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 2.488977677 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 3.879270863 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 2.482203505 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.779335625 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.324746961 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 2.937831861 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 2.394899119 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 2.442311746 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 7.432932203 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 3.220838273 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 3.817728553 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 2.461187384 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.603782798 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.332934989 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 7.321794776 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 3.255683014 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 2.32492269 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.321865011 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 3.904737368 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 2.753594335 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 2.452457353 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 2.825133911 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 2.333941149 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 2.334341373 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 2.353562076 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 2.99452289 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 2.465678043 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 7.330079278 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 7.444395369 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 2.594879926 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 3.490763271 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 7.474338743 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.3267672 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 3.844065124 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 7.336232515 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 2.589444042 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 2.686918326 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 2.469553873 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 3.721439925 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 2.768687812 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 2.713462652 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 2.765647582 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.32631192 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 8.72329503 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 8.457700073 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 8.729115236 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 7.335351683 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.468152458 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 8.477965392 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.821949121 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 2.810045313 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 2.446585743 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 2.829370514 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 2.338494548 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.339009826 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 3.667547203 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 2.606115902 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 3.147742431 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.349488462 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 2.475427581 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 7.325590147 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 2.575139155 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.323887343 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 8.770014794 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 2.841851643 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 7.322962822 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 2.362414285 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 2.805013459 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 7.325905607 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 2.658300022 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.760051142 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 3.390229275 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 7.336698219 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 2.595608649 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.328817298 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 2.445634779 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 3.857773199 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 2.709495631 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 2.534950264 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 7.329263777 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.736251385 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 7.316538569 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 2.533113467 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 7.326517139 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 2.859946334 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 2.826388171 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 2.356321064 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 2.591590499 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 2.469922983 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 7.344589275 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 2.62993537 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 2.379688083 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 2.539838687 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 2.632419928 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.646705927 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 2.478836972 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 7.315132541 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 2.640024012 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 7.325441126 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 2.556650199 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 2.660535614 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 2.471809242 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.627553749 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.408868222 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 2.347764641 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 3.244344704 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 2.766803795 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 2.933946418 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 2.857914763 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 2.594429041 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 2.462420391 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 2.827066168 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 2.563575946 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 3.145184088 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.449919116 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 2.385572114 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 7.335403081 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 2.333719995 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 2.385704205 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 7.314719997 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 7.31652019 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 2.590356491 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 3.561996538 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 2.879371822 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 3.13820429 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 7.021409619 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 2.603709201 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.478193703 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 3.161587779 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 2.85401802 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 7.332517881 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 2.579324585 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 2.771762908 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 3.449095429 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.353127427 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 7.318576973 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 7.348768444 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 3.054184896 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.380231068 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 2.616044739 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 3.866755193 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 3.671479411 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 2.749949589 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 3.605721415 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 2.360112123 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 2.681752958 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 2.55077274 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 2.655035275 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 2.538883142 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 2.771131154 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 2.473343895 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 3.720354502 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 3.402291217 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 2.661783384 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 7.322022568 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.589164091 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 3.637100412 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 2.809909025 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 2.650854258 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 2.542117064 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 2.50173878 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 2.66382436 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 7.337389356 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.329411556 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 8.589570651 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 2.65423448 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.329447026 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.322879806 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 8.594137055 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 3.166117766 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 3.275731028 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 2.443096321 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 3.650186632 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.476100732 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 3.514323287 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 3.878797303 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 2.343564593 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 2.654988893 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.485204075 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 3.525997192 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 2.564536864 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 2.365558729 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 2.458674409 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 2.559548752 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 2.460212622 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 2.589487289 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 3.155548337 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.758857631 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.329772682 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 3.513036339 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 7.381721674 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 3.300671947 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.357097174 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 2.345031338 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 2.576444446 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 2.501745353 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 2.621044107 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 3.509374899 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 2.498916484 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 7.329125254 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.485960297 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 2.72013552 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 3.102765904 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 3.876402602 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 3.309950662 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 2.353460301 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 7.344362507 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 2.7620105 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 2.749042518 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 2.42271767 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 2.468758088 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 2.884960147 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 2.358848352 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 2.501244694 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 7.342711587 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 7.339962947 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 4.086528642 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 2.453057786 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 2.570382285 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 2.875385944 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 7.346185406 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.76435372 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 3.443197828 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 2.776823917 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 2.846071604 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 2.378802319 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 2.467788243 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.336508219 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.516230111 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 2.727052634 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.35449335 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 2.512775887 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 2.657050814 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.445428489 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 2.458951077 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 7.326137257 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 2.375812631 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 3.931859163 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 3.574703326 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 2.870894672 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 2.37519906 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 2.725550031 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.348794533 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 3.844388439 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 2.355150521 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 2.421881001 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 2.661072321 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 2.486044165 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 2.730048556 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 7.335425189 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.456636262 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 2.618973648 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.355127596 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 7.323436729 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 2.603043594 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.344515082 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 8.426391594 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 3.648561737 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 3.574219869 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 3.335056781 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 2.572542807 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 7.340936241 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.128346577 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 2.511567029 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 2.434065196 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 2.914167629 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 2.805708785 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 7.341487795 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.503688313 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 7.341195202 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 2.696549641 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 2.345271053 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.344668794 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 2.460608061 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.416094885 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 7.349840599 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.060256904 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 2.556168059 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 2.816332849 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 3.489198239 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 3.210248016 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.337066432 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.774279305 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 2.481279495 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 2.643334625 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 7.013766838 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.348636096 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 2.486855431 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 5.999988803 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 3.589110269 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 2.368693319 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 2.578321829 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 7.320826351 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 2.904298292 seconds)
  done (took 1275.538648034 seconds)
done (took 1277.900044255 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.578322706 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 3.710526706 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.581740942 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 3.241487006 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 3.144377964 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.978741528 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.603995034 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.598095017 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.449353627 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.628221106 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 3.332527882 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 3.149971589 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.440372048 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.470127078 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.423982185 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.463146329 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 3.594196727 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.585883548 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.451686918 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 3.131965814 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.851172672 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 3.149963563 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.784566815 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.63341121 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 3.714225516 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.442271748 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.556300345 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.866490257 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.876047833 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 3.321186852 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 3.552555426 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.605968776 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 3.204142919 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 3.581082768 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.427937406 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.426028828 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 3.223974064 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.442394332 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.53679169 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.420829458 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 3.709179375 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.478294696 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 3.07507997 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 3.272121142 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 3.109542344 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.743657089 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 3.170565135 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.445686529 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.468591004 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.564517101 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.55380213 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.551111986 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.874832644 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 3.354975745 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 3.239077805 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 3.293951633 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.858779396 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 3.214581337 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 3.069595738 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.561159614 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.735642957 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.440030671 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.551899828 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.564519426 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.435462517 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.615384844 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.758687367 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.539547148 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.585313543 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.621476719 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.605020173 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.574807128 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 3.467485264 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 3.557231047 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.493774714 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.625500844 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 3.109477451 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.603641424 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 3.140334063 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.456699408 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 3.26526322 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 3.20999305 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 3.291378585 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.416220633 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.594836544 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 3.118249193 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 3.427797692 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 3.290970834 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.44588245 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.584711415 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 3.303774754 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.609028092 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.866733747 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.565529929 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.614319401 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.610212363 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 3.47269603 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.549018361 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 3.314474056 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.604023772 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 3.121183968 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.548329822 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 3.378579377 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.426925524 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.442069921 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.535112251 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.529718267 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.751421009 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.549530211 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 3.481967007 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 3.707625778 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.473668575 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.575694496 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.476608005 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.439894042 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 3.13022988 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.634652239 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 3.249388623 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.537298714 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 3.015784128 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 3.639064838 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.413492522 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 3.689061605 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.612374918 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.59189967 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.414933037 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.433256677 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 3.281227152 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.429003284 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.428752342 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 3.512075895 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.786018793 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.570075388 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 3.242829411 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.572905216 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 3.140171005 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.582278881 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.567388878 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.420288709 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 3.168133425 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.425584996 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 3.295706206 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.63213008 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 3.704590555 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.579394105 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.624875563 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.452511355 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 3.588345891 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.53552398 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.443403656 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.566951667 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 3.459897119 seconds)
done (took 434.497466746 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.699519138 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 6.526068292 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.611153294 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.625755124 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.70787389 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.683253116 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.405765621 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.807360989 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.454494164 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.749252268 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.569302161 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 4.237212285 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 6.481513776 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.534275586 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.689057835 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.586421401 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.435541107 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.595490249 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.792529427 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.695729769 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 4.144132784 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.589880576 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.505278329 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.756947145 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.350888073 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 4.130468546 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.688123791 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.464664925 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.584787578 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 4.110001316 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 4.106991665 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.601327032 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.704318745 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 6.160756483 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 4.791959483 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 4.07947314 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.683022067 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 4.176082704 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.679177424 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.685390625 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.591452168 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.302336407 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 4.100402944 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 4.150503098 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.493747269 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.688783413 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.399831431 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 6.265352954 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.331118844 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 4.078428446 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.581596713 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 4.156132741 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 4.253170747 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.679897977 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.564138114 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 6.056849239 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.828038583 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.825255858 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.698394316 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.631738776 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.678532488 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.754260235 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.740742609 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.520338088 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 4.118811516 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.634187065 seconds)
  done (took 230.325140306 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.773260549 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.629857165 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.778161959 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 3.749126705 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.896862813 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.780304874 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 3.904588789 seconds)
  done (took 23.817612361 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.423630815 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.393009894 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.634339218 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.591462394 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.38639266 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.52164741 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.465811489 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 4.129540917 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.59776853 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.427546812 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.675327871 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.618575721 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 4.032670648 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 4.135616518 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.469445579 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.648485755 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.362004118 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.467938535 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.454846655 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.664579854 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 4.139258084 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 4.112276305 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.67219178 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.471214466 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.396242434 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.430325367 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.376836375 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.367325499 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.442135774 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.362478159 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.409629433 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.500575476 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.390856825 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 4.119318307 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.403170419 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.722043831 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.391389686 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.430370022 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.538900786 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.349363811 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.388889474 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.403834223 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.529021115 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.40346887 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.374950696 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.584913508 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.373707356 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.394855168 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.371341551 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.38827549 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.656806455 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.413885976 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.413804821 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 4.052362493 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.593052036 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 4.11166183 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.44711604 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.398374363 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.389066386 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.453776544 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.391988483 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.652044226 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.635464773 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.386011905 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.65026976 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.678697315 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.418513989 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.369336713 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.373370455 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.60355569 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.387701516 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.6100018 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.391566399 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.439203315 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.425798049 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.516591508 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.577051591 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.170403 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.155621684 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 4.050197959 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.358703505 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.384864246 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.706663117 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.344503031 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 4.086451448 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.394669025 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.454541586 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 4.048232451 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.290215538 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.405101701 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.713024743 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.383708819 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.446121046 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.445589636 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.420672849 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.445933044 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.61386663 seconds)
  done (took 273.599855012 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.680277712 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 4.985014283 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.591629795 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 3.618967028 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 3.775077707 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.840059136 seconds)
  done (took 24.804892544 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 3.807445046 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 3.265004358 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.452829364 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.40836707 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.442837257 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.384306615 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.391293123 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.715212238 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 3.586579134 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.438146741 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.398165805 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.431629354 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.405452887 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.541030983 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.39549027 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.405276414 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.406256615 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.423832826 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.413098693 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.470050677 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.720098103 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.469475316 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.47470949 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 3.467350807 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 3.485244214 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.444592269 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 3.349367693 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.401464473 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.402140725 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.795046822 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.577430432 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.399490918 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.364469352 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 4.850597705 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 3.229274932 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 3.493520897 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.57011302 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.456916051 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.44632581 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.379846022 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.414501856 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.460411932 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.415990157 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.424708272 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.847611491 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 4.439807167 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 3.50375697 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.675472141 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.376797018 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.400033828 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.396264219 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.400708372 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.372248145 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.408962898 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 5.2693091 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.883061726 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 3.400862212 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.42673699 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.438098862 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 3.590072493 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 3.51158256 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.440882327 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.876254524 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 3.38716491 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 4.132973227 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.407975319 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 3.45321072 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.567867622 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.496937264 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.418801199 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.423186145 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.410589969 seconds)
  done (took 211.455789566 seconds)
done (took 766.273334284 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.370048747 seconds)
  done (took 9.692740422 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.411121823 seconds)
  done (took 9.841466989 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.370278512 seconds)
  done (took 9.695749836 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.373345671 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.418227683 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.386120072 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.354115451 seconds)
  done (took 31.873478016 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.57321713 seconds)
  done (took 9.895961208 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.362287816 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.357114221 seconds)
  done (took 17.1218515 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.486661845 seconds)
  done (took 9.833219352 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.650042632 seconds)
  done (took 9.988632595 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.350514988 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.346823983 seconds)
  done (took 17.032602639 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.345167342 seconds)
  done (took 9.662400538 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.252800712 seconds)
  done (took 11.660641895 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.385592906 seconds)
  done (took 9.73750611 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.371623263 seconds)
  done (took 9.700849033 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.639207604 seconds)
  done (took 9.952874498 seconds)
done (took 177.962598269 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.371808437 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.342109604 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.361588674 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.364552534 seconds)
  done (took 31.767082244 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.679848471 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.677501908 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.652336479 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.723718438 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.612509869 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.616936038 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.672475662 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.67382679 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.618603383 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.743352429 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.688543856 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.831783204 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.816591997 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.649286819 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.658768437 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.728558252 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.726606718 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.673283916 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.64102032 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.668386553 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.741670571 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.742471761 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 3.106921908 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 3.099066238 seconds)
  done (took 67.777911296 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.559451854 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.801948992 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.509417779 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.671543781 seconds)
  done (took 12.869902425 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.387162017 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.715058363 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.695036384 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.756996973 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.699229132 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.50390788 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.688675123 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.548081042 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.492854294 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.489034961 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.967297006 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.504618828 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.518528486 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.671813524 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.537389221 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.357639023 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.335727605 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.500334836 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.718704213 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.567612479 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.620698762 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.71729122 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.708317445 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.712096261 seconds)
  done (took 64.729059034 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.115141941 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 3.287792826 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.712938418 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 3.270317106 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 3.062366349 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.144807015 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.640521189 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.875309518 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.627299993 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 3.601383652 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 3.116555743 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 3.139923632 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.502153885 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 3.257954581 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.113922161 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.527289131 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.528713351 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 3.199174329 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.960941857 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 3.653083258 seconds)
  done (took 64.652923965 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.354025012 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.60191195 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.605095535 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.512069734 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.358140996 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.380520331 seconds)
  done (took 35.135752327 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 4.491656238 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.509452861 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.694376443 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.670193553 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.52445743 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.508950337 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.990390479 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.555679465 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 3.198409065 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 3.142950946 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 4.027608625 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.810259679 seconds)
  done (took 38.462989621 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.373544544 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.373244716 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.35795914 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.477647911 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 3.26964319 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 3.193602216 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.671722597 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.358573146 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 3.542259249 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.550759444 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 3.231273637 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.531419318 seconds)
  done (took 56.281958181 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.513586694 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.526417446 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.701236999 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.222495381 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.871250616 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.43806163 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.746343165 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.865382959 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.45087174 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.991520497 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.851433203 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.393201704 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.833304127 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.296758772 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.356395439 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.635480571 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.194119258 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.838118296 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.803424731 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.432854641 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.308218007 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.496736455 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.356181961 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.963696768 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.679396518 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.349065592 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.739788138 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.587387907 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.363836025 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.791155963 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.378471279 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.961299902 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.510590051 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.670344388 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.887329605 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.453900529 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.435513281 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.588092721 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.932534599 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.64586538 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.507820801 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.520321558 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.893367665 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.478675666 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.623203123 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.145312707 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.390137668 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.914356722 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.308379107 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.529366427 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.219118072 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.569455 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.68059197 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.046369655 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.493545652 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.629984776 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.503013814 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.555353078 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.651629661 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.537362095 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.54423641 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.441284611 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.512368394 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.315933154 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.948229062 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.683555016 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 4.73967239 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.664794645 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.6100671 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.648367745 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.724864874 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.599206242 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.123159759 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.492530528 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.884788542 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.237604139 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.726072829 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.354345405 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 4.07363849 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.846207819 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 5.326037285 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.455962597 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.545454475 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.319998207 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.37134356 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.524655394 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.217320257 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.313297147 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.448535298 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.495725548 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.91547729 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.50003809 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.501652009 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.628676693 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.059180329 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.329064918 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.146210665 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.65154376 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.326593782 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.924278669 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.380503553 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.423995839 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.368220318 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.995218949 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.761624895 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.400042399 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 3.120331545 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.982850605 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.643528483 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.919227989 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.516119413 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.365943997 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.727360158 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.683910639 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.370764852 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.059978512 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.616395173 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.547734391 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.697014276 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.370310806 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.316620263 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.703231908 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.49280455 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.36965438 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.696066207 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.368137264 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 3.52001288 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.373873736 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.148807934 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.39393413 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.596838698 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.882734392 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.579855152 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.447825557 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.303639857 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 3.496640487 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.862588958 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.461915824 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.689887348 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.806897836 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.971281915 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.847005316 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.325052321 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.147744106 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.818703004 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.618314846 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.693697208 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.964859581 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.518182184 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.44859589 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.367250449 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.509949003 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.38951489 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.916671779 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.369508431 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.607583658 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.037119316 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.660914583 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.357071292 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.326821917 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.553854845 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.532664877 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.105206346 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.404138953 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.540052863 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.636487379 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.546392045 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.380849667 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.331127691 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.723997965 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.789106951 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.869590274 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.596162946 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.097078069 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.716265862 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.830033509 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.740847834 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.773620123 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 5.694770409 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.588742241 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.711615741 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.022090583 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.353911434 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.372167677 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.520079852 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.789475064 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.579445437 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 3.137578146 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.629818513 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.040373858 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.41019509 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.837860574 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 5.324870798 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.518815768 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.844267126 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.380362088 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.913059472 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.452418687 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.671528688 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.660074551 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.375561309 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.685952246 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.479841705 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.806087021 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.742976182 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.683326666 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.349875588 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.374508972 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 3.882294381 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 4.913317468 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.490505459 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.834574177 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.616725327 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.373737988 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.350272081 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.715410418 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.390932425 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 3.152565242 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.65291429 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.134688089 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 5.005977595 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.490874848 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.879397062 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.389421463 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.544145479 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.476251076 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.421516073 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.482406629 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.981828223 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.635069421 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.693050225 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.370941566 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.34785845 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.623170648 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.656472312 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.654941763 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.843201504 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.968619859 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 3.044293774 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.446508616 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.976037368 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.534316317 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.410252408 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.977997701 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 4.698625196 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.299878638 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.506647352 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 3.076845449 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.560968346 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.399351014 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.639528886 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.362405784 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.799370774 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.928304164 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.382882675 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.389087054 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.49462866 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.384936879 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.609026286 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 3.266024584 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 3.590836212 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.092961192 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.635172219 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.533314287 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.490577578 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.763711324 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.891291691 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.699393547 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.315477356 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.537122804 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.476397028 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.678752039 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.400512 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.629869777 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.928113861 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.111133806 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 3.159786324 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.90684593 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.647145547 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.501174527 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.806536174 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.603886155 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.63414633 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 3.297346865 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 3.186439493 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.348775212 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.50756894 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.332760606 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.49905669 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.870667484 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.755042533 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.824860217 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.40531011 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.897608989 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.726024065 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.468853668 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.506070532 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.627214331 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.380822064 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.651639714 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.373883022 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.681849171 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.785958952 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.382819481 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.969010867 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.559165184 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.687552055 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.508190674 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.06955627 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.404914109 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.505155184 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.889638424 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.571691987 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.52674014 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.717692539 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.239235119 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.414559847 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.449914478 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.930771824 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.948776819 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.820943398 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.964892744 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.949563746 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.769369904 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 3.149438704 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.390562674 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.781730513 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.54542064 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.183063887 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.547976455 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.767220789 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.39092249 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.521889555 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.679031389 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.458426965 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.896015805 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.332933491 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.937040898 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.574068086 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.870026436 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.927604272 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.141910861 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.906673883 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.605184306 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.919501466 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.355654089 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 3.503413192 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.828054833 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.07533915 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.248251438 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.194897302 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.165721333 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.5823772 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.805164789 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.536523664 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 4.068875258 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.521692716 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.614863176 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.748442789 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.505725144 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.332499537 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.907877085 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.121327396 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.641556753 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.5283837 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.498287107 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.546048437 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.750883314 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.910517943 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.671674724 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 3.147042747 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.83570627 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.583629491 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.335777178 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.377964911 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.055287366 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.51681565 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.444476488 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.646438439 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.787840951 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.409503427 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.392681314 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.727832881 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.975919782 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 4.014993887 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.067583711 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.711557487 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.907153947 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.850384142 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.3782525 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 3.134378168 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.752415405 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.724388741 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.75947875 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.251168422 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.738922564 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.667301299 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 3.539659951 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.349054111 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.518320896 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.393067186 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.433539623 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.733677524 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.646398565 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.466365332 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.449830209 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.969399664 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.598435616 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.399627481 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.978807256 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.609008259 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.586617271 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.390943312 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.907469515 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.761395279 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.518816277 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.33161552 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 3.128920407 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.323412761 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.747961406 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.586451114 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 3.545931478 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.210362127 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.528099132 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 4.029314694 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.971479516 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.675896846 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.569407359 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.338275394 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.19572268 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.356382784 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.106746223 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 3.156589117 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.603863429 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 3.891347636 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.519646252 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.372877943 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.724444654 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.533331565 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.71751054 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.668266524 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.858149226 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.805466149 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.766745477 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.676018549 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.955332723 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.472599014 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.632575841 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.341144579 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.384295331 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.489341006 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.784159852 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.780840925 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.415027789 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.933301349 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.651747851 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.591629855 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.537810014 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.454775059 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.998501641 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.584688593 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.590925167 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.53593176 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 3.651144321 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.763504147 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.411276204 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.607936414 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.408453922 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.407664296 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.766180205 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.620492971 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.749067728 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.697666037 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 3.277562351 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.536633857 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.991868343 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.30360885 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.903750596 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.415324714 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.518188874 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.712311069 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.385485445 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.84737947 seconds)
    (484/608) benchmarking "6d"...
    done (took 4.044000631 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.509961972 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.063023039 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.452831092 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.623317633 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.557641735 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 3.90815176 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.411466653 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 3.01133834 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.778736321 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.406912272 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.882507912 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.471335487 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.556321582 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.158275431 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.880126203 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.386487991 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.506344335 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.48779977 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.87728246 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.659613531 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.417974704 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.528914098 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.187443363 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.344271888 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.377373138 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.455386011 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.843079237 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.390967323 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.94668203 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.600355756 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.527845548 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.393952371 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.523998138 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.380303381 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.744301624 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.961798178 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.611463262 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.638712611 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.523703958 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.382773628 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.927221516 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 3.083435432 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.741204901 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.587309375 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.692734466 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.7508156 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.756848081 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.59612944 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.881756702 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.561724232 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 3.588897217 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.796054201 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.627117522 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.403730012 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.536920123 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.382309195 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.736837261 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.532709157 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.964006435 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.655416571 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.564281337 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.617888797 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.393428198 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.915118926 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.818169544 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.239052439 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.382925296 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.668720912 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.363622525 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.506379218 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.017550414 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.580158567 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.582213099 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.356417689 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.889401228 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 4.708952222 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.469449789 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.369287226 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.584200901 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 3.873415384 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.326440075 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.218111716 seconds)
    (567/608) benchmarking "2d"...
    done (took 3.224803889 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.790991478 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.729027215 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.346789161 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.525636352 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.394166515 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.337013151 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.869622792 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.371917296 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.659058003 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.325075884 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.911416608 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.334545053 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.547357776 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.534402477 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.756293103 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.394862369 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.34828406 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.549827319 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.39457313 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.371916686 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.778289822 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.447764419 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.616966151 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.853914254 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.638719293 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.684913044 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.213982462 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.482706349 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.349653354 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.657731369 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.190542303 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.932339852 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.509739483 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.866702066 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.478576448 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.346910705 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.904277575 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.625308003 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 4.120139512 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.534577895 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.889581774 seconds)
  done (took 2718.077113589 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.434646031 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.417150038 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.432891815 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.403713188 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.399510615 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.403409722 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.417648871 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.423905482 seconds)
  done (took 61.709648829 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.39482589 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.181844085 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 7.132404515 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.528363272 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.375007687 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 6.589537622 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.504741155 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 6.927378603 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.590149914 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 6.463298765 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.441569202 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 7.396575805 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.600826338 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.371325139 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 7.110806686 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.661475166 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.393035283 seconds)
  done (took 114.080483243 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.43197763 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.173004119 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.395810867 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.682185166 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.400327354 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.596303911 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.381744736 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.397230267 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.44269414 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 9.073359237 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.401826563 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.522606958 seconds)
  done (took 94.291461389 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.409672126 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.390107864 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.394790409 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.405317734 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.392697145 seconds)
  done (took 14.345789971 seconds)
done (took 3376.576572676 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.610417515 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.822398782 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.95392901 seconds)
  done (took 8.137003473 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.46184353 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.526043857 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.589540101 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.536474468 seconds)
  done (took 12.496306449 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.650519427 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.882748323 seconds)
  done (took 7.901335153 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.853741342 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.418171161 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.926814165 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.384689314 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.378081224 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.382278103 seconds)
  done (took 24.504725506 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.434215155 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.42899571 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.429215094 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.423989423 seconds)
  done (took 12.104616412 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.403798954 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.400322093 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.388382003 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 3.431997913 seconds)
  done (took 24.993715055 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.551779996 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.619619667 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.114857039 seconds)
  done (took 10.640527356 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 3.187054415 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.760844267 seconds)
    (3/3) benchmarking "Float64"...
    done (took 3.190919556 seconds)
  done (took 11.500276398 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.344104815 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.432592127 seconds)
  done (took 9.151063688 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.542500598 seconds)
  done (took 4.912664159 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.864060582 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.87534395 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 3.246720513 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.247713121 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.395087732 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.694438034 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.762920246 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.70932532 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 3.063163823 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.920812845 seconds)
  done (took 32.142533232 seconds)
done (took 176.591509936 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.349742191 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.804299571 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.586691769 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 4.107825711 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.479556235 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.555752677 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.373775574 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.832337261 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.669933732 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.675874783 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 4.45576195 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.486584592 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.43563915 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.782047864 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.427487252 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.744723261 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.790457132 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.320421059 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.222779476 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.779430047 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.400111621 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.955809555 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 4.128540874 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.973326901 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.814668804 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.561340536 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.468594244 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.715715814 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.527244542 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.460222594 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.534171566 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.096242175 seconds)
  done (took 193.869818041 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.404385061 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.400867234 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.395346094 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.380058226 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.318039868 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.39433614 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.392079173 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.396660942 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.123385671 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.110552838 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.396182067 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.327807089 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.372682555 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.378306792 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.380361462 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.395840147 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.347097205 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.416268391 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.409347918 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.398870337 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.377223057 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.199132005 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.388266006 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.20061528 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.331138329 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.41271712 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.397133837 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.401974302 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.400839043 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.390939612 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.398853349 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.377032678 seconds)
  done (took 229.803866527 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.397365918 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.419920776 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.41313985 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.392920422 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.395494873 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.387222268 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.372740832 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.369143388 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.39942556 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.411137486 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.402143828 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.394228422 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.391308685 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.382912979 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.383679993 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.387950381 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.395427681 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.413587588 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.424310997 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.413183345 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.408599785 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.392216466 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.388257586 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.390647275 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.390172326 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.412206418 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.410835397 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.402482606 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.398307207 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.389903682 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.383122189 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.397895485 seconds)
  done (took 239.074869456 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.695010217 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.434572698 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 3.328677685 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 4.180990206 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 3.352439461 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.435396373 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 4.18295046 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.697192072 seconds)
  done (took 27.680112574 seconds)
done (took 692.757060702 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 4.039101827 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.269879257 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.558736912 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.641945149 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.9587012 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.678915464 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.643027041 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.888830968 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 3.12392398 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.875282217 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.931248521 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.610466881 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.328329952 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.69203603 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.591340297 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.887960439 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.839897474 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 3.130547141 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.612912353 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 3.315167859 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.595603269 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.228261843 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.915187282 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.173406631 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.911669123 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.272330487 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.48336805 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.81461524 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.646876492 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.604861813 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.395207548 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.781814453 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.656839597 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.642308976 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.885784724 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.869275491 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.7281556 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 4.008836684 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.569297012 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.067223787 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 3.270561241 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.945153582 seconds)
  done (took 130.454996666 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.414231639 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.450814088 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.578167754 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.476393172 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 3.039227768 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.47332137 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.64752118 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.631597032 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.512128085 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.631287564 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.666206797 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 3.121054249 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.665058875 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 3.035267624 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.654005591 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.653482476 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.476447102 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 3.01246527 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.634749042 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.604038764 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.438654983 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.566807905 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.44117585 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.596552967 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.430848402 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.474268499 seconds)
  done (took 70.703607932 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.459844062 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.601129208 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.670626905 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.794326089 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.66111339 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.458690686 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.85805494 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.545310995 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 4.350635272 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.615222646 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.496186738 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.521492613 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.590361173 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.703055407 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 6.067292089 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.545040668 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.578655798 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.59791505 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.58673837 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.679720647 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.581365283 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.505649691 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.854727573 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 4.654527115 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 3.110150297 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.754961823 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.745407383 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 3.01753856 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 6.053929808 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.530799122 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.557207215 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.833256738 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.8583566 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.688414041 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.577896132 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.447153482 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.448795453 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.495818089 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.321890836 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.595758454 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.811577359 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.581101038 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.806200324 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.993937534 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.504070861 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.663922263 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.898081572 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.536562385 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.575234032 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 4.250965914 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.723481556 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 5.429756494 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.558383992 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.638852742 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.550881972 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 3.831097858 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.602921901 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.732287015 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.600871877 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 4.20128771 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.522028677 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.8394782 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.644353595 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.498696125 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.748656075 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.658344145 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 4.692165663 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.788374946 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.795194668 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 5.783288341 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 3.138941064 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.506457205 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.444268976 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.504914612 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.611441234 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.91092204 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.824392483 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.685553037 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.905618111 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.841936994 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.795103024 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 3.037167171 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.46333146 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 4.134372493 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.488398563 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.436443917 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.515959008 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.736254323 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.816045651 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.899639372 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.978649239 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.776852835 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 4.010482308 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.831574208 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.805440085 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.850901504 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.442552645 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.457099759 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.685179363 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 3.019846454 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.538217315 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 4.722592963 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 3.094623624 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.848901315 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.822236688 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 3.676836242 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.836183175 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.466962615 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.826987401 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.413438198 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 4.665508778 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 4.800415411 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.757397348 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.797323241 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.432126236 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.975940538 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.566358537 seconds)
  done (took 381.644252092 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.417325227 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.431437858 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.412571602 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.40649747 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.406159419 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.003140278 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.464038925 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.408973 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 3.030683887 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.497650451 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.409166631 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.416068936 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.404575618 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.415324981 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 5.029958626 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 5.000827321 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 4.205513696 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.427968979 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.424911664 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.428820732 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 4.120090532 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.419130639 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.405003427 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.38799832 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.402460698 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.4034503 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.431247776 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.452534995 seconds)
  done (took 190.064049226 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.475776885 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.882240107 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.501887395 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.527125262 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.484347262 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.464661422 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.941282027 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.565460383 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.507081675 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.462898246 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.446386548 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.668679198 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.678412235 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 3.026821606 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.589961748 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.509646684 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 3.108478341 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.617435071 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.480446549 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.472871588 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.616864782 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.793632675 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.710030132 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.743316832 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.598149908 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.745351769 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.535715082 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.45535477 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.567725972 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.918769124 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.462250782 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.806464396 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.581757304 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.455965747 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.947675772 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.815903448 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 3.043094763 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 3.005916882 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.656302312 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.441486645 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.456382525 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.718442707 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.79851013 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.513504534 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.470022904 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 3.121578006 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.480792824 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.832020177 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.475220687 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.413157678 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.554182727 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.566138532 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.706780556 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 5.010499508 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.638761262 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.625319485 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.951409256 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.438221979 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.511208252 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.770566394 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.461578933 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.96453259 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 4.4386781 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.548708702 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.494628197 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.621540864 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.569868234 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.986289203 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 3.064357306 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.49343284 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.790790655 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.642205416 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.419176167 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.705113115 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.61895297 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.940071047 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 3.017575832 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.584663525 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.558737769 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.557223844 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.734820446 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.459199288 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.985496192 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.562727321 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.450220704 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.937389888 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.856691757 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.437276558 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.46482083 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.575240559 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.612618448 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.649324877 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.771930763 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.526235902 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.336001115 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.713201305 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.782505229 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.483443661 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.569549499 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.454838964 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.375799502 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.675720621 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.470707179 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.78409609 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.894076465 seconds)
  done (took 294.81859418 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 3.177176795 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.528004669 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.700275582 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 3.110949107 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.795579491 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.348026124 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.740382105 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.548432439 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.744516118 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.712319764 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.669857854 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.547648419 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 4.42759701 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 3.189832232 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.536624779 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.656272204 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.550141447 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 3.094073732 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.779211241 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 5.26308875 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 3.99411353 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 3.193815123 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.768623332 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.882092392 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.899053257 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.985736186 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 3.088799246 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.590144911 seconds)
  done (took 87.927574307 seconds)
done (took 1157.936462385 seconds)
SAVING RESULT...
DONE!
