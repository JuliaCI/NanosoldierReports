cset: moving following pidspec: 3528953
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 2.781476648 seconds)
loading group "shootout"... done (took 1.197896753 seconds)
loading group "string"... done (took 0.761954437 seconds)
loading group "linalg"... done (took 9.53935023 seconds)
loading group "parallel"... done (took 0.023011153 seconds)
loading group "find"... done (took 3.8083628 seconds)
loading group "tuple"... done (took 2.486036798 seconds)
loading group "union"... done (took 14.923220098 seconds)
loading group "dates"... done (took 1.970990504 seconds)
loading group "micro"... done (took 0.238726089 seconds)
loading group "simd"... done (took 7.238337387 seconds)
loading group "io"... done (took 1.797699538 seconds)
loading group "random"... done (took 13.882630042 seconds)
loading group "problem"... done (took 1.917728624 seconds)
loading group "array"... done (took 39.295509898 seconds)
loading group "misc"... done (took 2.252133511 seconds)
loading group "scalar"... done (took 74.361614776 seconds)
loading group "sort"... done (took 5.943939261 seconds)
loading group "sparse"... done (took 21.257188487 seconds)
loading group "collection"... done (took 27.192170737 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.480980302 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.125956141 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.175106883 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.131110589 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.243950001 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.136607288 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.141526183 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.124060223 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.126562179 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.154675817 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.148007437 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.455532422 seconds)
done (took 6.014048552 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.318570124 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.263935803 seconds)
    (2/2) benchmarking "String"...
    done (took 0.177660669 seconds)
  done (took 1.712105651 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.098618842 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.064564686 seconds)
    (3/3) benchmarking "different"...
    done (took 0.072711384 seconds)
  done (took 1.499921645 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.070716893 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.149932966 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.072357555 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.075911216 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.072479073 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.073029997 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.072504495 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.071307959 seconds)
  done (took 1.838330942 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.078013156 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.072787169 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.070924153 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.072899719 seconds)
  done (took 1.54715206 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.071564021 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.13413713 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.068733777 seconds)
    (4/4) benchmarking "different"...
    done (took 0.069005643 seconds)
  done (took 1.591650674 seconds)
done (took 9.866113386 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.189970196 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.836183336 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.923317805 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.156610425 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.328151122 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.355187125 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.132467278 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.219355987 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.123018977 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.08310648 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.155426422 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.088280687 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.520064381 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.517900544 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.079469792 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.20411837 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.650282948 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.089452902 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.124254357 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.301745952 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.087577695 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.091794007 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.098276746 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.0819162 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.207588654 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.188191226 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.656905735 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.105003671 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.176375512 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.099981591 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.077983701 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.083503563 seconds)
  done (took 11.331367148 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.124295429 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.122747764 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.075566275 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.11268392 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.103234872 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.076753109 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.081690562 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.074787285 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.09599475 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.1426464 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.09796646 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.132407998 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.073893685 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.07679773 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.107273536 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.172392878 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.089660267 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.089427861 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.075427608 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.090870935 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.103837368 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.087699193 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.085518377 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.084962529 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.12224363 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.141929016 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096331904 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.119938905 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.076111301 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.087620515 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.103843172 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.123131358 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.075242732 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.072869806 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.118751843 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.092206612 seconds)
  done (took 4.912636185 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.105472481 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.113949174 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.117418082 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108340903 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.119172075 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.103249276 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.159533477 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.134958589 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.110267092 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.076595384 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.191573002 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.763233724 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.148174318 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.241680413 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.080271624 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.159963827 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.39545871 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.968117532 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.079715128 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.077044879 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.109249955 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.080061813 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.154398744 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.076680348 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.196663652 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.827845082 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.078959827 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077602642 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.109812293 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.120575594 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.073554214 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.156604304 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.104619369 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.077517739 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.619704457 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.073071875 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.072494682 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.095078892 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.112834683 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.074507736 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.076012077 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.08783556 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.073455569 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.128755034 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.088057616 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.591137744 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.077673377 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.682038382 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.359326116 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.082897094 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.081055847 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.112426056 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.072892777 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.076315161 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.659943157 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.163647527 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.07574669 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.314319893 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076800673 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.07623741 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.077766466 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.111568155 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.075978905 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.077003435 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.081459632 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097157733 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.090943889 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.163124074 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.095039781 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.073125437 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074273401 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.072825303 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.456767651 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.083567458 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.078668631 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.072861414 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.078663814 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.075516394 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.074912417 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.255042893 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.105058959 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.09924414 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.07870645 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.074353554 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.074382673 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.599338603 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.028611527 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.074853215 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.075086203 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.54027953 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.072026697 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.0742142 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.077111354 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.098057343 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.075162813 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.071235893 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.110467039 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.076275933 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.10514383 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.611416829 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.07546812 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.071344731 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.658202005 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.078343372 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.108858767 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.135596825 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.075700797 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.119038251 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.077603685 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.074042177 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.082685046 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.073388286 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.078909469 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.07555944 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.076130454 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.073134175 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.077794979 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.077515238 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.076518385 seconds)
  done (took 25.448300846 seconds)
done (took 44.068688072 seconds)
(4/20) benchmarking "parallel"...
done (took 1.439483614 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.289168954 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.103803787 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.072506233 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.22966227 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.100073214 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.195193326 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.243221567 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.188204313 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.101213448 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.100039325 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.101329583 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.24880939 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.261056387 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.103327542 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.179831163 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.261528072 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.10296243 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.073933911 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.102200411 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.103808177 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.105331889 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073809604 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.103618839 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.104161994 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.178434591 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.102497076 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.072608418 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.180281943 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.103220665 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.182320604 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.103273486 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.102092257 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.102881504 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.182023452 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.10504134 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.180657285 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.07340092 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.103470809 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.10337275 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.104794618 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.103814141 seconds)
  done (took 7.014793435 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.098684488 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.09272976 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.095873286 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06957671 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.078556684 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.091109817 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.069074036 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.090439726 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.109584264 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.091484676 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.091675901 seconds)
  done (took 2.396608278 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.092057284 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.092220845 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.094751654 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.068917443 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.081301958 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.095969032 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.069502669 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.092396026 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.097230072 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.094454694 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.092563478 seconds)
  done (took 2.331581975 seconds)
done (took 13.087103626 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.208995391 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.100567505 seconds)
  done (took 1.648593594 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.600651503 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.215851841 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.109609087 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.241032497 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.106306343 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.133557227 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.498284121 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.133057883 seconds)
  done (took 7.444887761 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.13990245 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.109618305 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.077685608 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.075670369 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.077060761 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.077541597 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.082496223 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.07828915 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.076972152 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.079605643 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.078603069 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.077388553 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.078194792 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.080259961 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.077719028 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.077331616 seconds)
  done (took 2.828998664 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.080650299 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.079731943 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.081632752 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.071111226 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.081693349 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.081556582 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.082618132 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.082494119 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.082565521 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.08276882 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.080052288 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.083319694 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.080966481 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.080839514 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.082124109 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.071048934 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.082778513 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.082006279 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.084390642 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.083906131 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.083371517 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.081597735 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.085900065 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.081687859 seconds)
  done (took 3.340661482 seconds)
done (took 16.629402393 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.207666658 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.085077113 seconds)
  done (took 1.669817679 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.107385924 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.108693504 seconds)
  done (took 1.605245592 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.08221199 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.068600682 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.08824927 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.080227612 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.069629147 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.069359026 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.087155392 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.069716806 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.069523605 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.070087502 seconds)
  done (took 2.148282356 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.070975042 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.077017821 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.074712539 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.072429451 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.075814564 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.070680138 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.0729732 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.07106342 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.07785447 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.069679852 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.074159856 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.094068569 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.074005676 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.093498545 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.073433451 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.07429483 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.075938705 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.073839245 seconds)
  done (took 2.755103425 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.070189175 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.070313335 seconds)
  done (took 1.53323049 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.07287293 seconds)
    (2/7) benchmarking "second"...
    done (took 0.069435411 seconds)
    (3/7) benchmarking "month"...
    done (took 0.07159327 seconds)
    (4/7) benchmarking "year"...
    done (took 0.071912913 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.069336261 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.068747416 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.069907842 seconds)
  done (took 1.885894308 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.496774792 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.228436243 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.48956024 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.080193197 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.09681504 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.302446375 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.075375892 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.080811929 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.080269415 seconds)
  done (took 3.316634849 seconds)
done (took 16.312094584 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.095054255 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.205330757 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.131514085 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.481605837 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.09147726 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.078809122 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.111554982 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.244340205 seconds)
done (took 2.85737093 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.335250979 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.519276394 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.351024948 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.078387465 seconds)
  done (took 3.337531449 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.470520256 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.190489573 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.087852822 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.077900381 seconds)
  done (took 2.238017003 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.075401543 seconds)
    (2/2) benchmarking "read"...
    done (took 0.081859163 seconds)
  done (took 1.557859407 seconds)
done (took 8.88046436 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.084882165 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.069919511 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.078993558 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.073643804 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.076379348 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.072571815 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.072703405 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.074131429 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.070612752 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.074061768 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.073118397 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072942644 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.074020359 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07362054 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.073143884 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.074693905 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.071686913 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.073843561 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074173592 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.074546256 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.071945934 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.074328837 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.073159797 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.074459735 seconds)
  done (took 3.170034831 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.093297152 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.075757717 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.076570061 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.076413579 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.077817977 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.07694635 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.07712848 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.076367618 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.077159707 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.076001009 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.078321949 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.077468354 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.075335554 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.078576453 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.076497366 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.078956324 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.079199193 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.077606519 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.077347411 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.078780299 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.076974938 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07597962 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.07860761 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077650191 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.078220454 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.078131089 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.07715149 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.077151839 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.078659358 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.078540303 seconds)
  done (took 3.736615012 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.076994249 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.068660351 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.070033849 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.080125912 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.069974893 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.069952051 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.070718364 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.069308484 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.069626722 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.070920196 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.069666026 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.069312248 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.07111183 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.069643352 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.07040956 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.087079202 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.071816806 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.088125786 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.065878777 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.065326148 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.07072967 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.065088414 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.065681678 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.064761628 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.066593688 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.065047055 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.065111485 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.065919545 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.064844023 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.065806068 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.066062782 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.071199837 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.072749835 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.065841439 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.076293521 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.071052664 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.065435125 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.073399737 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.066549801 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.065484484 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.065283625 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.06513233 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.065606064 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.066074409 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.077772869 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.065942263 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.067461664 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.066710951 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.065604431 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.065664345 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.065752625 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.067609501 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.071473021 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.067867909 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.066735688 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.067106277 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.065638598 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.065908191 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.06589787 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.065563289 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.065179982 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.069504241 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.066571038 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.065661361 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.089179144 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.067725672 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.078257027 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.066490955 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.066957209 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.070335093 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.066079613 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.087825045 seconds)
  done (took 6.412516558 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.077678445 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.076401845 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.085530465 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.076218691 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069818371 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.066138294 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.069355277 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065390734 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07632817 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.070272194 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06636098 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068741953 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.075533585 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.07276195 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067675684 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.07589919 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.069759712 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069749445 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.065757864 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.070263171 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067342069 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.069698544 seconds)
  done (took 3.009116102 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.152738451 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.071048222 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.11652503 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.076935392 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.075098598 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.076744248 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.07208328 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.072169675 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072454761 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072255237 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072096112 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.073092722 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.074643629 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072105408 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.073007974 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.073591438 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.072370408 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.072295053 seconds)
  done (took 2.860395446 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.083021269 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.071228544 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.099399386 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.071769734 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.071853405 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.071378613 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.076169499 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.075639187 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.070837241 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.072548798 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.076515653 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.071740588 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.07146583 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071463528 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070435227 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072476667 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.07236692 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07254794 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.07656993 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.075942081 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.076046815 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.076978946 seconds)
  done (took 3.073222328 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.084877791 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.070665823 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.087702285 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.072760058 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.064868197 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.065558799 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.073574452 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.071486024 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.073008509 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.070999724 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071377799 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.066435236 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.074172341 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.072193409 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.074522558 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.084421413 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071511173 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.071318517 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070698447 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.065313827 seconds)
  done (took 2.883668381 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.103989334 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068639089 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.067663087 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073010899 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068739828 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.068771425 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073253967 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.068455608 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068120416 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.093907027 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069148704 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069895765 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073815314 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072246418 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06936324 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073625842 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073101719 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074304642 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.070069071 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069644799 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.095804564 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069432344 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075159183 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070559868 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.070329551 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07016299 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.070085106 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072763662 seconds)
  done (took 3.493194955 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071544703 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.070228939 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.06981805 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.07000265 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.070188962 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.070304741 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.069904249 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.071452866 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.070328851 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070328917 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.069503318 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.069239519 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.069789549 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.069751629 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.069825473 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.070664885 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069531182 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.071316907 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070939949 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06919802 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.071014454 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.071497944 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.071215752 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071029996 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070725599 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.070324164 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070787647 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.071157075 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070966735 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.071181798 seconds)
  done (took 3.563289914 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.07971593 seconds)
    (2/2) benchmarking "in"...
    done (took 0.077038431 seconds)
  done (took 1.607531395 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.067642899 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.084366876 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.064787809 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.08049347 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.075226733 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.070021681 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.075565579 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.075180927 seconds)
  done (took 2.033845474 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.098948608 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.125934973 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.067099824 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.067602491 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.097733285 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.141125651 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.109341555 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.080478492 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.082248789 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.070900614 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.068141825 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.10932439 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.066753859 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.083431602 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068665393 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.081550234 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.076724661 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.089127914 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.083465335 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.066325196 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.082666197 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.069525413 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.067177823 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.068115984 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.068716879 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.076020689 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.085686209 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.08183571 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077418099 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.06527059 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.088235021 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.065579497 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.067605575 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.077960089 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.098915595 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.066096066 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.107284243 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.066895255 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.071852422 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.066076697 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.080603336 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.09105877 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.083745724 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.086071165 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.068228293 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.068538956 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.065413414 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.068853605 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.071958861 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.077961297 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.066897526 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.076008589 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.06596473 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.068205207 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.079003784 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.067198279 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.072475937 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.077763598 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.081905526 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.078524045 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.080868986 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.083880873 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.07732574 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.075455571 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.068446961 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.089631525 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.068611461 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.082649872 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.083265096 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.067653808 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081636479 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.065594907 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.065413074 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.066785208 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.104430436 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.068157698 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.068349026 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.067185232 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.067806173 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.069343333 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.079088811 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.072382827 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.076172346 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.07028006 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.085311663 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.079155448 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.067910224 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.076931311 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.08862767 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.072662479 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.068724962 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.087900583 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.073423354 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.067914041 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.088790726 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.07938545 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.0705412 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.069383058 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.073123104 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.084421322 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.070716353 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.068061475 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.079839204 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.071437258 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.258805246 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.071550166 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07602935 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.067306593 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.079034731 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.07310048 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.06817446 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.065538919 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.071892715 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.067050221 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.065264879 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.076902564 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.066058232 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.083005268 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.074154087 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.083035266 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.083658018 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.077865295 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.084732989 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.066168902 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.064978242 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.086989167 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.077305041 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.066855525 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.085972212 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.065524087 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.077665567 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.065783773 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.067212392 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.07702447 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.06582854 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068199145 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.065733563 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.071572961 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.066457856 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066952931 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.072365507 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.076012555 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.079422108 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.067462452 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.076675692 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.066765522 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.083306543 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.077242922 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.072335696 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.069787748 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.067308965 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.080425848 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.074188779 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.077676878 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.066410036 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.06731448 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.067176138 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.079272555 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077212253 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.06811972 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.075158635 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.072038429 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.06739772 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.067203553 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.068079647 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.071823147 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.069959107 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.066720066 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07534332 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.075620324 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.081130394 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.074092042 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.0782175 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.06837501 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.065957855 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.068144821 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.065564757 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.07210852 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.078487651 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.084587582 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.080228338 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.090294312 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.066789269 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.078221338 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.068424447 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.085786272 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.082468425 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.068358725 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.071289254 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.065903842 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069177546 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.078817717 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.081389403 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.082392667 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.085077523 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.073834337 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.073019165 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.066582048 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.084382282 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.068269646 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.078465783 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.079421749 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.074613743 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.068458373 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.069763198 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.078930703 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.074667681 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.068517188 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.08661825 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.076811663 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.067479466 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.085290347 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.069331767 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.082075727 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.067837911 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.072767779 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.074698023 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.071451717 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.241037017 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.085460167 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.066653759 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.067283289 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.084656128 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.068093915 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067902815 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.075870417 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.083328281 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.071821959 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.075289631 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.077687182 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.076669407 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.071504208 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.076691561 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.0661307 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.076724584 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.06840968 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.078980973 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.065154891 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.085468084 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.064032315 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.083351773 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.065832461 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.078906535 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.066441144 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076961959 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.066367438 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.08489435 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.067528687 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.066471952 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.079324604 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.064483492 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.076527667 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.064930112 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.071781116 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.073765018 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.076506969 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.067638736 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.07664374 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.067724131 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.077053498 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.071723847 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.075511138 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.077016511 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.070597561 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.065287663 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.076164349 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079249761 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.075679813 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.067301846 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.067078704 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.067189972 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.077086463 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.067997695 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06763211 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075587424 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.072155078 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.073531768 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068088018 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.068534174 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.068321165 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.077339138 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.077818057 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.087461421 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.076500545 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.075451471 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.076568636 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.065406396 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.084855729 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.067145658 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.075559073 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.065091889 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.07431205 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.077058218 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.065948871 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.087015628 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.067960539 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.075661164 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.080925215 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.077403779 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.07163968 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.087717604 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.070102292 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.076933056 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.07726653 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.073274778 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.075544295 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.069424109 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.077585067 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.078601485 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.079700519 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.068070134 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.076478955 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.078225789 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068478896 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.07535528 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.070395284 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.078623589 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.069952418 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.066760643 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.074597748 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.081224785 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.07400406 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.074508378 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.068221646 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.067362547 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.069077437 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.077893003 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.074487637 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.077926275 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.086399182 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.067275654 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.073337472 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.068476634 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.07346874 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.251712772 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078669952 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.077005507 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.072666246 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.064916718 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.066833994 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.067171708 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.065777358 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.068547188 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.064446914 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.064927329 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.077348814 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.067086398 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.070002884 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065990554 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.067098476 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.078542236 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.07046197 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.0664527 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.073895031 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.065147733 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.072841 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.064843888 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.066591737 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.071599664 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.064370381 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.070837438 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.077420526 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.085386006 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.074211584 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.076023295 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.066521489 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.07461366 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.083520452 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.072935616 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.067045578 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.07767831 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.065599688 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.087106184 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.076535825 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075540583 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077782766 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.066685296 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.086200354 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.071401261 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.076574921 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.082280698 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06646638 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.074480865 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.066570014 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.084412281 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.07291008 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.066975201 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.075952013 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.075189046 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.072708939 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.080323319 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.067357744 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.075225146 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.071291952 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.070051622 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.069560217 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.067879185 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.076656939 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.084118095 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.066939164 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.072350607 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.075649047 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.076195461 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.0714573 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080451086 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.075670573 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.067448266 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.066939543 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.072631505 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.067928816 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.080319014 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.067093134 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.071953904 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.071765267 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.06592606 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.073433777 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.086179511 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.077074021 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078113313 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.067625711 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.0665166 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.086765257 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.071438648 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.069743446 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.076237512 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.079135531 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.081198039 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.077835368 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.086259484 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.067445851 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.073733866 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.082158075 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.068236054 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.067569195 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.072023928 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.070304695 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.079016305 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079633987 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.076780235 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.069972878 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.076934327 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.084285613 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.06955942 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.074425086 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.07575228 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.068888797 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.08108181 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.077059254 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.07846061 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.230990781 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.065822256 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.070550614 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.076863101 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.074819655 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.076951475 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065990859 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.072516712 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.080738537 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.074689914 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06893195 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.065245125 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068599934 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.077289565 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.070980644 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.065098976 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.07126335 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.070229428 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.07309857 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.07661629 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.071361801 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.065301919 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.084281036 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.073985678 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.075359279 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.066880343 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.067055843 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065392293 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.064663171 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077991881 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.065371772 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.067775698 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.072391534 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.068007738 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.085689868 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.074967809 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.084753985 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.066735161 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.352741807 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.064948614 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.08007753 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.071935806 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.065472669 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.076894185 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.06532134 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.083422291 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.079445142 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.073664856 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.066313995 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.073837103 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.076100686 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.084443507 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076694059 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.077419782 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.070086872 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077462954 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.067683305 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.078938279 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.06533723 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.064527798 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.078180232 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.076881166 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080818251 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.065566064 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.078383764 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.068493774 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.076767399 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.075857839 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.067740349 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068331439 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.068773723 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.078600215 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.072720101 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.078521161 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.072896938 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.085923011 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.067433189 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.078937168 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.077260486 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.079339839 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.082280761 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.080995669 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.076876188 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.067797503 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.07537824 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.076051604 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.067359449 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.072906745 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.07013233 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.089837817 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.06843164 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.06813259 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.083352167 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.074441029 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.066116863 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.074339986 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.073491766 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.07838868 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.068901061 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.081085509 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.074662404 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.069233454 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.074219171 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.074200863 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.067135753 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.066760558 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.067797529 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.079525285 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.074364122 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.068975725 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.089630217 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.069960465 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.077703396 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.081557392 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.236572643 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.068650954 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.065116599 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.067897079 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.081121215 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.083932555 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.070533636 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07581681 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.067434512 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.07764103 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.06588354 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.076497777 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.075390064 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075677808 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.066273908 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066981844 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.082399945 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.083157614 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.07104231 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.084345539 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.076931173 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.066719851 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090140168 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.077064567 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066426395 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.07811764 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.067090244 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.065156734 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.06492318 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.067160498 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.077792201 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.065010668 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.068572705 seconds)
  done (took 46.842487345 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.110093908 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066797441 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065031199 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.065145107 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072493297 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.067306202 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06588399 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.067283128 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067408009 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069184417 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.067149039 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.066749492 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071992151 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.082469683 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074475009 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069715102 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.066438405 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.067034986 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065701511 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068302403 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073696192 seconds)
  done (took 3.036079781 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.069730578 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.068506821 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069448068 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.070182306 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068989427 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.066322596 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.070033078 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066273033 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.070402508 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067147376 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.071151149 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06711186 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.066877076 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.066438507 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06666605 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067974493 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.070493079 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.072954401 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.066970826 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.070458359 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067930021 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.070374683 seconds)
  done (took 3.043158321 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.068258893 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.06670836 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.076872606 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.065535308 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.065593352 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.069044882 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.065579811 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.071276783 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.071817266 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.071943879 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.076616646 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.067397591 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.066056776 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.072976927 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.065589037 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.066830933 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.113361313 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.067019493 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.067076034 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.066375972 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.06828598 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.076623956 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.064668478 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.066560614 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.071657815 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.069325465 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.066129131 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.068970575 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.066385908 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.071558257 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.067630183 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.06618655 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.076742739 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.076051483 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.070938671 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.071709897 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.067636046 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.066989226 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.066198354 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.065987202 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.077163578 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.068143369 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.065656307 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.068293866 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.077049362 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.066285595 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.066849048 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.07664994 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.065891222 seconds)
  done (took 4.977355639 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.078606338 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.129989223 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.073003106 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.112745696 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.07923884 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.072815242 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.074002541 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.115188135 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.067122202 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.067265502 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.078456586 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.080143392 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.068670225 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.069660852 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.073644324 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.068684667 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.070337627 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.068977319 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.072098636 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.068533926 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.072489117 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.073896037 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.079706387 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.080260121 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.070523403 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.069052935 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.069111527 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.071140333 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.079510565 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.072327368 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.070923117 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.071512043 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.080001162 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.074362416 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.068246821 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.068039273 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.080581622 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.069392294 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.069130163 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.068042041 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.068511222 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.07032411 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.075235214 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.081372579 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.068755489 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.075152724 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06904038 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.06758244 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.080521689 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.069585512 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.071961319 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.080673529 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.070092697 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.069485059 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.07005766 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.080494802 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.070416509 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.068747876 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.069855174 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.081218637 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.069071039 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.071219748 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.081060212 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.069169916 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.072328855 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.081308614 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.075008749 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.070769039 seconds)
  done (took 6.786679926 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.076467147 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.102974769 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.080964884 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.081048877 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.078090082 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.076931513 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.077863634 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.077626782 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07716544 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.080560371 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07796089 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.142660566 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.073521205 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078505976 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.077700597 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.078259025 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.077876751 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.077862243 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.07789789 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.077137369 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.077683156 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.082586308 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.077720978 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.082907607 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.081669654 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.073885505 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.076620765 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.078169256 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.083542507 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.078333118 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.082967399 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.076948824 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.077374911 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.086341127 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.083054692 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.078059122 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068277089 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.077292586 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.077471523 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.07785148 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.074837554 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.083057743 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.077336629 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.075499078 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.078551214 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.077750595 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.082824044 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.083837876 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.080439583 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.080893646 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.07803754 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.083271609 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07790213 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.078011822 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.082950911 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.085579797 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.083481017 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.082409498 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.078157191 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.082676462 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.082688354 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.086497197 seconds)
  done (took 6.586051843 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080980796 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.071184329 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.085523763 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.06547261 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.066640044 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.076445651 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06573711 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.066068643 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.071897986 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.072607757 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.073248082 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.075424571 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.077628536 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.073822155 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.077150718 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.078251163 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.076689914 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.076496098 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.073920583 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.076882706 seconds)
  done (took 3.071371775 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.06859868 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.070891226 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066728193 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.083218766 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066194173 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.074805058 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066647396 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065654088 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066262644 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066466583 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.07114911 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.070638835 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066527639 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.075346353 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.070238919 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.075117469 seconds)
  done (took 2.674434603 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.069624704 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.073843299 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.100303011 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.066756342 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.06810795 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.066719445 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.06629751 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.065097116 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.068124613 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.081428671 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.06791667 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.070170164 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.067638507 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.067079268 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.06680048 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.069243731 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.069359001 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.06822906 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.067979441 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.101918047 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.07625502 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.068251312 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.070503295 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.067842617 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.068967292 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.076114074 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.068875293 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.069432909 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.067970098 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.070195908 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.069615124 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.079125208 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.069306371 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.068557437 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.067046835 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.067259889 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.067322701 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.069221091 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.069007063 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.067301307 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.066496246 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.069199097 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.067508267 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.067780619 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.069406764 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.070321833 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.068852469 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.079405413 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.068158401 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.069461714 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.067918791 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.070271332 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.068739222 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.080217308 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.070269252 seconds)
  done (took 5.44862 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.084709312 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.070832097 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.064242897 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.065582904 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.070895059 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.072790971 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.071344365 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.073246329 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072109935 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.066094527 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.072186997 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071821789 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072772953 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071153164 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.071828111 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.071000241 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.065200313 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.071512467 seconds)
  done (took 2.854856124 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.076110328 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.069930682 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.070224457 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.067395493 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.067586596 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.072296211 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065310936 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.066391033 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067706684 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06742871 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067689287 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.066658672 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067826594 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.067137352 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.071877279 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068317537 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.067810783 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066413464 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067826318 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066081232 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.071527032 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066684631 seconds)
  done (took 3.066301097 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.125399825 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.092093526 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.172149779 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.087576754 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.098271786 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.079120577 seconds)
  done (took 2.210312885 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.102881896 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.106683445 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.074023855 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072314677 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076042038 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075090485 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07544478 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074839148 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077867278 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.080760619 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074858672 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077944708 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07720879 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.080559807 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076104607 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076122318 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074550401 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075110755 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071040059 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.082289023 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074932791 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078642712 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075154702 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074581826 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075694083 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.079795409 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077911084 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.08138979 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075022983 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077912835 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077026592 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075113291 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079390551 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.082109917 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072662402 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07827804 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075339608 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.082539577 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076190343 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.080008837 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.071525771 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076996459 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078923312 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.078630066 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07814442 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07547346 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078871952 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075752988 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075381452 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.086782662 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077005369 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.079659658 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07672334 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078162917 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078987054 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.087402377 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.081622475 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.080537626 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07716077 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.082313313 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.081211799 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077711733 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.080530845 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.082044346 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077611489 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.080622804 seconds)
  done (took 6.749066671 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.112977809 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.072155749 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074320002 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.079881904 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07939982 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075106959 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07536044 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07473909 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074734085 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072863828 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.112841767 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075789454 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079675299 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.079951435 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075783332 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074835841 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075165906 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.080157475 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072944996 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.086331278 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075400398 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080492431 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.08028649 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.080525748 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.081047861 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076710347 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074792781 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075489005 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076398759 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075057379 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.078444293 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075678811 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.080434673 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.072294557 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080365999 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075544451 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075233755 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.078165907 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075146855 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07633202 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.080575035 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.084455493 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075903457 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074915427 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080958978 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075178064 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07517898 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072249821 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075411442 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072684229 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080745224 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.084148019 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.081071301 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.08009038 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075802014 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076496031 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076094729 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076164588 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076072454 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077629215 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080274201 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07535695 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.086696475 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07555484 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076271442 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.080902698 seconds)
  done (took 6.761016386 seconds)
done (took 141.361458237 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.262666202 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.226216134 seconds)
  done (took 2.032280833 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.110700954 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.110057292 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.131299525 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.07767253 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.162955823 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.235597921 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.180265864 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.07938067 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.077923646 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.080394089 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.078667185 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.079561737 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.080221474 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.078470253 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.144364032 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.079031663 seconds)
  done (took 3.353971333 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.129789664 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.230897806 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.11655572 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.07834633 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.165771987 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.084214571 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.080515101 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.083505053 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.083873735 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.077330774 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.128702266 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.091990858 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.083178477 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.084678226 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.081157202 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.082321444 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.0825808 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.084069618 seconds)
  done (took 3.43035428 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.146164592 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.089714601 seconds)
  done (took 1.82230705 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.173330008 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.116234924 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.158989799 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.379415518 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.149297344 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.151870437 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.156207687 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.149981348 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.120560252 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.146335372 seconds)
  done (took 3.290056793 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.115773633 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.114687428 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.353424927 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.11275742 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.091489972 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.085402649 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.082210178 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.087025778 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.082553984 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.083899563 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.134584963 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.083465569 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.080321418 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.136077892 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.107308261 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.116617293 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.079079766 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.086463978 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.088548499 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.077952803 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.082826435 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.087532697 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.193164376 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.086737777 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.110046325 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.083017401 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.08534674 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.082474181 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.081829301 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.085265304 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.085923573 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.109491279 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.086447647 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.091949308 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.084528343 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.105634933 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.079713316 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.109021321 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.082684202 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.079584969 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.082507571 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.086158437 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.079953762 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.086106432 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.082239581 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.085578225 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.087887019 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.078919488 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.083110556 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.081980787 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.079851687 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.084027593 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.083424878 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.084360027 seconds)
  done (took 6.85653028 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.131433181 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.119448916 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.075148809 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.126909402 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.119847815 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.076205851 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.135727869 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.115341019 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.133609492 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.076462613 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.076967116 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.074789785 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.083683321 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.086733624 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.132165587 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.123744771 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.078840536 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.076329815 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.121906806 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.123698582 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.074924658 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.135731489 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.1254892 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.122016023 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.074573541 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.076758171 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.075623818 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.076610512 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.084040343 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.084067607 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.0756609 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.086868446 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.088851094 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.083910121 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.075265567 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.075461155 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.075383977 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.084032136 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.088848026 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.086165917 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.081826199 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.074632626 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.075587641 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.075376483 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.075549918 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.074147155 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.084501242 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.083800494 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.086000501 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.07645069 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.077038633 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.076405928 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.078306686 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.084624217 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.082715663 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.084130904 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.086476774 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.077217843 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.076575851 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.077932185 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.08730027 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.084758833 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.083880707 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.077032252 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.085795008 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.075873886 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.086219965 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.088778808 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.075246027 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.07635897 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.076116778 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.077087203 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.076959208 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.082442695 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.083524305 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.077245144 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.077310417 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.076393155 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.085568999 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.084521317 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.076427788 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.086614386 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.076152924 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.077199846 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.077690345 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.078532373 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.08852882 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.086146546 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.078260975 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.077746926 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.077531391 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.078650772 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.077327331 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.244014335 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.084117458 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.084290259 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.085417461 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.076743818 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.085865582 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.083378862 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.075187663 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.082575734 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.074501183 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.075511848 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.075397818 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.081297701 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.081334411 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.08324074 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.075560524 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.07463958 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.082538086 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.086150322 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.075647169 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.081824577 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.083996021 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.08293648 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.074731966 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.085028823 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.075447791 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.084511557 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0758014 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.083697271 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.076768396 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.081886422 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.074787264 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.074249639 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.074356557 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.084983094 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.076938809 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.076073807 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.07498 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.075074881 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.081659966 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.08607313 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.076549473 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.082990306 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.083993248 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.076962448 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.085735479 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.076002523 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.085582928 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.07681727 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.075951984 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.074366576 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.086093819 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.075158035 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.076323347 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.074957858 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.084707692 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.074876572 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.085018821 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.082656258 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.075127288 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.085471593 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.084172942 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.081401132 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.084832714 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.075569571 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.075742262 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.075552371 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.075923358 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.084655726 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.086388288 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.076800144 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.075717134 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.081355341 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.085934481 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.074944262 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.081726544 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.081233089 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.083337757 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.07645256 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.076163023 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.085916544 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.087439804 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.083564798 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.087382581 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.086661472 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.076501261 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.084562741 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.087429307 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.077260635 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.091800585 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.077056401 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.08853705 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.088073607 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.084038309 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.246612736 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.085806621 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.083996995 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.083246915 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.084835284 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.074203583 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.07432813 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.080521871 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.075088464 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.076656736 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.080324227 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.074590956 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.075790909 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.08759591 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.075232373 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.08443585 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.074089598 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.081410931 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.074046879 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.074854938 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.085311109 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.074484812 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.074692612 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.081423711 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.073586924 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.080656729 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.083635797 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.080486073 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.074746648 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.075096946 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.085223793 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.084136543 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.074395517 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.074885043 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.075744011 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.08385084 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.081797259 seconds)
  done (took 20.529517646 seconds)
done (took 42.915828965 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.20950039 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.12706592 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.221408074 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.146146829 seconds)
  done (took 2.277811133 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.109456827 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.070810386 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.114058482 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.125499119 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.071124335 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.110383994 seconds)
  done (took 2.205459487 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.267541377 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.19354344 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.198048167 seconds)
  done (took 2.26333625 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.188375745 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.337766231 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.61070088 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.188503359 seconds)
  done (took 2.945774401 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.156468439 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.140522283 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.083458212 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.155181611 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.091126885 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.069076016 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.154305258 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.075260746 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.105983948 seconds)
  done (took 2.70937099 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.151365145 seconds)
done (took 14.187476524 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.332227141 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.117321601 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.087202307 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.079798117 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.208400225 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.172172365 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.270111911 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.082999979 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.270644764 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.368648227 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.228460914 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.102266191 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.13434231 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.096704687 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.306924315 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.084574147 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.080845023 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.077479197 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.205761303 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.189203776 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.222608542 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.082013633 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.152689481 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.084000017 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.164646583 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.135483503 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.245761753 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.355254502 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.321669373 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.083370881 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.189090527 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.10103946 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.179633598 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.208840377 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.173695952 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.10868167 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.07268808 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.289201503 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.165041001 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.353507758 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.212571935 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.079875404 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.202605021 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.077620836 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.140622099 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.120341181 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.086559907 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.080122142 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.09801287 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.07918743 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.094783081 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.080225642 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.219728561 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.077008082 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.152129545 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.179126905 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.23112933 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.226823505 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.078939047 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.092943627 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.08292209 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.231819775 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.099670527 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.080004537 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.086618484 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.075300754 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.34691535 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.095206797 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.074898953 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.085324323 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.082113452 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.166491954 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.124623712 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.120303652 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.084638781 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.176108869 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.153320096 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.100479775 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.106105901 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.082430868 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.072721662 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.229763349 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.078181478 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.091033942 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.07762199 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.110046459 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.072442255 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.093005927 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.210524016 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.20760023 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.135069445 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.073147411 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.291323137 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.074170857 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.103333131 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.141483428 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.073953354 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.22863477 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.073928132 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.072947481 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.08091619 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.080054479 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.073998397 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.211064275 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.164181338 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.081416704 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.079831762 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.073474182 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.078915589 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.075664286 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.072324271 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.072685524 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.156623571 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.094459479 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.073944729 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.165845017 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.189842781 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.084706092 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.092110996 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.13642505 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.074281767 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.081536337 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.080483412 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.187354205 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.081341496 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.198975315 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.075864019 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.097740829 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.178402773 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.15363085 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.165143788 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.074623591 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.219270406 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.083348274 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.073422553 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.080342336 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.102077101 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.082735708 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.090084265 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.083046347 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.222120235 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.08436346 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.078879253 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.178690801 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.073982998 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.171430636 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.155162595 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.192312082 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.077688024 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.083280675 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.217992277 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.099708892 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.103533541 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.100027185 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.080696336 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.075208822 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.075047481 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.090626246 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.075314794 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.256976532 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.089974466 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.080801948 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.07332829 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.226177951 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.083653466 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.078214474 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.246857818 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.085594413 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.147144392 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.094454944 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.073661568 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.163673352 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.074541395 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.095360739 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.220620452 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.073089465 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.153773682 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.075014407 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.0733214 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.079841138 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.074769251 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.081442604 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.085610439 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.07385639 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.086301219 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.08026126 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.071265453 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.162013338 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.075301571 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.246211813 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.161835619 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.165566957 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.072788273 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.092524376 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.07318353 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.196467237 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.073579161 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.123603101 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.173055504 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.089023556 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.092871295 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.072471898 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.151993233 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.087750051 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.071959964 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.15993849 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.191488307 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.146900103 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.080728293 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.225608048 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.082776464 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.073168357 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.080552886 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.080702457 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.072485454 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.153491744 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.076983542 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.072912957 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.072947777 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.073668648 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.073092511 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.098436392 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.072800701 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.079263427 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.071946829 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.074631737 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.075988963 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.072806826 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.081198868 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.155627417 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.192332363 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.078760058 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.094768692 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.085907531 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.085071967 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.203827112 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.080533746 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.206188065 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.073130969 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.081882372 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.095464042 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.074391928 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.079039823 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.073300477 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.093044415 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.075855994 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.07440518 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.085401422 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.073551829 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.074014722 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.074541708 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.074336284 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.082130976 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.075133011 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.072966505 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.073668251 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.070862261 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.078264546 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.079689126 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.08447054 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.096237077 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.455952064 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.261628174 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.079345288 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.073647311 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.073504557 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.075030656 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.075618433 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.073514946 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.074398942 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.074055221 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.073044176 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.101448383 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.077396814 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.072586829 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.094623666 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.071507563 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.081275683 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.188739911 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.089406269 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.077599394 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.071693574 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.243417804 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.160201865 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.095716113 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.093013442 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.07190291 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.081747806 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.072006279 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.074363445 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.071933051 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.099790846 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.078552737 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.071843943 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.073064969 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.072929817 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.202740462 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.079997055 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.073103762 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.079157027 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.072625232 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.07244955 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.102131778 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.071289552 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.072628777 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.089936538 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.084040943 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.154222991 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.084401935 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.07469559 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.206794489 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.073030947 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.072605095 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.072519566 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.16925245 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.08593054 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.073993813 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.073469271 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.079702489 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.080664595 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.268834004 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.078399432 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.075093174 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.080262051 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.072262897 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.072008689 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.09780278 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.101053083 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.074464354 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.075511389 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.072917898 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.071293162 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.150424073 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.079486651 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.076297305 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.163262909 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.075062391 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.079954704 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.072410837 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.444887439 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.07818237 seconds)
  done (took 41.980725075 seconds)
done (took 43.631896455 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.137968215 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.088873912 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.087033995 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.082694562 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.086645896 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.086222118 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.08812902 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.08343129 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.086236284 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.085449304 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.115744506 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.070908633 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.079326155 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.087552747 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.080702255 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.089134056 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.084809975 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.087787062 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.072776634 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.088427807 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.098520749 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.085998226 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.082652728 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.089296637 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.074239972 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.08255905 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.130096125 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.093582061 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.077527941 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.08368321 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.080577468 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.087573183 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.080967323 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.079994766 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.082603781 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.078073716 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.082449554 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.078416069 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.129931412 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.078142141 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.073249991 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.085283858 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.079369833 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.080366114 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.088639694 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.085095936 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.076690977 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.086188841 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.072355431 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.085560292 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.12882355 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.077739492 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.076829383 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.080809164 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.07789425 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.085168054 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.07673803 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.084823393 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.077800216 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.085194363 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.082515223 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.081247199 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.072510393 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.081333969 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.084365946 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.079861656 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.070982784 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.081140372 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.072455411 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.072684106 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.071289086 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.081569809 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07960094 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.077467954 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.071326852 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.071509951 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.070884469 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.085110679 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.080567455 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.082186775 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.073925833 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.077891052 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.076790657 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.072258029 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.078439568 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.084582138 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.071256259 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.073128177 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.071621133 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.084675025 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.079652586 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.073359056 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.085184602 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.078783606 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.078474832 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.072493949 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.072044025 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.079074926 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.081554197 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.071935528 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.071102098 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.078766371 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.078377557 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.082976069 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.075565676 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.078646534 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.079667123 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.071419274 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.082548874 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.081279346 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.084565532 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.087690843 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.084504397 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.086245539 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.074857614 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.238435816 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.082766064 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.073164787 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.078224717 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.080007926 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.07700499 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.080065307 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.072067112 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.070316254 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.076049921 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.077050217 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.071061102 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.07135943 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.072013614 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.08084301 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.079282946 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.0690363 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.07033092 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.080486066 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.080542826 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.071055515 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.069643868 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.080244356 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.071543474 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.077781571 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.076127829 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.080492238 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.069558018 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.071560952 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.070144073 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.07026617 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.069478082 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.076534697 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.076759171 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.071718054 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.080409608 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.078988235 seconds)
done (took 14.221341167 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.085256726 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.118314838 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.154517692 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.120834835 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.086622915 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.073317036 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.076574719 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.093147266 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.075042162 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.099085027 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.10103993 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.095133309 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.139419949 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.071309845 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.072410492 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.073923669 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.070344189 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.084652509 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.122498573 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.097373436 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.117620853 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.071700157 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.089500906 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.093573898 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.086163748 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.09259423 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.074091318 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.073560585 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.075952047 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.091370947 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.100148253 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.07149382 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.074617191 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.093147178 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.090351598 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.081500337 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.074304638 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.079597052 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.073638808 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.072572943 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.074792443 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.092708477 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.079237794 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.080352699 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.073752469 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.073216986 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.072305319 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.081142537 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.087206546 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.079474779 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.08666379 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.091112331 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.074683884 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.073415471 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.072075408 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.081349052 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.072850048 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.073335296 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.072904469 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.072717309 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.073594988 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.076067095 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.079727754 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.084775937 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.078052913 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.080662906 seconds)
  done (took 7.332509997 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.092792892 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.101943926 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.088332332 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.091670269 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.072067764 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.072924155 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.072754401 seconds)
  done (took 2.372694376 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.121858505 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.114529842 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.122962468 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.122973773 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.131427004 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.121461602 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.08735095 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.108411864 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.072895951 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.135768893 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.131090605 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.126306973 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.07692995 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.08747978 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.109487238 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.129554547 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.087320061 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.080661328 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.119984864 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.127121311 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.077806532 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.105958086 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.088075142 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.074453396 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.125496486 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.117364727 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.07732807 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.074534494 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.076016647 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.072937137 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.073120691 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.098481936 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.115969158 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.08949413 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.074007444 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.073253762 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.114350881 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.074498527 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.113308081 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.080560379 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.112233883 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.075348312 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.076774577 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.073824932 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.075045209 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.118066228 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.074956572 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.073672794 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.072811231 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.118279962 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.073514216 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.116336228 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.07612784 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.079261178 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.081140535 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.080357585 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.081202121 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.074257382 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.119476853 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.085144496 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.076157086 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.1297209 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.129130528 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.114638811 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.128901326 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.08429884 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.119726945 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.116873952 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.073828159 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.082744132 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.074130171 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.12949139 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.077767412 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.077220699 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.079810666 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.08314846 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.135409946 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.136815438 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.303353482 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.087688568 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.076192836 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.072955742 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.129227602 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.131432226 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07861127 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.073301773 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.073826306 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.089783689 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.099326399 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.074627202 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.07754881 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.072216845 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.083479564 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.076151383 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.075618717 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.122360102 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.073320673 seconds)
  done (took 11.221441123 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.075338378 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.075029512 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.074443903 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.074990042 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.074797643 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.073490577 seconds)
  done (took 2.2479733 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.099444283 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.073995266 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.08696452 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.074601193 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.097237098 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.117015883 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.117684619 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.075111637 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.091140848 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.085938267 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.11771259 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.120735926 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.122634003 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.075872457 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.119721438 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.086573513 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.119546525 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.079208887 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.084150599 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.075579337 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.088226283 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.075351438 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.075875731 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.1272297 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.077450069 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.086648254 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.084982004 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.087389217 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.086495461 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.076031062 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.075546829 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.076642212 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.084549245 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.075801674 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.11950115 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.084185936 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.075516754 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.079869741 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.077637252 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.076863951 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.121425644 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.07502089 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.079424691 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.078599788 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.075278071 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.083868869 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.079640012 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.079036765 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.119744336 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.078748062 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.078817129 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.07798792 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.075848211 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.079851682 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.083427027 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.074908936 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.079320304 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.119317364 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.07607684 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.085044441 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.074800206 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.076333378 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.075530675 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.075615886 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.079190761 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.07930886 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.083993333 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.076169997 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.076418819 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.075110011 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.079864625 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.075051899 seconds)
  done (took 8.020919057 seconds)
done (took 32.955836614 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.561062495 seconds)
  done (took 2.327037074 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.033572184 seconds)
  done (took 2.83324256 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.104246205 seconds)
  done (took 1.916057986 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.347402578 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.475075518 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.822737204 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.145253401 seconds)
  done (took 3.576568269 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.908403619 seconds)
  done (took 2.710456076 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.281758735 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.24187142 seconds)
  done (took 2.348676154 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.476261311 seconds)
  done (took 2.259251336 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.453645916 seconds)
  done (took 3.251293897 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.249147749 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.173102885 seconds)
  done (took 2.218309085 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.696765087 seconds)
  done (took 2.479675235 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.862914908 seconds)
  done (took 6.646930959 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.278380105 seconds)
  done (took 2.132748382 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.252617123 seconds)
  done (took 2.059542229 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.77506756 seconds)
  done (took 2.580422583 seconds)
done (took 41.18685359 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.097883054 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.094449906 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.09412994 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.089628407 seconds)
  done (took 2.163737345 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.082927485 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.077909213 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.080152397 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.08061913 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.078928061 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.079833311 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.080577574 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.076017467 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.077580867 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.076918405 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.074746607 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.076109772 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.079421812 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.075065167 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.079086406 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.08109364 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.076497815 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.077029686 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.079544193 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.076275028 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.079639124 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.076619255 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.076402771 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.0784057 seconds)
  done (took 3.688321507 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.085841866 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.078584073 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.08230751 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.077264409 seconds)
  done (took 2.143938708 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.084589971 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.083441443 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.092393629 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.09769066 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.082500374 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.084655822 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.091621265 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.091509349 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.09748612 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.09418487 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.074673318 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.074959089 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.073374637 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.092628284 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.090184376 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.067923005 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.069911181 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.085295396 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.083910285 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.086940841 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.076587055 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.072281067 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.083952536 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.085019321 seconds)
  done (took 3.830672869 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.089950325 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.071538209 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.088903493 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.099500657 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.100763498 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.072072533 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.08641643 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.100149364 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.140144348 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.070975288 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.07878622 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.072571351 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.114186404 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.072726138 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.088115428 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.120183764 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.12274505 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.076019617 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.106734718 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.071861833 seconds)
  done (took 3.672703251 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.084713547 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.076844225 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.076103556 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.071306914 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.084139953 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.079018076 seconds)
  done (took 2.304132207 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.076173916 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.074289162 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.074372245 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.079507261 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.074373281 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.072924162 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.073152141 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.072520317 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.072912851 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.073359451 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.073519879 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.07415535 seconds)
  done (took 2.715681546 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.230706072 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.078663108 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.077610872 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.072088285 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.073774611 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.072250123 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.087321879 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.074600963 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.089946936 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.072316347 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.072974879 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.074535307 seconds)
  done (took 2.892891837 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.114446683 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.119198565 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.154277364 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125789627 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124743724 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103426229 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.175827236 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.101158256 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.180023858 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.148309498 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125956958 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100758622 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094449022 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.075832905 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108736561 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128755873 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149492321 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079456102 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123343045 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.221647798 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142816025 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.145069129 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.157900677 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126467866 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100543315 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.157197219 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.106580321 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112713522 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.135418128 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139022314 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130425815 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.107681378 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.079891176 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.078513939 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.164309296 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.117613814 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131991033 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.101685119 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.116004242 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098295623 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118685372 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.076375906 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.091673506 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.124322034 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.094672984 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146857597 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.101837993 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126929984 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090198094 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.327491517 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136933164 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.146731874 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.093396121 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11406118 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145964156 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118999906 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142395783 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.115372204 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090513667 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.128453418 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.114079609 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108960994 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115693026 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087000431 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.188533258 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09625009 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.11975349 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12004752 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.102624882 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102895421 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11593867 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.147896271 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138880045 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.138491421 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.152124951 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102137401 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131216006 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.111293235 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.141509781 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113677208 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.080380386 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.133018742 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.142291494 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10976229 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110929257 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144366107 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103328809 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085001971 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.112031128 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.133665921 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088778521 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.125119912 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089530122 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.120690244 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.151244642 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109089795 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124316225 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.314980759 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085997159 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.16345875 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.118265139 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079728393 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.12736926 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120754697 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.165740456 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101750313 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.082989387 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108445225 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110026128 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.162069752 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114569899 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086684356 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117549634 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150266196 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102237818 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.225968278 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102541646 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.149586483 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119534016 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095980707 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082616213 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.099583785 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123675338 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11894893 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122532843 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103446036 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.094003904 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095909209 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125884815 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101278925 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089453776 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125687521 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.113821518 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.082768189 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096497275 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.083717382 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.152964385 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.08691527 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15011778 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138953897 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.086195596 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117774 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107246055 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118711235 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.109883979 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130549233 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155664015 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.205471475 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.100612577 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.105587556 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122978732 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.345781735 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.134951328 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099333052 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.08469229 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107750437 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12021432 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105588444 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.132316384 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101743159 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1150347 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.111379926 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.151845125 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.15312941 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104924534 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108206195 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115061904 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.130165153 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080874068 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1676182 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11170135 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129288021 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096115821 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.15257765 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.123534396 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09695266 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095649538 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109924537 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.114454629 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116770846 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.157311574 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.107057391 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.080336663 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101227558 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.156289808 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086244459 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119581975 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.101110938 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.102852074 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131607003 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.105226436 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090264038 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.076782212 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140022067 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.173527622 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.077264623 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124634487 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.122613704 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114427773 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.137016755 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.078874774 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13423571 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.15679247 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.315914525 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150201584 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.17491809 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125829659 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.128295953 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.122032332 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113199357 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086338418 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.13605956 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.14516405 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102886097 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098510672 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144355654 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129020155 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.145373902 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.124845632 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127237477 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.113078836 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115362075 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11106533 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.113169238 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.157856966 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132623238 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.137094896 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092453243 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115963643 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.130103682 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148628056 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090718867 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.153268859 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.094998527 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129590474 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.086325504 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135999001 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.086396343 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.185485755 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088959768 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.111644768 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.077373139 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.082245201 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.15679842 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.125562361 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119678726 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113403221 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.153911131 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.151927254 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.088829587 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.120677194 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.128609515 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.113749762 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.309690488 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.119754627 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.098376516 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102735209 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119014738 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0933926 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.090137163 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.124113107 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101347374 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133337582 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.091649891 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082166865 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149060541 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113495645 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102324391 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083425274 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115755006 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.133283095 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103003454 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095518961 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125130294 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114502882 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.152440708 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.099819862 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.106969445 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.134865725 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088014067 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.100713957 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.077292436 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.094535602 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.083764744 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.140169726 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082817087 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12739215 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.07657055 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.143281905 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.096290404 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.102456058 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.114154624 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121822663 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141076917 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.106287492 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.154613236 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099490231 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133133174 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120924307 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105269617 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097737547 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115834799 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.111061912 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.13608167 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.107901958 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137148449 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159902484 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115709358 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.165287127 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.284618326 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133593375 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116957038 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.135015873 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118631356 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176766107 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.149646985 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120948288 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118763674 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082896557 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107076739 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114357687 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.12288419 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.185479115 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135047955 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.08057737 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11285852 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103030103 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.118180164 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112501701 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089643429 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15638462 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111945108 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.098580332 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122198747 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.10095963 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.114517903 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084973538 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110774141 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.115928761 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105322636 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.108580158 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.126269792 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.140972704 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123500177 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.158484098 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.111655262 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.102937005 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.132832716 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123482487 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123335632 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096471002 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097155593 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.153033059 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.134585091 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.141397425 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.112725051 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121123195 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124689171 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111749693 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142941979 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.304119572 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.136188889 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088718709 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.085516427 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.076225705 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.079937467 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133298211 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11773781 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120307283 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107202883 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.079111234 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.112641607 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111200806 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078056299 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095589829 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10188812 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10710609 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.100412853 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114834449 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.122850847 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.10497753 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.113252384 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107239436 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.155624076 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.109587325 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095089061 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.155277455 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.161857267 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096214493 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100715889 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.083636965 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087535628 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124529072 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.162594313 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.166377729 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.086920621 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095557863 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.094240989 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095475111 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.079483689 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.09856077 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.098188386 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116361095 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107699637 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.124198036 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115853208 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083726303 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114609537 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108995637 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102271333 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.119063183 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.133966465 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142309271 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.158224053 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126130983 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119859904 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085434983 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.091676283 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.263340694 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087831932 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.111921615 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.087621228 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083953689 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.153754893 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.102505559 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114672453 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1189166 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095631306 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08267214 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144627755 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.07763186 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145670309 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.07922756 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089593752 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.089588938 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086537722 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100731637 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145782803 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117734971 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120357575 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115735551 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113329294 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170019561 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169858498 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089660291 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.154318059 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084201258 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084683408 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084101276 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122149057 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098501513 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125659783 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153187127 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100549735 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112025942 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086742854 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.156612242 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.108819755 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.115292585 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094811208 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086812687 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.15728628 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088895374 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.090272901 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09993895 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.123905303 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.081173832 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113763885 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093786172 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08885633 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.179047994 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.721387732 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100955048 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.084026443 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108088202 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.344963609 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144238489 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105439513 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116827877 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.128080967 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10815318 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102560928 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117480316 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.201720328 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.08203029 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102550665 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.112951988 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.106377487 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110494468 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.107988796 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.096997871 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.100944528 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.095398604 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086362514 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115219296 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094599521 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104830009 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116699753 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090554412 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.095172956 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.141619684 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.11183931 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.089207554 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09604992 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.113875565 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096828023 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111845018 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.077915228 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.12353469 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097145241 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130274291 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.107211485 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.117314536 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135602195 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103747788 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148295146 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.118056268 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.132748356 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.097894557 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.086802499 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138747359 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.099377661 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086146066 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.158939368 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.108380037 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.1164998 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11468534 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.108077481 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12820873 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13232047 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.306664025 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107252457 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087370439 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109017764 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.11072847 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.093668835 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086766021 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.081287861 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.082935263 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115839698 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092557134 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094349468 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.1231347 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096849452 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112095727 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.112159556 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130274348 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095333128 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.111567316 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119957732 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098671916 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118065919 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.110165744 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.139111861 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.184700707 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133452468 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.139964609 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146240489 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.086196097 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.083815537 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.076081919 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125652122 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089003062 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.098832717 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087140417 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145804124 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.08979122 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121720182 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.256252937 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.088121373 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103165347 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105530487 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.078097666 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092151428 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117871726 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095187181 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087911206 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129189615 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089404628 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.141247635 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122280014 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109682433 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104734683 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090507424 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125899125 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.114890499 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.143989469 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104831974 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.086045502 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141392291 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.295156548 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145932188 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.080277472 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087888901 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.140503941 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110981326 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138548038 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088684567 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157499359 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.152487149 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108449454 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143410462 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078428843 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.674795713 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097066189 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.136775872 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091155401 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119316866 seconds)
  done (took 75.663711309 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.186521732 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.181461785 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.127279682 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.141055067 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.294778382 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.304764725 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.158966068 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.131287453 seconds)
  done (took 3.527712674 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.079266025 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.091382037 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.088071504 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.269978902 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109285731 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.074652412 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.079824466 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.089826971 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.079764831 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.073274578 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.11369741 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.073873338 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.077727596 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.581702684 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.073211872 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.079219362 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.077393739 seconds)
  done (took 4.117416242 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.366989993 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.661753237 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.425461268 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.854161164 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.174010013 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.739062795 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.082383848 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.092530588 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.946544445 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.428651789 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.169049498 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.235573207 seconds)
  done (took 22.164470689 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.08502376 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.131617914 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.131373946 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.082479854 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.082373166 seconds)
  done (took 2.498115977 seconds)
done (took 133.292984201 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.092959697 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.195054614 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.074301721 seconds)
  done (took 2.287782616 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.129956652 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.129710233 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.12893656 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.12981919 seconds)
  done (took 2.497215037 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.084158026 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.084853013 seconds)
  done (took 2.157035745 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.245122047 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.228864135 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.099891938 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.091911229 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.087973928 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.088219612 seconds)
  done (took 2.270963887 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.078463735 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.078113875 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.078261339 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.077443383 seconds)
  done (took 2.302790449 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.184571262 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.074268365 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.077102003 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.079270891 seconds)
  done (took 2.385819481 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.092646174 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.095026666 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.125689977 seconds)
  done (took 2.293655471 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.091920494 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.092007965 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.085290303 seconds)
  done (took 2.257079971 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.117362857 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.104651663 seconds)
  done (took 2.20042383 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.087469838 seconds)
  done (took 2.070869524 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.100563493 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.106320173 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.194779369 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.160029738 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.198478396 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.185050181 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.084068963 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.085211189 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.079747836 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.079258554 seconds)
  done (took 3.241873099 seconds)
done (took 28.645034257 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.093086097 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.204413202 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.323541916 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.095769881 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.664409062 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.319516399 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.734321668 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.099966184 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11099555 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.074535056 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.093898916 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.640194791 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.740604508 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.155010179 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.723565226 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.144074377 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.569523002 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.075854468 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.075677188 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.075626427 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.716856737 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.074779038 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.073926761 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.075528248 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.566251847 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.342216298 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.077597912 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.142617959 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.075800085 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.078886404 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.323026579 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.076970881 seconds)
  done (took 14.598239457 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.084392195 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.140683553 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.081332109 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.093590468 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.07901554 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.077631955 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.080000151 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.077635679 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.122675075 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.076358145 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.096107529 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.076587805 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.080883404 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.077634664 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.09868545 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.076363645 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.078812791 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.077330506 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.076555463 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.077001243 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.096461213 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.075966684 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.077465493 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.076661055 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.077319556 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.092370288 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.077794791 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.075208861 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.076300501 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.079850596 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.080867746 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.077174767 seconds)
  done (took 4.713873432 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.141630129 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.1431996 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.081255715 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.120485551 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.133513247 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.077661064 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.171383543 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.100004026 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.127535358 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.077185646 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.095319074 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.076773261 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.115056885 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.077587658 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.097556668 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.07617418 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.079539193 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.076511053 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.075096525 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.076382301 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.096371735 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.075870118 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.076165821 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.076818944 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.075507291 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.092224906 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07631167 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.075708698 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.075415737 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.079580611 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.081681513 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.077095724 seconds)
  done (took 5.007266629 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.078171004 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.079240472 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.086306836 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.088628574 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.073689576 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.07470927 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.076571203 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.072525575 seconds)
  done (took 2.656512322 seconds)
done (took 28.985867615 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.088517647 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.074998732 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.077791467 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.09533257 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.081435503 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.119201313 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.071287502 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.082272863 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.078151752 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.07829334 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.080788801 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.074794473 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.076563084 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.072047438 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.079334781 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.072317675 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.122569549 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.076849311 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.121522673 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.122972975 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.075854381 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.078278878 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.082464774 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.121757413 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.12161074 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.120386036 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.081284427 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.078738531 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.072835176 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.07579183 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.198428013 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.199005341 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.083066944 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.127863143 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.072675426 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.073310991 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.076814917 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.075270171 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.124357969 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.082321251 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.075886099 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.083249243 seconds)
  done (took 5.915501019 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.204655115 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.210570807 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.203450076 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.087447049 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.099087019 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.087399129 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.206926364 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.084422021 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.082947728 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.207858106 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.078560174 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.083813574 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.086134528 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.075834074 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.084132025 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.08009002 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.085110504 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.078073951 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.083794268 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.082966902 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.207178803 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.07660176 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.087159595 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.08445633 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.078128524 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.08477163 seconds)
  done (took 4.945857225 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.083510767 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.098798328 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.101835736 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.159559373 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.119880182 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.091198977 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.092468505 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.1021224 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.11130277 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.075169001 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.098323833 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.102528684 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.104463211 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.081941046 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.116067876 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.093134606 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.087437392 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.076308021 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.080698957 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.111933313 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.099191186 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.094855306 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.109636067 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.095199698 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.073953941 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.084531375 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.082756828 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.092556995 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.081973147 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.086858454 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.130243148 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.07705831 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.074426071 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.086957508 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.078314796 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.071383018 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.097945085 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.086895487 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.089615817 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.115630746 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.084597952 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.075707665 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.105799367 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.147219931 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.074567424 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.07791703 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.080875266 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.088155076 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.076211332 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.108179341 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.091946889 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.075066828 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.094353544 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.075326624 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.076578573 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.095227327 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.0769728 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.075881303 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.086591356 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.08132185 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.096852019 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.080115728 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.098446638 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.074675841 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.087332538 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.07699733 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.076934224 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.074150649 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.112048004 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082974406 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.129331171 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.075860061 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.072349739 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.087782583 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.08629235 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.082093954 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.073811303 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.096089974 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.087973902 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.078281883 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.086238414 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.077185565 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.076928604 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.113136551 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.073986373 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.072448362 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.072209022 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.077332177 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.078434019 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.075126357 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.087953939 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.074076903 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.077970972 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.091919961 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.075649023 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.074857824 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.077422049 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.07603653 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.073615271 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085505927 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.078699638 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.077089218 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.089123133 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.075325596 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.078186544 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.091138901 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.085301245 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.075755101 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.077735914 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.079988732 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.079106686 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.081418179 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.080848597 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.078376336 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.0809698 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.083896739 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.082713326 seconds)
  done (took 12.280357946 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.227354131 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.210760576 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.075892221 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.206159065 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.085287592 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.136125258 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.211301313 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.208857002 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.075481521 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.075824878 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.074895461 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.149293509 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.144600215 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.15514405 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.134482092 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.076251397 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.104038514 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.156735833 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.211615339 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.205837914 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.101782965 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.082129893 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.077261833 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.076787832 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.075479772 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.085838906 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.091221559 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.084562744 seconds)
  done (took 5.668810824 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.081484312 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.121350822 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.079080353 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.101156109 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.092251946 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.074030653 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.076719803 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.075397827 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.092689954 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.081004077 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.075926531 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.079444069 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.078338363 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.077752136 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.075658766 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.081236691 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.081960124 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.08215184 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.078834622 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.080110654 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.086617221 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.173964265 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.079151563 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.076096154 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.078189596 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.075825961 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.082199384 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.083957543 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.074549405 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.080982132 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.072000824 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.08013129 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.091080334 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.075032492 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.073900473 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.076244416 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.075392735 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.075787123 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.075648359 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.073445347 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.072610305 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.083072916 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.073937008 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.079852475 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.089849495 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.078482006 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.075289728 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.077408739 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.077682361 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.070710991 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.078517918 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.078722593 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.078209498 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.083950037 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.07913281 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.077415734 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.076669743 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.107246505 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.081039724 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.074103506 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.140409999 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.074257584 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.077539727 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.083733581 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.092956571 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.076781579 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.072905979 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.075023239 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.085471914 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.089226728 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.074123804 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.080160926 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.07146677 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.074540942 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.077116529 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.077810139 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.076646021 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.07293469 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.075097473 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.075377563 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.076511487 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.073913291 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.074965801 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.078454728 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.071987434 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.073399005 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.076692934 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.077054747 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.081372452 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.074251666 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.077710645 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.077190733 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.075297546 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.078017576 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.082242939 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.079023406 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.097766449 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.08396518 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.075474296 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.073397397 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.092003302 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.077165221 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.074052736 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.079043709 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.080394094 seconds)
  done (took 10.566354252 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.106880908 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.075749138 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.096427274 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.109218307 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.084311908 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.079448045 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.090582084 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.074699483 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.097693317 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.073038277 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.083048526 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.072503115 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.088848243 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.086173317 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.076829596 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.086932286 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.077966256 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.098569498 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.09009912 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.073310269 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.084049324 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.08770443 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.088091449 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.094360055 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.09392919 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.09522007 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.088009345 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.07698329 seconds)
  done (took 4.505857201 seconds)
done (took 45.918700194 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.115503579 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.294035508 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.108045795 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.585521665 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.204638935 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.090843504 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.216684062 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.071379743 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.722711244 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.162067645 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.851701473 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.763405746 seconds)
done (took 71.284859847 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.123477997 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.253359 seconds)
    (2/2) benchmarking "String"...
    done (took 2.359532664 seconds)
  done (took 6.641686982 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.527913657 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.071950217 seconds)
    (3/3) benchmarking "different"...
    done (took 2.095783511 seconds)
  done (took 8.712805097 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.403730891 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.672131693 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.340294684 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.079462775 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.095501793 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.582221378 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.299741546 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.738402831 seconds)
  done (took 34.828014502 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 7.101081823 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.413676509 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.495343748 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.573931262 seconds)
  done (took 22.688158849 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.507395328 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.487191262 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.484185784 seconds)
    (4/4) benchmarking "different"...
    done (took 2.779095272 seconds)
  done (took 12.351651765 seconds)
done (took 97.925856131 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.076077277 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.560706395 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.119416752 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.267365172 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.108736357 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.159131903 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.08261495 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.110964934 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.067595303 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.082586567 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 7.11047871 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.097157389 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.102339697 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.152861993 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.078796391 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.124304536 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.496321594 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.070025155 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.120090129 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 8.082644623 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.469816894 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.111563974 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.112180451 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.136737837 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.621540979 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.137180831 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.112620512 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.097643428 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.738205947 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.116278714 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.099167708 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.089920403 seconds)
  done (took 214.920851403 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.080227054 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.878534043 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.900851873 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.100673378 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.453316623 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.431467075 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.948093996 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.507288693 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.106663477 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.121654069 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 4.099047826 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.077322508 seconds)
    (13/36) benchmarking "trsv"...
    done (took 4.108815635 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.631634429 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.100713501 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.078041973 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.952166331 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.904778859 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.123469349 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.00769482 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.114186806 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.651687407 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.60622686 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.90062186 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.087898049 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.10910557 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.088549973 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.105062367 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.570848729 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.93174284 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.113410424 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.118362471 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.2667819 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.319779195 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.095250425 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.081233889 seconds)
  done (took 188.804397904 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.313743934 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.112907026 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.116374645 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.520967405 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.128676941 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.968265566 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.09152582 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.097777784 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.112677277 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.104671675 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.114951693 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.166208289 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.096324603 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.401718758 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.103518501 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.06615871 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.079918477 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.292368093 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.109796776 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.100563819 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.10435496 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.210495374 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.449058331 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.207660101 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.112405292 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.119290228 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.205197363 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.099995325 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.081418398 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.080638869 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.198367806 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.078275504 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.201879157 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.18554013 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.083684596 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.139145705 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.081122469 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.397416279 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.073951076 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.076140223 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.087818846 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.122338609 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.084745016 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 6.327446303 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.194760247 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.109806709 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.120390233 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.569271075 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.671388284 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.088235239 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.085786022 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.084171349 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.096122756 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.079376269 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.631556876 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.093624273 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.12184237 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.921127746 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.10205655 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.103999148 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.095011859 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.088529079 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.090842753 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.091696956 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.138943685 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.755088533 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.445664972 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.442705775 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.881971074 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.098703053 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.092274018 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.10593606 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 13.441863152 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.162320102 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.080434152 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.087634777 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.265351183 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.091339471 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.080170513 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.233798046 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.133005672 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.075735274 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.178822414 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.083702612 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.092731236 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.564814703 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.275595861 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.098057658 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.109005071 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.139617259 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.083546239 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.086974815 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.087165474 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.135836302 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.073070728 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.103197164 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.504588843 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.077456012 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.079847367 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.613632705 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.479774379 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.093895725 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.164481599 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.50649813 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.036000587 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.097711942 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.094408371 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.111147456 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.094755577 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.091138118 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.102662394 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.093038459 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.091242695 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.091675506 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.082689747 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.099891129 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.107774333 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.142424217 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.127260105 seconds)
  done (took 446.942139128 seconds)
done (took 855.116249965 seconds)
(4/20) benchmarking "parallel"...
done (took 2.063163765 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.508095342 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 3.251446289 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 7.233445066 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.707592148 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.300178614 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.268275392 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.313790577 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.393490734 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.333948296 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.263149573 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.335059744 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.286305642 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.384983528 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.356911523 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.386926499 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.394982021 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.307036896 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 3.90132014 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.377726845 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.296964524 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.313928579 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.293841129 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.281940819 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.348839566 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.384229349 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.314287235 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.523482237 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.366308537 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.300008659 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.367849621 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.370524888 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.368830807 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.313596496 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.341067671 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.378977613 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.368787842 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.282811542 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.379222361 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.296233572 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.295839408 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.336658438 seconds)
  done (took 105.893156036 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 3.582788911 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.292099397 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.413294407 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.423053144 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 3.197771107 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.421454367 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.491595232 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.308706101 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.28906797 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.410365588 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.412888897 seconds)
  done (took 30.314682807 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 3.40086887 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.269004007 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.394957972 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.40772933 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.504617653 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.397408845 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.434670441 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.281070672 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.267234713 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.392683835 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.431153849 seconds)
  done (took 29.23849231 seconds)
done (took 167.513950765 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.681353893 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.186382086 seconds)
  done (took 6.925858786 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.149657793 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.131265877 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.135795805 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.133815829 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.118291336 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.122456281 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.301554343 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.12785561 seconds)
  done (took 19.283584663 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.105191045 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.114280486 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.115087777 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.105328196 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.107688792 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.093485957 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.095056226 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.103969247 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.106731334 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.099854495 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.100899108 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.093746075 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.096476406 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.097826561 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.099338501 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.110383252 seconds)
  done (took 35.703169193 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.11463693 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.126075385 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.121178013 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.115317901 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.115965137 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 2.112865455 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.124454285 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.126671589 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 2.12246007 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.123276531 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.10358487 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.098892578 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.097297271 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.113367315 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 2.106050541 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 2.099242132 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.099321988 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 2.099862087 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 2.104727307 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 2.109466548 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 2.085985965 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.107342039 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.098784212 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.102406172 seconds)
  done (took 52.691843944 seconds)
done (took 116.662291273 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.701309462 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 4.119585414 seconds)
  done (took 9.871192263 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.137482292 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.128144743 seconds)
  done (took 6.436606949 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.136194558 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.122211705 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.132159111 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.132374021 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.131109345 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.119785423 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.123552629 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.116770405 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.108029013 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.110012204 seconds)
  done (took 23.309922698 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.113016211 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.111297218 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.115839941 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.111197245 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.110013974 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.101077937 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.102593546 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.106224787 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.122311113 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.12055811 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.106702391 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.309674037 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.122961679 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.353382143 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.122828334 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.130099474 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.139553151 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.135009225 seconds)
  done (took 40.581800788 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.123235442 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.125246063 seconds)
  done (took 6.312547837 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.124498176 seconds)
    (2/7) benchmarking "second"...
    done (took 2.124846041 seconds)
    (3/7) benchmarking "month"...
    done (took 2.116933744 seconds)
    (4/7) benchmarking "year"...
    done (took 2.114211114 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.107218824 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.119942289 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.111030631 seconds)
  done (took 16.876450075 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.576488204 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.281758438 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.317222072 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.597764882 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.753852681 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.026816684 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.740062525 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.044186699 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.925720599 seconds)
  done (took 26.312233574 seconds)
done (took 131.74000473 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.8344094 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.137496978 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.782424409 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.233624861 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.196291727 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.471414467 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.12333382 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.681456254 seconds)
done (took 46.54104061 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.189214913 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.121863375 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.17020959 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.171430554 seconds)
  done (took 23.519216668 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.122827512 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.789126095 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.138566968 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.19741439 seconds)
  done (took 24.374332566 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.625400607 seconds)
    (2/2) benchmarking "read"...
    done (took 2.507854514 seconds)
  done (took 7.182427716 seconds)
done (took 64.297535169 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.115614421 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.130562118 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.122601759 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.127377318 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.135558379 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.126255115 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.134694934 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.128991478 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.137602923 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 2.125122751 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.106243191 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.1088807 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.109620339 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.112520655 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.119494067 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.119267935 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.098026007 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.107368068 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.115755145 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.125140799 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.120113473 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.112004804 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.11186683 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.110526664 seconds)
  done (took 52.909264044 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.178399883 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.17685793 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.194591756 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.197261329 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.220865784 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.196468226 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.199490829 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.17630989 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.193997949 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.179865224 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.155943993 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.203379072 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.175136561 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.209138967 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.169854226 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.20082342 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.194000427 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.164844872 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.156369459 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.199623044 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.177375268 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.149461685 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.204021369 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.162381427 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.205040382 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.148332467 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.163807149 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.162490932 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.145795718 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.194016998 seconds)
  done (took 67.510538563 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.153187201 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.127414467 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.124871644 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.206772937 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.132685358 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.13395454 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.126477588 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.131503533 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.123641541 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.125213566 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.126127492 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.124752281 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.136092326 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.138517216 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.122254794 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.103493999 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.143820779 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.287111497 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.107992095 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.122239079 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.160892875 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.120782004 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.115939165 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.097550835 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.11521144 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.11361433 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.126974518 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.123499044 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.131186985 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.130483254 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.138320066 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.17636102 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.168074788 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.133897442 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.260821543 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.169904463 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.126966439 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 3.637873145 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 4.189550092 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.15120332 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.116691803 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.100411128 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.103070094 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.115129322 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.164548082 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.094332912 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.112655901 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.112074006 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.106176871 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.095597492 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.102105821 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.111694796 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.128984901 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.134128688 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.134178301 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.138796598 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.151464166 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.140472788 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.131722747 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.125505789 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.123319046 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.203381012 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.127879775 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.129431231 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.507228571 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.135916293 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.18522951 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.125589391 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.11626592 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.315659054 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.105942484 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.319942538 seconds)
  done (took 160.057849457 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.107166752 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.114854591 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.182257311 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.188091701 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.120104439 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.118382284 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.115680136 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.109157167 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.781288596 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.125714996 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.137253414 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.142154154 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.792722097 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.137697395 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.140850176 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.208160512 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.127377783 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.127738593 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.128800348 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.125993536 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.128158699 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.126367259 seconds)
  done (took 50.332441213 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.147051458 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.115789901 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.142698896 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.118821252 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.122487695 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.131548367 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.168702334 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.134332446 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.158718651 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.157671346 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.154356756 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.16058294 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.144607614 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.174180803 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.165658544 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.225315081 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.18558156 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.21868665 seconds)
  done (took 40.881063302 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.317061229 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.309769759 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.222297333 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.188829155 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.386926636 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.356027545 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.244154836 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.305990807 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.172886903 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.284403587 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.290291854 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.151019305 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.350082443 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.164659412 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.174140921 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.364724489 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.184195726 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.155144325 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.226668351 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.223411076 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.306160389 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.245229566 seconds)
  done (took 51.718948986 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.182268479 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.190029439 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.218274889 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.201902404 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.14449577 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.137917296 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.198979569 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.185046207 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.149383804 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.179982051 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.173164801 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.133569159 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.202588464 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.170481792 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.206320855 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.159979604 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.172138004 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.17051889 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.151285487 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.109070414 seconds)
  done (took 45.518986155 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.123102681 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.13042862 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.127903555 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.123748282 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.129187454 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.145049173 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.150424765 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.151277606 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.140320127 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.395184476 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.151437131 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.139648381 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.145929886 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.147038378 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.141871247 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.132268144 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.139760508 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.13951752 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.124363043 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.120120023 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.358928701 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.131613738 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.123198555 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.130388188 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.123941783 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.129301515 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.128006499 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.121463908 seconds)
  done (took 62.301261705 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.181024761 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.160589422 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.161605688 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.243760339 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.254265167 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.184777741 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.274084445 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.273607463 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.181030847 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.191554132 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.235524469 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.177528622 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.187051471 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.182275621 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.188588649 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.23339188 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.178625735 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.244364445 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.212517651 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.14146346 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.220835334 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.155631431 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.204986919 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.175656985 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.16387966 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.207991473 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.204417181 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.299005857 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.197983642 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.174407889 seconds)
  done (took 68.15761384 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.177484274 seconds)
    (2/2) benchmarking "in"...
    done (took 2.174283407 seconds)
  done (took 6.425781865 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.138250501 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.240010666 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.149209967 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.332273308 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.302158887 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.309236685 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.298268763 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.226857334 seconds)
  done (took 20.080148067 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.131565083 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 5.605569941 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.301539807 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.12665459 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.131881551 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.737000328 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 4.08063433 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 4.078501069 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.965954205 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 3.152417687 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 3.431412314 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.867446788 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 4.198762182 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.529513407 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.239590665 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 4.014521649 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 4.402719777 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.76863835 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 4.179032231 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.219769909 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.90691979 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.196580074 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.102807951 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.099665461 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.103961281 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 3.061089577 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 5.154116407 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.545170803 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.317310696 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.254908321 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 4.961017325 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.200403237 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.133523144 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.403524895 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.249980468 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.126934642 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 4.326889597 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.212569848 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.11081294 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.102815667 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 5.967224012 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.86149636 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.373935926 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 4.370240364 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.207664374 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.134252326 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.136349585 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.126350199 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.418028233 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.94243121 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 4.175255461 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 3.15318633 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.253060889 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.140701051 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 5.726052369 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.249568706 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.115993345 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 3.047122 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 6.893103899 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 4.362562997 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.492436601 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 5.385178879 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 4.299528397 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.25443859 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.133115177 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.387687751 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 4.04446856 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 5.030953158 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.91338149 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.237651538 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.746945451 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.129702441 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.115808576 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.133634647 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.130974303 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.492042938 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.130425047 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.101596161 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.11267967 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.12021845 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.401063473 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.24932425 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.981772274 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.27864432 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.371505352 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 5.726241659 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.250322084 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.127876314 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 4.824989449 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 3.007490534 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 3.307749242 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 5.883896155 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 3.330030269 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.251700226 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 4.139174219 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.349507523 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.162729388 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.129137909 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.980489677 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 4.657104552 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.309005465 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.160136462 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.545469139 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 4.26549969 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.186912002 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.140956593 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.88321542 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.242807876 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 4.273830485 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.139415988 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.126998007 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.113645871 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.744518625 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 3.297060901 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.158498304 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.626909218 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 4.18084134 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.610858802 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 5.551473623 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.3330061 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 4.5234682 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 6.171596357 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.40499335 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 4.024748141 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.166097114 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 4.550010943 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 4.168400746 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 4.779301062 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 4.437438322 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.232530353 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 6.059539643 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.159951419 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.127064013 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 5.298261753 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.195458698 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.135808711 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.147854824 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.140081754 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.135443207 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.137757494 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.262187542 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 4.537847528 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 5.884747568 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.271679681 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.375838838 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.245070722 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 6.062279719 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 4.338138039 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.817611949 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.255262323 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.124452803 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 5.787517145 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 5.566078294 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.865849533 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.263389274 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.147753208 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.137685086 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.99022176 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.160171366 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.219042264 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.124895526 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.786385822 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 3.309786488 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.160729424 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.121025248 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.6015515 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.266412449 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.1225438 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 4.27628024 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.946929466 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.907490761 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.288029794 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.489559562 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.261009027 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.15112882 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.155226873 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.149366364 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.946575701 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.821465419 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 7.444353131 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.750409877 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 7.076443643 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.199584859 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 4.329660201 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.201888485 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 4.436004044 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.371268262 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.270289155 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.138881885 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.144723666 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.147770416 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.669866828 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 5.175356088 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 6.197384373 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 5.183210895 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.195076036 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 4.213715974 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 3.305481758 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 4.007655456 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.13382143 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.900488588 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 5.141188222 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.219455229 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.133338271 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.118887827 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.296429771 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 3.320673464 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.284427648 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 4.608106203 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.29201064 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.1486431 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.850888508 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.258439581 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.85174379 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.223698601 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.986235221 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.243203427 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.240434719 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 4.284730058 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 5.860852398 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.235548345 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.123561825 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 5.944336822 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.252556293 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.154348363 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 4.243207701 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 4.724955044 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 3.099258101 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.888615382 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.718179287 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 4.24523745 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.717444324 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 3.409312756 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.273639879 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 5.01467435 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.225316614 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 3.404013672 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 4.239992692 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 5.820391944 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.143496388 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.950221229 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.15882982 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 5.84250705 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.290302512 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.19611461 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.260651128 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 4.646653149 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.248962105 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.13762911 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 4.345873582 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.234483982 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.845091989 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.252329962 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.264768603 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 5.509045224 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 5.04606306 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.24372926 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.428311489 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 4.287610251 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 4.134205722 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 4.104327274 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.490322696 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 5.114288791 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 3.165746076 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 3.315811544 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.979623828 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.352657131 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 4.505098272 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.2646498 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.129733255 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.138705685 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 5.365236104 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.215933866 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.143095372 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 4.53321137 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 4.144158881 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.224936408 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 3.328505981 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.188222099 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.145967453 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.415322359 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.33975808 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 5.489644954 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.61191517 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.687119592 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.970784858 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.24687988 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.88394191 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.236476178 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.857111475 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 3.326046229 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.19151765 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.862441523 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.263214376 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 4.461430961 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.291684187 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.281848322 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.926668857 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.283750298 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.423238193 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 4.329443697 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.244455228 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.94581925 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.674406543 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 3.387377238 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 5.6068416 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.152005601 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.730350686 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 7.346930918 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.717200834 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 4.231048726 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.913888534 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 5.343008068 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.188321295 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.142791126 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.131501736 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 3.695860714 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 4.17587858 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.161686414 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.917711629 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.730233686 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 4.193119552 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.883941099 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 3.310194198 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.176272389 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.144893362 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.145244356 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.085469987 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 5.384943334 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 5.546973857 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.276045632 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.133688596 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.140105153 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 3.108975436 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 5.531471761 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 5.052160369 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 4.065419831 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 4.115091315 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.275530931 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.139779641 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.140463146 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.152174825 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.151562534 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.138163324 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.158818542 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.57474046 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.317803591 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.7981065 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 3.348032206 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.193011227 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 4.382091232 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.204141488 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.145640908 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 5.382055909 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.200265547 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 3.25260557 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.19171875 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.139207343 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.559502357 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.270576258 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.124984707 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 5.555517166 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 4.440948003 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.384831969 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 5.806787756 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.184077828 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.581059986 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.498537224 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 4.015321575 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.200324734 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 3.096800868 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 3.331702202 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 5.026251394 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.146868187 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.724878985 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.756887154 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 4.213353835 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 4.481215308 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 3.065942157 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.582199707 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 6.436174697 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.229504987 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.165799119 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.158475519 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.261156182 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.397189585 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.214381704 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 5.519706419 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.340320659 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.170358958 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 5.605339326 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.22861307 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 5.422980941 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.167943028 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.170958912 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.156341386 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.150957287 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 4.645735368 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 5.106274262 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.230967351 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.160238836 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.091380459 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 5.173304313 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 3.058079395 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.805535709 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 6.172974707 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.283580852 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.148969217 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.348664862 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.187550928 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 6.047865592 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.152441888 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.948592229 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.481188697 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.21023856 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 5.402743263 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.584615769 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 6.012582993 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.538034572 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.259372175 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.145380868 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 4.545939694 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 3.142852968 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.28683236 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 4.070902197 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 4.49472573 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.724993351 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 5.718140661 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 6.55969311 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.278063577 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 3.09768464 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.831119574 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 4.228491456 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.2044749 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 3.005374218 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.276251595 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 5.515978759 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 5.126390081 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.408213761 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.282180898 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.821787366 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 4.967334692 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.277064744 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.750879598 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.292828624 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.158103367 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 5.862392526 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.245161533 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 5.488402531 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.274827973 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.159268223 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.17794981 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.870926315 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.741821661 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 5.386517534 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.227524574 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.147165625 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 6.072437688 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.875892691 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 3.342165568 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.199607818 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.14194565 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 5.665906885 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.175795725 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.16755721 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.584697376 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.762060187 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.302206428 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.697099521 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 5.378910432 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.285967029 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 4.445447398 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 5.59474797 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.3387924 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.214784083 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.166385997 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.157844148 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.146469927 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.591965421 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.295626818 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.135050245 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.75316721 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.291686444 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.985065387 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 4.074872775 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.433902701 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.215777947 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.589305451 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.283912129 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.676835678 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 5.154427949 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 3.322966578 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.492759056 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 4.283028076 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.329409525 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.916823461 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.252435325 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.148424785 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 4.118974385 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 5.56366484 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 4.55096979 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.588223138 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 5.549955212 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.24140219 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.877147749 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.254718819 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 5.889093887 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.357978316 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.156157 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.655098659 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 6.427369382 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 4.61094733 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.283407409 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 4.651144613 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.275194227 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 3.538708074 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 5.524290868 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.263378751 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.166723865 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.148769057 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.200197239 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.205648193 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 4.827864267 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 6.164944905 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 4.650640543 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.267053807 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 4.015150616 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 6.81578361 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.919051705 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.512277436 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 6.521476032 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 5.673553778 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.181220615 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 3.151655696 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 5.594044497 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.221006112 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.330081793 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.243903393 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 4.992853887 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.206402488 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.153275224 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.58807884 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.295049714 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.144894578 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.14907481 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 3.07631993 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 6.102090562 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.276239632 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 4.404336721 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.262583429 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.156135781 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.77243506 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.421783075 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.203600209 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.169322074 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.163681015 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 5.081272012 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.240788766 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.146616149 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 4.530942759 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.301401561 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 4.481277845 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.015646803 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.691714667 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.246656403 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.171223193 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.174828996 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.921221031 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 5.698149895 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.385737395 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.561557809 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 4.285981745 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.762776305 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 4.214647846 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 4.693774305 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.687408516 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.184278173 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.259622505 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.158450928 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.242389729 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 6.119415622 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 4.219491531 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.949057836 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 6.771346844 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.247799122 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 5.029658838 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 4.18241546 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.220075196 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 5.365974525 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.20888987 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.159256554 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.155917919 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.15919572 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.667568527 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 4.21207719 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.186406382 seconds)
  done (took 2068.047178543 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.420825386 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.159796711 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.161641307 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.173117757 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.175741633 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.18166491 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.179212528 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.181000739 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.174659724 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.175810649 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.17700301 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.168081204 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.167642497 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.437909338 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.164752065 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.167515427 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.15368281 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.171167763 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.16456777 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.166001637 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.162626752 seconds)
  done (took 48.160049589 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.156043387 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.155869331 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.15164616 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.149229494 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.168582537 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.16417349 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.162186696 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.16886126 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.165954237 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.171023604 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.170325009 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.186602961 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.188541768 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.186327807 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.191802458 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.187674657 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.177032804 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.19050979 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.190959796 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.178887073 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.17613959 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.175425497 seconds)
  done (took 49.90029708 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.166405234 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.159667873 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.931292095 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.266715841 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.165609267 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.165596521 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.164479306 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 3.359295873 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 3.184473977 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 3.06887737 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 4.698183174 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 4.291950945 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.229120482 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 3.360472166 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.280403398 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.190861699 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.297588273 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.166697831 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.182093722 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.173755233 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.187867884 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 4.451126035 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.30435482 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.177686986 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 3.021672423 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.304501478 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.181973214 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.168686721 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.150009967 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 3.168068411 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 3.332614327 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.189959083 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 4.061027524 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 4.97736007 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 3.528153889 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 3.103906904 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 3.36511974 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.217270192 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.182316274 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.177142783 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 3.402954493 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 4.017103997 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.206759921 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.178915313 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 4.510308552 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.272399911 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.17303789 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.566222305 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 4.289327561 seconds)
  done (took 142.48065602 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.216303081 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.300711704 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.241252698 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.190144149 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.310580666 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.189896631 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.242746043 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.187257762 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.186150806 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.177380564 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.308736864 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.325302326 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.166997584 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.169559663 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.253273585 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.174385595 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.176165552 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.1753308 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.172560949 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.166255925 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.160452156 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.215125669 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.279203635 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.317318265 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.158539566 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.169561156 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.179319286 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.174356873 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.317830558 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.179787806 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.186010266 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.194630141 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.311963341 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.302853005 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.189372217 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.190245676 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.302858602 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.175489941 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.17253098 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.177918573 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.179443505 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.164842966 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.223180797 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.311932613 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.173210427 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.271987354 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.170929941 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.171756012 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.320336849 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.17986164 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.176121941 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.33467067 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.168838993 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.181260157 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.182002859 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.285229564 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.182279806 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.181182068 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.192031356 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.337041336 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.19532001 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.207266086 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.358941282 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.193012297 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.192425309 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.346584188 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.304560385 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.197115771 seconds)
  done (took 153.17571745 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.188007223 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.320604982 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.354288708 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.360455426 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.319151161 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.302981201 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.32735188 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.310663316 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.316711136 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.322556271 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.318186385 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.290368775 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.289607767 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.285165985 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.339732052 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.324958892 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.319993856 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.320525631 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.345257875 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.34637509 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.312813312 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.358472041 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.325125642 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.360945336 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.546253466 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.301043848 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.323063635 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.320329586 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.364051057 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.320870865 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.535952882 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.324986796 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.333979453 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.363940673 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.538330263 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.323139138 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.188224907 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.318983641 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.340920044 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.324945922 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.316753958 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.38787577 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.33420548 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.316660202 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.326152235 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.342575705 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.366487928 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.550487793 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.281442874 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.325818208 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.324704667 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.370925696 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.322247358 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.303520691 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.353897221 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.287403307 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.356483965 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.36567392 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.315992085 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.361845178 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.370404955 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.29237365 seconds)
  done (took 147.118800168 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.189518299 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.195239041 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.27197032 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.197246763 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.20210179 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.293337449 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.2055314 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.210831962 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.207086671 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.19979749 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.19663783 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.278779999 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.549035944 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.181856306 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.270714588 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.544668671 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.265984254 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.273507246 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.179645218 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.271431284 seconds)
  done (took 49.306433707 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.178095665 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.184569426 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.185668454 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.344338546 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.180465857 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.328380498 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.203581981 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.200973377 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.202188858 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.200203695 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.207667248 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.203140863 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.211839126 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.363737963 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.197140585 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.335447655 seconds)
  done (took 37.84947578 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.199018614 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.190435146 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.19177098 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.19352436 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.195015487 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.190225589 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.178404659 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.178259768 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.170845302 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.635233683 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.170129632 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.174077498 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.178886767 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.185011851 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.172440972 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.186559502 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.193376448 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.187660867 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.182558127 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.195926859 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.767024289 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.196271918 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.2031149 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.197047068 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.189356146 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.761345677 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.195144283 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.188799299 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.188387625 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.19457215 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.182298048 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.659292476 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.187713609 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.194655526 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.181376475 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.177523027 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.170959406 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.17613591 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.171833435 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.175847384 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.180685131 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.185949563 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.177152404 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.189333009 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.201267731 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.194719834 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.203965435 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.659174496 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.196005531 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.203866914 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.182966651 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.197034303 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.185163461 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.667512345 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.184444192 seconds)
  done (took 125.461188804 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.231475123 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.234354608 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.191238099 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.184625481 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.230451572 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.216876827 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.223482595 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.199362738 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.218918712 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.17613724 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.247905772 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.194203724 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.220006626 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.226750883 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.24228162 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.235426445 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.191608383 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.253930581 seconds)
  done (took 42.036162177 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.198111668 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.199028346 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.192133327 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.198675072 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.190830837 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.192212161 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.197586088 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.186844427 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.186363934 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.189304726 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.184179109 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.195393974 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.196432903 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.194095703 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.190884415 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.18537454 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.176455039 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.173014834 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.169591515 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.180122496 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.181121608 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.181110883 seconds)
  done (took 50.269486803 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.809426634 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.812668251 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.968615758 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 3.382353591 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.45701107 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 3.005154798 seconds)
  done (took 19.565443874 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.271815751 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.24943925 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.23401787 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.247672955 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.258364439 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.26641183 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.265650097 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.267584687 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.240844752 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.476279787 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.271261923 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.24351973 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.242782249 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.308097369 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.248738809 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.248225889 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.275996538 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.278152375 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.243911952 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.283143891 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.290744687 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.275949058 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.290868512 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.276630874 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.28675583 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.327186507 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.272843994 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.49099044 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.261535251 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.260418564 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.257517271 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.29091519 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.257032049 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.478032511 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.222911283 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.24091429 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.267558501 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.25661926 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.23867609 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.298748289 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.221711631 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.244724936 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.239785913 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.28223543 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.261483297 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.297421433 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.295661804 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.302174694 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.300220404 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.502227251 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.265187327 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.316756004 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.278335329 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.271027146 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.26289974 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.488468941 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.490740234 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.31448733 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.248524804 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.489469164 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.30420275 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.239262918 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.300903543 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.479972882 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.245801778 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.306736694 seconds)
  done (took 153.648341891 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.313068395 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.228053341 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.283749152 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.50368155 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.342398547 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.299319908 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.293755542 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.296488836 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.29729048 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.265985092 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.293754592 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.29535865 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.323773823 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.319449457 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.295103038 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.296696521 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.292737405 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.321511748 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.271947984 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.485806071 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.284403148 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.33271294 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.316928461 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.314441736 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.479693981 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.272371422 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.278817988 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.276211629 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.285134786 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.278161443 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.301389585 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.313053642 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.339261279 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.26065913 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.333996006 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.293230595 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.286166652 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.296681211 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.280895365 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.27932735 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.336071403 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.292813928 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.296431236 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.282286905 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.488268364 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.283789342 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.275517899 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.244582305 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.271972859 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.249363743 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.479497692 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.481691672 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.502883586 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.321784953 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.298842127 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.293569458 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.303126862 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.303072379 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.312989853 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.294277427 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.331007683 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.293873958 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.501205564 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.286145729 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.282700968 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.330551531 seconds)
  done (took 155.18007333 seconds)
done (took 3870.138132273 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.244829455 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.288834538 seconds)
  done (took 16.670837557 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.19795939 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.195730331 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 2.343868799 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 2.201416736 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.21517309 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.292808408 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.24678753 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.204021565 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 2.206039269 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.296410339 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 2.214114966 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 2.353294982 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 2.294937035 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 2.196415273 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.220743081 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 2.198937669 seconds)
  done (took 58.049489447 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 7.191887094 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 3.739820068 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 4.263321008 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 3.992069059 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 7.236897456 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 3.234837444 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 3.507053737 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 6.944782048 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.459221273 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.64884561 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.450431042 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 6.069500066 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 6.992134622 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 7.228460789 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.809168652 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.674777208 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.743386124 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.829363331 seconds)
  done (took 81.142007923 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.223151052 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.322574404 seconds)
  done (took 11.711701169 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.244725436 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.218436638 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.200363275 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.208538678 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.233313847 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.219080309 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.243677733 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.232927472 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.237402338 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.205091915 seconds)
  done (took 74.404453864 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 7.199957598 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.875763687 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.533665731 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 3.639826391 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 4.821320108 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.645965001 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.363265214 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.574920407 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.297096397 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.219163289 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 6.493406951 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.589047286 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 4.042172112 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 4.452764758 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.790482398 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 3.40468122 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.679448842 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.688345133 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.512706042 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 4.356837551 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.500131398 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 6.313623372 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.644302473 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.987333194 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.230349232 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 4.800277798 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.414987328 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.342769709 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.282746379 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 4.347587773 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 6.370919926 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.370884043 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 6.329167665 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.391459823 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 5.268160712 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 3.830939801 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.927486818 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.413566186 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.617470813 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.548412882 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.615352838 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 4.897727907 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.276999969 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 4.843923335 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.329985829 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 4.576119471 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 3.107716377 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.414874239 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.293554636 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.330541403 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.707024166 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.373368795 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.351504241 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.346333855 seconds)
  done (took 213.720496561 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.220998465 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.61109449 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.369602466 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.218089401 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.630398675 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.425809281 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.013198744 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.641562686 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.197365999 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.430240731 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.365824181 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.339167677 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.208650184 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.223239218 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.232293668 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.218932988 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.408598573 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.64656333 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.211237223 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.202627123 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.410383465 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.440653917 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.324576205 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.197797294 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.367079308 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.465861657 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.633947384 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.361191003 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.583964471 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.22858185 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.642187335 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.228096767 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.225921048 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.085126987 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.588937026 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.536079621 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.644696734 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.200408028 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.941491446 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.231246394 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.846751091 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.420211192 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.551385776 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.351041792 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.356434645 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.452490838 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.813077204 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.221770195 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.937077974 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.371622707 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.429007113 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.453137588 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.488254663 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.221792342 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.75458186 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.223241799 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.225192887 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.458677638 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.360395866 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.347184978 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.223985914 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.201953757 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.192083056 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.43544421 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.203823665 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.313017577 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.212927117 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.228373931 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.342139544 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.343684447 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.377760118 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.470935554 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.473763685 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.151740121 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.53982371 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.440778012 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.618739643 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.446130141 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.218734665 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.210584314 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.651600093 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.616940724 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.379022249 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.471756502 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.554650362 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.5212289 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.782555795 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.232271656 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.439233599 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.386806465 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.451044633 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.368567242 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.597054358 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.051097952 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.20757796 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.20498215 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.50054943 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.335167192 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.217331808 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.724485563 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.479868222 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 4.297118661 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.401649807 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.713413968 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.325205037 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.227458575 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.759392625 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.199436419 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.401382358 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.510605584 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.222774737 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.207839367 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.351737174 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.937040042 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.230642204 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.573356549 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.614516759 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.227739953 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.37345807 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.206207111 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.449845585 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.037785266 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.442307417 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.222946481 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.490069359 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.397351443 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.378044551 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.23309595 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.595480562 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.484266286 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.623961199 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.510676989 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.096118232 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.213835566 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.52201384 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.208279576 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.222525966 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.37153859 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.128884222 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.388275028 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.230036263 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.488939345 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.392606581 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.630349855 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.223130406 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.48143218 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.464380395 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.637836887 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.213565276 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.33802492 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.212503972 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.269363076 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.368069461 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.212327504 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.235351646 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 6.120873874 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.221317601 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.37012797 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.448715909 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.941437621 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.602186247 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.548735594 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.205594963 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.671088995 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.412216552 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.644467782 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.729452329 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.386370222 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.908879702 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.425006998 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.227299674 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.469788818 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.501642749 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.220511356 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.206574407 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.943679505 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.297676099 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.216450907 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.372924347 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.018671646 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.666678461 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.434960311 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.238784285 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.612490536 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.231982377 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.419328519 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.692627863 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.443136839 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.223369132 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.226483875 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.22391884 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.228631155 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.4257881 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.469763589 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.913429962 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.372154692 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.521277539 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.437930427 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.526402951 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.67011361 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.216723164 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.521766495 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.216674166 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.614227894 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.224236079 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.469082867 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.482494536 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.231717061 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.54343046 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.602928035 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.416121136 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.664465653 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.236128732 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.204953961 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.96153951 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.367923471 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.686086657 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.218857009 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.354888896 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.621051641 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.360442205 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.445029846 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.462082642 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.187785113 seconds)
  done (took 977.023950355 seconds)
done (took 1434.847254761 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.226203002 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.212264029 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.199559415 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.215368327 seconds)
  done (took 31.003120233 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 3.185432563 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 3.27655364 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.407670197 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.24762379 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 3.595383172 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.276283853 seconds)
  done (took 19.150315107 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.232044116 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.225538412 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.217861528 seconds)
  done (took 23.837376076 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 2.51410939 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 2.695895304 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.362096762 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.309763422 seconds)
  done (took 12.027914914 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.231696762 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.240501705 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.225200638 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.249975809 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.232519951 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.239859883 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.272402613 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.250998461 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.235911547 seconds)
  done (took 22.327551347 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.754760613 seconds)
done (took 117.249357072 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 2.488596599 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 2.510081833 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 7.217038202 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 2.472455324 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 2.35548887 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 2.561995619 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.330441422 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.230014558 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 2.522201089 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 2.618993583 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 2.718010117 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 3.363197671 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 3.715988553 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 2.654720719 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 2.450348258 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.261836923 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 2.244296245 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 2.303492844 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 3.963030931 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 2.395332918 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 7.03086214 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 2.347972316 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 7.226907742 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.241798856 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 3.147449901 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 2.367255594 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 2.481442081 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 8.262969742 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 3.278372178 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 2.244675131 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 2.332627362 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 2.72455325 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 3.487344975 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 2.583887751 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.325199994 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 3.120280453 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 2.657353892 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 7.226833315 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 2.471570859 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 2.638382666 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 2.525285579 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 2.344562156 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 7.224577442 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 2.499679971 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 2.584054654 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.234176973 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 3.182855862 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 2.368319948 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 3.91812296 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 2.396302468 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.706895654 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.248338042 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 2.861948639 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 2.302734719 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 2.325027414 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 7.372613699 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 3.168707765 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 3.666536462 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 2.368900939 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.549272924 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.228435204 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 7.214425708 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 3.140625115 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 2.232773185 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.216172263 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 4.570310901 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 2.659931735 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 2.331378156 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 2.741660365 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 2.263740311 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 2.256043086 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 2.277889523 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 2.939122678 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 2.392573895 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 7.234328742 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 7.335167153 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 2.552177319 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 3.373778552 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 7.40080921 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.231955302 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 4.595533694 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 7.235971075 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 2.510765774 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 2.552301359 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 2.401618683 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 3.63486816 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 2.737768203 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 2.688941235 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 2.669361211 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 8.337652074 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.316530618 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 10.244604803 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 7.32793859 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 7.24389996 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.37402956 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 9.086407455 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 4.267544642 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 2.732564007 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 2.352928765 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 2.738081513 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 2.234910681 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.230451815 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 3.72118671 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 2.499333161 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 3.049729744 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.248485488 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 2.351743332 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 7.222771754 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 2.493237512 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 8.270127538 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.33629906 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 2.752262183 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 7.244023294 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 2.280692312 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 2.762350511 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 7.231445163 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 2.582266981 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.648352974 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 3.290133775 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 7.233759585 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 2.495034612 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.256659052 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 2.371298483 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 3.804929891 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 2.59721013 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 2.459890738 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 7.241840068 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 4.286714348 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 7.243925225 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 2.434005506 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 7.225365188 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 2.792652891 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 2.741652766 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 2.249420945 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 2.496446013 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 2.361151779 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 7.222469302 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 2.557153952 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 2.302741514 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 2.461654633 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 2.567106093 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.550183487 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 2.356907068 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 7.242290129 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 2.609713102 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 7.234007504 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 2.466408831 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 2.571282649 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 2.36914375 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.510693831 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.358315512 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 2.233029867 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 3.183086641 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 2.657433765 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 2.844123164 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 2.769825193 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 2.455098743 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 2.378859579 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 2.784537797 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 2.490169307 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 3.102417818 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.350587628 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 2.286174417 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 7.252252983 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 2.241291127 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 2.301508332 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 7.238853093 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 7.234079763 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 2.453088373 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 3.560845601 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 2.770662758 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 3.03837027 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.942684125 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 2.582975056 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.403552488 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 3.075327141 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 2.798028589 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 7.25231116 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 2.536112163 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 2.702648439 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 3.532650882 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.273221347 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 7.230837151 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 7.235119759 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 2.915616578 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.267384644 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 2.551477122 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 3.888491512 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 3.689123908 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 2.629012471 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 3.543955331 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 2.274140523 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 2.578238004 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 2.468005864 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 2.564332599 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 2.477288197 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 2.688783566 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 2.394331636 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 3.686865987 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 3.388942518 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 2.567081188 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 7.237228728 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 4.085873069 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 3.536958701 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 2.677315076 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 2.55037728 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 2.475297671 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 2.41169822 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 2.588941411 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 7.257280222 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.270353637 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 9.285002663 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 2.566049507 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.255707274 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.236671953 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 9.264911608 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 3.294797911 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 3.189207234 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 2.342372798 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 3.68914473 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.413490943 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 3.43019964 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 3.796620126 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 2.265441123 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 2.555282712 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.407308611 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 3.462946122 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 2.514649539 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 2.274741025 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 2.37191303 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 2.549963827 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 2.371085142 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 2.472603121 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 3.071593379 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.654384958 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.22720556 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 4.174544411 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 7.272762661 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 3.501216681 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.275770584 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 2.262144524 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 2.530391217 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 2.418557959 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 2.550278435 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 3.392487851 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 2.418784652 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 7.258413734 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.397724744 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 2.654546146 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 3.009831042 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 3.810051108 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 3.212573173 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 2.251833473 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 7.234544303 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 2.642024059 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 2.617047812 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 2.317819247 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 2.37419236 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 2.803128995 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 2.27821562 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 2.424121206 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 7.26494597 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 7.261134303 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 4.058638141 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 2.380938981 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 2.487709712 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 2.786669844 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 7.23589003 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 4.238749419 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 3.320959939 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 2.671520588 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 2.783304603 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 2.287242449 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 2.389924293 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.268603466 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 6.375735778 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 2.641825289 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.280520541 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 2.447038102 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 2.592265709 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.374500552 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 2.404157413 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 7.264445045 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 2.275757344 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 3.898682639 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 3.602085243 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 2.726265705 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 2.277843034 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 2.707081509 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.253288298 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 4.133277984 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 2.286950734 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 2.405485799 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 2.663545942 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 2.435802025 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 2.635681158 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 7.263168365 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.360578532 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 2.520109533 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.272241084 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 7.246561166 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 2.486591598 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.239317341 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 9.096147629 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 4.360795165 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 3.422682827 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 3.291050237 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 2.508353259 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 7.270426259 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.834485171 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 2.43583942 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 2.379796392 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 2.870273906 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 2.723717248 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 7.250454463 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.411791317 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 7.269509718 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 2.573142523 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 2.247459047 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.262360992 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 2.382729557 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.327621077 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 7.257127285 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.815865039 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 2.492122169 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 2.746323156 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 3.404995919 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 3.167318192 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.259729875 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.993536137 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 2.401812307 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 2.636575268 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 6.914708779 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.254834953 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 2.391672847 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 5.859470906 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 3.449264507 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 2.310602786 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 2.519849459 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 7.270263499 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 2.835797293 seconds)
  done (took 1259.664608953 seconds)
done (took 1261.947652347 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.505983775 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 3.634871731 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.505713552 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 3.146894507 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 3.062206325 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.889254751 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.527223212 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.508560531 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.324133392 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.515644881 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 3.213258288 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 3.045840196 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.346623179 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.380567627 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.363905787 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.402981972 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 3.484447601 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.512274485 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.383634778 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 3.077748463 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.787149922 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 3.068594195 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.695972239 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.558427495 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 3.630127207 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.357976457 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.448963532 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.75784682 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.765331748 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 3.216213479 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 3.468422398 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.541477321 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 3.109950438 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 3.503616624 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.357499413 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.350043995 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 3.085259129 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.365800745 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.468201025 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.350218245 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 3.646005217 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.38599318 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.981308596 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 3.142925539 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 3.049496762 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.671968383 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 3.100050136 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.343890738 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.375105255 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.468706577 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.449139018 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.429382195 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.76420009 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 3.22369587 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 3.144947542 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 3.135016462 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.783566661 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 3.082590291 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 3.01039597 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.493693929 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.682459232 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.380681766 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.495777914 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.499716488 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.379310322 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.564274544 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.690760375 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.458053043 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.54855279 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.53746693 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.513902316 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.469778774 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 3.360071769 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 3.450403842 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.376846687 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.51940173 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.88515992 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.499447213 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 3.058779159 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.364629463 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 3.148316109 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 3.192734926 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 3.223480835 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.342892616 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.518951681 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 3.046371695 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 3.077800765 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 3.144570922 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.390566491 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.54751768 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 3.175752951 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.497211714 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.744092369 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.424349485 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.49280009 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.497008141 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 3.104251644 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.430382133 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 3.219810276 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.540463087 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 3.049167245 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.463869764 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 3.301147056 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.348804711 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.371342361 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.458783385 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.455935735 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.689053438 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.481476117 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 3.419369482 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 3.623279107 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.382091455 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.470219874 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.358704547 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.317339331 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 3.023290534 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.538291155 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 3.060371835 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.430983933 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.927381312 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 3.547994797 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.343582745 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 3.637141667 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.56529134 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.513079438 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.361957322 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.36685349 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 3.148643574 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.367296292 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.357460851 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 3.439285785 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.716803642 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.480350185 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 3.132265429 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.485719439 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 3.042878781 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.479954453 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.467453422 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.338227329 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 3.130835568 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.357192395 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 3.198809762 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.542789236 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 3.628925109 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.495635624 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.55762311 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.384581406 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 3.53506231 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.45932615 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.391366292 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.492874498 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 3.395564088 seconds)
done (took 420.62631955 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.593559946 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.639425446 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.495608654 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.54034856 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.597836352 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.599539092 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.320424956 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.696227958 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.353573122 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.661515705 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.502156951 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.382355629 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.651056752 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.47743936 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.61524363 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.510887584 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.379519811 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.54185849 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.710205757 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.620180952 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.274945677 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.532805841 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.415912701 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.667759528 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.253598493 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.254739675 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.604836243 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.378830383 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.513324353 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.265660653 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.294292857 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.52875862 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.619016198 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.426373688 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.682397707 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 3.27218319 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.632507082 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 3.352684123 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.621448805 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.606430822 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.51051772 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 5.061627614 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.260234132 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.292731731 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.418465721 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.620201992 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.311813001 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 4.499721071 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.243853561 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 3.261016275 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.533616661 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 3.331544363 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.400382605 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.599481873 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.473493216 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.385297067 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.7393404 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.764663331 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.5967819 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.550897234 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.603022986 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.669979017 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.667028475 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.433126242 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.260713028 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.534355616 seconds)
  done (took 203.302229491 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.681123887 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.554479183 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.688998461 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 3.653333418 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.826719093 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.692124406 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 3.806091431 seconds)
  done (took 23.086800415 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.338939131 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.318073836 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.515574395 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.553527341 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.312843561 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.444883963 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.394847245 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 3.29393177 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.552224492 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.355406203 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.617779101 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.500042913 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 3.218066342 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.292648028 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.398791368 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.543496632 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.274881297 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.382109913 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.392915064 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.578523104 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 3.294572674 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 3.287137805 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.61554843 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.399472758 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.331140406 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.366457505 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.306473489 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.298892849 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.350733646 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.292957172 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.324873748 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.407059363 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.31412386 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.260352265 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.330723619 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.631202431 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.304494637 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.350972724 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.441433772 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.267771465 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.298849935 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.337104649 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.473533351 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.338477419 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.313316957 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.511116667 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.309363571 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.321547422 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.296915816 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.312965449 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.594779999 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.302360635 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.334488175 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 3.222363547 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.509149352 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 3.26131123 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.381473184 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.300682937 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.301779347 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.363844835 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.299666835 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.571467981 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.524914099 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.308049967 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.531450593 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.603490588 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.328228439 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.304487017 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.306610428 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.561966369 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.320286286 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.561017334 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.335699679 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.356872021 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.367210294 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.448398262 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.503671131 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.105702876 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.070386595 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 3.224021337 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.282735114 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.295832502 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.604813251 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.219869825 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 3.227189597 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.309451113 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.369956999 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.975620428 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.232374621 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.324237422 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.645261415 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.324325951 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.381832433 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.363153404 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.345201358 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.372318964 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.550520418 seconds)
  done (took 258.383086128 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.610707399 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 4.896296306 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.505224878 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 3.521722955 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 3.658704472 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.756183588 seconds)
  done (took 24.138765863 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 3.666028352 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 3.182615369 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.378206487 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.344906797 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.389060411 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.317792104 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.32043375 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.524629459 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 3.491805721 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.355573584 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.305579003 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.340417185 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.315348385 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.437489646 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.300880827 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.313457185 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.296489244 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.33058012 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.297724551 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.37205252 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.470123211 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.357577137 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.363789622 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 3.242630492 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 3.397060162 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.363184852 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 3.269240674 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.330847214 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.328731452 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.743234369 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.51132151 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.312245899 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.204760526 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 4.729598547 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 3.139789991 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 3.273493682 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.501091342 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.358472242 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.363674568 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.302569788 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.329065481 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.378549893 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.317138669 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.321246447 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.667766777 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 4.245650425 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 3.453314005 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.619434464 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.309897099 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.342960801 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.358043929 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.338774085 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.318105582 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.342719406 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 5.203978985 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.714448334 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 3.322014406 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.327198675 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.362271229 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 3.261457924 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 3.433365089 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.340651247 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.660852634 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 3.30207439 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 3.298424289 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.338934374 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 3.267888001 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.502550594 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.43062415 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.34468731 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.344244533 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.35132482 seconds)
  done (took 203.284657029 seconds)
done (took 714.38187258 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.688669841 seconds)
  done (took 9.899121957 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.314709431 seconds)
  done (took 9.654508788 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.263703182 seconds)
  done (took 9.458520546 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.285050317 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.292658176 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.292091578 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.291996091 seconds)
  done (took 31.362051936 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.49845158 seconds)
  done (took 9.71714622 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.297550407 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.26032789 seconds)
  done (took 16.834256903 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.406141238 seconds)
  done (took 9.605567834 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.501713608 seconds)
  done (took 9.704220547 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.302742043 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.311913993 seconds)
  done (took 16.851139348 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.277899673 seconds)
  done (took 9.482742528 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.110243632 seconds)
  done (took 11.386857962 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.266075672 seconds)
  done (took 9.487664661 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.304546562 seconds)
  done (took 9.505552717 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.518682942 seconds)
  done (took 9.723985324 seconds)
done (took 174.879127989 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.293565696 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.270741559 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.265169059 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.264930977 seconds)
  done (took 31.300889466 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.604582645 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.576809644 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.559561386 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.645816807 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.538240732 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.543426955 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.600788302 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.607218726 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.544182564 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.753138864 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.595085434 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.750320478 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.642489372 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.571916379 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.577570855 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.739481006 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.736518564 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.586046862 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.52769572 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.571885513 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.732176179 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.7364351 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 3.037560418 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 3.000212901 seconds)
  done (took 65.966983667 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.48832473 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.653403108 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.434743793 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.704219769 seconds)
  done (took 12.485921216 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.32828498 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.671206329 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.645966637 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.703846381 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.636715888 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.448326101 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.645561424 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.485103679 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.450475662 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.44772478 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.891604038 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.414284353 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.435546825 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.686479019 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.42863838 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.277720096 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.271665739 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.459689082 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.638631864 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.475722452 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.525018022 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.630907446 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.639461676 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.649323595 seconds)
  done (took 63.115935433 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.056088706 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 3.21904271 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.644493403 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 3.197888468 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.979844463 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.065135272 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.552649724 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.770929291 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.541388471 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 3.513464086 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 3.063841771 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 3.000775836 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.415555507 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 3.165946282 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.039776944 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.450380491 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.447209855 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 3.126575601 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.90102095 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 3.585995681 seconds)
  done (took 62.954022351 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.299345806 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 7.277133737 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.507569803 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.42647531 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.258339303 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.274247576 seconds)
  done (took 36.263191182 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 4.401872285 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.415316783 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.60840167 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.574430244 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.446838529 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.436473579 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.925263778 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.499392257 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 3.085991807 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 3.056638264 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 3.95672907 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.750624051 seconds)
  done (took 37.382614951 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.29443578 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.265954086 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.272334595 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.407444016 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 3.182891496 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 3.113823817 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.586849532 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.281755523 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 3.48732064 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.474041608 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 3.152428733 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.460058257 seconds)
  done (took 55.202068558 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.429624197 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.417631183 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.614637224 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.076733217 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.766225654 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.335127208 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.67557073 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.779675611 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.355171542 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.384012008 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.772922686 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.353890662 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.830449364 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.250361331 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.294178933 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.566930661 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.113803795 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.20902669 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.708138169 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.351923994 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.224711319 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.410967218 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.271322762 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.843846631 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.587163773 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.300456865 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.672908312 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.537703524 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.315630827 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.652917124 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.288250909 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.870726824 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.380588122 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.563744249 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.779323907 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.337000288 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.364705721 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.467573742 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.873808026 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.593846246 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.43289387 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.449606683 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.828423415 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.398202201 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.545195297 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.055494656 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.294995342 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.873053278 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.224061658 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.441294482 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.131708742 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.138374924 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.728376136 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.984287388 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.435808238 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.57044177 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.450296032 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.446150041 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.574210371 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.380590305 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.440909321 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.347067963 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.419626213 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.239488094 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.817728404 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.610018304 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 4.619208602 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.595937712 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.547950319 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.564244512 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.623708949 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.454207916 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.024628369 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.396877313 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.817029711 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.156866425 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.622926368 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.284177305 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 4.0145523 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.815203968 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 5.258813442 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.393392523 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.484799623 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.256062858 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.301762711 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.444810877 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.500847488 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.233325107 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.354531124 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.373317918 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.81297912 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.395604477 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.416689986 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.538024235 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.960157443 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.300983325 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.100299642 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.5937368 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.250243224 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.836239373 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.281892787 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.326846263 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.272075119 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.88391249 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.658218316 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.306827655 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 3.051600531 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.924992886 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.575758386 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.865202434 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.441254902 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.287698264 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.613520039 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.613596594 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.278226868 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.962615719 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.460346254 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.403662386 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.592437576 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.294872288 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.239532032 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.613835201 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.395008253 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.285723228 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.595891272 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.300026768 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 3.426884246 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.281298467 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.006550383 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.299005582 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.506770616 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.777304966 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.480433591 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.348163977 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.252698462 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 3.429446472 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.815078794 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.37160171 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.617733786 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.715617008 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.872865931 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.844019135 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.248733619 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.046525607 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.714595096 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.535420888 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.609799237 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 4.423641124 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.460630041 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.387275262 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.303249677 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.442535633 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.298741951 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.82663606 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.294381606 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.514696614 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.9496247 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.586522502 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.27884029 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.239384928 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.446023722 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.446559878 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.039002595 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.335127251 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.449667614 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.525493582 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.425129758 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.278540627 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.230536747 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.632278876 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.693107102 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.776857407 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.513742251 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.996362783 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.625977417 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.783643445 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.678023144 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.698482805 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.962595306 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.508544397 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.626109286 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.906539932 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.295291886 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.30206062 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.407068481 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.695158754 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.508090901 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 3.038036201 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.44554924 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.967281078 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.34241725 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.746703114 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 5.235976901 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.417978079 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.746234432 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.29613349 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.838146583 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.374898003 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.626947142 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.528977638 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.306243269 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.984057299 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.150509941 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.728026644 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.676894651 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.611528286 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.255957254 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.89492274 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 3.752329504 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 4.787078037 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.414508284 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.551404196 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.254385005 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.301679347 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.29758865 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.641586397 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.179734031 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 3.00338757 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.569817093 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.068906808 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.7986349 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.402621275 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.279000566 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.293126154 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.208656462 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.39718576 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.401974053 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.419848177 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.895476442 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.564563647 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.623015967 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.29891134 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.307999952 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.582618301 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.579232591 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.536857438 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.765361448 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.895466243 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.979271917 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.386997567 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.915044974 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.458782661 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.346164264 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.884972752 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 4.579565957 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.273731814 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.401699091 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 3.003248911 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.455440529 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.33539113 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.535719872 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.274587659 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.729356481 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.896128984 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.295038459 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.312843331 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.405835051 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.29416971 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.486964188 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 3.180371387 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 3.517189215 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.465859301 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.544371787 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.462424619 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.396880098 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.686746305 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.816825879 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.631931871 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.243407267 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.454769482 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.405449854 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.586208586 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.307072736 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.544503794 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.780412707 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.014236451 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 3.08723216 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.814090592 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.540058381 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.898853122 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.737795026 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.516540812 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.598406615 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 3.220470354 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.957451749 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.271083356 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.442112914 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.25924522 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.105306347 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.599340957 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.66386953 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.741756741 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.337532116 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.788588045 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.634203694 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.37061745 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.395474459 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.550318322 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.292793607 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.577400968 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.317904012 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.52607001 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.662172221 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.307960657 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.849847164 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.460408854 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.594839074 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.436038655 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.982008485 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.317400083 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.40778128 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.769276545 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.473479186 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.446121718 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.635664729 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.141821669 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.327616025 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.350331689 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.844888221 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.852392972 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.752639451 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.879799927 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.853758445 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.676787599 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 3.043201286 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.315059976 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.683326066 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.458078784 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.124720416 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.462251892 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.682667063 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.301514383 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.430514206 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.595537496 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.376019962 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.814161195 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.252551297 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.859822283 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.388577434 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.763016239 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.824365531 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.073825262 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.810078282 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.513184514 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.865702054 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.280457643 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 3.440337033 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.552124549 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.99395669 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.135594933 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.103803997 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.080064311 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.494373724 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.692658013 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.458655 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 4.012707047 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.469926903 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.546028546 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.677836711 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.428470018 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.265201911 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.835617271 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.043710076 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.553023294 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.44326712 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.394738794 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.462039466 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.628019635 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.788967785 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.612880721 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 3.076708258 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.770127151 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.512325331 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.272373963 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.313208767 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.559390685 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.447934663 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.38287717 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.563008814 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.713779407 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.331944495 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.313495105 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.526820784 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.900800217 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.878787946 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.029948894 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.638192053 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.820722221 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.881945865 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.2905367 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 3.060778842 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.686270627 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.653006977 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.710297798 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.201261041 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.669182147 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.574077098 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 3.451151969 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.253442268 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.425314083 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.332494016 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.373671473 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.6480744 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.578643654 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.422350319 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08486655 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.893732806 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.470854038 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.320154996 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.525592832 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.522016392 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.506239264 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.324685874 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.858576478 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.675801215 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.448260901 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.269829202 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 3.056413113 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.254925968 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.681624211 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.473269541 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 3.473475812 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.10092816 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.418557867 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 3.924354219 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.880234686 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.583022938 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.49784678 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.267841044 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.121643158 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.293858995 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.044990064 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 3.088296764 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.531007023 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 3.801256669 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.402839778 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.291298867 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.607790704 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.413935302 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.617838834 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.577865145 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.782041122 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.728994075 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.686184709 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.604061634 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.86422062 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.421869818 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.548000872 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.267862365 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.305738593 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.379716148 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.677530503 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.673836194 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.311910836 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.831652825 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.560657383 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.522747678 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.475067228 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.399962816 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.921908852 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.501193226 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.494213945 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.445340094 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 3.518533155 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.658360868 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.307872463 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.505075512 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.338696435 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.317865838 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.697059922 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.550300523 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.680816429 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.622630852 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 3.189697559 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.460423262 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.113160321 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.244085908 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.839701458 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.313482868 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.155304282 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.645417681 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.325329535 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.769458489 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.964065973 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.425842291 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.56354928 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.281048625 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.492502998 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.439985228 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 3.790986888 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.313139671 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.879483199 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.681928016 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.320269685 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.811145205 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.397274695 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.472149646 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.096897147 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.78915295 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.303109149 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.402715025 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.300295133 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.766591672 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.574203393 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.31959047 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.450504506 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.070134626 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.287928009 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.330344286 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.401168248 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.820233085 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.314290852 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.854038426 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.506261625 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.45601175 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.330331483 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.478251761 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.334122757 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.691005625 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.908817685 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.54497188 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.577555905 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.411591661 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.321022873 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.829732493 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 3.015349744 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.584674439 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.490225801 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.486184056 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.680159179 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.703776233 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.502066757 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.871855056 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.446928601 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 3.481592257 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.732167441 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.561267038 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.328608114 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.425766877 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.295689522 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.635977417 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.439370959 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.856143417 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.554523257 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.538947522 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.467373423 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.328532651 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.839539099 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.765023936 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.196083902 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.333069653 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.608920752 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.231506966 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.413668149 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.905445952 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.483151028 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.488221837 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.261458508 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.816698066 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 4.624473966 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.427808632 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.322278984 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.521027562 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 3.811676046 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.258006965 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.105074998 seconds)
    (567/608) benchmarking "2d"...
    done (took 3.123340463 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.674131506 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.621047545 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.263698697 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.42145618 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.323610158 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.281855764 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.792722204 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.317195901 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.591478894 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.261649754 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.872432649 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.271912685 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.454238469 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.423184322 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.655360791 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.322052566 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.291452782 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.478875803 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.323184647 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.331777816 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.717586057 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.387773492 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.561256229 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.784175254 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.58803325 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.619766478 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.207139973 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.131802132 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.292504171 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.615134672 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.314502686 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.87679665 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.453956025 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.812610367 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.154195713 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.298039456 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.828984813 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.55198764 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 4.016194043 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.444575602 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.767811056 seconds)
  done (took 2668.779337977 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.384519867 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.357906513 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.383556138 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.377451706 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.479801969 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.48102993 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.360893007 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.414106659 seconds)
  done (took 61.465524028 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.324719974 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.310923314 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 6.860757822 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.490646911 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.314601453 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 6.574408261 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.433880159 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 6.916771458 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.47087337 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 6.398082001 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.846980964 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 7.340428681 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.551882817 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.326950916 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 7.13687785 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.589509226 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.30911282 seconds)
  done (took 113.445796134 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.358054625 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.648553344 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.330441207 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.649929899 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.372006962 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.622400256 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.314026646 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.313297898 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.990410165 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 9.017882409 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.369931866 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.485770526 seconds)
  done (took 94.75844691 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.366631578 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.353553592 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.347568571 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.343510339 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.343046096 seconds)
  done (took 14.012367343 seconds)
done (took 3319.454307656 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.5329676 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.83243618 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.86649746 seconds)
  done (took 7.946319386 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.387269494 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.438452206 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.496074708 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.454128306 seconds)
  done (took 12.046672285 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.601589713 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.797154807 seconds)
  done (took 7.651904933 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.859008425 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.350285856 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.896053753 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.334999533 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.314838264 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.309891552 seconds)
  done (took 24.224280096 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.337896024 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.329929181 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.340921293 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.325722106 seconds)
  done (took 11.579738079 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.319164616 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.36782349 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.3222248 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 3.385113985 seconds)
  done (took 24.633342169 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.494790037 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.41387436 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.072046729 seconds)
  done (took 10.245536687 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 3.127742227 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.699897735 seconds)
    (3/3) benchmarking "Float64"...
    done (took 3.107064435 seconds)
  done (took 11.193400491 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.249061234 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.327109036 seconds)
  done (took 8.816212333 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.471080778 seconds)
  done (took 4.725046048 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.793983533 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.806112955 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 3.201520848 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.196773163 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.341533414 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.659459783 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.74209312 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.669876525 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 3.000948154 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.881566533 seconds)
  done (took 31.539609159 seconds)
done (took 172.470922543 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.279570417 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.718801172 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.491131721 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 4.010183496 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.421465549 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.503565271 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.351852048 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.798063556 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.641476506 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.634533081 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 4.399745351 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.434922703 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.356363978 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.725567976 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.35893329 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.684808984 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.753970353 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.282799035 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.818616997 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 5.222331622 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.348156352 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.897634259 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 4.044242396 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.903059875 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.738449958 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.486089564 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.445702102 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.706788624 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.140221107 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.436619224 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.504770634 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.52160029 seconds)
  done (took 192.322730517 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.321097737 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.311798646 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.343776484 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.349667832 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.295840709 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.339510826 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.330668981 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.316911159 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.048773994 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.055146474 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.324620955 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.261676261 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.335427453 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.336689798 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.344942766 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.322030429 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.265291291 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.318870519 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.309547514 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.323835231 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.330901539 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.133720058 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.32863842 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.13376845 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.260289656 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.319701247 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.329637892 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.327039638 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.308649331 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.348343375 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.342098025 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.323940589 seconds)
  done (took 227.602238855 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.325021541 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.313221093 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.325015663 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.310068076 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.324240939 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.338867991 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.337469038 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.34221686 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.336245251 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.317188761 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.307308708 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.330210207 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.321958115 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.332613552 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.334062879 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.322257488 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.33736483 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.332099069 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.327614658 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.324348747 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.322053273 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.333055649 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.352826961 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.353394906 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.346070614 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.329895816 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.329704912 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.323981444 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.326742301 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.320172084 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.334968821 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.3575275 seconds)
  done (took 236.831867871 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.629794273 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.377122254 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 3.317502089 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 4.089008858 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 3.328215135 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.34156941 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 4.091656855 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.621636737 seconds)
  done (took 27.062776802 seconds)
done (took 686.091359466 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.982587158 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.231739909 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.507817675 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.602383002 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.970399358 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.633718491 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.597671316 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.829883178 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 3.170667454 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.827177021 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.871856527 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.539644381 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.245742161 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.612952281 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.505407651 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.769303458 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.705945506 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.999204229 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.536632355 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 3.198428371 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.534668705 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.247204704 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.833525114 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.203435908 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.858208698 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.301615496 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.476825839 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.721955964 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.598011059 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.5621106 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.361367112 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.7860709 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.575706215 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.576544651 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.767812728 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.794381598 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.689193337 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.889873255 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.479962041 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.049063286 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 3.180564586 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.990649171 seconds)
  done (took 128.071301215 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.357670722 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.388168516 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.533294098 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.424414615 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 3.032684457 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.438405417 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.595061626 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.557681563 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.450187583 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.575275534 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.586381458 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.994968869 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.589783965 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.959647941 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.57137793 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.587274764 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.422569903 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.941497587 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.585574701 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.578291464 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.383502802 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.529086505 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.403357248 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.551061076 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.392677584 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.433846408 seconds)
  done (took 69.142332788 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.430489985 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.52634364 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.631883654 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.728612367 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.590749323 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.370243233 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.767308417 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.515401078 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 4.340259116 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.77320573 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.428138251 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.510996547 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.526796933 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.635428918 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 6.0071952 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.494959983 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.610664208 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.536138211 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.541823945 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.612620421 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.541121239 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.460850881 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.78961414 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 4.582890841 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 3.041004335 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.664220204 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.7561216 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.929402005 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 5.937256498 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.446992712 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.537026391 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.75851783 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.802836604 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.637264937 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.51157363 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.40475622 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.4041891 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.457062937 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.449163274 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.537874841 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.772767602 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.507354497 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.733913736 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.920976689 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.376631682 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.568325464 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.798924272 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.446504365 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.479970639 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 4.167416594 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.647295391 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 5.444261248 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.490719867 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.556322738 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.495911567 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 3.784562123 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.560459848 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.689312631 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.563510398 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 4.08935076 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.449907383 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.761908945 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.533292173 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.387002593 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.636742824 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.579585373 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 4.56639278 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.682725917 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.717108037 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 5.743607671 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 3.058201758 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.446879504 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.405585762 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.460093089 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.528130946 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.859558076 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.805240691 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.601279548 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.820117778 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.762834955 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.699464697 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.955209168 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.37467632 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 4.037426416 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.408242286 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.367234129 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.447977606 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.682440721 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.744730924 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.812877022 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.911038751 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.697184091 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 3.801180132 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.776652678 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.751649841 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.798162245 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.391401405 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.40178162 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.611153259 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.921556794 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.446286672 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 4.680361048 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 3.016090787 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.891585112 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.755046139 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 3.598742796 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.772399528 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.401861289 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.790138113 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.353266277 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 4.610434315 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 4.788013017 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.675537667 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.747733801 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.38140509 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.902009883 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.479572077 seconds)
  done (took 374.294911066 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.346679844 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.344763347 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.355724684 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.341814999 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.331772969 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.934312255 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.411883185 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.348705934 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.946179796 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.407816419 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.349231895 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.331462735 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.322612193 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.338361569 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.932602111 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 4.929948891 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 4.154361571 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.356875335 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.346156107 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.33933001 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 4.038718649 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.330817574 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.331603466 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.334142033 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.339180769 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.3541724 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.360499057 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.370296751 seconds)
  done (took 187.908804442 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.395385733 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.811946718 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.414816318 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.474816267 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.424894231 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.393179144 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.937164121 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.506472541 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.449613126 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.39887741 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.372715612 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.618616085 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.630976293 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 3.041201401 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.539284439 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.596839676 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 3.145859644 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.550043403 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.400330972 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.411064558 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.566166147 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.740971464 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.659775035 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.69443522 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.556787645 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.675445608 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.473695033 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.386665473 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.515295662 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.886053147 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.414973911 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.754017203 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.541591735 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.40523331 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.90530394 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.852336839 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 3.04979522 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 3.00653235 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.597540019 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.364476906 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.370570959 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.65271764 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.709332457 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.436212188 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.393755413 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 3.050244925 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.412597168 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.801030819 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.395130391 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.337714027 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.475841709 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.481651217 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.628702606 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.905634048 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.567521244 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.523733172 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.956721225 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.395717226 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.445664164 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.811533023 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.39076761 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.899522308 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.918018646 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.477985021 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.409027962 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.263351956 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.485823547 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.97705272 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 3.055813979 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.436547421 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.796838457 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.579128592 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.373817256 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.666864442 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.556825835 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.893326109 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 3.037388242 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.540086563 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.519561527 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.494043384 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.693535826 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.388005257 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.972550228 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.502143857 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.392108895 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.908339784 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.842423486 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.37121471 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.398463895 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.513378596 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.575778402 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.60455689 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.700975793 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.486750132 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.359096687 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.680250533 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.710200131 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.404301843 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.520540678 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.395948297 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.392682279 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.610757788 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.397288355 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.721531069 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.852385488 seconds)
  done (took 288.759133893 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 3.104765953 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.437868668 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.591004952 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.911047403 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.744767593 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.32951576 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.603368728 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.460118352 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.667674311 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.599755847 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.566378219 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.493041841 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 4.072057285 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 3.141105017 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.458015673 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.5813432 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.464319433 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.981503811 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.72781261 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 5.190733567 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 3.922927451 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 3.191387297 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.736815256 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.793153539 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.786563692 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.885335746 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 3.075605104 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.536917414 seconds)
  done (took 85.347838957 seconds)
done (took 1135.775882254 seconds)
SAVING RESULT...
DONE!
