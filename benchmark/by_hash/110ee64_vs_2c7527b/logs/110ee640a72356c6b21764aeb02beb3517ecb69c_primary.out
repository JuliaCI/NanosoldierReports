cset: moving following pidspec: 2792601
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "problem"... done (took 3.085397656 seconds)
loading group "array"... done (took 3.20935224 seconds)
loading group "misc"... done (took 0.420751071 seconds)
loading group "sort"... done (took 0.257072315 seconds)
loading group "frontend"... done (took 0.004539035 seconds)
loading group "shootout"... done (took 0.722250195 seconds)
loading group "sparse"... done (took 0.531804565 seconds)
loading group "scalar"... done (took 1.011369443 seconds)
loading group "dates"... done (took 0.146482583 seconds)
loading group "alloc"... done (took 0.01688443 seconds)
loading group "find"... done (took 1.198374178 seconds)
loading group "io"... done (took 1.144770441 seconds)
loading group "tuple"... done (took 0.787058118 seconds)
loading group "string"... done (took 0.219909643 seconds)
loading group "random"... done (took 2.438413231 seconds)
loading group "micro"... done (took 0.049665125 seconds)
loading group "broadcast"... done (took 0.564674049 seconds)
loading group "parallel"... done (took 0.020475309 seconds)
loading group "linalg"... done (took 2.589186393 seconds)
loading group "collection"... done (took 5.702708066 seconds)
loading group "simd"... done (took 0.91618179 seconds)
loading group "inference"... done (took 2.739581552 seconds)
loading group "union"... done (took 2.712651803 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/22) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 1.160705872 seconds)
  done (took 1.903204748 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 0.142624573 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 1.283190747 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 0.61214683 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.18330726 seconds)
  done (took 3.941685565 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.795697342 seconds)
  done (took 1.530003416 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.995142126 seconds)
  done (took 1.739736834 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.982613082 seconds)
  done (took 1.717393597 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 0.22838816 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 0.19759217 seconds)
  done (took 1.160681515 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.889461666 seconds)
  done (took 5.631124688 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.520209614 seconds)
  done (took 2.266984962 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.052049224 seconds)
  done (took 0.82501488 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 0.230297862 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 0.223699068 seconds)
  done (took 1.24551092 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.235755984 seconds)
  done (took 0.988426229 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.738747163 seconds)
  done (took 1.49219926 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.335081562 seconds)
  done (took 1.091907804 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.401623526 seconds)
  done (took 2.156578801 seconds)
done (took 28.494239636 seconds)
(2/22) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.299603564 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127201083 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120104624 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.166052434 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000307324 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.162395671 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.092582808 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.322570965 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115685892 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.187410644 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.033420735 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.466258469 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.027644097 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.256892911 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046471578 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028627085 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.152364897 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020863119 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.446107365 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.021282683 seconds)
    (21/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 6.795e-5 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.015593996 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.231778355 seconds)
    (24/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.314971689 seconds)
    (25/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075694563 seconds)
    (26/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.067168943 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.038498738 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040649685 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030241862 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065245938 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021320039 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.369677485 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057255916 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.572888169 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.03755749 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06063076 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114009524 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121590019 seconds)
    (39/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023849229 seconds)
    (40/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024106633 seconds)
    (41/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031394537 seconds)
    (42/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074479808 seconds)
    (43/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.03061378 seconds)
    (44/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 6.4473e-5 seconds)
    (45/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.068128541 seconds)
    (46/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066953119 seconds)
    (47/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047127453 seconds)
    (48/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031269302 seconds)
    (49/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.018223141 seconds)
    (50/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06128962 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033587479 seconds)
    (52/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074981168 seconds)
    (53/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020084631 seconds)
    (54/608) benchmarking "ind2sub"...
    done (took 0.085793229 seconds)
    (55/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.047395332 seconds)
    (56/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.039665982 seconds)
    (57/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052525759 seconds)
    (58/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089978103 seconds)
    (59/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.025616683 seconds)
    (60/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030024328 seconds)
    (61/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045060747 seconds)
    (62/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.033252692 seconds)
    (63/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02018685 seconds)
    (64/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058956161 seconds)
    (65/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.046179128 seconds)
    (66/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.07630755 seconds)
    (67/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.12514447 seconds)
    (68/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.063210165 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027952355 seconds)
    (70/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024150009 seconds)
    (71/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117110996 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046535233 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.028596672 seconds)
    (74/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04634962 seconds)
    (75/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.039626666 seconds)
    (76/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.04464607 seconds)
    (77/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079365971 seconds)
    (78/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057007465 seconds)
    (79/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068084286 seconds)
    (80/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083601216 seconds)
    (81/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063174812 seconds)
    (82/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093254496 seconds)
    (83/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051581499 seconds)
    (84/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062466985 seconds)
    (85/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.054940508 seconds)
    (86/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034274083 seconds)
    (87/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030742739 seconds)
    (88/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.202996345 seconds)
    (89/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.017163178 seconds)
    (90/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.029519278 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.040835418 seconds)
    (92/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026943157 seconds)
    (93/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.059488954 seconds)
    (94/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.015058736 seconds)
    (95/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000305861 seconds)
    (96/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027500082 seconds)
    (97/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019408384 seconds)
    (98/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030678935 seconds)
    (99/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047272889 seconds)
    (100/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 6.2598e-5 seconds)
    (101/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03941276 seconds)
    (102/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.054510235 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.050091386 seconds)
    (104/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.011063084 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047612906 seconds)
    (106/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.000482754 seconds)
    (107/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.021154753 seconds)
    (108/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.01231257 seconds)
    (109/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.0564e-5 seconds)
    (110/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059943371 seconds)
    (111/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.011246124 seconds)
    (112/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 6.2665e-5 seconds)
    (113/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.023932086 seconds)
    (114/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038598247 seconds)
    (115/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.011009365 seconds)
    (116/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066259071 seconds)
    (117/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.024012335 seconds)
    (118/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052596359 seconds)
    (119/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.048947953 seconds)
    (120/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014445846 seconds)
    (121/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.028896395 seconds)
    (122/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087707763 seconds)
    (123/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057847407 seconds)
    (124/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.023589161 seconds)
    (125/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.020596168 seconds)
    (126/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047778201 seconds)
    (127/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.025228623 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.000137183 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079251558 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.015096984 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022297941 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042594783 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.043948222 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.026083847 seconds)
    (135/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052994774 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.021637343 seconds)
    (137/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.02022794 seconds)
    (138/608) benchmarking ("sumvector", "1:100000")...
    done (took 1.9684e-5 seconds)
    (139/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027783702 seconds)
    (140/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047806359 seconds)
    (141/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.010931516 seconds)
    (142/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.071833357 seconds)
    (143/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060513262 seconds)
    (144/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.01180325 seconds)
    (145/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.072858091 seconds)
    (146/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017815202 seconds)
    (147/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036387338 seconds)
    (148/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100776498 seconds)
    (149/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048582042 seconds)
    (150/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014606531 seconds)
    (151/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.038153269 seconds)
    (152/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.011602424 seconds)
    (153/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.03590732 seconds)
    (154/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030924943 seconds)
    (155/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050091168 seconds)
    (156/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043341764 seconds)
    (157/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.1463e-5 seconds)
    (158/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.0503981 seconds)
    (159/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014813827 seconds)
    (160/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.065690197 seconds)
    (161/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.065949149 seconds)
    (162/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.044887616 seconds)
    (163/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066239312 seconds)
    (164/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024742807 seconds)
    (165/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047644281 seconds)
    (166/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044693466 seconds)
    (167/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070157804 seconds)
    (168/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.013824835 seconds)
    (169/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.06263719 seconds)
    (170/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.020511925 seconds)
    (171/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020573146 seconds)
    (172/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028264389 seconds)
    (173/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.020239514 seconds)
    (174/608) benchmarking "5d"...
    done (took 0.213497994 seconds)
    (175/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.015741141 seconds)
    (176/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 3.892e-5 seconds)
    (177/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159315662 seconds)
    (178/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.01512951 seconds)
    (179/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041467855 seconds)
    (180/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032076675 seconds)
    (181/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.006886122 seconds)
    (182/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000205879 seconds)
    (183/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031672131 seconds)
    (184/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.011042881 seconds)
    (185/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043166458 seconds)
    (186/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.0234e-5 seconds)
    (187/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013244759 seconds)
    (188/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061852298 seconds)
    (189/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.028111053 seconds)
    (190/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054340728 seconds)
    (191/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.000304874 seconds)
    (192/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.087288251 seconds)
    (193/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.023550785 seconds)
    (194/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074990369 seconds)
    (195/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.018988911 seconds)
    (196/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046654201 seconds)
    (197/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022103538 seconds)
    (198/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 6.9718e-5 seconds)
    (199/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046852992 seconds)
    (200/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053393401 seconds)
    (201/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.049743245 seconds)
    (202/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.547213002 seconds)
    (203/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128246411 seconds)
    (204/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064081811 seconds)
    (205/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.279e-5 seconds)
    (206/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034569534 seconds)
    (207/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.016401629 seconds)
    (208/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066681314 seconds)
    (209/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026052817 seconds)
    (210/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.00140949 seconds)
    (211/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.056570011 seconds)
    (212/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061259296 seconds)
    (213/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.006749163 seconds)
    (214/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.03382742 seconds)
    (215/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038105181 seconds)
    (216/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.014777248 seconds)
    (217/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022523991 seconds)
    (218/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.1352e-5 seconds)
    (219/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.259e-5 seconds)
    (220/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.031363547 seconds)
    (221/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028872999 seconds)
    (222/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.006807411 seconds)
    (223/608) benchmarking "6d"...
    done (took 0.203511244 seconds)
    (224/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.072945486 seconds)
    (225/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024254226 seconds)
    (226/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.9997e-5 seconds)
    (227/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02495554 seconds)
    (228/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.065636414 seconds)
    (229/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.018391003 seconds)
    (230/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.030960494 seconds)
    (231/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087206394 seconds)
    (232/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.018449842 seconds)
    (233/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.05127611 seconds)
    (234/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.026374519 seconds)
    (235/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049032045 seconds)
    (236/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082914964 seconds)
    (237/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.016172658 seconds)
    (238/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06862629 seconds)
    (239/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.01481313 seconds)
    (240/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047932187 seconds)
    (241/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084889262 seconds)
    (242/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046989496 seconds)
    (243/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 6.8546e-5 seconds)
    (244/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.040498323 seconds)
    (245/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033905755 seconds)
    (246/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.052075281 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.02889385 seconds)
    (248/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046959028 seconds)
    (249/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052000106 seconds)
    (250/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.000113257 seconds)
    (251/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.6545e-5 seconds)
    (252/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.027231652 seconds)
    (253/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042652134 seconds)
    (254/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 9.8503e-5 seconds)
    (255/608) benchmarking "3d"...
    done (took 0.061947661 seconds)
    (256/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.06522848 seconds)
    (257/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033308812 seconds)
    (258/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026851073 seconds)
    (259/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039325791 seconds)
    (260/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.022499752 seconds)
    (261/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047023799 seconds)
    (262/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.020512407 seconds)
    (263/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.06453466 seconds)
    (264/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058847388 seconds)
    (265/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033275375 seconds)
    (266/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.00031495 seconds)
    (267/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.015857089 seconds)
    (268/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076300254 seconds)
    (269/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055689473 seconds)
    (270/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000163686 seconds)
    (271/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.033826074 seconds)
    (272/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.018338007 seconds)
    (273/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066273308 seconds)
    (274/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082082783 seconds)
    (275/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.038610106 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067033171 seconds)
    (277/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.026972601 seconds)
    (278/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.029979468 seconds)
    (279/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.037326218 seconds)
    (280/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.038668668 seconds)
    (281/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000123057 seconds)
    (282/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032514565 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049221057 seconds)
    (284/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049117073 seconds)
    (285/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.029508749 seconds)
    (286/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.036445502 seconds)
    (287/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020723349 seconds)
    (288/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033154543 seconds)
    (289/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.015144378 seconds)
    (290/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.011450432 seconds)
    (291/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.028310002 seconds)
    (292/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.011745525 seconds)
    (293/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014395245 seconds)
    (294/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.016262305 seconds)
    (295/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046592078 seconds)
    (296/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.014828393 seconds)
    (297/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 9.9159e-5 seconds)
    (298/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.032093919 seconds)
    (299/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.033386192 seconds)
    (300/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.038000315 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000435767 seconds)
    (302/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.043707942 seconds)
    (303/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.8323e-5 seconds)
    (304/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.3752e-5 seconds)
    (305/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047041011 seconds)
    (306/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.063713233 seconds)
    (307/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016309037 seconds)
    (308/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.050280429 seconds)
    (309/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049469277 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.030986902 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05358725 seconds)
    (312/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019296076 seconds)
    (313/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026462172 seconds)
    (314/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070280752 seconds)
    (315/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.061768666 seconds)
    (316/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.027166254 seconds)
    (317/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065061441 seconds)
    (318/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.064914815 seconds)
    (319/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.014351784 seconds)
    (320/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020922478 seconds)
    (321/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020410129 seconds)
    (322/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032257686 seconds)
    (323/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056890746 seconds)
    (324/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035447454 seconds)
    (325/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.036813654 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056405938 seconds)
    (327/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051714879 seconds)
    (328/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000112182 seconds)
    (329/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.030629249 seconds)
    (330/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016579964 seconds)
    (331/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.020640809 seconds)
    (332/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07169728 seconds)
    (333/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06190786 seconds)
    (334/608) benchmarking "sub2ind"...
    done (took 0.299656816 seconds)
    (335/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 4.3865e-5 seconds)
    (336/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000158942 seconds)
    (337/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015065302 seconds)
    (338/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072258962 seconds)
    (339/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.012377208 seconds)
    (340/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.030378425 seconds)
    (341/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.00010013 seconds)
    (342/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066120256 seconds)
    (343/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.000305227 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090098237 seconds)
    (345/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 7.5348e-5 seconds)
    (346/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092039462 seconds)
    (347/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000484905 seconds)
    (348/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043650268 seconds)
    (349/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073779897 seconds)
    (350/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039971475 seconds)
    (351/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.016738788 seconds)
    (352/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018423128 seconds)
    (353/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.015827229 seconds)
    (354/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.8803e-5 seconds)
    (355/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.063863954 seconds)
    (356/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.067648452 seconds)
    (357/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042599539 seconds)
    (358/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.199038456 seconds)
    (359/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051733578 seconds)
    (360/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 8.0316e-5 seconds)
    (361/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039417767 seconds)
    (362/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.045224552 seconds)
    (363/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.011266815 seconds)
    (364/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.2138e-5 seconds)
    (365/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.02211731 seconds)
    (366/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.000483646 seconds)
    (367/608) benchmarking ("sum", "3darray")...
    done (took 0.047002874 seconds)
    (368/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.036971161 seconds)
    (369/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.038734761 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075064875 seconds)
    (371/608) benchmarking "7d"...
    done (took 0.256431069 seconds)
    (372/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053572333 seconds)
    (373/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03738745 seconds)
    (374/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 8.4867e-5 seconds)
    (375/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.024152281 seconds)
    (376/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.018475996 seconds)
    (377/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048032659 seconds)
    (378/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019498141 seconds)
    (379/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.061551306 seconds)
    (380/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.017744378 seconds)
    (381/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.016993725 seconds)
    (382/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.025356754 seconds)
    (383/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033786921 seconds)
    (384/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055881751 seconds)
    (385/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.056630232 seconds)
    (386/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032375224 seconds)
    (387/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049703361 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063535402 seconds)
    (389/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076867916 seconds)
    (390/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.04792024 seconds)
    (391/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.01182798 seconds)
    (392/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.016883612 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.046913784 seconds)
    (394/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.200342903 seconds)
    (395/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.016679497 seconds)
    (396/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035429169 seconds)
    (397/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072885068 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.01213451 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021971646 seconds)
    (400/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059284225 seconds)
    (401/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042047787 seconds)
    (402/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000480957 seconds)
    (403/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045240802 seconds)
    (404/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045138626 seconds)
    (405/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0642883 seconds)
    (406/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074702118 seconds)
    (407/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064053754 seconds)
    (408/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029748549 seconds)
    (409/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023233553 seconds)
    (410/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050125705 seconds)
    (411/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.0377e-5 seconds)
    (412/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.020286961 seconds)
    (413/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.000306668 seconds)
    (414/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.000126655 seconds)
    (415/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0268941 seconds)
    (416/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 4.6113e-5 seconds)
    (417/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.000116681 seconds)
    (418/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.01620385 seconds)
    (419/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.012879979 seconds)
    (420/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.011971254 seconds)
    (421/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.000164392 seconds)
    (422/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02824863 seconds)
    (423/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041916616 seconds)
    (424/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.016177532 seconds)
    (425/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.054267967 seconds)
    (426/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017305177 seconds)
    (427/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.2214e-5 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030722705 seconds)
    (429/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.015118217 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017440429 seconds)
    (431/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024167581 seconds)
    (432/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089003986 seconds)
    (433/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039853984 seconds)
    (434/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.021072508 seconds)
    (435/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034707881 seconds)
    (436/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05515749 seconds)
    (437/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071712238 seconds)
    (438/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028060276 seconds)
    (439/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.014862329 seconds)
    (440/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.026551205 seconds)
    (441/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.1584e-5 seconds)
    (442/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.039761031 seconds)
    (443/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.010537829 seconds)
    (444/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.8232e-5 seconds)
    (445/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0298307 seconds)
    (446/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.03683241 seconds)
    (447/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.022326532 seconds)
    (448/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.1361e-5 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034595991 seconds)
    (450/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048809097 seconds)
    (451/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025018451 seconds)
    (452/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067242526 seconds)
    (453/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066521741 seconds)
    (454/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049065198 seconds)
    (455/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066804007 seconds)
    (456/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.2437e-5 seconds)
    (457/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.031355315 seconds)
    (458/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062803672 seconds)
    (459/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026999111 seconds)
    (460/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.047389475 seconds)
    (461/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024978395 seconds)
    (462/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.024565901 seconds)
    (463/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.022821389 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.379e-5 seconds)
    (465/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055479906 seconds)
    (466/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.011520646 seconds)
    (467/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042676422 seconds)
    (468/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.040778798 seconds)
    (469/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.036847257 seconds)
    (470/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052622081 seconds)
    (471/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016089624 seconds)
    (472/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054605038 seconds)
    (473/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.032504133 seconds)
    (474/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.021162458 seconds)
    (475/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041787996 seconds)
    (476/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071680867 seconds)
    (477/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024180217 seconds)
    (478/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.02682112 seconds)
    (479/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.05020812 seconds)
    (480/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.049818462 seconds)
    (481/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031640028 seconds)
    (482/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066777819 seconds)
    (483/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.063694319 seconds)
    (484/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.043487084 seconds)
    (485/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035580821 seconds)
    (486/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.013966175 seconds)
    (487/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060480946 seconds)
    (488/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.06459656 seconds)
    (489/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.037687952 seconds)
    (490/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.015345142 seconds)
    (491/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049874409 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062461383 seconds)
    (493/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011413604 seconds)
    (494/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.041891939 seconds)
    (495/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.5282e-5 seconds)
    (496/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029078924 seconds)
    (497/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000576591 seconds)
    (498/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.014653322 seconds)
    (499/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084185075 seconds)
    (500/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.05954049 seconds)
    (501/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020404068 seconds)
    (502/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.028388205 seconds)
    (503/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071024998 seconds)
    (504/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.063878998 seconds)
    (505/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0170527 seconds)
    (506/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.070045679 seconds)
    (507/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.0757e-5 seconds)
    (508/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.020232357 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011361834 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.04044909 seconds)
    (511/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061373821 seconds)
    (512/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.443409812 seconds)
    (513/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.2153e-5 seconds)
    (514/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.021261711 seconds)
    (515/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025839979 seconds)
    (516/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000320114 seconds)
    (517/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052642467 seconds)
    (518/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045768977 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039995362 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060725838 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.012713931 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08527447 seconds)
    (523/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.01129298 seconds)
    (524/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.018215985 seconds)
    (525/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04023828 seconds)
    (526/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01995373 seconds)
    (527/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031736719 seconds)
    (528/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0555998 seconds)
    (529/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059867429 seconds)
    (530/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.0303e-5 seconds)
    (531/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056085248 seconds)
    (532/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.038362433 seconds)
    (533/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.031539742 seconds)
    (534/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.013413918 seconds)
    (535/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022197212 seconds)
    (536/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.026803826 seconds)
    (537/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000116156 seconds)
    (538/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074502071 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049174112 seconds)
    (540/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047079439 seconds)
    (541/608) benchmarking "2d"...
    done (took 0.046902417 seconds)
    (542/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.031852019 seconds)
    (543/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.7479e-5 seconds)
    (544/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021880758 seconds)
    (545/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014535077 seconds)
    (546/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.8234e-5 seconds)
    (547/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057796175 seconds)
    (548/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.031957545 seconds)
    (549/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081187646 seconds)
    (550/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033546628 seconds)
    (551/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.9272e-5 seconds)
    (552/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.030308135 seconds)
    (553/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.058815893 seconds)
    (554/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022770965 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052520125 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040599328 seconds)
    (557/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.061553112 seconds)
    (558/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.2438e-5 seconds)
    (559/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016874934 seconds)
    (560/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064147379 seconds)
    (561/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.1561e-5 seconds)
    (562/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062509045 seconds)
    (563/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046564833 seconds)
    (564/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028508857 seconds)
    (565/608) benchmarking "4d"...
    done (took 0.096259342 seconds)
    (566/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 3.7565e-5 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 1.5082e-5 seconds)
    (568/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069532545 seconds)
    (569/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060867988 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059548087 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.012462807 seconds)
    (572/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055280024 seconds)
    (573/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.031954448 seconds)
    (574/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06825227 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023789758 seconds)
    (576/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035592339 seconds)
    (577/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04080286 seconds)
    (578/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033550126 seconds)
    (579/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039405685 seconds)
    (580/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.01569591 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06412279 seconds)
    (582/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030389474 seconds)
    (583/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026015099 seconds)
    (584/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.022366413 seconds)
    (585/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 7.22e-5 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000112484 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041036686 seconds)
    (588/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066065422 seconds)
    (589/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.020064979 seconds)
    (590/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.055602064 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043304335 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079599132 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049407169 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027179798 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.027195607 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078210976 seconds)
    (597/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.031831938 seconds)
    (598/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.013813187 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025576096 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.062766136 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039749207 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.000352685 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057913688 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.195753767 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.049783341 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.000111104 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025322381 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.066395792 seconds)
  done (took 29.063480804 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 0.061542173 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 0.244257511 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 0.040089147 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.057344608 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066220319 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 0.05662724 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 0.034200707 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 0.20465963 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.065490763 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.052631034 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 0.041039117 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.070760757 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 0.041251041 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.052618726 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.051250116 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 0.036121181 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 0.041836968 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.052446001 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 0.101698807 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 0.068395557 seconds)
  done (took 2.302462144 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 5)...
    done (took 0.310200441 seconds)
    (2/17) benchmarking ("catnd_setind", 5)...
    done (took 0.191065928 seconds)
    (3/17) benchmarking "4467"...
    done (took 0.03124232 seconds)
    (4/17) benchmarking ("hcat_setind", 5)...
    done (took 0.075177606 seconds)
    (5/17) benchmarking ("vcat", 5)...
    done (took 0.127105298 seconds)
    (6/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.053379497 seconds)
    (7/17) benchmarking ("hcat", 5)...
    done (took 0.058887607 seconds)
    (8/17) benchmarking ("catnd_setind", 500)...
    done (took 0.003259758 seconds)
    (9/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.002763881 seconds)
    (10/17) benchmarking ("hvcat", 500)...
    done (took 0.004129384 seconds)
    (11/17) benchmarking ("hcat", 500)...
    done (took 0.001563391 seconds)
    (12/17) benchmarking ("hcat_setind", 500)...
    done (took 0.002347845 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 0.555389787 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 0.049072961 seconds)
    (15/17) benchmarking ("vcat_setind", 500)...
    done (took 0.002504667 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 0.008778129 seconds)
    (17/17) benchmarking ("vcat", 500)...
    done (took 0.006438416 seconds)
  done (took 2.40306076 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.16374302 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.34586307 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.108665805 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.183644245 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.131607578 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.296705732 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.485658133 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.282860476 seconds)
  done (took 2.880585738 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 0.130256517 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 0.034798518 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.118521643 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.100012902 seconds)
  done (took 1.258233041 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 0.056657279 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.025998317 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 0.035801411 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.025964777 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.045832147 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 0.02583229 seconds)
  done (took 1.09254427 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.045543589 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 0.05411535 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.204906778 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.036742406 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.03637017 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 0.041706246 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 0.058165162 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 0.047196118 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 0.038070022 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.041530969 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 0.03368388 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.027125002 seconds)
  done (took 1.588381237 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.056054384 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.042876767 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.050938572 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.043285993 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.039769355 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.039402555 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.049304404 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.043246201 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.038264787 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.026094942 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 0.032112158 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.045796459 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.032912973 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 0.032967845 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.031733744 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.034271902 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.035550409 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.020851086 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.044562976 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.042091764 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.04408697 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.043723818 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.035168236 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.044761177 seconds)
  done (took 1.831772017 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 3)...
    done (took 0.049838785 seconds)
    (2/5) benchmarking ("setindex!", 4)...
    done (took 0.013915207 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.014642322 seconds)
    (4/5) benchmarking ("setindex!", 2)...
    done (took 0.013526195 seconds)
    (5/5) benchmarking ("setindex!", 1)...
    done (took 0.009564337 seconds)
  done (took 0.982633245 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.95030185 seconds)
    (2/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 1.139987281 seconds)
    (3/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.536761666 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.142942819 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.40066072 seconds)
    (6/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.768121721 seconds)
    (7/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.170729745 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.099194635 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.00562686 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.65498796 seconds)
    (11/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.009350531 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.463639515 seconds)
  done (took 27.222775509 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.051310022 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 0.049444416 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.052671698 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 0.045809882 seconds)
  done (took 1.082084491 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.04003716 seconds)
    (2/12) benchmarking ("prerend!", 8)...
    done (took 0.044401382 seconds)
    (3/12) benchmarking ("push_single!", 256)...
    done (took 0.0330074 seconds)
    (4/12) benchmarking ("push_multiple!", 8)...
    done (took 1.7034e-5 seconds)
    (5/12) benchmarking ("push_multiple!", 256)...
    done (took 1.4671e-5 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 9.004e-6 seconds)
    (7/12) benchmarking ("append!", 8)...
    done (took 0.044788152 seconds)
    (8/12) benchmarking ("append!", 2048)...
    done (took 3.8023e-5 seconds)
    (9/12) benchmarking ("prerend!", 256)...
    done (took 1.5276e-5 seconds)
    (10/12) benchmarking ("push_single!", 2048)...
    done (took 1.8668e-5 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 1.453e-5 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 2.075e-5 seconds)
  done (took 1.048229196 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.033971448 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.041874367 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.032302374 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.038897507 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.044562695 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.029102246 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.027517528 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.040430148 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.038987365 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.038433596 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.023516935 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.043230643 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.038754935 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 0.030265558 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.038424394 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.023416936 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.03306991 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.039168233 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 0.028156096 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.033484013 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.024430143 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.042986531 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.038563318 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.023798973 seconds)
  done (took 1.717852908 seconds)
done (took 75.236779575 seconds)
(3/22) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.09505701 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.038210391 seconds)
  done (took 1.017207858 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 0.206672081 seconds)
  (3/15) benchmarking "20517"...
  done (took 0.062974547 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 0.090714129 seconds)
    (2/2) benchmarking "conditional"...
    done (took 0.054905818 seconds)
  done (took 1.039640373 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 0.035287598 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.036211817 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 0.044292115 seconds)
  done (took 1.008777862 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.048181987 seconds)
  done (took 0.962987369 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.150491246 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.239903226 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.095482618 seconds)
  done (took 1.377143453 seconds)
  (8/15) benchmarking "18129"...
  done (took 0.168436299 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 0.058374981 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 0.05571286 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 0.023798577 seconds)
    (4/4) benchmarking "Float32"...
    done (took 0.03261398 seconds)
  done (took 1.068997551 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.046120283 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 0.03028511 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 0.021316708 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 0.020158855 seconds)
  done (took 1.016639405 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 0.060661569 seconds)
    (2/3) benchmarking "Float16"...
    done (took 0.06268195 seconds)
    (3/3) benchmarking "Float32"...
    done (took 0.058865454 seconds)
  done (took 1.080119331 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 0.063142189 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.022541313 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 0.022407675 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.022561213 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 0.022421237 seconds)
  done (took 0.992626334 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.181611787 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 0.085649592 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.037880177 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.098002733 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.099914976 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 3.3088e-5 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.6069e-5 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.4008e-5 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 1.5139e-5 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.074452198 seconds)
  done (took 1.473556378 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.138874808 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.641e-5 seconds)
  done (took 1.042452925 seconds)
done (took 13.471716323 seconds)
(4/22) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.111201257 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.108139402 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.550942729 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.580133971 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.037890105 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.028413245 seconds)
    (7/17) benchmarking "all same"...
    done (took 0.030234818 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.7329e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.025331431 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 1.5814e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.924804434 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.029520564 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.59621267 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.028103166 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.087528518 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.03166869 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.8566e-5 seconds)
  done (took 12.074596928 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 3.1002e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000905625 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.000383986 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.000939385 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.00057191 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.1534e-5 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.6544e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.000349554 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.000968809 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.000371295 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000369127 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.000585174 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.023738391 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.00052988 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.000415163 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.000549235 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000384498 seconds)
  done (took 1.015986911 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.6425e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 9.616e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.386e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 7.986e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 6.306e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.475e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.452e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 3.941e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 6.656e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 3.483e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 7.625e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.48e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.558e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.117e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.2438e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.125e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.843e-6 seconds)
  done (took 0.954411954 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.6307e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 3.4108e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.063e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 1.9619e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 1.6229e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.312e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 5.598e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.981e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 1.5568e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 7.223e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 1.0802e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 1.3589e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.000229859 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 1.3187e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.5148e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 1.2742e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.0088e-5 seconds)
  done (took 0.95440793 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 0.039471104 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.035085197 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.939049135 seconds)
    (4/13) benchmarking "Float16"...
    done (took 0.998274837 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 9.004382724 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.037861601 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.181815177 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 1.2896e-5 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.405091008 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 0.036304712 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 7.672892036 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.317140208 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.251162878 seconds)
  done (took 21.875646092 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.240195666 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.226341774 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.133170525 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.063501274 seconds)
  done (took 1.634328555 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.149606008 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.10967936 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.071807708 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.06231372 seconds)
  done (took 1.37330783 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.105309977 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.051362949 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.064336152 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.056091377 seconds)
  done (took 1.255384766 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 0.038810169 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 0.056767169 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 0.037605545 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 0.028838581 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 0.034856889 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 0.055713407 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 0.025015834 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 0.025747113 seconds)
  done (took 1.283145565 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.8045e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000148682 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 6.1144e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 8.7131e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.5175e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 6.183e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 1.2621e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.8901e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 9.2822e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.803e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.6546e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 6.3877e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.001918395 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.2776e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 6.348e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.0131e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.537e-5 seconds)
  done (took 0.980736714 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.613e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.0046e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 8.782e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 8.981e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 7.646e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.11e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 5.26e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.322e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 7.213e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.763e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 9.073e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 6.448e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.2991e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.955e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.3087e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.462e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 7.201e-6 seconds)
  done (took 0.974095081 seconds)
done (took 45.278340798 seconds)
(5/22) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.022801939 seconds)
done (took 0.997106456 seconds)
(6/22) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 0.092905538 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.105902886 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 0.053161176 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 0.121749732 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 0.065801399 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 0.114688948 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 0.09059131 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 0.546344272 seconds)
  (9/12) benchmarking "nbody"...
  done (took 0.074984496 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 0.076124934 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 0.387385924 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 2.9297886 seconds)
done (took 5.639109802 seconds)
(7/22) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.098239602 seconds)
    (2/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 3.4859e-5 seconds)
    (3/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.090336825 seconds)
    (4/54) benchmarking ("spmat", "range", 10)...
    done (took 0.121427736 seconds)
    (5/54) benchmarking ("spmat", "array", 100)...
    done (took 0.030278001 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.219397836 seconds)
    (7/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.047257459 seconds)
    (8/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.098220745 seconds)
    (9/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.072426085 seconds)
    (10/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.037095444 seconds)
    (11/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.053613792 seconds)
    (12/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.107855721 seconds)
    (13/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.042707244 seconds)
    (14/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.002706537 seconds)
    (15/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.8083e-5 seconds)
    (16/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.001030372 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.0359e-5 seconds)
    (18/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.055435819 seconds)
    (19/54) benchmarking ("spmat", "splogical", 100)...
    done (took 6.1584e-5 seconds)
    (20/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.063373781 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.070597908 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000777153 seconds)
    (23/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.055740217 seconds)
    (24/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.012495296 seconds)
    (25/54) benchmarking ("spmat", "logical", 100)...
    done (took 7.3123e-5 seconds)
    (26/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.000795364 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.04001231 seconds)
    (28/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.00015008 seconds)
    (29/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.000902998 seconds)
    (30/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.3633e-5 seconds)
    (31/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.000753649 seconds)
    (32/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.2868e-5 seconds)
    (33/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 4.1852e-5 seconds)
    (34/54) benchmarking ("spvec", "range", 1000)...
    done (took 9.019e-6 seconds)
    (35/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.000868879 seconds)
    (36/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.00078584 seconds)
    (37/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.2586e-5 seconds)
    (38/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.08666314 seconds)
    (39/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.001031187 seconds)
    (40/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 6.216e-5 seconds)
    (41/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.000766909 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.000767496 seconds)
    (43/54) benchmarking ("spmat", "array", 10)...
    done (took 3.5503e-5 seconds)
    (44/54) benchmarking ("spmat", "integer", 100)...
    done (took 3.9548e-5 seconds)
    (45/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.2601e-5 seconds)
    (46/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.6241e-5 seconds)
    (47/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.1037e-5 seconds)
    (48/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.000743391 seconds)
    (49/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.6643e-5 seconds)
    (50/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.2914e-5 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.4662e-5 seconds)
    (52/54) benchmarking ("spmat", "range", 100)...
    done (took 4.6228e-5 seconds)
    (53/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.4986e-5 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 4.2517e-5 seconds)
  done (took 2.516248573 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 0.55018444 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 0.445205937 seconds)
  done (took 1.992168861 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.106164172 seconds)
    (2/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.12645682 seconds)
    (3/18) benchmarking ("Diagonal", 1000)...
    done (took 0.155056789 seconds)
    (4/18) benchmarking ("IJV", 1000)...
    done (took 0.059432573 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.563e-5 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 4.374e-5 seconds)
    (7/18) benchmarking ("IV", 10)...
    done (took 0.203904924 seconds)
    (8/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.108526149 seconds)
    (9/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 3.3493e-5 seconds)
    (10/18) benchmarking ("IV", 100)...
    done (took 1.372e-5 seconds)
    (11/18) benchmarking ("Diagonal", 100)...
    done (took 2.3008e-5 seconds)
    (12/18) benchmarking ("IJV", 10)...
    done (took 9.372e-6 seconds)
    (13/18) benchmarking ("Diagonal", 10)...
    done (took 6.831e-6 seconds)
    (14/18) benchmarking ("IJV", 100)...
    done (took 1.2771e-5 seconds)
    (15/18) benchmarking ("SymTridiagonal", 10)...
    done (took 7.413e-6 seconds)
    (16/18) benchmarking ("IV", 1000)...
    done (took 1.6924e-5 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 3.4973e-5 seconds)
    (18/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.0271e-5 seconds)
  done (took 1.766921749 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.484395942 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.171929729 seconds)
    (3/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.080327342 seconds)
    (4/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.300262467 seconds)
    (5/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.079330368 seconds)
    (6/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.078230221 seconds)
    (7/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.123399493 seconds)
    (8/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000148007 seconds)
    (9/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075345199 seconds)
    (10/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 6.728e-5 seconds)
    (11/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.080542563 seconds)
    (12/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030731208 seconds)
    (13/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.07505548 seconds)
    (14/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 7.9492e-5 seconds)
    (15/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.034552032 seconds)
    (16/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.6525e-5 seconds)
    (17/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.028208061 seconds)
    (18/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002340195 seconds)
    (19/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.094404511 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.003183389 seconds)
    (21/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.124681334 seconds)
    (22/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.002938644 seconds)
    (23/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.094414124 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.003041526 seconds)
    (25/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 6.6387e-5 seconds)
    (26/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034342018 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.033887292 seconds)
    (28/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.033647449 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.070677835 seconds)
    (30/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 7.1143e-5 seconds)
    (31/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002386265 seconds)
    (32/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002101186 seconds)
    (33/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000343869 seconds)
    (34/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.001991246 seconds)
    (35/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.035751524 seconds)
    (36/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000108929 seconds)
    (37/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001247664 seconds)
    (38/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.036876351 seconds)
    (39/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002034692 seconds)
    (40/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.001575457 seconds)
    (41/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.032939714 seconds)
    (42/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.002112604 seconds)
    (43/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.035941196 seconds)
    (44/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.002969504 seconds)
    (45/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000111147 seconds)
    (46/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.006050451 seconds)
    (47/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000226757 seconds)
    (48/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000140388 seconds)
    (49/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.004659959 seconds)
    (50/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.00017719 seconds)
    (51/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 8.5311e-5 seconds)
    (52/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.018383047 seconds)
    (53/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 4.5897e-5 seconds)
    (54/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.035887239 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.2906e-5 seconds)
    (56/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.2395e-5 seconds)
    (57/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.6544e-5 seconds)
    (58/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002576788 seconds)
    (59/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000133267 seconds)
    (60/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 3.724e-5 seconds)
    (61/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003775993 seconds)
    (62/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.003945596 seconds)
    (63/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000128525 seconds)
    (64/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.002281034 seconds)
    (65/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.033471732 seconds)
    (66/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.3983e-5 seconds)
    (67/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000200766 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.004676515 seconds)
    (69/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.4321e-5 seconds)
    (70/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.046798997 seconds)
    (71/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.000116011 seconds)
    (72/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.006269241 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.001600561 seconds)
    (74/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 8.185e-5 seconds)
    (75/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.003023777 seconds)
    (76/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000589215 seconds)
    (77/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002398716 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000211268 seconds)
    (79/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000156327 seconds)
    (80/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.002380771 seconds)
    (81/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.012317784 seconds)
    (82/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000177337 seconds)
    (83/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000106284 seconds)
    (84/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.002914356 seconds)
    (85/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.032196244 seconds)
    (86/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000100864 seconds)
    (87/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 5.9843e-5 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.01317111 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000224198 seconds)
    (90/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.012879506 seconds)
    (91/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.00221279 seconds)
    (92/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000202272 seconds)
    (93/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.006217834 seconds)
    (94/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009082158 seconds)
    (95/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000208774 seconds)
    (96/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000106222 seconds)
    (97/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000195457 seconds)
    (98/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.007829778 seconds)
    (99/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000109096 seconds)
    (100/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.045921338 seconds)
    (101/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.001529055 seconds)
    (102/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 9.2832e-5 seconds)
    (103/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.0002154 seconds)
    (104/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.001154725 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 6.8278e-5 seconds)
    (106/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.000789394 seconds)
    (107/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000690399 seconds)
    (108/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.5723e-5 seconds)
    (109/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001436097 seconds)
    (110/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000133749 seconds)
    (111/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000114738 seconds)
    (112/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.001382115 seconds)
    (113/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.1943e-5 seconds)
    (114/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000125737 seconds)
    (115/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 7.0499e-5 seconds)
    (116/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000212894 seconds)
    (117/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008148004 seconds)
    (118/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008137495 seconds)
    (119/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001377882 seconds)
    (120/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000156031 seconds)
    (121/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.008392274 seconds)
    (122/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002008328 seconds)
    (123/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011204998 seconds)
    (124/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000125278 seconds)
    (125/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001448003 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 4.4941e-5 seconds)
    (127/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000121283 seconds)
    (128/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000197876 seconds)
    (129/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.001529772 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.007417222 seconds)
    (131/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.005083959 seconds)
    (132/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000163425 seconds)
    (133/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000226189 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.013322856 seconds)
    (135/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002329757 seconds)
    (136/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.000484039 seconds)
    (137/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.008090519 seconds)
    (138/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000123746 seconds)
    (139/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012705724 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008965182 seconds)
    (141/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000252851 seconds)
    (142/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000767388 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000137887 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001609628 seconds)
    (145/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.002531664 seconds)
    (146/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.006474598 seconds)
    (147/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 7.8858e-5 seconds)
    (148/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.6614e-5 seconds)
    (149/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000204579 seconds)
    (150/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011473604 seconds)
    (151/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 9.6021e-5 seconds)
    (152/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 8.0835e-5 seconds)
    (153/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.2556e-5 seconds)
    (154/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.002577048 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.8917e-5 seconds)
    (156/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000150435 seconds)
    (157/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001468778 seconds)
    (158/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000115144 seconds)
    (159/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.0648e-5 seconds)
    (160/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 4.1797e-5 seconds)
    (161/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.015958915 seconds)
    (162/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 7.215e-5 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002173637 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 8.296e-5 seconds)
    (165/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.1066e-5 seconds)
    (166/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.001153887 seconds)
    (167/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004713187 seconds)
    (168/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.000701625 seconds)
    (169/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000144794 seconds)
    (170/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.4932e-5 seconds)
    (171/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.00024289 seconds)
    (172/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.5053e-5 seconds)
    (173/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.000520691 seconds)
    (174/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 6.053e-5 seconds)
    (175/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.001727717 seconds)
    (176/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.005112705 seconds)
    (177/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000172336 seconds)
    (178/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.008334845 seconds)
    (179/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.004030247 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.002115135 seconds)
    (181/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.000814082 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.7532e-5 seconds)
    (183/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001726391 seconds)
    (184/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 6.1634e-5 seconds)
    (185/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000219998 seconds)
    (186/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.00013459 seconds)
    (187/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002593127 seconds)
    (188/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000135414 seconds)
    (189/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 6.035e-5 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.001655875 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.006870017 seconds)
    (192/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.014536008 seconds)
    (193/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000167039 seconds)
    (194/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 5.303e-5 seconds)
    (195/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.00266532 seconds)
    (196/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.001481276 seconds)
    (197/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000129697 seconds)
    (198/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000191307 seconds)
    (199/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000123795 seconds)
    (200/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.001998994 seconds)
    (201/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.000470641 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.003990589 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.00075485 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.9866e-5 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002168656 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009126517 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 6.9121e-5 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000117093 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.00274144 seconds)
    (210/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.003107231 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000129907 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000165426 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 4.6005e-5 seconds)
    (214/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000109111 seconds)
    (215/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000249289 seconds)
    (216/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000890262 seconds)
    (217/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 3.9748e-5 seconds)
    (218/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.013276215 seconds)
    (219/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001229017 seconds)
    (220/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000149687 seconds)
    (221/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000178168 seconds)
    (222/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005743104 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 5.5742e-5 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001456908 seconds)
  done (took 3.894973527 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.060219659 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.140188104 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.241136456 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.032225398 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000183594 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.149138714 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.000170722 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.273174171 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.000121778 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 1.035265538 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.000106618 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.059766041 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.00026902 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.487862341 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.284519346 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.226076777 seconds)
  done (took 3.986997762 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 1.816501128 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.899928598 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.265641272 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.418459055 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.134615543 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 0.453001584 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.13197465 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.109434587 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.112165178 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.100578393 seconds)
  done (took 5.449006989 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.058945876 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.175822614 seconds)
  done (took 1.253567034 seconds)
done (took 21.848974226 seconds)
(8/22) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.020873377 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020760023 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 0.020150338 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.022421035 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 0.0202166 seconds)
    (6/49) benchmarking "13786"...
    done (took 0.038931888 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.021042789 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 0.020562556 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.052020846 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 0.021167314 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.028401815 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.034268634 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 0.021214923 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 0.020141213 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 0.020498516 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 0.020145363 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 0.021002436 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 0.020473749 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.022367293 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 0.020547182 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 0.021232638 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.022320005 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 0.021413471 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 0.022031444 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 0.020946761 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.027008475 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 0.021529429 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 0.020576774 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.027106527 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.022095898 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.021450283 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.02154528 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 0.020713924 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 0.020381801 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 0.020724024 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 0.020112714 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.028416708 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.021561531 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.021598305 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.022497696 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 0.021279316 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 0.021856482 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.021617217 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.022216341 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 0.020467897 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 0.020056734 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.022528396 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 0.022418722 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 0.020257545 seconds)
  done (took 2.141414703 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.036086864 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 3.2197e-5 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.03637015 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 4.2998e-5 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.5441e-5 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.6767e-5 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.1541e-5 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 7.9e-6 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 8.91e-6 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.67e-6 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.4869e-5 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.425e-6 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 5.875e-6 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 6.712e-6 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.449e-6 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 6.746e-6 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.009392052 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 3.3427e-5 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.7589e-5 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 7.755e-6 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 8.265e-6 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 7.109e-6 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.071e-6 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 6.639e-6 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 6.197e-6 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 5.515e-6 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 6.41e-6 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 6.681e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 7.422e-6 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 6.087e-6 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 6.023e-6 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 5.915e-6 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 9.643e-6 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.6508e-5 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 6.02e-6 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 6.144e-6 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 5.985e-6 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.2035e-5 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 9.158e-6 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 6.988e-6 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 6.369e-6 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 8.037e-6 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.7462e-5 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 8.185e-6 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 5.89e-6 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 6.527e-6 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 6.111e-6 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 5.613e-6 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 6.083e-6 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 6.447e-6 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 5.643e-6 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 5.713e-6 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 5.721e-6 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 5.861e-6 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 9.255e-6 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 6.776e-6 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 7.266e-6 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 5.865e-6 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 5.743e-6 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 1.2042e-5 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 6.75e-6 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 5.992e-6 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.619e-6 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 6.197e-6 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 6.02e-6 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 6.297e-6 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 5.798e-6 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 6.009e-6 seconds)
  done (took 1.25980611 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020060456 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.0209e-5 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.862e-6 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.147e-6 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 5.514e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.545e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 5.361e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.574e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.533e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.44e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 8.612e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.085e-6 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.239e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.008e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.838e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.236e-6 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.123e-6 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.565e-6 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.189e-6 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.225e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.189e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019249982 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.3177e-5 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 6.366e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.7e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.281e-6 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 5.747e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.68e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.553e-6 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 5.396e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.577e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.569e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.423e-6 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.252e-6 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.826e-6 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.419e-6 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.418e-6 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.4323e-5 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.116e-6 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 6.272e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.665e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.747e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0332e-5 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 6.185e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.493e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.115e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.228e-6 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.2e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 4.823e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.079e-6 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.239e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.232e-6 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.389e-6 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.154e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.877e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.509e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.278e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.401e-6 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 5.453e-6 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.304e-6 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.124e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.5e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.591e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.322e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.176e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.366e-6 seconds)
  done (took 1.05997251 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.044755668 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.027236711 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.047641633 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.044230169 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.03924357 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.048060551 seconds)
  done (took 1.270632346 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 0.021711214 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.7545e-5 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021254697 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.6242e-5 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.2249e-5 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 9.074e-6 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 8.518e-6 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.81e-6 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 7.354e-6 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 7.182e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.3863e-5 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 6.76e-6 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 9.988e-6 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 6.039e-6 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 6.629e-6 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.009e-6 seconds)
  done (took 1.06585247 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019725684 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 1.425e-5 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 6.769e-6 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.017635064 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.019091484 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.0398e-5 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.0075e-5 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.000153802 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 8.462e-6 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 6.254e-6 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 9.209e-6 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.591e-6 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.815e-6 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.669e-6 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 1.008e-5 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.785e-6 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.75e-6 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.355e-6 seconds)
  done (took 1.078932773 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.019671721 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.3751e-5 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.019127269 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.3627e-5 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 7.333e-6 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 7.76e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.687e-6 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 6.785e-6 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 6.736e-6 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 6.123e-6 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.0097e-5 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 5.93e-6 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.941e-6 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 5.738e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.202e-6 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.622e-6 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.981e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.786e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 9.672e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.925e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.686e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 5.879e-6 seconds)
  done (took 1.063805889 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019496477 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.0366e-5 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019402694 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.2904e-5 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 6.948e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.961e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 6.0e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.119e-6 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.923e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.337e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 9.255e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.407e-6 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.299e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.462e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.934e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.203e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.431e-6 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.421e-6 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.446e-6 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.273e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.519e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.06e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.173e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.228e-6 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.842e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.584e-6 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.42e-6 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.296e-6 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.2021e-5 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.843e-6 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.219e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.82e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.097e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.555e-6 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.399e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.497e-6 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.771e-6 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.619e-6 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.789e-6 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.599e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.204e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.851e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.6389e-5 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.499e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.51e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.154e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.519e-6 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 5.308e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.389e-6 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 5.418e-6 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.801e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.137e-6 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.743e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.436e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.434e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.244e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.401e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.376e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.141e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.318e-6 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.614e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.836e-6 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 5.711e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.419e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.877e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.469e-6 seconds)
  done (took 1.060978102 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 0.01967953 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.019197651 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.3884e-5 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 6.129e-6 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.97e-6 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.221e-6 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 5.454e-6 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 5.44e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.071e-6 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 5.176e-6 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 9.01e-6 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.179e-6 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 4.931e-6 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.244e-6 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.495e-6 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.016e-6 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 1.0002e-5 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.27e-6 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 5.63e-6 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.488e-6 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 5.51e-6 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 4.927e-6 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 8.703e-6 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 5.977e-6 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.038e-6 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.199e-6 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.402e-6 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.005e-6 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 5.039e-6 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 5.523e-6 seconds)
  done (took 1.060433221 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.019617059 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.7519e-5 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020844501 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.3657e-5 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 6.972e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.935e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 6.277e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.827e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 6.061e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.328e-6 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 9.586e-6 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.666e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.961e-6 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 5.738e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.643e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 4.908e-6 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.81e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.702e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 5.981e-6 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 1.0725e-5 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.702e-6 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.556e-6 seconds)
  done (took 1.061530224 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 0.019678094 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.5533e-5 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 6.829e-6 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018943797 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.3326e-5 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.156e-6 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 5.348e-6 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.491e-6 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.458e-6 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.266e-6 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 1.4039e-5 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.53e-6 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 5.6e-6 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.439e-6 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 4.877e-6 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 5.358e-6 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.16e-6 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 4.902e-6 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.162e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.992e-6 seconds)
  done (took 1.059751034 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.021875972 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019081645 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.0971e-5 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.0012e-5 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 6.116e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.532e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 5.07e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 4.915e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 5.28e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 4.834e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 8.882e-6 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.162e-6 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.066e-6 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 4.998e-6 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.828e-6 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.292e-6 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.487e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.352e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 9.032e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.701e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.375e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.024e-6 seconds)
  done (took 1.06566718 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019818732 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.0836e-5 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 6.086e-6 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 4.2601e-5 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.726e-6 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.191e-6 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.2e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.248e-6 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.333e-6 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 4.956e-6 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 8.68e-6 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.109e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.029e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 4.852e-6 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.659e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.375e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 4.824e-6 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.091e-6 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 4.907e-6 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.244e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.19e-6 seconds)
  done (took 1.041251297 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 0.019735516 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 0.019566299 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.021211242 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 0.020630944 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.016072646 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.019968923 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.016198197 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024981584 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.016377892 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.020435713 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 0.02001174 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 0.019868922 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 0.020615623 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 0.024431572 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.016776511 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.021074205 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.020994133 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.022773647 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.021008361 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.021250595 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.02125602 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 0.016302978 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.020719463 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.020655251 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.021478376 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 0.021528204 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 0.021785834 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 0.016583916 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 0.016527907 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.020423732 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 0.020076429 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 0.020280061 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 0.021773651 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 0.02034044 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 0.020730427 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.029957654 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 0.02125684 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 0.016683187 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 0.016474526 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.021518741 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.020792251 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 0.021009064 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 0.020291408 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.016389463 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.020791517 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 0.020333791 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 0.019974238 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.016596005 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.016613792 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.020960051 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.016615516 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020678882 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.016585079 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 0.020073607 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 0.020240016 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.016311123 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 0.016420378 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 0.020200086 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 0.016568086 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.020484576 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.016363019 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.016513465 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.020761465 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 0.016571246 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 0.020415326 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.016571544 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.020526253 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.020157079 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 0.020249323 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 0.020204566 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.023757828 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.021579681 seconds)
  done (took 2.446052238 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.020351867 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.020120375 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.4836e-5 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.801e-6 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.455e-6 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.42e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.422e-6 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.902e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.803e-6 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.289e-6 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 8.818e-6 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.449e-6 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.692e-6 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.387e-6 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.718e-6 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.847e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.555e-6 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.029e-6 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.421e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 5.093e-6 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 5.526e-6 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 5.622e-6 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 5.165e-6 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.029e-6 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 5.624e-6 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.563e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.712e-6 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 5.211e-6 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.113e-6 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 7.345e-6 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.306e-6 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.4e-6 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 4.984e-6 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.126e-6 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 5.444e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 5.23e-6 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.111e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 4.87e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.185e-6 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 5.449e-6 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.742e-6 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.483e-6 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.5188e-5 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 6.241e-6 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 5.326e-6 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.231e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.292e-6 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.264e-6 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 4.807e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.127e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 4.978e-6 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.634e-6 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 4.968e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 5.124e-6 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.501e-6 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.099e-6 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.155e-6 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 4.998e-6 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.02e-6 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 5.012e-6 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.386e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.134e-6 seconds)
  done (took 1.071240256 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 0.019693709 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.017843291 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.017791419 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018902956 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.017687438 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.236e-5 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 6.2637e-5 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 7.272e-6 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 8.691e-6 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.62e-6 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.01751493 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 1.6114e-5 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 6.0522e-5 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.2061e-5 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.0715e-5 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.855e-6 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 6.2225e-5 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 7.202e-6 seconds)
  done (took 1.13549282 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 0.019700238 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.019191635 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.3889e-5 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 8.209e-6 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 5.476e-6 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 5.346e-6 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.643e-6 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.457e-6 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.674e-6 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.113e-6 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.2719e-5 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 5.691e-6 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 5.179e-6 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 5.158e-6 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 5.099e-6 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 5.409e-6 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 5.334e-6 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 5.206e-6 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.677e-6 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.331e-6 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 4.891e-6 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.302e-6 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 4.804e-6 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 5.233e-6 seconds)
  done (took 1.064959565 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.054459707 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.0893e-5 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.583e-6 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.401e-6 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 4.826e-6 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.511e-6 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.206e-6 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 4.822e-6 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.324e-6 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.108e-6 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.0234e-5 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.183e-6 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.248e-6 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.786e-6 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.438e-6 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.441e-6 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.439e-6 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 9.539e-6 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.03e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.073e-6 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.099e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.344e-6 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.161e-6 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.535e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 4.95e-6 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 4.653e-6 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.208e-6 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.08e-6 seconds)
  done (took 1.080531308 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.019175621 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 0.019314819 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.8308e-5 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.7436e-5 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 6.527e-6 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 6.055e-6 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 5.438e-6 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 5.587e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.509e-6 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 5.518e-6 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 8.868e-6 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 5.802e-6 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 5.428e-6 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 6.004e-6 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 5.247e-6 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.42e-6 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 5.618e-6 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.308e-6 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.442e-6 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.469e-6 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 5.592e-6 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.352e-6 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 7.023e-6 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 6.173e-6 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.747e-6 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.339e-6 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 5.621e-6 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 5.525e-6 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 5.224e-6 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 5.391e-6 seconds)
  done (took 1.064205739 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.021147266 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.019015182 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.023851648 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.3292e-5 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 6.814e-6 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.019194205 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.1377e-5 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019534756 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.022721837 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.023313222 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.025073194 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.9505e-5 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019973835 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.9266e-5 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.2166e-5 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.022125573 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.6181e-5 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.0928e-5 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.1318e-5 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.0659e-5 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 8.234e-6 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 6.637e-6 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 6.07e-6 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 9.555e-6 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 6.333e-6 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 5.353e-6 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 6.012e-6 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 6.763e-6 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 5.858e-6 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 6.678e-6 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 8.412e-6 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 5.4e-6 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 7.002e-6 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 5.166e-6 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 5.286e-6 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 4.871e-6 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 5.673e-6 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 5.931e-6 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 5.492e-6 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 5.267e-6 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.021369325 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.898e-5 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 3.2493e-5 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.3782e-5 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 8.291e-6 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 8.54e-6 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.02188759 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.4214e-5 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.2953e-5 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 7.133e-6 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.052e-5 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 9.427e-6 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 5.975e-6 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 7.32e-6 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 6.405e-6 seconds)
  done (took 1.289405172 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019644722 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 1.693e-5 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 7.784e-6 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.01917206 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.0574e-5 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.9428e-5 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 5.949e-6 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 5.73e-6 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 6.348e-6 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 5.542e-6 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 9.558e-6 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.797e-6 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.869e-6 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017583129 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.3711e-5 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 1.073e-5 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.693e-6 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 5.5708e-5 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.955e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.93e-6 seconds)
  done (took 1.082793813 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.019724912 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.3856e-5 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.021322133 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.3952e-5 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 6.815e-6 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 6.713e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.413e-6 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 5.65e-6 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 6.597e-6 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 6.041e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 9.334e-6 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.709e-6 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.977e-6 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.482e-6 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.978e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.812e-6 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 9.196e-6 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 5.291e-6 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 5.416e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.711e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.688e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.513e-6 seconds)
  done (took 1.067242095 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 0.019300699 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.019567056 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.5386e-5 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 6.8e-6 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 1.0728e-5 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.647e-6 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.642e-6 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 6.425e-6 seconds)
  done (took 1.065311031 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.020909634 seconds)
    (2/2) benchmarking "in"...
    done (took 0.020338819 seconds)
  done (took 1.071172197 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.032428212 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.02126835 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.019815896 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.023589831 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.024902128 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024891428 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.020464537 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.028765252 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021468336 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.022306809 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.021231788 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021058677 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.024910155 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.020979662 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.022914897 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.022591631 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.021710843 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.022026595 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.023320979 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022065701 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.022264208 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.023719831 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.022173919 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.021362643 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028124635 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.022105894 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.022732677 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.021117116 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.023689342 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.021349088 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021863629 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027619408 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.021797212 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.021289797 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020916315 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.022994365 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.022382953 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.02252423 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.022946591 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.020734267 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.020428916 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.022435939 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.02466177 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.02131535 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.004745889 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.025048528 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.021259395 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.020997775 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.021170359 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.024149989 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.028345077 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.023180435 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.023643754 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.022255432 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.02244408 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.02095128 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.0221863 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.022908202 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.021451187 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.023228693 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.028025917 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.028605235 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.022380539 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.021268697 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.02248033 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.027736147 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.023211002 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.021133801 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.020442698 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.022874335 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.025633962 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.023094802 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.024000817 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023689598 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.02185649 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.022927526 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.028075545 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.021653928 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.023736441 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.021596854 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021987807 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.022442116 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.02156424 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.025273946 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.022705669 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.028477218 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.022067506 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.024144083 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.021928277 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022556748 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021780275 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.028563046 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.023249509 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.024253909 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.022960357 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.02360218 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.020549115 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.020061622 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.020991152 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.020633871 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.020381306 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.02230548 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.028253147 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.021964215 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.02114508 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022032201 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.029863897 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.024109189 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.003464758 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.022360933 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.023816312 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.022558103 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.022474108 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.028383671 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.022125868 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.027263628 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.024621995 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.021519368 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.020740831 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.021311297 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.00359974 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.020478769 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.020974671 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.021334553 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.022570095 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.023964109 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.022670089 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.02050833 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.022093652 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.022630125 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.02066725 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.021507894 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.022043537 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.021582734 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.021417968 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.021119824 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.023244377 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.022167717 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.021796744 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.02190383 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024033256 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.023932253 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.021352039 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.021725003 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.023058363 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024631137 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.022368006 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.022593986 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.023125803 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.020293809 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.022658012 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.023105044 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.02087465 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.021392073 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.022061476 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.022877662 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.02306479 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.022899549 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.02080633 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.022603964 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020648696 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.0202568 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.028675838 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.020538082 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022973273 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.023281925 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.021877394 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.003456378 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.002985688 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.021746342 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.023694141 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.021889036 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.021802014 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.021516007 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.021574631 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.023395688 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024960292 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.021572303 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.022449781 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.023863979 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.022099388 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.02047494 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.021250715 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.023974021 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.020358597 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.022096609 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.022815941 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.023530982 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.00433024 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.023233109 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.020026675 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.022373456 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.021013728 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.023262495 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.021517544 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021679169 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.020371864 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022771022 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02746846 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.021352584 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023026156 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.022284502 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.021052217 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021580026 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.021980234 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.022529881 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.022550401 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.022166355 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.020664537 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.024100767 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.020155294 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.023051517 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020658939 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021886076 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.021740957 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.02133196 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.021141262 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.022429758 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.021082687 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.029434855 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.022647549 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.021637922 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.027519109 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.027555172 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.020432834 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.021263275 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.027430852 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.021634997 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.022133473 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.022518766 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027584303 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.022977879 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.021543954 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.021750279 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.024536071 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.024149009 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.022730663 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.019792066 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.022151785 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.022303129 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.023370521 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.02107924 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.019915871 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.022182256 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.023380248 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.024075644 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.022570759 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.022629082 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.021235376 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.02274894 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.021639563 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.024189919 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022896052 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.020769244 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.022857114 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024689284 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.023136372 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.021430077 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.023056468 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.027438237 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.020724725 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.021549853 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.02119295 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021894983 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.022245116 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.022541905 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.021982593 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.023321483 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.021888337 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.023858325 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.021095688 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.028338874 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.020914341 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.021470878 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.020354671 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.029203466 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.021611582 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.019671891 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.021279039 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.022547997 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.022330394 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.023283288 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.020318838 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.022083573 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.02010045 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.022642618 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.027018059 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.024529456 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.022864222 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.022808075 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021245874 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021862092 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.02123276 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.021735022 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.021834834 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.022168126 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.022318837 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020707025 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.022028424 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.021063968 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026552361 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.020094534 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.021693586 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.01989321 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022610279 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.020085999 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.022686129 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.022677826 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.021953726 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.021110889 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.023000674 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.022679001 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.021559974 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021547257 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.021500492 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.022066847 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.021073316 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.021218913 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.020413907 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.019915511 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.022561231 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.022247797 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.021479254 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.023918086 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.022995558 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.021264304 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.022826441 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.02109299 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.022678359 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.023409513 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.024178318 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.024459887 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.023159741 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.021836546 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.022157547 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021303799 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.026539474 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.022216789 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020872852 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021451857 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.022344761 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.021432155 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.022166506 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.020299203 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.022744018 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.009314481 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.021139388 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.022103148 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.021892089 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.024120773 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022979348 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021660876 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.022393112 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020987161 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020632252 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020732614 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.021154904 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.021388097 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020912257 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.02641984 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.021178134 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.021432384 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.026479203 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.023348271 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022878879 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.022717797 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.02092692 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.021628379 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.02419528 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.027221634 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.021628256 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.02266562 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.022103263 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022753282 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021345779 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.023608401 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020684856 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022957838 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.022033891 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021874689 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021107139 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.01979921 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.022642654 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.021973554 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.021662257 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.021620934 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022942105 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.020401441 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.020767848 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021711812 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022628087 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.021275021 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.021669539 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.022379481 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.021852706 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.020800066 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.021133239 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.021066077 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021772169 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026852438 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.020287136 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.022238621 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.02163115 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.02065375 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.021042235 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.020754937 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.023576305 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.019992822 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.020148599 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.027220474 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.022428561 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020807733 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.020203339 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.022521994 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.02192096 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.020931056 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.022505219 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.023242924 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.020864854 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.021940496 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.01986985 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.023592558 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.02015563 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.022923638 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.020992358 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.020743942 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022164493 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.021669779 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.020275837 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.020105083 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.021235717 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.023508388 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.022304582 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.021870409 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.022013976 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.0211361 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.022457265 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.01981972 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.022330464 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.022590751 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.027469907 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.023135159 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.020995336 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.020948869 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.027196793 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.021077556 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.022029135 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.022741493 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020950274 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.020938647 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020881438 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.00413818 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.02361948 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.02092577 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.02216876 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.021090271 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.023405579 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.023050198 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.021140343 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.01938729 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.0209642 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.020826848 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.021091613 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022871694 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.022451621 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.021460565 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021896473 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.003311221 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.01996333 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.020940816 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.021099702 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.0210443 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021098676 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021928534 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021757965 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020982152 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.019975347 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.020683428 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003248058 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.021015307 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.022055002 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.021523058 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.021067063 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.021780403 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.020881636 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.021960883 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.021592352 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.021720755 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.026741616 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.003746191 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.02014134 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.02253798 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.022779733 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.02096376 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020970601 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.020641019 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.021438761 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.020973704 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.021062773 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.020500765 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.021172671 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.02151187 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.020975281 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027036349 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.021944783 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.019966877 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021032907 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.020754319 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.021030848 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.021742252 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.023900369 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.020984837 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.021894312 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.020881252 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.020569182 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022507648 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027045843 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.023129313 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.023319204 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.021557428 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.019753529 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.022965912 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.020951796 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.020847169 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.022096014 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.028565497 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.019936591 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020918667 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021333904 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021245761 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.02074043 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.022245242 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.020501252 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.021121564 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.02072687 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.02249514 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.021236382 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.021881553 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.020692535 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.026115742 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.021827122 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.021075534 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.020685986 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.022164758 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.02116849 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020922968 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.022364341 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.027153195 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.022458591 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.020068831 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.023391664 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.019791881 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.022511715 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.008723469 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.023402769 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.020232678 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.0221032 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.026856266 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.021618053 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.021035408 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.021989337 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.021372197 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.020869543 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020782836 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.021475302 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020979862 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.022396404 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.020927583 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.020068958 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.021231623 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.026706402 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.02075796 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.019615546 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022677059 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.024244156 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.021111807 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.023523923 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.023665531 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.020252764 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021868558 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.023441067 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.026394339 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.023933474 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.021788609 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.020393608 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.019595532 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.021114206 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.022850954 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.004072693 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.02217576 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.009272234 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.020165942 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.020458234 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.023397424 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.021454167 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.004193555 seconds)
  done (took 14.096776983 seconds)
done (took 43.852249306 seconds)
(9/22) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.019713999 seconds)
    (2/7) benchmarking "month"...
    done (took 0.019141366 seconds)
    (3/7) benchmarking "year"...
    done (took 0.019222482 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 0.020414797 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.021754568 seconds)
    (6/7) benchmarking "minute"...
    done (took 0.021548519 seconds)
    (7/7) benchmarking "second"...
    done (took 0.021812143 seconds)
  done (took 1.209865816 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 0.021746893 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.498619138 seconds)
    (3/9) benchmarking "Date"...
    done (took 0.021668767 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.026347569 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.291451351 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.196763061 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 0.202598969 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.026396471 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.026319555 seconds)
  done (took 2.378489034 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 0.021014101 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.021881454 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.021741344 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.023489704 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.04009298 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.020566039 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.023221916 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.020412434 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.021466073 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.027608934 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 0.022468215 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 0.020863728 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.029542969 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.025777328 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.024266949 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.021396092 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.021549192 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.02311857 seconds)
  done (took 1.505656017 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 0.042573898 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.023206069 seconds)
  done (took 1.144501023 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.020050826 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.0210028 seconds)
  done (took 1.110441105 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 0.019893879 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.159133981 seconds)
  done (took 1.249813877 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 0.037833118 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 0.021200326 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 0.021219256 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 0.021309741 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 0.031272088 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 0.034234594 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 0.033937861 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 0.021081216 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.021186855 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.020582526 seconds)
  done (took 1.338592135 seconds)
done (took 11.021148848 seconds)
(10/22) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 0.091344562 seconds)
  (2/4) benchmarking "strings"...
  done (took 0.124100609 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 0.059135049 seconds)
  (4/4) benchmarking "arrays"...
  done (took 0.082318519 seconds)
done (took 1.430429392 seconds)
(11/22) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.04224048 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.040689409 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040945214 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028843047 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.056050493 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.0388739 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.041156445 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 1.6288e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.041047665 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.057280136 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.1107e-5 seconds)
  done (took 1.456258756 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.041352032 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.04075475 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.041075413 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.03140119 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.051884513 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.027536184 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.041001695 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 1.6189e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.041098849 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.05258901 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.4685e-5 seconds)
  done (took 1.443152385 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.087115588 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084884684 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084460559 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.090720875 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.08619453 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.027498193 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.7751e-5 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082514006 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08346013 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.4969e-5 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.088637091 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.083909135 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 0.01984574 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.086304144 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.7059e-5 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 1.0448e-5 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.287e-5 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 7.272e-6 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.08661392 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082971357 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.4584e-5 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.1779e-5 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.0433e-5 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.4485e-5 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 6.949e-6 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 6.199e-6 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 6.594e-6 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.325e-5 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 8.501e-6 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08196155 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082434402 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.3638e-5 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.5307e-5 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 9.034e-6 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 8.306e-6 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 7.207e-6 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.1178e-5 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 1.0526e-5 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 9.553e-6 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 8.828e-6 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.0083e-5 seconds)
  done (took 2.31852955 seconds)
done (took 6.293993824 seconds)
(12/22) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.024027545 seconds)
    (2/2) benchmarking "read"...
    done (took 0.030080524 seconds)
  done (took 1.132123722 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 0.240949814 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.879957419 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.742001501 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.896977771 seconds)
  done (took 4.604392041 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.90583829 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.111413922 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.055933416 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.037846779 seconds)
  done (took 2.226075267 seconds)
done (took 9.290751005 seconds)
(13/22) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.073509522 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.022405287 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.021019309 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.020817368 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.021153289 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.02102192 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.023257896 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.022698882 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.022395449 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.021189475 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.021141527 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.023296185 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.021468155 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.022016866 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.021774606 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023725219 seconds)
  done (took 1.54345414 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.14521999 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.23390379 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.912049638 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.039783296 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.083340198 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.028634246 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.144518301 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.023051034 seconds)
  done (took 4.70192331 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.023566356 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 0.022038994 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.025102139 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 0.020615266 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 0.022508356 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.024146254 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.022384847 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 0.023779098 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.020278987 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.021777927 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.022356332 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 0.022205781 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.023845099 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.023238881 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.022531917 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.026371666 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 0.022986185 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.022905495 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.027050618 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 0.02312521 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.023851249 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 0.023164523 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.022068463 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.028233143 seconds)
  done (took 1.65345144 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 0.021649064 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 0.045865042 seconds)
  done (took 1.160463382 seconds)
done (took 10.150746232 seconds)
(14/22) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.023705417 seconds)
    (2/2) benchmarking "String"...
    done (took 0.023774929 seconds)
  done (took 1.138367032 seconds)
  (2/7) benchmarking "join"...
  done (took 0.301139685 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 0.041392047 seconds)
    (2/4) benchmarking "different"...
    done (took 9.817e-6 seconds)
    (3/4) benchmarking "identical"...
    done (took 0.021832698 seconds)
    (4/4) benchmarking "different length"...
    done (took 1.9691e-5 seconds)
  done (took 1.175877303 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020970263 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 0.148253153 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 0.00023277 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 4.938e-6 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.000902091 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 9.494e-6 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 4.18e-6 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 0.000576995 seconds)
  done (took 1.244130943 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.023156397 seconds)
    (2/3) benchmarking "different"...
    done (took 9.199e-6 seconds)
    (3/3) benchmarking "different length"...
    done (took 4.164e-6 seconds)
  done (took 1.117500344 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.037645994 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.025025903 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021408429 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021385881 seconds)
  done (took 1.19719222 seconds)
done (took 7.292419087 seconds)
(15/22) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.023538316 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.022014522 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.030447397 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.0253546 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.022542568 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.030223507 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.03016584 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.021541213 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.039228942 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.057099454 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.0343e-5 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.034281028 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.021684554 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.03438957 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.025664918 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.030231759 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.021855477 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.1436e-5 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.021724768 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.969e-5 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.029842596 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.022200242 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.02332681 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.2498e-5 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.1253e-5 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.033166426 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.9069e-5 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.0845e-5 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.2764e-5 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 8.961e-6 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.0969e-5 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.0211547 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.1533e-5 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 9.963e-6 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.5748e-5 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 6.533e-6 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 6.042e-6 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 5.308e-6 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.020193604 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.0983e-5 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 1.6029e-5 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.01995698 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 3.8051e-5 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 8.428e-6 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.5116e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 9.477e-6 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.0312e-5 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 6.338e-6 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.2438e-5 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.0491e-5 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.2805e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 6.426e-6 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.1436e-5 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.022184693 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.02998599 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.5039e-5 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.0075e-5 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.6712e-5 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.0239e-5 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 9.883e-6 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.022868778 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.022187389 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.2724e-5 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.5723e-5 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.2911e-5 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 8.411e-6 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.4287e-5 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.1754e-5 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 9.532e-6 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.02777003 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026987518 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.2109e-5 seconds)
  done (took 1.90371612 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.032927405 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.035700429 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.020662315 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.019886692 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.019895656 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.02220808 seconds)
  done (took 1.249524933 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.02247909 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021503583 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.025545027 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.034949448 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.02186802 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.040933009 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.021491465 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021488133 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.025472315 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.026549433 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021266181 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.021704186 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020831422 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.033034105 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025222277 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.02244882 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022035818 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024722582 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.051954319 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.024623546 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.021483782 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.024558107 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.034274796 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.024466209 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022359636 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.039562543 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.021616897 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.024656376 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021050965 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029553687 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.03544881 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.024460237 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.025651949 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.028804138 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.02322366 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.031895714 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.03746035 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.03332373 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.05315815 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.033114788 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.021687735 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.049383584 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.062716939 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.039813873 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.034475597 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.020696917 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.02054799 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.021558262 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.025624637 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.021786816 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020554519 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.026078028 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.033493306 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.031004065 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.019744915 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.030679284 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023312752 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.031819373 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022728876 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.021702116 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021518884 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.022207857 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.022141574 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.022293548 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.026103181 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.029480338 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.033767476 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.024605387 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.022373618 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.024006868 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021226522 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.032344929 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.021180059 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.024504758 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.021721825 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023805367 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.035143699 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.022658168 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.024745293 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.022121416 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.033873605 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.044609783 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.021567376 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024309524 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.029807399 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.01937788 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.028311281 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.035304889 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.021832224 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.025634581 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.022588014 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.020199862 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.022190073 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.049013905 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.034739709 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.033465549 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.030213686 seconds)
  done (took 3.791626106 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.053826966 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.035584623 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034563106 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.031979849 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.020002692 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.021485977 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.021345077 seconds)
  done (took 1.327266701 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.030102776 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.047142977 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.031767982 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.04369803 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.040479333 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.036598176 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.049837245 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.045809528 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.028521493 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.6183e-5 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.034334163 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.032964672 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.030892575 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.025629712 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.002469973 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.048467035 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.032319065 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.033651614 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 1.967e-5 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.047403539 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.035211795 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.048080625 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.020815078 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.039250234 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.023616921 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.035986903 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.8122e-5 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.0361823 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.02345537 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 3.9425e-5 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.001054798 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.035991893 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.4588e-5 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.661e-5 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.032609935 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.039847712 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.033322838 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.3482e-5 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.036049542 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.0247176 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.024617516 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.030596618 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 3.6061e-5 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 7.331e-6 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 7.1779e-5 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.040353786 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.3718e-5 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 9.8342e-5 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.005552096 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 7.905e-6 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 9.852e-6 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001068997 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 4.9925e-5 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 8.882e-6 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.2154e-5 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 6.748e-6 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.4977e-5 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.025005301 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.8221e-5 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001069689 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.3726e-5 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 9.547e-6 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.3549e-5 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.033500759 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 7.3923e-5 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 1.013e-5 seconds)
  done (took 2.37666752 seconds)
done (took 11.742639712 seconds)
(16/22) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.03760503 seconds)
  (2/8) benchmarking "mandel"...
  done (took 0.104342649 seconds)
  (3/8) benchmarking "pisum"...
  done (took 0.059397601 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 0.125213157 seconds)
  (5/8) benchmarking "printfd"...
  done (took 0.143534335 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 0.455003932 seconds)
  (7/8) benchmarking "fib"...
  done (took 0.023620469 seconds)
  (8/8) benchmarking "parseint"...
  done (took 0.038777334 seconds)
done (took 2.104541877 seconds)
(17/22) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.050324252 seconds)
    (2/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.106652233 seconds)
    (3/9) benchmarking (5, "tup_tup")...
    done (took 0.02279592 seconds)
    (4/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.030269138 seconds)
    (5/9) benchmarking (3, "scal_tup")...
    done (took 0.024355923 seconds)
    (6/9) benchmarking (10, "tup_tup")...
    done (took 0.024483552 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.026965469 seconds)
    (8/9) benchmarking (10, "scal_tup")...
    done (took 0.029728432 seconds)
    (9/9) benchmarking (3, "tup_tup")...
    done (took 0.020905192 seconds)
  done (took 1.501420806 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.189360413 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.274905244 seconds)
    (3/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.333405318 seconds)
  done (took 1.920882579 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 3)...
    done (took 0.065881851 seconds)
    (2/6) benchmarking ("tuple", 5)...
    done (took 0.039099788 seconds)
    (3/6) benchmarking ("array", 5)...
    done (took 1.6305e-5 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.049252984 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.3892e-5 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.034359358 seconds)
  done (took 1.31636812 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.241305828 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.074754113 seconds)
    (3/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.098216725 seconds)
    (4/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.115722183 seconds)
  done (took 1.655994545 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.159449904 seconds)
    (2/4) benchmarking ("(10000000,)", 1)...
    done (took 0.108490627 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.283594599 seconds)
    (4/4) benchmarking ("(10000000,)", 2)...
    done (took 0.163712373 seconds)
  done (took 1.850450951 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.061048419 seconds)
done (took 9.427795564 seconds)
(18/22) benchmarking "parallel"...
done (took 1.137087304 seconds)
(19/22) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.094371455 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.059181699 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.02757319 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.048750982 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.036993549 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.11876072 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.102370596 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.03600635 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019705628 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.032329971 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.046342383 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.036768547 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.020524599 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.051858398 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.042227132 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.028640786 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.032815178 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.031612783 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.021947342 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.026798661 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.02747629 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.023830586 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020551218 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.021104396 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.033548707 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.02345563 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.028191264 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 0.020972213 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.027492228 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.027894748 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.030980649 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.031746683 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.020100753 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.042008215 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.055700535 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.021190215 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.027786616 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.0542e-5 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.034387378 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.06806775 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.9153e-5 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.037577835 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.020048363 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.102391782 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.069257289 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.021411372 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.071587392 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.058871103 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.039775482 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.028291826 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.038758137 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.039460542 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.026156876 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.025900155 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.025360628 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.029683441 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.023995748 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.02987908 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.020771323 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.051684556 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.020830109 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.056532508 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.036806469 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.025788562 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.6214e-5 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.020686781 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.038748403 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.028471716 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026271217 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.02725613 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.027282345 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.019746748 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.026353761 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.031365468 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041800132 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.030344196 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.046899368 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.025861225 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.032742978 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.026642359 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.026972439 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.039661493 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.041545017 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.03270493 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.058518752 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.020976018 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.03378877 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.029514029 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.5318e-5 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.036651218 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.1436e-5 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.055746242 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.034426816 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.029042237 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.031853271 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.029524166 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.028981566 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037679358 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.019925063 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036933613 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.020883598 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.032144361 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.027338006 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.035886942 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.104e-5 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.030053287 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.025367123 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.0638e-5 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.2629e-5 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.053039989 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.027761356 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.035034357 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.031781519 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.021541413 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.028730063 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020861834 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.037096169 seconds)
  done (took 5.036377983 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.033468581 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.052459238 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.137456906 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.02377369 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.09476349 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.0688361 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.039316859 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.107825516 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.04075934 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.170723491 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.041234386 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.145437967 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.151018555 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.041934772 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.026368591 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.041839669 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.021839185 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.093139296 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.027589751 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.023439882 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.028516848 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.042109423 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.022095276 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.022744953 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.02174679 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.022210752 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 0.045872903 seconds)
  done (took 2.736083924 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.035620927 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.03460972 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.027099964 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.040610563 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.023849442 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.033668246 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.027964632 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.032371206 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.037179705 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.023852915 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.037950385 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.022636941 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019911447 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.064863891 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.027845794 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.02808736 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.028590944 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019827799 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.023683077 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.022419128 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.029037108 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.029454917 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.055852339 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 0.02622956 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.5438e-5 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.02221741 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.037850984 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.034483279 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.021971025 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 4.0893e-5 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021488569 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019855108 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.02280665 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.029385345 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.022141242 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.024710611 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.021469836 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.8476e-5 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019575386 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.021341193 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.023226796 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.039194104 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.021031109 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.026801194 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.036066205 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 3.3946e-5 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.036090072 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.033433461 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.024575942 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.044502501 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.031937313 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021413668 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 5.952e-5 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.6726e-5 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023989019 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.0211252 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 5.8216e-5 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.034279578 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.025256583 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020702954 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 5.6942e-5 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.040058666 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.022222773 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.039853346 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.034081527 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.022651464 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 5.2604e-5 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000133852 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.028061341 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.8038e-5 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.2717e-5 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 3.4973e-5 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.039246131 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.027247447 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.040055329 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.024462723 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.025332538 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.028685974 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.7322e-5 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.036433399 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.030031737 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.1943e-5 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.021325127 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.9124e-5 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 3.1906e-5 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.02893014 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024789504 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.033873944 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.489e-5 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.7288e-5 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.042002075 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 6.2889e-5 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.025956391 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.5621e-5 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.022370952 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 4.1734e-5 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.5494e-5 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.038434864 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 4.7093e-5 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.1148e-5 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.3432e-5 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.039467448 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.1065e-5 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.3924e-5 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.4343e-5 seconds)
  done (took 3.403182069 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.034170036 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.032526118 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.057254632 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.037439072 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.048129661 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.038444593 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.021778818 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.032704748 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.022262387 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.026193588 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.021937189 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.022245065 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.045098433 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.03981909 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 0.046366796 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.035399541 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.032938683 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.051339581 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.022035192 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.044887833 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.04753694 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.033658491 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.041114529 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.037746133 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.031939853 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.049075778 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.038490568 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.041787715 seconds)
  done (took 2.190929881 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.027674886 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.027987803 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.024138971 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.028701942 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.03041425 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.031887113 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.031659886 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.022380368 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027125435 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022931474 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.030052354 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028698395 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.026874039 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.0242277 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.032703897 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.027506367 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.030396132 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.023494699 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.027013454 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028578157 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.023419644 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.028009822 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.030697722 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.030017472 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.030431112 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.026940871 seconds)
  done (took 1.881154636 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.024641549 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.029071271 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.03159663 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.032339226 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.039147623 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.071803971 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.039984714 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.033434579 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.021105714 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.032912206 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.005858322 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.02220345 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.036110317 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.025947246 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.023335313 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.004921525 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.021593083 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.012690835 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 0.028373314 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.022054157 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.023479181 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.012147829 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.005574093 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.013369734 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.013538496 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 3.0721e-5 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.031239866 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.027683298 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.028725321 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.009255124 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.003534851 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.012129785 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.02240897 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.012833185 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005605524 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.010080494 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.9646e-5 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003536614 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.012578185 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.008556071 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008493673 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 3.0511e-5 seconds)
  done (took 1.978132532 seconds)
done (took 18.354858784 seconds)
(20/22) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.120644617 seconds)
  (2/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.075142553 seconds)
  (3/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 3.3569e-5 seconds)
  (4/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 0.030723319 seconds)
  (5/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 0.09541372 seconds)
  (6/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 0.065622337 seconds)
  (7/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.06298323 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.113997501 seconds)
  (9/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 0.065474156 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 0.079651083 seconds)
  (11/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 0.077525719 seconds)
  (12/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.112779332 seconds)
  (13/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 0.095178106 seconds)
  (14/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 0.050941328 seconds)
  (15/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 0.063616447 seconds)
  (16/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 0.068298568 seconds)
  (17/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.6205e-5 seconds)
  (18/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 0.06342304 seconds)
  (19/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 0.055764227 seconds)
  (20/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.106e-5 seconds)
  (21/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.066879381 seconds)
  (22/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.037596166 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 0.089360109 seconds)
  (24/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 0.040909703 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 0.05962424 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 0.088886547 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 0.057444652 seconds)
  (28/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.028784959 seconds)
  (29/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 0.046213183 seconds)
  (30/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 3.4053e-5 seconds)
  (31/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 0.055675188 seconds)
  (32/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.033150579 seconds)
  (33/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 0.026665501 seconds)
  (34/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.057801128 seconds)
  (35/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 0.060277632 seconds)
  (36/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 0.037220018 seconds)
  (37/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 0.038589013 seconds)
  (38/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 0.085400274 seconds)
  (39/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 0.074950878 seconds)
  (40/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.9986e-5 seconds)
  (41/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 0.031083449 seconds)
  (42/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 0.07453279 seconds)
  (43/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.047261111 seconds)
  (44/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 0.052160907 seconds)
  (45/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.055137931 seconds)
  (46/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.074291349 seconds)
  (47/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 0.062874616 seconds)
  (48/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 0.042852021 seconds)
  (49/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 0.049418607 seconds)
  (50/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 0.071566306 seconds)
  (51/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 3.3675e-5 seconds)
  (52/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 0.057103704 seconds)
  (53/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.447e-5 seconds)
  (54/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.028503655 seconds)
  (55/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.064187656 seconds)
  (56/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 0.071961085 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 0.066996977 seconds)
  (58/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 0.076108865 seconds)
  (59/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.065040544 seconds)
  (60/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 0.069343311 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.2784e-5 seconds)
  (62/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.033346885 seconds)
  (63/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 0.046482488 seconds)
  (64/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 0.06567324 seconds)
  (65/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 0.046527725 seconds)
  (66/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.9907e-5 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 0.068499674 seconds)
  (68/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 3.0788e-5 seconds)
  (69/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 0.038502773 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 0.061503607 seconds)
  (71/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 3.2772e-5 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 0.077450972 seconds)
  (73/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 0.063542574 seconds)
  (74/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.4453e-5 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.049993314 seconds)
  (76/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 3.648e-5 seconds)
  (77/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 0.037046975 seconds)
  (78/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 0.063612279 seconds)
  (79/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 0.052505748 seconds)
  (80/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.526e-5 seconds)
  (81/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.1856e-5 seconds)
  (82/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.4799e-5 seconds)
  (83/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 0.059218386 seconds)
  (84/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.8028e-5 seconds)
  (85/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.032307875 seconds)
  (86/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 3.0551e-5 seconds)
  (87/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 3.1615e-5 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 0.042444768 seconds)
  (89/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.2857e-5 seconds)
  (90/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 0.053583501 seconds)
  (91/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 0.052742742 seconds)
  (92/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 0.030834078 seconds)
  (93/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.035272363 seconds)
  (94/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 0.03847875 seconds)
  (95/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.028528028 seconds)
  (96/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 4.0552e-5 seconds)
  (97/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 0.080790019 seconds)
  (98/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 4.0453e-5 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.08409343 seconds)
  (100/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 0.027298871 seconds)
  (101/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.3726e-5 seconds)
  (102/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 0.037787145 seconds)
  (103/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 3.2721e-5 seconds)
  (104/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.009693896 seconds)
  (105/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 4.7997e-5 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 0.055182512 seconds)
  (107/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.8415e-5 seconds)
  (108/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 0.085317166 seconds)
  (109/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.035971561 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.044936906 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.6235e-5 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 0.078188631 seconds)
  (113/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.0266086 seconds)
  (114/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 0.051955419 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 4.4218e-5 seconds)
  (116/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.1782e-5 seconds)
  (117/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 1.9642e-5 seconds)
  (118/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 0.06937103 seconds)
  (119/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 0.063313927 seconds)
  (120/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 0.055351423 seconds)
  (121/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.297e-5 seconds)
  (122/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 0.056929637 seconds)
  (123/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 3.2657e-5 seconds)
  (124/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.032631377 seconds)
  (125/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 0.026336559 seconds)
  (126/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 0.055724189 seconds)
  (127/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 3.2602e-5 seconds)
  (128/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.085565055 seconds)
  (129/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.063491031 seconds)
  (130/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.4495e-5 seconds)
  (131/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 0.048974248 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 0.063479009 seconds)
  (133/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 3.8579e-5 seconds)
  (134/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.061369067 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 0.060921706 seconds)
  (136/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.2215e-5 seconds)
  (137/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 0.029218802 seconds)
  (138/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 4.4969e-5 seconds)
  (139/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 0.062304975 seconds)
  (140/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 0.056454119 seconds)
  (141/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.063667865 seconds)
  (142/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.058717962 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 0.048188956 seconds)
  (144/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 0.070026611 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.074216876 seconds)
  (146/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 0.073750228 seconds)
  (147/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 0.046512466 seconds)
  (148/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.056215024 seconds)
  (149/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.060016208 seconds)
  (150/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 4.1958e-5 seconds)
  (151/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.3211e-5 seconds)
  (152/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.07301087 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.053795092 seconds)
  (154/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 0.064606865 seconds)
  (155/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 0.047921376 seconds)
  (156/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.064428987 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 4.1225e-5 seconds)
  (158/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.5353e-5 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 0.046989182 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 5.5004e-5 seconds)
  (161/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 0.060033556 seconds)
  (162/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 4.5382e-5 seconds)
  (163/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.8387e-5 seconds)
  (164/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 0.085364083 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 3.193e-5 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 3.4299e-5 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 3.565e-5 seconds)
  (168/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.2242e-5 seconds)
  (169/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 0.075358343 seconds)
  (170/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 6.3991e-5 seconds)
  (171/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.9204e-5 seconds)
  (172/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 3.2089e-5 seconds)
  (173/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.9143e-5 seconds)
  (174/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.066536113 seconds)
  (175/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.7696e-5 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.0212e-5 seconds)
  (177/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 3.7995e-5 seconds)
  (178/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.6993e-5 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.6765e-5 seconds)
  (180/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 0.063700619 seconds)
  (181/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.2553e-5 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 0.066612206 seconds)
  (183/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.035965584 seconds)
  (184/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 4.9733e-5 seconds)
  (185/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.3979e-5 seconds)
  (186/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.031921728 seconds)
  (187/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 4.1806e-5 seconds)
  (188/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 0.028143218 seconds)
  (189/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 0.0282293 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 3.6546e-5 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.466e-5 seconds)
  (192/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 0.038829089 seconds)
  (193/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.072304792 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 4.0379e-5 seconds)
  (195/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.063582961 seconds)
  (196/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.033149204 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 0.046971375 seconds)
  (198/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.9473e-5 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 0.06284267 seconds)
  (200/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 0.04999501 seconds)
  (201/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.2486e-5 seconds)
  (202/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 0.054846852 seconds)
  (203/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 0.029058507 seconds)
  (204/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 3.6177e-5 seconds)
  (205/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 0.031755368 seconds)
  (206/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 4.5925e-5 seconds)
  (207/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 0.046641315 seconds)
  (208/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 4.2892e-5 seconds)
  (209/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.5066e-5 seconds)
  (210/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.8374e-5 seconds)
  (211/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.0932e-5 seconds)
  (212/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.846e-5 seconds)
  (213/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 0.054071661 seconds)
  (214/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.5507e-5 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.8631e-5 seconds)
  (216/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.0993e-5 seconds)
  (217/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 0.068271735 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.6108e-5 seconds)
  (219/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.2919e-5 seconds)
  (220/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.057865707 seconds)
  (221/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 3.4204e-5 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.4886e-5 seconds)
  (223/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.1811e-5 seconds)
  (224/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 4.0813e-5 seconds)
  (225/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.6705e-5 seconds)
  (226/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 0.061671952 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 0.060665849 seconds)
  (228/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 3.0972e-5 seconds)
  (229/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.1936e-5 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 0.074019252 seconds)
  (231/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 3.081e-5 seconds)
  (232/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.6892e-5 seconds)
  (233/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 3.014e-5 seconds)
  (234/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.2749e-5 seconds)
  (235/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.1428e-5 seconds)
  (236/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.7278e-5 seconds)
  (237/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.2283e-5 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 0.067364985 seconds)
  (239/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 3.338e-5 seconds)
  (240/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 0.055169584 seconds)
  (241/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 3.2394e-5 seconds)
  (242/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.037446366 seconds)
  (243/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 4.4954e-5 seconds)
  (244/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 0.065453385 seconds)
  (245/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 3.0761e-5 seconds)
  (246/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.536e-5 seconds)
  (247/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.8791e-5 seconds)
  (248/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.1466e-5 seconds)
  (249/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.9228e-5 seconds)
  (250/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.7632e-5 seconds)
  (251/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 0.075186245 seconds)
  (252/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 4.4156e-5 seconds)
  (253/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.9277e-5 seconds)
  (254/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 1.9635e-5 seconds)
  (255/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.9788e-5 seconds)
  (256/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 3.3915e-5 seconds)
  (257/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.4178e-5 seconds)
  (258/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.5243e-5 seconds)
  (259/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 0.047110939 seconds)
  (260/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 3.3877e-5 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.3394e-5 seconds)
  (262/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 0.0642864 seconds)
  (263/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 5.3787e-5 seconds)
  (264/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.183e-5 seconds)
  (265/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.7288e-5 seconds)
  (266/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.5772e-5 seconds)
  (267/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 0.064165036 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 3.3928e-5 seconds)
  (269/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 0.03043628 seconds)
  (270/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.029399821 seconds)
  (271/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 3.5847e-5 seconds)
  (272/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.6838e-5 seconds)
  (273/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.6696e-5 seconds)
  (274/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.3829e-5 seconds)
  (275/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.063661988 seconds)
  (276/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 0.026008392 seconds)
  (277/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 5.1198e-5 seconds)
  (278/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 0.04826056 seconds)
  (279/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 3.033e-5 seconds)
  (280/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 3.0186e-5 seconds)
  (281/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.4037e-5 seconds)
  (282/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.8199e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 1.772e-5 seconds)
  (284/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.7154e-5 seconds)
  (285/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 0.070972913 seconds)
  (286/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 3.495e-5 seconds)
  (287/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.4045e-5 seconds)
  (288/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.705e-5 seconds)
  (289/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 1.8707e-5 seconds)
  (290/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.8624e-5 seconds)
  (291/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 1.7067e-5 seconds)
  (292/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 0.03109735 seconds)
  (293/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 4.1779e-5 seconds)
  (294/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.5282e-5 seconds)
  (295/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.8459e-5 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.17e-5 seconds)
  (297/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.6097e-5 seconds)
  (298/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.9166e-5 seconds)
  (299/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.1584e-5 seconds)
  (300/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 3.1459e-5 seconds)
  (301/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.8146e-5 seconds)
  (302/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.0843e-5 seconds)
  (303/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.033364818 seconds)
  (304/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 3.7955e-5 seconds)
  (305/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.4852e-5 seconds)
  (306/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.1028e-5 seconds)
  (307/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.1276e-5 seconds)
  (308/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 0.05995757 seconds)
  (309/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 4.6025e-5 seconds)
  (310/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 3.7787e-5 seconds)
  (311/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.7348e-5 seconds)
  (312/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 3.143e-5 seconds)
  (313/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 1.9499e-5 seconds)
  (314/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.41e-5 seconds)
  (315/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.7868e-5 seconds)
  (316/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.7397e-5 seconds)
  (317/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 0.052823439 seconds)
  (318/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 3.5259e-5 seconds)
  (319/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.403e-5 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.5212e-5 seconds)
  (321/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.6385e-5 seconds)
  (322/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 6.243e-5 seconds)
  (323/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.6379e-5 seconds)
  (324/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.8914e-5 seconds)
  (325/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.4984e-5 seconds)
  (326/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.3507e-5 seconds)
  (327/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 1.6259e-5 seconds)
  (328/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.4534e-5 seconds)
  (329/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.4563e-5 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.3982e-5 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.0202e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.1005e-5 seconds)
  (333/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.5641e-5 seconds)
  (334/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.6741e-5 seconds)
  (335/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.3346e-5 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.0927e-5 seconds)
  (337/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 0.054000074 seconds)
  (338/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 4.6826e-5 seconds)
  (339/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 1.9546e-5 seconds)
  (340/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.0566e-5 seconds)
  (341/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.0586e-5 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.5057e-5 seconds)
  (343/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.4926e-5 seconds)
  (344/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.9304e-5 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.2689e-5 seconds)
  (346/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.0808e-5 seconds)
  (347/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.2875e-5 seconds)
  (348/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 1.5624e-5 seconds)
  (349/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.0309e-5 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 1.5374e-5 seconds)
  (351/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.7635e-5 seconds)
  (352/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 1.9177e-5 seconds)
  (353/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 1.7186e-5 seconds)
  (354/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.5194e-5 seconds)
  (355/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 0.058520699 seconds)
  (356/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.5057e-5 seconds)
  (357/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.3107e-5 seconds)
  (358/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.1597e-5 seconds)
  (359/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 0.034941579 seconds)
  (360/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 0.036299181 seconds)
  (361/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 3.2444e-5 seconds)
  (362/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.7186e-5 seconds)
  (363/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 0.060262086 seconds)
  (364/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 4.0933e-5 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.8687e-5 seconds)
  (366/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.3933e-5 seconds)
  (367/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.8653e-5 seconds)
  (368/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.2148e-5 seconds)
  (369/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.3421e-5 seconds)
  (370/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.4722e-5 seconds)
  (371/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 4.1437e-5 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.2353e-5 seconds)
  (373/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.1292e-5 seconds)
  (374/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 1.9788e-5 seconds)
  (375/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.6005e-5 seconds)
  (376/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 1.3858e-5 seconds)
  (377/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 0.064747669 seconds)
  (378/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 3.2507e-5 seconds)
  (379/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 5.7656e-5 seconds)
  (380/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.2818e-5 seconds)
  (381/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 0.031914705 seconds)
  (382/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 3.4975e-5 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 3.4467e-5 seconds)
  (384/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 4.059e-5 seconds)
  (385/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.4747e-5 seconds)
  (386/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 1.9838e-5 seconds)
  (387/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 1.9278e-5 seconds)
  (388/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 1.6765e-5 seconds)
  (389/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.2977e-5 seconds)
  (390/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.335e-5 seconds)
  (391/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.6768e-5 seconds)
  (392/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.938e-5 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.071014065 seconds)
  (394/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.6605e-5 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.5407e-5 seconds)
  (396/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 4.4688e-5 seconds)
  (397/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.8357e-5 seconds)
  (398/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 3.0974e-5 seconds)
  (399/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 0.057798601 seconds)
  (400/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.5701e-5 seconds)
  (401/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.8201e-5 seconds)
  (402/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 0.031531829 seconds)
  (403/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 5.2316e-5 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.4034e-5 seconds)
  (405/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 3.7598e-5 seconds)
  (406/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.8255e-5 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 1.9146e-5 seconds)
  (408/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.2629e-5 seconds)
  (409/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 0.034772 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 3.9478e-5 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 3.2244e-5 seconds)
  (412/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 0.072504129 seconds)
  (413/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 3.2325e-5 seconds)
  (414/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.8502e-5 seconds)
  (415/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.0875e-5 seconds)
  (416/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 0.060148168 seconds)
  (417/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.9424e-5 seconds)
  (418/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 3.0543e-5 seconds)
  (419/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.9772e-5 seconds)
  (420/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.2574e-5 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.4142e-5 seconds)
  (422/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.3414e-5 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.7799e-5 seconds)
  (424/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.5712e-5 seconds)
  (425/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 3.1763e-5 seconds)
  (426/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 1.8852e-5 seconds)
  (427/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.010226573 seconds)
  (428/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.9378e-5 seconds)
  (429/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 3.6314e-5 seconds)
  (430/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.0111e-5 seconds)
  (431/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.391e-5 seconds)
  (432/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.5715e-5 seconds)
  (433/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.9149e-5 seconds)
  (434/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.6264e-5 seconds)
  (435/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 3.3051e-5 seconds)
  (436/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.0721e-5 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 1.973e-5 seconds)
  (438/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 1.9971e-5 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.6963e-5 seconds)
  (440/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 3.1544e-5 seconds)
  (441/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 7.3905e-5 seconds)
  (442/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.0344e-5 seconds)
  (443/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.0976e-5 seconds)
  (444/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.3481e-5 seconds)
  (445/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 1.6417e-5 seconds)
  (446/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.1724e-5 seconds)
  (447/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 1.7974e-5 seconds)
  (448/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.756e-5 seconds)
  (449/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.7138e-5 seconds)
  (450/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.5686e-5 seconds)
  (451/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.7162e-5 seconds)
  (452/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.0479e-5 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.5619e-5 seconds)
  (454/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.0163e-5 seconds)
  (455/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 0.076083397 seconds)
  (456/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 3.0137e-5 seconds)
  (457/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 3.9168e-5 seconds)
  (458/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.4611e-5 seconds)
  (459/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.4475e-5 seconds)
  (460/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.7262e-5 seconds)
  (461/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.1061e-5 seconds)
  (462/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 0.077270709 seconds)
  (463/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 0.057148716 seconds)
  (464/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 3.4553e-5 seconds)
  (465/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.5933e-5 seconds)
  (466/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 4.2845e-5 seconds)
  (467/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.8352e-5 seconds)
  (468/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.0196e-5 seconds)
  (469/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 3.8774e-5 seconds)
  (470/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 3.4629e-5 seconds)
  (471/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 1.6744e-5 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.8256e-5 seconds)
  (473/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.05e-5 seconds)
  (474/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 1.8305e-5 seconds)
  (475/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.2066e-5 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 0.064296716 seconds)
  (477/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 3.5406e-5 seconds)
  (478/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.0177e-5 seconds)
  (479/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 3.8697e-5 seconds)
  (480/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.7381e-5 seconds)
  (481/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.0759e-5 seconds)
  (482/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.2809e-5 seconds)
  (483/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.1285e-5 seconds)
  (484/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.1317e-5 seconds)
  (485/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 3.1242e-5 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.4031e-5 seconds)
  (487/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 0.025912376 seconds)
  (488/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 3.965e-5 seconds)
  (489/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 3.1396e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.6176e-5 seconds)
  (491/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.010440088 seconds)
  (492/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 3.7765e-5 seconds)
  (493/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.6674e-5 seconds)
  (494/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.9919e-5 seconds)
  (495/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 3.6888e-5 seconds)
  (496/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.3728e-5 seconds)
  (497/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.6344e-5 seconds)
  (498/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.8847e-5 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.0785e-5 seconds)
  (500/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.028412484 seconds)
  (501/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 4.5719e-5 seconds)
  (502/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 4.0386e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.7744e-5 seconds)
  (504/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 1.7082e-5 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.1469e-5 seconds)
  (506/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.7319e-5 seconds)
  (507/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 1.7431e-5 seconds)
  (508/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.4967e-5 seconds)
  (509/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.5157e-5 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.9484e-5 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 1.9768e-5 seconds)
  (512/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.7142e-5 seconds)
  (513/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 1.8154e-5 seconds)
  (514/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.3592e-5 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.656e-5 seconds)
  (516/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.6445e-5 seconds)
  (517/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 1.9892e-5 seconds)
  (518/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.010248867 seconds)
  (519/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.9626e-5 seconds)
  (520/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.9277e-5 seconds)
  (521/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.6255e-5 seconds)
  (522/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.4274e-5 seconds)
  (523/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.7914e-5 seconds)
  (524/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.2065e-5 seconds)
  (525/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.0945e-5 seconds)
  (526/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.6457e-5 seconds)
  (527/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.3791e-5 seconds)
  (528/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 1.574e-5 seconds)
  (529/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 3.5307e-5 seconds)
  (530/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.8292e-5 seconds)
  (531/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.8241e-5 seconds)
  (532/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 5.1011e-5 seconds)
  (533/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.1501e-5 seconds)
  (534/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.4436e-5 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.5013e-5 seconds)
  (536/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.2284e-5 seconds)
  (537/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 1.6603e-5 seconds)
  (538/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.3061e-5 seconds)
  (539/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.2994e-5 seconds)
  (540/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.3538e-5 seconds)
  (541/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.6985e-5 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.373e-5 seconds)
  (543/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.2203e-5 seconds)
  (544/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 1.278e-5 seconds)
  (545/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 1.7103e-5 seconds)
  (546/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.8619e-5 seconds)
  (547/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 1.6544e-5 seconds)
  (548/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.5255e-5 seconds)
  (549/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 0.033610626 seconds)
  (550/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 3.162e-5 seconds)
  (551/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 3.4897e-5 seconds)
  (552/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.6933e-5 seconds)
  (553/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.6558e-5 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.060878519 seconds)
  (555/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 3.3067e-5 seconds)
  (556/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.9104e-5 seconds)
  (557/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 3.2066e-5 seconds)
  (558/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.3899e-5 seconds)
  (559/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.5806e-5 seconds)
  (560/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 6.7399e-5 seconds)
  (561/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.5194e-5 seconds)
  (562/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.5116e-5 seconds)
  (563/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.9099e-5 seconds)
  (564/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.3519e-5 seconds)
  (565/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.4023e-5 seconds)
  (566/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 3.369e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 3.0195e-5 seconds)
  (568/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.4506e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.7926e-5 seconds)
  (570/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.6196e-5 seconds)
  (571/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.9275e-5 seconds)
  (572/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 1.6881e-5 seconds)
  (573/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.3077e-5 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.3279e-5 seconds)
  (575/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 1.5598e-5 seconds)
  (576/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.2222e-5 seconds)
  (577/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.0048e-5 seconds)
  (578/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.1451e-5 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.7904e-5 seconds)
  (580/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.5511e-5 seconds)
  (581/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.9599e-5 seconds)
  (582/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 1.8661e-5 seconds)
  (583/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 1.7024e-5 seconds)
  (584/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.7844e-5 seconds)
  (585/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.6157e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.0436e-5 seconds)
  (587/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.7879e-5 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.935e-5 seconds)
  (589/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.586e-5 seconds)
  (590/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 6.1408e-5 seconds)
  (591/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.595e-5 seconds)
  (592/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.5197e-5 seconds)
  (593/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 1.7693e-5 seconds)
  (594/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.8121e-5 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.2565e-5 seconds)
  (596/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 0.059186351 seconds)
  (597/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.4411e-5 seconds)
  (598/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.691e-5 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 3.3567e-5 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 1.7664e-5 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.6098e-5 seconds)
  (602/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 4.6024e-5 seconds)
  (603/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.8917e-5 seconds)
  (604/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.3326e-5 seconds)
  (605/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 1.4486e-5 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.4079e-5 seconds)
  (607/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 3.0574e-5 seconds)
  (608/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.0152e-5 seconds)
  (609/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.2259e-5 seconds)
  (610/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.2701e-5 seconds)
  (611/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 1.4585e-5 seconds)
  (612/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.4968e-5 seconds)
  (613/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.042e-5 seconds)
  (614/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.7197e-5 seconds)
  (615/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.7287e-5 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 1.5896e-5 seconds)
  (617/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.3573e-5 seconds)
  (618/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.4333e-5 seconds)
  (619/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.5314e-5 seconds)
  (620/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.202e-5 seconds)
  (621/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 3.4077e-5 seconds)
  (622/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 1.4695e-5 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.7977e-5 seconds)
  (624/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.3367e-5 seconds)
  (625/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.2296e-5 seconds)
  (626/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 1.8045e-5 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 1.7421e-5 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 1.8283e-5 seconds)
  (629/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 1.1776e-5 seconds)
  (630/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.4714e-5 seconds)
  (631/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.9376e-5 seconds)
  (632/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.1537e-5 seconds)
  (633/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.0907e-5 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.4624e-5 seconds)
  (635/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.6825e-5 seconds)
  (636/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 1.4333e-5 seconds)
  (637/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 4.3628e-5 seconds)
  (638/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.3666e-5 seconds)
  (639/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.0288e-5 seconds)
  (640/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.3281e-5 seconds)
  (641/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.7407e-5 seconds)
  (642/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 1.5862e-5 seconds)
  (643/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 1.9465e-5 seconds)
  (644/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.7243e-5 seconds)
  (645/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.6602e-5 seconds)
  (646/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.3812e-5 seconds)
  (647/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 4.0313e-5 seconds)
  (648/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 1.6453e-5 seconds)
  (649/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 1.8816e-5 seconds)
  (650/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.0531e-5 seconds)
  (651/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 1.9736e-5 seconds)
  (652/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.8124e-5 seconds)
  (653/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.7372e-5 seconds)
  (654/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.1444e-5 seconds)
  (655/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 1.4685e-5 seconds)
  (656/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.5914e-5 seconds)
  (657/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.5684e-5 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.2773e-5 seconds)
  (659/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 1.7445e-5 seconds)
  (660/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 1.4722e-5 seconds)
  (661/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.2096e-5 seconds)
  (662/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 1.8181e-5 seconds)
  (663/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 0.000170658 seconds)
  (664/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 6.0178e-5 seconds)
  (665/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 1.1748e-5 seconds)
  (666/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.3649e-5 seconds)
  (667/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 3.9035e-5 seconds)
  (668/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.2102e-5 seconds)
  (669/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 1.4631e-5 seconds)
  (670/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 1.9992e-5 seconds)
  (671/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.939e-5 seconds)
  (672/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.5302e-5 seconds)
  (673/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.5549e-5 seconds)
  (674/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 1.7722e-5 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.5618e-5 seconds)
  (676/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.1722e-5 seconds)
  (677/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 1.7137e-5 seconds)
  (678/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 1.6683e-5 seconds)
  (679/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.214e-5 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 3.3126e-5 seconds)
done (took 11.681448297 seconds)
(21/22) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 21.487483049 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.27023532 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.505986249 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.167045999 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.294649748 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.968979282 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 10.046312684 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.555958712 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.513258597 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.113530689 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.639290949 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.083195384 seconds)
  done (took 37.8220394 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 4.292239097 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.258848808 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.386868198 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.112936908 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.283731665 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.853477191 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 9.470329889 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.406580928 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.355338079 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.107538128 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.802598869 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.087429694 seconds)
  done (took 20.060213728 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.280939047 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.099521493 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.154141582 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 2.14174875 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.12794217 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.147157567 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 3.742688963 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.060045486 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 0.464762719 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.043017694 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.393212375 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.050030702 seconds)
  done (took 10.726180745 seconds)
done (took 69.818487401 seconds)
(22/22) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.118225578 seconds)
    (2/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.029493336 seconds)
    (3/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.042885701 seconds)
    (4/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.030676855 seconds)
    (5/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.042801429 seconds)
    (6/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.051085534 seconds)
    (7/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.030005497 seconds)
    (8/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.070688977 seconds)
    (9/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.120151404 seconds)
    (10/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.072446941 seconds)
    (11/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.031423531 seconds)
    (12/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.029073405 seconds)
    (13/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.035390434 seconds)
    (14/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.04150336 seconds)
    (15/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.041702259 seconds)
    (16/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.032241632 seconds)
    (17/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.122699428 seconds)
    (18/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.037234357 seconds)
    (19/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.043653545 seconds)
    (20/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.03328813 seconds)
    (21/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.029043064 seconds)
    (22/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.047291887 seconds)
    (23/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.034451347 seconds)
    (24/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.029376267 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.026638184 seconds)
    (26/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.049566695 seconds)
    (27/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.114181675 seconds)
    (28/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.021023004 seconds)
    (29/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.068864389 seconds)
    (30/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.030724437 seconds)
    (31/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.020589138 seconds)
    (32/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.027672753 seconds)
    (33/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.061169309 seconds)
    (34/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.027982202 seconds)
    (35/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.120310449 seconds)
    (36/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.171352228 seconds)
    (37/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.042159135 seconds)
    (38/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.210664699 seconds)
    (39/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.035008288 seconds)
    (40/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.027388281 seconds)
    (41/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.029980988 seconds)
    (42/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.032350638 seconds)
    (43/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 6.4015e-5 seconds)
    (44/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.028514159 seconds)
    (45/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.068479594 seconds)
    (46/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.095161327 seconds)
    (47/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.03389217 seconds)
    (48/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.030093016 seconds)
    (49/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.066752332 seconds)
    (50/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.029483555 seconds)
    (51/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.062211425 seconds)
    (52/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.034214131 seconds)
    (53/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029660152 seconds)
    (54/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.044323823 seconds)
    (55/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.12260409 seconds)
    (56/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.031743162 seconds)
    (57/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.166036664 seconds)
    (58/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.090456873 seconds)
    (59/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.101850727 seconds)
    (60/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.034892521 seconds)
    (61/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.0255736 seconds)
    (62/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.030511842 seconds)
    (63/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.047453892 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.034799281 seconds)
    (65/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.195513361 seconds)
    (66/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.034184936 seconds)
    (67/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.090169707 seconds)
    (68/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.06111609 seconds)
    (69/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.034576167 seconds)
    (70/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.028114772 seconds)
    (71/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.000100268 seconds)
    (72/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.064242597 seconds)
    (73/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.029777171 seconds)
    (74/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.033415446 seconds)
    (75/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.028791088 seconds)
    (76/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 2.6475e-5 seconds)
    (77/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.046968497 seconds)
    (78/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 2.8424e-5 seconds)
    (79/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.188506292 seconds)
    (80/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.058415281 seconds)
    (81/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.042633852 seconds)
    (82/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.036395036 seconds)
    (83/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.036984587 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.000134277 seconds)
    (85/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.000236265 seconds)
    (86/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.03478992 seconds)
    (87/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 4.5377e-5 seconds)
    (88/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.034319348 seconds)
    (89/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.046636001 seconds)
    (90/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.214207757 seconds)
    (91/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 9.6776e-5 seconds)
    (92/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.027538522 seconds)
    (93/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.153436227 seconds)
    (94/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.274192418 seconds)
    (95/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 9.2152e-5 seconds)
    (96/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.068263077 seconds)
    (97/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.095358383 seconds)
    (98/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.033715793 seconds)
    (99/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.067484596 seconds)
    (100/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.02905379 seconds)
    (101/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.035112972 seconds)
    (102/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.132393236 seconds)
    (103/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.033758962 seconds)
    (104/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.034140175 seconds)
    (105/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 4.7218e-5 seconds)
    (106/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 3.0198e-5 seconds)
    (107/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.030472777 seconds)
    (108/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.000119219 seconds)
    (109/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.038209126 seconds)
    (110/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.125065519 seconds)
    (111/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.032480486 seconds)
    (112/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 7.7987e-5 seconds)
    (113/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.041077313 seconds)
    (114/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.119853037 seconds)
    (115/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.001726476 seconds)
    (116/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 6.7587e-5 seconds)
    (117/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.5643e-5 seconds)
    (118/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.03003529 seconds)
    (119/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.094921813 seconds)
    (120/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.032706465 seconds)
    (121/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.000122577 seconds)
    (122/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.030396045 seconds)
    (123/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.118284949 seconds)
    (124/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.032427709 seconds)
    (125/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.132111373 seconds)
    (126/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.033302712 seconds)
    (127/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.032518237 seconds)
    (128/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.142982497 seconds)
    (129/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.143256657 seconds)
    (130/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.035013699 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.030322262 seconds)
    (132/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.034382711 seconds)
    (133/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.043099128 seconds)
    (134/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.167811453 seconds)
    (135/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.169333821 seconds)
    (136/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.08848115 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.031423537 seconds)
    (138/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.000142963 seconds)
    (139/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.039050433 seconds)
    (140/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.035831571 seconds)
    (141/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.039991662 seconds)
    (142/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.113789965 seconds)
    (143/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.039005731 seconds)
    (144/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.000232183 seconds)
    (145/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.026926799 seconds)
    (146/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.038437297 seconds)
    (147/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.092506071 seconds)
    (148/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.114930056 seconds)
    (149/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.110804466 seconds)
    (150/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.028765114 seconds)
    (151/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 4.0692e-5 seconds)
    (152/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.037121571 seconds)
    (153/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.038381716 seconds)
    (154/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.030487393 seconds)
    (155/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.7653e-5 seconds)
    (156/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.028282155 seconds)
    (157/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 3.2063e-5 seconds)
    (158/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.246305803 seconds)
    (159/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.068483073 seconds)
    (160/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.032337414 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.271818352 seconds)
    (162/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.178456109 seconds)
    (163/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.040799159 seconds)
    (164/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.031248005 seconds)
    (165/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 7.6195e-5 seconds)
    (166/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.038041707 seconds)
    (167/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.111220655 seconds)
    (168/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.042058777 seconds)
    (169/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.985612897 seconds)
    (170/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.094315857 seconds)
    (171/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.157508322 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.030033373 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 5.089e-5 seconds)
    (174/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.141379549 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.245387826 seconds)
    (176/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.002878876 seconds)
    (177/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.5806e-5 seconds)
    (178/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.030680892 seconds)
    (179/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.033527856 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 7.7399e-5 seconds)
    (181/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.032251365 seconds)
    (182/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.028625623 seconds)
    (183/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.113452896 seconds)
    (184/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.090211173 seconds)
    (185/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.139650085 seconds)
    (186/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.032297598 seconds)
    (187/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.001001007 seconds)
    (188/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.000114685 seconds)
    (189/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.162984633 seconds)
    (190/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.028595431 seconds)
    (191/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.181380486 seconds)
    (192/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.000110337 seconds)
    (193/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.036660426 seconds)
    (194/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.000106538 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.029352699 seconds)
    (196/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.09283367 seconds)
    (197/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.000180028 seconds)
    (198/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.122625815 seconds)
    (199/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.10100607 seconds)
    (200/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 9.7013e-5 seconds)
    (201/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.080025764 seconds)
    (202/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.030757707 seconds)
    (203/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.00010367 seconds)
    (204/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 4.9766e-5 seconds)
    (205/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.030496263 seconds)
    (206/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 8.5202e-5 seconds)
    (207/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.15754872 seconds)
    (208/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 4.6856e-5 seconds)
    (209/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.040860624 seconds)
    (210/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.028575578 seconds)
    (211/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.112547436 seconds)
    (212/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 2.2328e-5 seconds)
    (213/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.031761727 seconds)
    (214/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.225281771 seconds)
    (215/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.034798163 seconds)
    (216/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.027872372 seconds)
    (217/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.038449241 seconds)
    (218/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 7.8943e-5 seconds)
    (219/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.020520158 seconds)
    (220/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000235927 seconds)
    (221/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.044756997 seconds)
    (222/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 7.6994e-5 seconds)
    (223/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.031480405 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.031655394 seconds)
    (225/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.031442896 seconds)
    (226/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.032120176 seconds)
    (227/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.001646269 seconds)
    (228/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 8.2668e-5 seconds)
    (229/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.041800376 seconds)
    (230/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.028632867 seconds)
    (231/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.031687992 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.02998845 seconds)
    (233/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.114073636 seconds)
    (234/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 6.8339e-5 seconds)
    (235/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.7713e-5 seconds)
    (236/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.092307879 seconds)
    (237/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.02889084 seconds)
    (238/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.033963678 seconds)
    (239/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.033772506 seconds)
    (240/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.034937256 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.065093592 seconds)
    (242/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 5.8484e-5 seconds)
    (243/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.726e-5 seconds)
    (244/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.03063862 seconds)
    (245/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 5.552e-5 seconds)
    (246/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.000891115 seconds)
    (247/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.046618566 seconds)
    (248/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.027403609 seconds)
    (249/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.4811e-5 seconds)
    (250/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.161582559 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 8.0026e-5 seconds)
    (252/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.037947998 seconds)
    (253/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.027367173 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.030819776 seconds)
    (255/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.033119006 seconds)
    (256/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.156407512 seconds)
    (257/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.032725681 seconds)
    (258/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.037772788 seconds)
    (259/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 5.8736e-5 seconds)
    (260/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.029784939 seconds)
    (261/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 5.8106e-5 seconds)
    (262/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.157291954 seconds)
    (263/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 4.1239e-5 seconds)
    (264/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.028442701 seconds)
    (265/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.144451759 seconds)
    (266/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 2.648e-5 seconds)
    (267/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.002383162 seconds)
    (268/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 5.1619e-5 seconds)
    (269/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.9955e-5 seconds)
    (270/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.000101656 seconds)
    (271/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.000108061 seconds)
    (272/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.030611648 seconds)
    (273/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.002883411 seconds)
    (274/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.033734862 seconds)
    (275/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 5.8403e-5 seconds)
    (276/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.034155493 seconds)
    (277/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.046140465 seconds)
    (278/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.092200253 seconds)
    (279/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.093755209 seconds)
    (280/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.038862861 seconds)
    (281/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.226027821 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.028164683 seconds)
    (283/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.00178456 seconds)
    (284/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.000118856 seconds)
    (285/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 7.5051e-5 seconds)
    (286/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.474821327 seconds)
    (287/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.040035461 seconds)
    (288/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.028182485 seconds)
    (289/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.3019e-5 seconds)
    (290/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.031695248 seconds)
    (291/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.036026712 seconds)
    (292/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.267035196 seconds)
    (293/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.115191134 seconds)
    (294/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.000101481 seconds)
    (295/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 4.9535e-5 seconds)
    (296/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.032081557 seconds)
    (297/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 9.7424e-5 seconds)
    (298/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.160460028 seconds)
    (299/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.031964169 seconds)
    (300/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.002382332 seconds)
    (301/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.032851198 seconds)
    (302/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001213536 seconds)
    (303/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.178307077 seconds)
    (304/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.001740521 seconds)
    (305/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.001653816 seconds)
    (306/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.037600775 seconds)
    (307/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 9.2952e-5 seconds)
    (308/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.000877423 seconds)
    (309/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.070498543 seconds)
    (310/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.027507721 seconds)
    (311/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.026141019 seconds)
    (312/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.090611992 seconds)
    (313/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 6.8737e-5 seconds)
    (314/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.03985576 seconds)
    (315/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.314361988 seconds)
    (316/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.02746846 seconds)
    (317/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002773752 seconds)
    (318/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.3427e-5 seconds)
    (319/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.026183834 seconds)
    (320/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 9.0296e-5 seconds)
    (321/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 6.7367e-5 seconds)
    (322/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.067281462 seconds)
    (323/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 7.8835e-5 seconds)
    (324/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.025052059 seconds)
    (325/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.000114744 seconds)
    (326/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 5.3194e-5 seconds)
    (327/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 8.0921e-5 seconds)
    (328/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.04595723 seconds)
    (329/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.000115784 seconds)
    (330/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.033647673 seconds)
    (331/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 7.8121e-5 seconds)
    (332/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 6.8991e-5 seconds)
    (333/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 3.1881e-5 seconds)
    (334/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.034524743 seconds)
    (335/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.030868146 seconds)
    (336/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 6.2355e-5 seconds)
    (337/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.000107486 seconds)
    (338/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.000102724 seconds)
    (339/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.035094574 seconds)
    (340/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.03129827 seconds)
    (341/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.02945673 seconds)
    (342/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.031703253 seconds)
    (343/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.029392746 seconds)
    (344/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.034606686 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.035244535 seconds)
    (346/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.001142594 seconds)
    (347/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.029324136 seconds)
    (348/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.8521e-5 seconds)
    (349/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.033613961 seconds)
    (350/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.116827904 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 5.3714e-5 seconds)
    (352/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 6.3733e-5 seconds)
    (353/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.225555288 seconds)
    (354/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 8.2632e-5 seconds)
    (355/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.138736534 seconds)
    (356/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.035955497 seconds)
    (357/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 3.9122e-5 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 9.4563e-5 seconds)
    (359/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.8161e-5 seconds)
    (360/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 3.2603e-5 seconds)
    (361/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.026508729 seconds)
    (362/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.030740707 seconds)
    (363/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.000123245 seconds)
    (364/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.030688189 seconds)
    (365/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.001802599 seconds)
    (366/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.026028939 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.034938528 seconds)
    (368/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 6.9156e-5 seconds)
    (369/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 3.1058e-5 seconds)
    (370/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.075535221 seconds)
    (371/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.197526345 seconds)
    (372/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.001115741 seconds)
    (373/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.031309927 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.029168574 seconds)
    (375/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.089944432 seconds)
    (376/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 6.6588e-5 seconds)
    (377/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.003189363 seconds)
    (378/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000110481 seconds)
    (379/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.034355645 seconds)
    (380/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.000105754 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.001824148 seconds)
    (382/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 7.9472e-5 seconds)
    (383/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 6.312e-5 seconds)
    (384/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.172771464 seconds)
    (385/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.000100814 seconds)
    (386/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.000194094 seconds)
    (387/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 4.8851e-5 seconds)
    (388/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 5.0529e-5 seconds)
    (389/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001817385 seconds)
    (390/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.6825e-5 seconds)
    (391/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 5.2914e-5 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.032145685 seconds)
    (393/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.0008285 seconds)
    (394/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 6.3204e-5 seconds)
    (395/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 6.6652e-5 seconds)
    (396/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.030387068 seconds)
    (397/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 7.6428e-5 seconds)
    (398/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 3.9844e-5 seconds)
    (399/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.002383136 seconds)
    (400/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 7.1579e-5 seconds)
    (401/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.034779295 seconds)
    (402/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 9.7265e-5 seconds)
    (403/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.033113075 seconds)
    (404/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.023913713 seconds)
    (405/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.034066571 seconds)
    (406/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.032247515 seconds)
    (407/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 6.1786e-5 seconds)
    (408/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 3.274e-5 seconds)
    (409/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 6.0802e-5 seconds)
    (410/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.2982e-5 seconds)
    (411/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 5.555e-5 seconds)
    (412/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.837627744 seconds)
    (413/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.8572e-5 seconds)
    (414/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.04234661 seconds)
    (415/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.4249e-5 seconds)
    (416/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.001800712 seconds)
    (417/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 6.455e-5 seconds)
    (418/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.29211989 seconds)
    (419/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.382e-5 seconds)
    (420/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.04996999 seconds)
    (421/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.031213684 seconds)
    (422/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 6.5501e-5 seconds)
    (423/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.031389587 seconds)
    (424/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.3019e-5 seconds)
    (425/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 3.016e-5 seconds)
    (426/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 5.92e-5 seconds)
    (427/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.024836949 seconds)
    (428/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.035543984 seconds)
    (429/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.002512282 seconds)
    (430/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.044231009 seconds)
    (431/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.037552006 seconds)
    (432/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.02490131 seconds)
    (433/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 3.4883e-5 seconds)
    (434/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 7.2778e-5 seconds)
  done (took 23.433867337 seconds)
done (took 25.704986351 seconds)
RUNNING BENCHMARKS...
(1/22) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.955557014 seconds)
  done (took 10.228142715 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 7.283040677 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.324113019 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 7.302284533 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.293884489 seconds)
  done (took 31.474499596 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 8.100761283 seconds)
  done (took 10.375316642 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.695916913 seconds)
  done (took 9.971335533 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.646979939 seconds)
  done (took 9.91834589 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 7.33137078 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 7.309042679 seconds)
  done (took 16.913912849 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.322488148 seconds)
  done (took 11.593965016 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.60584187 seconds)
  done (took 9.879333372 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.277462785 seconds)
  done (took 9.54947753 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 7.272573739 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 7.271143978 seconds)
  done (took 16.814746842 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.292589148 seconds)
  done (took 9.567645566 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.276458154 seconds)
  done (took 9.547262985 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.362679784 seconds)
  done (took 9.649476596 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 8.047283863 seconds)
  done (took 10.324860775 seconds)
done (took 178.164026288 seconds)
(2/22) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.274240485 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.281750932 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.274058842 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 3.804088095 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.671057896 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.274846922 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 7.278418372 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.2738539 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.276170009 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.275101403 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 7.277663489 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.283820269 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.277194875 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.279083846 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.290738065 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.280026735 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.277977019 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.280005231 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.286488972 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.282704823 seconds)
    (21/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.542844402 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.281051229 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.280412115 seconds)
    (24/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.281701807 seconds)
    (25/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.280617904 seconds)
    (26/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.282361452 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.289900852 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.282452799 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.283516841 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.280587424 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.280021774 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.28778943 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.28637725 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.291343943 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.28726418 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.29113925 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.287479272 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.287899799 seconds)
    (39/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.28677163 seconds)
    (40/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.2843693 seconds)
    (41/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.289864207 seconds)
    (42/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.298544475 seconds)
    (43/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 6.681990375 seconds)
    (44/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.550478185 seconds)
    (45/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.28800075 seconds)
    (46/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.29418493 seconds)
    (47/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.289499913 seconds)
    (48/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.292542568 seconds)
    (49/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.301318957 seconds)
    (50/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.291602202 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.305252367 seconds)
    (52/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.301869236 seconds)
    (53/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.293652176 seconds)
    (54/608) benchmarking "ind2sub"...
    done (took 3.031246609 seconds)
    (55/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.297930547 seconds)
    (56/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.295756228 seconds)
    (57/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.301987925 seconds)
    (58/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.304695345 seconds)
    (59/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.297753942 seconds)
    (60/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.297258758 seconds)
    (61/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.295444232 seconds)
    (62/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.298308394 seconds)
    (63/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.296025769 seconds)
    (64/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.576561261 seconds)
    (65/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.306423445 seconds)
    (66/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 7.297201244 seconds)
    (67/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.310425055 seconds)
    (68/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.292896257 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.297904864 seconds)
    (70/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.292206871 seconds)
    (71/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.292501506 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.300392928 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 7.296468175 seconds)
    (74/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.297774597 seconds)
    (75/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.235883924 seconds)
    (76/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.34683718 seconds)
    (77/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.296517782 seconds)
    (78/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.301370909 seconds)
    (79/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.296130539 seconds)
    (80/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.299220269 seconds)
    (81/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.304980916 seconds)
    (82/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.301311076 seconds)
    (83/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.299783998 seconds)
    (84/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.310839324 seconds)
    (85/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.313703481 seconds)
    (86/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.29505137 seconds)
    (87/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.292725825 seconds)
    (88/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.301085128 seconds)
    (89/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.331079338 seconds)
    (90/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.295090994 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 7.295858257 seconds)
    (92/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.29355866 seconds)
    (93/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.299165302 seconds)
    (94/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 7.303335801 seconds)
    (95/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.692051044 seconds)
    (96/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.300118064 seconds)
    (97/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.293245681 seconds)
    (98/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.294028306 seconds)
    (99/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.298881085 seconds)
    (100/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.493937866 seconds)
    (101/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.296263468 seconds)
    (102/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.305330684 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.299171822 seconds)
    (104/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 7.295861513 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.302100882 seconds)
    (106/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.643581742 seconds)
    (107/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.302836497 seconds)
    (108/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.300374553 seconds)
    (109/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.328386515 seconds)
    (110/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.310474306 seconds)
    (111/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 5.695332693 seconds)
    (112/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.524935774 seconds)
    (113/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.301368376 seconds)
    (114/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.298828575 seconds)
    (115/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 5.725074056 seconds)
    (116/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.305290458 seconds)
    (117/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.29897939 seconds)
    (118/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.298214523 seconds)
    (119/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.296349113 seconds)
    (120/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.299337932 seconds)
    (121/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.298329694 seconds)
    (122/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.300701025 seconds)
    (123/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.343000683 seconds)
    (124/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 6.05232714 seconds)
    (125/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.301073895 seconds)
    (126/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.35337902 seconds)
    (127/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 7.350881144 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.368911739 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.309700464 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 7.301323491 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.30361196 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.304996027 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 6.884352507 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.30379222 seconds)
    (135/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.299389481 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 7.304527165 seconds)
    (137/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.303218522 seconds)
    (138/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.815316498 seconds)
    (139/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.342676322 seconds)
    (140/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.304100996 seconds)
    (141/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.436125672 seconds)
    (142/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.300954919 seconds)
    (143/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.314361576 seconds)
    (144/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 7.300970172 seconds)
    (145/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.296781459 seconds)
    (146/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.301617817 seconds)
    (147/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.299813859 seconds)
    (148/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.305346092 seconds)
    (149/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.298120996 seconds)
    (150/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.397617319 seconds)
    (151/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 7.300734135 seconds)
    (152/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.434264572 seconds)
    (153/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 5.939878705 seconds)
    (154/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.303187814 seconds)
    (155/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.302952277 seconds)
    (156/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.308769436 seconds)
    (157/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.329001417 seconds)
    (158/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.304906835 seconds)
    (159/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.298907476 seconds)
    (160/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.477053281 seconds)
    (161/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.297751354 seconds)
    (162/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.300673793 seconds)
    (163/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.307484779 seconds)
    (164/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.299288046 seconds)
    (165/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.304631083 seconds)
    (166/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.297554292 seconds)
    (167/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.299780771 seconds)
    (168/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.297710927 seconds)
    (169/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.314551385 seconds)
    (170/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.436128646 seconds)
    (171/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.299071126 seconds)
    (172/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.302858161 seconds)
    (173/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.298669356 seconds)
    (174/608) benchmarking "5d"...
    done (took 5.644162231 seconds)
    (175/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.297688659 seconds)
    (176/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.690790998 seconds)
    (177/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.318668477 seconds)
    (178/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.297867143 seconds)
    (179/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.314165073 seconds)
    (180/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.300053565 seconds)
    (181/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.308608314 seconds)
    (182/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.430603971 seconds)
    (183/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.30290619 seconds)
    (184/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 7.298806442 seconds)
    (185/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.297188718 seconds)
    (186/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.473069112 seconds)
    (187/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.309041981 seconds)
    (188/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.300167901 seconds)
    (189/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.299706936 seconds)
    (190/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.298671809 seconds)
    (191/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.697004967 seconds)
    (192/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 7.310864814 seconds)
    (193/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.301620367 seconds)
    (194/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.301970337 seconds)
    (195/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.300141021 seconds)
    (196/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.304944184 seconds)
    (197/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.318191536 seconds)
    (198/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.562574348 seconds)
    (199/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.304406659 seconds)
    (200/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.303026821 seconds)
    (201/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 4.323919631 seconds)
    (202/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.308339544 seconds)
    (203/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.313513687 seconds)
    (204/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.313288138 seconds)
    (205/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.476784428 seconds)
    (206/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.301538889 seconds)
    (207/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.311785717 seconds)
    (208/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.302367316 seconds)
    (209/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.303734697 seconds)
    (210/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.303602612 seconds)
    (211/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.306872804 seconds)
    (212/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.303759199 seconds)
    (213/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.304824954 seconds)
    (214/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 5.533589657 seconds)
    (215/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.302067135 seconds)
    (216/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.301867085 seconds)
    (217/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.312794819 seconds)
    (218/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.411322877 seconds)
    (219/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.414793519 seconds)
    (220/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 7.305749686 seconds)
    (221/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.302024146 seconds)
    (222/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.306551351 seconds)
    (223/608) benchmarking "6d"...
    done (took 7.296824625 seconds)
    (224/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.303960782 seconds)
    (225/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.311398368 seconds)
    (226/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.44994018 seconds)
    (227/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.304182645 seconds)
    (228/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.30343595 seconds)
    (229/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.30426906 seconds)
    (230/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.299097453 seconds)
    (231/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.308013052 seconds)
    (232/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 7.299929158 seconds)
    (233/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.301384682 seconds)
    (234/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.300124116 seconds)
    (235/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.303185043 seconds)
    (236/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.311884553 seconds)
    (237/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.299727158 seconds)
    (238/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.301482905 seconds)
    (239/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.301579827 seconds)
    (240/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.302267755 seconds)
    (241/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.306905508 seconds)
    (242/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.300485704 seconds)
    (243/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.565205845 seconds)
    (244/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.312398443 seconds)
    (245/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.302024095 seconds)
    (246/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.309341054 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.300867059 seconds)
    (248/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.30131278 seconds)
    (249/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.30448811 seconds)
    (250/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 2.789296672 seconds)
    (251/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.580249155 seconds)
    (252/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 7.303667318 seconds)
    (253/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.300086609 seconds)
    (254/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 2.713827914 seconds)
    (255/608) benchmarking "3d"...
    done (took 3.938508149 seconds)
    (256/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.303404944 seconds)
    (257/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.304748217 seconds)
    (258/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.30088869 seconds)
    (259/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.302583015 seconds)
    (260/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 6.262563547 seconds)
    (261/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.301784283 seconds)
    (262/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.303761716 seconds)
    (263/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 6.753822184 seconds)
    (264/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.304248857 seconds)
    (265/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.311667357 seconds)
    (266/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.04633013 seconds)
    (267/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.339979035 seconds)
    (268/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.303617849 seconds)
    (269/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.353549302 seconds)
    (270/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.582773353 seconds)
    (271/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.307876198 seconds)
    (272/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 5.637694538 seconds)
    (273/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.308475811 seconds)
    (274/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.312496963 seconds)
    (275/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 7.305367353 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.309544462 seconds)
    (277/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 7.304317955 seconds)
    (278/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 7.317767823 seconds)
    (279/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.312672201 seconds)
    (280/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 7.306107681 seconds)
    (281/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.849195736 seconds)
    (282/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.304392645 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.312424767 seconds)
    (284/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.304985109 seconds)
    (285/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.301456774 seconds)
    (286/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.302174016 seconds)
    (287/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.307147887 seconds)
    (288/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.312912732 seconds)
    (289/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.220930658 seconds)
    (290/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.58917838 seconds)
    (291/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.310498684 seconds)
    (292/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.308936654 seconds)
    (293/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.398429847 seconds)
    (294/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.413562644 seconds)
    (295/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.301771949 seconds)
    (296/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 7.310613228 seconds)
    (297/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 2.716133634 seconds)
    (298/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.303904081 seconds)
    (299/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.30915761 seconds)
    (300/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.303773202 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 4.417525986 seconds)
    (302/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.307505975 seconds)
    (303/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.455358062 seconds)
    (304/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.768171612 seconds)
    (305/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.307752534 seconds)
    (306/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 7.308137147 seconds)
    (307/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.304857613 seconds)
    (308/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.303496852 seconds)
    (309/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.311809966 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.313847145 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.302418135 seconds)
    (312/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.302192646 seconds)
    (313/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.30652724 seconds)
    (314/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.306148345 seconds)
    (315/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.310503942 seconds)
    (316/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.397217898 seconds)
    (317/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.372480033 seconds)
    (318/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.932469366 seconds)
    (319/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 7.315184777 seconds)
    (320/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.307768185 seconds)
    (321/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.310260097 seconds)
    (322/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.301538155 seconds)
    (323/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.30030151 seconds)
    (324/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.299951199 seconds)
    (325/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 7.317778812 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.312270352 seconds)
    (327/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.308132501 seconds)
    (328/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.879376922 seconds)
    (329/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.307410791 seconds)
    (330/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.301451968 seconds)
    (331/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.305371394 seconds)
    (332/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.300899003 seconds)
    (333/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.300255741 seconds)
    (334/608) benchmarking "sub2ind"...
    done (took 7.440609544 seconds)
    (335/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.563344724 seconds)
    (336/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.570219319 seconds)
    (337/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.308236479 seconds)
    (338/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.307084673 seconds)
    (339/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 7.30666202 seconds)
    (340/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.258077688 seconds)
    (341/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 2.729480457 seconds)
    (342/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.310973915 seconds)
    (343/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.194649385 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.309599144 seconds)
    (345/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.591715547 seconds)
    (346/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.339762614 seconds)
    (347/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.656728191 seconds)
    (348/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.311250756 seconds)
    (349/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.302216456 seconds)
    (350/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.310985505 seconds)
    (351/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.308992119 seconds)
    (352/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.307466514 seconds)
    (353/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.309211271 seconds)
    (354/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.456429607 seconds)
    (355/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.313423442 seconds)
    (356/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.306373219 seconds)
    (357/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.308088069 seconds)
    (358/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.303874629 seconds)
    (359/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.298257745 seconds)
    (360/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.638811411 seconds)
    (361/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.337253153 seconds)
    (362/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.305069673 seconds)
    (363/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.317221275 seconds)
    (364/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.239635533 seconds)
    (365/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.331866516 seconds)
    (366/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.648132413 seconds)
    (367/608) benchmarking ("sum", "3darray")...
    done (took 3.42380888 seconds)
    (368/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.307181519 seconds)
    (369/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.301555361 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.314117813 seconds)
    (371/608) benchmarking "7d"...
    done (took 5.52352934 seconds)
    (372/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.304644049 seconds)
    (373/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.306366051 seconds)
    (374/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.500608179 seconds)
    (375/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.309429579 seconds)
    (376/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.306925982 seconds)
    (377/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.301109503 seconds)
    (378/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.304046997 seconds)
    (379/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 7.306828799 seconds)
    (380/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.305318207 seconds)
    (381/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.307994633 seconds)
    (382/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.321923192 seconds)
    (383/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.311123124 seconds)
    (384/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.325623762 seconds)
    (385/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.305362953 seconds)
    (386/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.299292188 seconds)
    (387/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.303387517 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.303557073 seconds)
    (389/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.306748051 seconds)
    (390/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 7.305642297 seconds)
    (391/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.309191422 seconds)
    (392/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.30692016 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.303150114 seconds)
    (394/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.313237724 seconds)
    (395/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.302247107 seconds)
    (396/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.313935574 seconds)
    (397/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.312603794 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 5.648853041 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.652101736 seconds)
    (400/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.30514279 seconds)
    (401/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.314428744 seconds)
    (402/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.805387656 seconds)
    (403/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.308647048 seconds)
    (404/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.359709253 seconds)
    (405/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.322319236 seconds)
    (406/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.311145278 seconds)
    (407/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.310256334 seconds)
    (408/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.32359507 seconds)
    (409/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.301880068 seconds)
    (410/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.316774337 seconds)
    (411/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.554482383 seconds)
    (412/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.309895744 seconds)
    (413/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.225839973 seconds)
    (414/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.907629225 seconds)
    (415/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.322297942 seconds)
    (416/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.437945493 seconds)
    (417/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.878040231 seconds)
    (418/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.314698477 seconds)
    (419/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.300037765 seconds)
    (420/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 5.651085254 seconds)
    (421/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.576504152 seconds)
    (422/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.303336258 seconds)
    (423/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.30747109 seconds)
    (424/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.31685073 seconds)
    (425/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.310859355 seconds)
    (426/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.302800192 seconds)
    (427/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.33471245 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.31003528 seconds)
    (429/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 5.65645349 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.30299891 seconds)
    (431/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.31536569 seconds)
    (432/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.315036941 seconds)
    (433/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.306336206 seconds)
    (434/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.310227403 seconds)
    (435/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.58626787 seconds)
    (436/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.303228406 seconds)
    (437/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.302256297 seconds)
    (438/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.309208434 seconds)
    (439/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.315510237 seconds)
    (440/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.438286237 seconds)
    (441/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.642340713 seconds)
    (442/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.313778667 seconds)
    (443/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.450405792 seconds)
    (444/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.423024074 seconds)
    (445/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.314827993 seconds)
    (446/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.31517437 seconds)
    (447/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.309390229 seconds)
    (448/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.341822631 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.313842237 seconds)
    (450/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.307026405 seconds)
    (451/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.303725595 seconds)
    (452/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.302611319 seconds)
    (453/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.315717468 seconds)
    (454/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.312722505 seconds)
    (455/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.302768995 seconds)
    (456/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.342130499 seconds)
    (457/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.316213216 seconds)
    (458/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.311447634 seconds)
    (459/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.30395418 seconds)
    (460/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.314348616 seconds)
    (461/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.312139596 seconds)
    (462/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.312030796 seconds)
    (463/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 6.757365131 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.586391152 seconds)
    (465/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.314037977 seconds)
    (466/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.439976827 seconds)
    (467/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.310290184 seconds)
    (468/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.319594683 seconds)
    (469/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.307833163 seconds)
    (470/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.311749699 seconds)
    (471/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.324933004 seconds)
    (472/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.30828801 seconds)
    (473/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.320465751 seconds)
    (474/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 7.309096223 seconds)
    (475/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.304164749 seconds)
    (476/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.325893309 seconds)
    (477/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.312943931 seconds)
    (478/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.314641776 seconds)
    (479/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.306435173 seconds)
    (480/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.318568936 seconds)
    (481/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.305545337 seconds)
    (482/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.314000036 seconds)
    (483/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 7.318336583 seconds)
    (484/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.306521599 seconds)
    (485/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.315559864 seconds)
    (486/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 7.304418768 seconds)
    (487/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.303007314 seconds)
    (488/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.312859314 seconds)
    (489/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.312122978 seconds)
    (490/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.307366967 seconds)
    (491/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.310803186 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.30907746 seconds)
    (493/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.314491334 seconds)
    (494/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.301572753 seconds)
    (495/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.012655511 seconds)
    (496/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.306662997 seconds)
    (497/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 5.044081034 seconds)
    (498/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.305205477 seconds)
    (499/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.30808134 seconds)
    (500/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 7.211576863 seconds)
    (501/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.305808781 seconds)
    (502/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.316063172 seconds)
    (503/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.315791776 seconds)
    (504/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.315759602 seconds)
    (505/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.303922153 seconds)
    (506/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.313996782 seconds)
    (507/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.481818343 seconds)
    (508/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.319366272 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.321489556 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.309491682 seconds)
    (511/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.307736513 seconds)
    (512/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.311494877 seconds)
    (513/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.417899657 seconds)
    (514/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.346110073 seconds)
    (515/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.30722511 seconds)
    (516/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.803312581 seconds)
    (517/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.317031272 seconds)
    (518/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.304845995 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.305258068 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.314944552 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.30664038 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.307740829 seconds)
    (523/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.311916516 seconds)
    (524/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.319158926 seconds)
    (525/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.314572412 seconds)
    (526/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.306912997 seconds)
    (527/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.316663176 seconds)
    (528/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.314956089 seconds)
    (529/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.315703908 seconds)
    (530/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.843266189 seconds)
    (531/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.332964283 seconds)
    (532/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 5.894621908 seconds)
    (533/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 5.94667132 seconds)
    (534/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.307164804 seconds)
    (535/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.431118036 seconds)
    (536/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 7.308016937 seconds)
    (537/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.884130953 seconds)
    (538/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.32525941 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.313491995 seconds)
    (540/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.305792995 seconds)
    (541/608) benchmarking "2d"...
    done (took 3.652728511 seconds)
    (542/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.309062466 seconds)
    (543/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.015569378 seconds)
    (544/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.485019967 seconds)
    (545/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.41902179 seconds)
    (546/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.554065418 seconds)
    (547/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.311420798 seconds)
    (548/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 7.321471131 seconds)
    (549/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.312210085 seconds)
    (550/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.312914902 seconds)
    (551/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.384641667 seconds)
    (552/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.316412313 seconds)
    (553/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 6.541878987 seconds)
    (554/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.308040002 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.306920803 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.321440398 seconds)
    (557/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 7.319118534 seconds)
    (558/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.612873314 seconds)
    (559/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.317181162 seconds)
    (560/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.315120733 seconds)
    (561/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.246069928 seconds)
    (562/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.335991916 seconds)
    (563/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.318675759 seconds)
    (564/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.308790164 seconds)
    (565/608) benchmarking "4d"...
    done (took 4.07129364 seconds)
    (566/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.771538184 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.385917427 seconds)
    (568/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.352624153 seconds)
    (569/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.310501053 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.329301038 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.307905891 seconds)
    (572/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.315019776 seconds)
    (573/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.313895892 seconds)
    (574/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.311458462 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.312297344 seconds)
    (576/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.318590812 seconds)
    (577/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.315340997 seconds)
    (578/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.418613379 seconds)
    (579/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.321491196 seconds)
    (580/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 7.317074368 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.309205884 seconds)
    (582/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.322630866 seconds)
    (583/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.313173539 seconds)
    (584/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.326173513 seconds)
    (585/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.596531738 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.888098518 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.317273479 seconds)
    (588/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.318063877 seconds)
    (589/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.323983587 seconds)
    (590/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.333076092 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.143965373 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.312116851 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.315816285 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.316545593 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.310164737 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.312165561 seconds)
    (597/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.313459126 seconds)
    (598/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 7.402331027 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.310726348 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.31386264 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.309780978 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.003884271 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.322807819 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.317118853 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 6.677699437 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 2.809494633 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.318234702 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.322791667 seconds)
  done (took 3949.984943633 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 3.542830064 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 2.382220933 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 3.21271805 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 3.29315456 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 2.656102785 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 3.185685001 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 3.236668761 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 2.747921179 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.132295765 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 3.176926484 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 3.208229547 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.22157723 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 3.054093013 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.133201547 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.186479433 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 2.467777668 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 3.195355866 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.424745307 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 2.396298791 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 2.84410428 seconds)
  done (took 63.007715507 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 5)...
    done (took 4.813402234 seconds)
    (2/17) benchmarking ("catnd_setind", 5)...
    done (took 2.334723837 seconds)
    (3/17) benchmarking "4467"...
    done (took 2.496978669 seconds)
    (4/17) benchmarking ("hcat_setind", 5)...
    done (took 4.269751183 seconds)
    (5/17) benchmarking ("vcat", 5)...
    done (took 4.034348041 seconds)
    (6/17) benchmarking ("hvcat_setind", 5)...
    done (took 4.271424769 seconds)
    (7/17) benchmarking ("hcat", 5)...
    done (took 4.76960588 seconds)
    (8/17) benchmarking ("catnd_setind", 500)...
    done (took 7.310643279 seconds)
    (9/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.325241765 seconds)
    (10/17) benchmarking ("hvcat", 500)...
    done (took 7.324976542 seconds)
    (11/17) benchmarking ("hcat", 500)...
    done (took 7.310504104 seconds)
    (12/17) benchmarking ("hcat_setind", 500)...
    done (took 7.316936887 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 2.363375524 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 4.14094195 seconds)
    (15/17) benchmarking ("vcat_setind", 500)...
    done (took 7.324351579 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 7.31422921 seconds)
    (17/17) benchmarking ("vcat", 500)...
    done (took 7.31637384 seconds)
  done (took 94.349887838 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.351192272 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.545342244 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.338878266 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.347373778 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.323971888 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.444311895 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.687399659 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.42647184 seconds)
  done (took 61.783375675 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 2.796119724 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 2.834829649 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 3.319263347 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 3.048459888 seconds)
  done (took 14.312288824 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 7.31131185 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 3.40150306 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 7.310167751 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.6332067 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.320960276 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 3.3906315 seconds)
  done (took 33.680189361 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.202712102 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 2.476962823 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.325636183 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.318699502 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.312158758 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 3.133718338 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 2.503471154 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 2.921085909 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 2.938516591 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.314852788 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 3.449466808 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.442659987 seconds)
  done (took 54.649825453 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.664576111 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.732541452 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.544884364 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 2.511278319 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.73929645 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.774341161 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 2.420746748 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 2.529895797 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 7.312145897 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.34672165 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 2.525667742 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 2.369578065 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.557911705 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 2.376573382 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.558464385 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.629813824 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.738538048 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.344403366 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 2.542868047 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.725590938 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 2.535355096 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.553107747 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.628736801 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.952778912 seconds)
  done (took 68.927517813 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 3)...
    done (took 2.547518389 seconds)
    (2/5) benchmarking ("setindex!", 4)...
    done (took 2.567805938 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.546122342 seconds)
    (4/5) benchmarking ("setindex!", 2)...
    done (took 2.567415393 seconds)
    (5/5) benchmarking ("setindex!", 1)...
    done (took 2.569823652 seconds)
  done (took 15.116677982 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 1000)...
    done (took 12.918195519 seconds)
    (2/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.355594193 seconds)
    (3/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.319678741 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.382354604 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.446811287 seconds)
    (6/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.826278718 seconds)
    (7/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.42826669 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.373216062 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.341187103 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 8.079314309 seconds)
    (11/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.325465636 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 12.750501923 seconds)
  done (took 105.86154269 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.329185614 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 7.317827386 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.327615615 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 7.324678652 seconds)
  done (took 31.613731659 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.415291339 seconds)
    (2/12) benchmarking ("prerend!", 8)...
    done (took 2.554026072 seconds)
    (3/12) benchmarking ("push_single!", 256)...
    done (took 2.398425926 seconds)
    (4/12) benchmarking ("push_multiple!", 8)...
    done (took 2.554423474 seconds)
    (5/12) benchmarking ("push_multiple!", 256)...
    done (took 2.404890627 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.397576536 seconds)
    (7/12) benchmarking ("append!", 8)...
    done (took 2.519418194 seconds)
    (8/12) benchmarking ("append!", 2048)...
    done (took 2.684604347 seconds)
    (9/12) benchmarking ("prerend!", 256)...
    done (took 4.400300828 seconds)
    (10/12) benchmarking ("push_single!", 2048)...
    done (took 2.404894539 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 3.54970731 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 2.90010688 seconds)
  done (took 35.492489049 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.678346312 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.630047921 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.67201124 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.678703319 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.630848665 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.613702028 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.618591669 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.67855388 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.680084945 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.680010625 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.556368317 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.63510707 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.68266126 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 2.99457318 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.681003264 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.554515736 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.67436875 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.678249129 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 3.024887972 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.677438634 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.556266619 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.634366587 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.68221299 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.560362985 seconds)
  done (took 66.467834249 seconds)
done (took 4597.520866628 seconds)
(3/22) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.940649604 seconds)
    (2/2) benchmarking "Float64"...
    done (took 3.093914869 seconds)
  done (took 8.346482998 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 2.609042694 seconds)
  (3/15) benchmarking "20517"...
  done (took 2.874302068 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 3.159161527 seconds)
    (2/2) benchmarking "conditional"...
    done (took 3.177328672 seconds)
  done (took 8.649500498 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 2.384008073 seconds)
    (2/3) benchmarking "Float64"...
    done (took 2.934229509 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 2.962661484 seconds)
  done (took 10.594973828 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.489179456 seconds)
  done (took 4.802487284 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.851719626 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.787038346 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.508094868 seconds)
  done (took 10.458691688 seconds)
  (8/15) benchmarking "18129"...
  done (took 7.348494348 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 3.092986255 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 3.464229354 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 3.604678724 seconds)
    (4/4) benchmarking "Float32"...
    done (took 2.799066898 seconds)
  done (took 15.272438225 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 7.318045136 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 7.312158027 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 4.584703914 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 2.769787826 seconds)
  done (took 24.296705464 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 7.331804823 seconds)
    (2/3) benchmarking "Float16"...
    done (took 7.332707643 seconds)
    (3/3) benchmarking "Float32"...
    done (took 7.322878913 seconds)
  done (took 24.299594752 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 2.556138157 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.351123731 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 2.353741599 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.354262056 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 2.354391225 seconds)
  done (took 11.72270338 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.836107264 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 2.759020826 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.745954392 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.812558317 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.170822008 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.548570284 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.774767634 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.687955941 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 2.471349619 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.630426113 seconds)
  done (took 29.749704702 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.686570231 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.834814876 seconds)
  done (took 7.836682002 seconds)
done (took 173.732453996 seconds)
(4/22) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.322713236 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.33556799 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.340785872 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.332079145 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.334774381 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.322593647 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.329478155 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.330894821 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.335921505 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.330673309 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.330585459 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.329037726 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.471740497 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.33133411 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.33591009 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.330531719 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.337099756 seconds)
  done (took 42.09400613 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.346990072 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 6.724915846 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.134538768 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 6.647662681 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.157682119 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.350147087 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.540754954 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.040406059 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 7.273545163 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.132110998 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.082557248 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 4.957419842 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.328610523 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.938596241 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 4.281749667 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.04424201 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.274370401 seconds)
  done (took 82.570731738 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.32019977 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.323011832 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.319788828 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.326544879 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.32308822 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.322611202 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.318436145 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.320162763 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.319721768 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.320702913 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.3220223 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.319205985 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.348838 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.325219411 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.328679243 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.319841916 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.328059537 seconds)
  done (took 41.827440035 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.325419983 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.366569459 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.332634724 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.357331383 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.349781699 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.323163907 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.322729856 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.338838796 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.351820825 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.335078722 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.333808305 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.344429984 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.228980301 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.344864681 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.342941192 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.353702764 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.34476606 seconds)
  done (took 43.006242167 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 2.320193069 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 7.312861531 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 7.975095083 seconds)
    (4/13) benchmarking "Float16"...
    done (took 7.359213886 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 15.199740788 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 7.441001277 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 6.981258598 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 2.320839848 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 2.718916714 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 2.485322086 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 13.455841175 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 2.82753426 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 2.740212809 seconds)
  done (took 83.449104078 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.320050967 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.318324823 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.319922876 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.321647646 seconds)
  done (took 31.5964473 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.314826919 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.310983924 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.320710131 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.320634401 seconds)
  done (took 31.577351105 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 2.348674005 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 2.33607388 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 2.351912088 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 2.337111742 seconds)
  done (took 11.683156747 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 3.557480111 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 3.058303981 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 3.03380104 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 3.038182989 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 2.860825101 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 3.254149957 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 3.019423244 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 3.471376359 seconds)
  done (took 27.602540864 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.32853835 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.67316262 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.503931436 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.664598118 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.528706039 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.340144594 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.349702513 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.550906051 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.714535234 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.567534511 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.547042417 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.554935845 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.321285118 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.485547981 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.524419928 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.518396182 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.57914801 seconds)
  done (took 50.071115647 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.32476262 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.329844489 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.331973205 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.326967354 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.33431466 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.324075255 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.326303545 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.328130253 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.327640124 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.328656189 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.332853914 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.324970986 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.413348441 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.325276137 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.335753433 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.32649159 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.33586947 seconds)
  done (took 41.9961181 seconds)
done (took 489.794196217 seconds)
(5/22) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 7.313288435 seconds)
done (took 9.62847525 seconds)
(6/22) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 7.330391033 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.432776756 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 7.318795909 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 3.670613432 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 7.315100747 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 7.349633704 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 7.322539673 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 7.347842452 seconds)
  (9/12) benchmarking "nbody"...
  done (took 3.341589114 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 3.434639876 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 6.159360652 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 9.018378825 seconds)
done (took 74.356068771 seconds)
(7/22) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.460235968 seconds)
    (2/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.966678282 seconds)
    (3/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.458064213 seconds)
    (4/54) benchmarking ("spmat", "range", 10)...
    done (took 4.031305853 seconds)
    (5/54) benchmarking ("spmat", "array", 100)...
    done (took 2.800419433 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.320826234 seconds)
    (7/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.418246109 seconds)
    (8/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.310374228 seconds)
    (9/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 6.293356249 seconds)
    (10/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.619390985 seconds)
    (11/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.277369989 seconds)
    (12/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.826928243 seconds)
    (13/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.4135628 seconds)
    (14/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.308706222 seconds)
    (15/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.013663667 seconds)
    (16/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.30821301 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.963809558 seconds)
    (18/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.118163867 seconds)
    (19/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.522272465 seconds)
    (20/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.632662957 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 3.032992849 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 6.284035334 seconds)
    (23/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.519729355 seconds)
    (24/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.348229153 seconds)
    (25/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.623478083 seconds)
    (26/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.445611527 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.521387622 seconds)
    (28/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.855969835 seconds)
    (29/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 7.215499833 seconds)
    (30/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.474066635 seconds)
    (31/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.50130896 seconds)
    (32/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.465606372 seconds)
    (33/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.324673719 seconds)
    (34/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.523115741 seconds)
    (35/54) benchmarking ("spmat", "range", 1000)...
    done (took 7.179116267 seconds)
    (36/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 6.293408034 seconds)
    (37/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.531130657 seconds)
    (38/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.075776169 seconds)
    (39/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.41993632 seconds)
    (40/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.668644186 seconds)
    (41/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 6.279983928 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.317870551 seconds)
    (43/54) benchmarking ("spmat", "array", 10)...
    done (took 2.408750665 seconds)
    (44/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.541649443 seconds)
    (45/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.156557519 seconds)
    (46/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.653890842 seconds)
    (47/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.090416442 seconds)
    (48/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.413534585 seconds)
    (49/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.4244604 seconds)
    (50/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.470727814 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.389000845 seconds)
    (52/54) benchmarking ("spmat", "range", 100)...
    done (took 2.7788992 seconds)
    (53/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.515749046 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.203949359 seconds)
  done (took 232.328343388 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 7.486813997 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 7.473411433 seconds)
  done (took 17.286019668 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Bidiagonal", 10)...
    done (took 3.929160007 seconds)
    (2/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.43684582 seconds)
    (3/18) benchmarking ("Diagonal", 1000)...
    done (took 2.752817468 seconds)
    (4/18) benchmarking ("IJV", 1000)...
    done (took 2.598223205 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.504517884 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.825362634 seconds)
    (7/18) benchmarking ("IV", 10)...
    done (took 2.909157972 seconds)
    (8/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.469875973 seconds)
    (9/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.923563571 seconds)
    (10/18) benchmarking ("IV", 100)...
    done (took 2.722119305 seconds)
    (11/18) benchmarking ("Diagonal", 100)...
    done (took 4.606485891 seconds)
    (12/18) benchmarking ("IJV", 10)...
    done (took 2.936565145 seconds)
    (13/18) benchmarking ("Diagonal", 10)...
    done (took 3.70562425 seconds)
    (14/18) benchmarking ("IJV", 100)...
    done (took 2.858938056 seconds)
    (15/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.366984034 seconds)
    (16/18) benchmarking ("IV", 1000)...
    done (took 2.530308773 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.859879419 seconds)
    (18/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.187980853 seconds)
  done (took 60.43077477 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.750992893 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.906080616 seconds)
    (3/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.317857275 seconds)
    (4/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.74369253 seconds)
    (5/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.320287696 seconds)
    (6/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 4.315405447 seconds)
    (7/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.311853199 seconds)
    (8/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.992182329 seconds)
    (9/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.578251751 seconds)
    (10/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.718425044 seconds)
    (11/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.791802176 seconds)
    (12/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.316984985 seconds)
    (13/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.309671101 seconds)
    (14/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.852170696 seconds)
    (15/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.820840476 seconds)
    (16/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.100366927 seconds)
    (17/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.34517895 seconds)
    (18/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.30825678 seconds)
    (19/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.323541106 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.309459976 seconds)
    (21/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.729593451 seconds)
    (22/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.3179858 seconds)
    (23/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.617499388 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.343379044 seconds)
    (25/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.509785659 seconds)
    (26/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.323746575 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.881017803 seconds)
    (28/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.756385076 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.323444629 seconds)
    (30/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.570703152 seconds)
    (31/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.323856388 seconds)
    (32/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.309016508 seconds)
    (33/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.321480704 seconds)
    (34/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.31456604 seconds)
    (35/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.301967739 seconds)
    (36/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.825130196 seconds)
    (37/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.314309669 seconds)
    (38/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.581293844 seconds)
    (39/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.334055315 seconds)
    (40/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 7.017953855 seconds)
    (41/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.326357567 seconds)
    (42/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.307999893 seconds)
    (43/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.676157628 seconds)
    (44/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.319601622 seconds)
    (45/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.753843807 seconds)
    (46/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.32661026 seconds)
    (47/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.148804118 seconds)
    (48/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.83157444 seconds)
    (49/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.327711647 seconds)
    (50/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.094660076 seconds)
    (51/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.663109874 seconds)
    (52/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.327689552 seconds)
    (53/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.824882705 seconds)
    (54/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.904965288 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.495873479 seconds)
    (56/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.550033569 seconds)
    (57/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.87310392 seconds)
    (58/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.333546551 seconds)
    (59/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.879735266 seconds)
    (60/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.802254966 seconds)
    (61/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.319170123 seconds)
    (62/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.309894006 seconds)
    (63/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.81339018 seconds)
    (64/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.312610129 seconds)
    (65/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.775629699 seconds)
    (66/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.759322098 seconds)
    (67/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.269829854 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.312445985 seconds)
    (69/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.803157225 seconds)
    (70/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.329485768 seconds)
    (71/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.705761414 seconds)
    (72/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.32663243 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.307724941 seconds)
    (74/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.90664616 seconds)
    (75/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.342667675 seconds)
    (76/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.397947563 seconds)
    (77/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.314934081 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.2709456 seconds)
    (79/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 3.000584168 seconds)
    (80/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.315613899 seconds)
    (81/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.315690013 seconds)
    (82/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.061235647 seconds)
    (83/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.829592405 seconds)
    (84/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.316206933 seconds)
    (85/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.312012252 seconds)
    (86/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.68393404 seconds)
    (87/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.736525056 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.338654635 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.280281712 seconds)
    (90/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.323075075 seconds)
    (91/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.309418617 seconds)
    (92/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.178930577 seconds)
    (93/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.314803246 seconds)
    (94/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.316774397 seconds)
    (95/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 3.149307769 seconds)
    (96/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.816270445 seconds)
    (97/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.257559718 seconds)
    (98/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.314803774 seconds)
    (99/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.801332308 seconds)
    (100/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.323393165 seconds)
    (101/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.312652788 seconds)
    (102/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.692997444 seconds)
    (103/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 3.119862909 seconds)
    (104/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.316614583 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.543205719 seconds)
    (106/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 7.180552101 seconds)
    (107/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.606296803 seconds)
    (108/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.785434808 seconds)
    (109/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.318241196 seconds)
    (110/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.778218244 seconds)
    (111/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.849745485 seconds)
    (112/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.31581325 seconds)
    (113/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.589596411 seconds)
    (114/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.919067672 seconds)
    (115/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.87173693 seconds)
    (116/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.308277957 seconds)
    (117/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.359590632 seconds)
    (118/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.527016531 seconds)
    (119/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.341727409 seconds)
    (120/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.857097446 seconds)
    (121/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.38658256 seconds)
    (122/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.309200254 seconds)
    (123/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.315746953 seconds)
    (124/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.778893696 seconds)
    (125/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.319034275 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.829142214 seconds)
    (127/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.845942792 seconds)
    (128/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.107564669 seconds)
    (129/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.317270538 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.317242727 seconds)
    (131/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.312580349 seconds)
    (132/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.939725991 seconds)
    (133/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.258641984 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.339526087 seconds)
    (135/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.313137051 seconds)
    (136/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.801894346 seconds)
    (137/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.315463723 seconds)
    (138/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.795203783 seconds)
    (139/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.323122614 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.314413737 seconds)
    (141/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.338329571 seconds)
    (142/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.968250827 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.675971834 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.330353711 seconds)
    (145/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.313331905 seconds)
    (146/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.316679452 seconds)
    (147/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.794174889 seconds)
    (148/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.549782628 seconds)
    (149/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.487071263 seconds)
    (150/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.31623111 seconds)
    (151/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.53832968 seconds)
    (152/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.583456746 seconds)
    (153/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.772737505 seconds)
    (154/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.311167453 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.534350056 seconds)
    (156/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.987765861 seconds)
    (157/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.31110649 seconds)
    (158/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.687339534 seconds)
    (159/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.751429702 seconds)
    (160/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.59503254 seconds)
    (161/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.327416704 seconds)
    (162/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.688468496 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.315164469 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.600214563 seconds)
    (165/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.797194561 seconds)
    (166/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.311377761 seconds)
    (167/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.31065381 seconds)
    (168/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.720847863 seconds)
    (169/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.701754274 seconds)
    (170/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.504627378 seconds)
    (171/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.080875181 seconds)
    (172/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.872003667 seconds)
    (173/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 5.064570437 seconds)
    (174/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.88087704 seconds)
    (175/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.312743253 seconds)
    (176/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.322112661 seconds)
    (177/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 3.006735117 seconds)
    (178/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.318378296 seconds)
    (179/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.316954356 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.30905119 seconds)
    (181/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 7.013519064 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.79031351 seconds)
    (183/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.312411091 seconds)
    (184/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.74570366 seconds)
    (185/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.286133152 seconds)
    (186/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.812485999 seconds)
    (187/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.328966179 seconds)
    (188/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.841306943 seconds)
    (189/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.629258587 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.334573576 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.319200968 seconds)
    (192/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.319279131 seconds)
    (193/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.65841534 seconds)
    (194/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.783761536 seconds)
    (195/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.311609927 seconds)
    (196/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.308745146 seconds)
    (197/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.801031452 seconds)
    (198/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 3.042460177 seconds)
    (199/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.844080918 seconds)
    (200/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.315015436 seconds)
    (201/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 5.068149012 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.315431755 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.311260686 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.79065522 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.319160361 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.316273717 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.486780559 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.838468022 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.315765988 seconds)
    (210/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.309494347 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.85564451 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.961761314 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.548428014 seconds)
    (214/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.805353525 seconds)
    (215/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.271472322 seconds)
    (216/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 7.318775231 seconds)
    (217/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.81637683 seconds)
    (218/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.315996741 seconds)
    (219/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.308451486 seconds)
    (220/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.855462434 seconds)
    (221/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.697602916 seconds)
    (222/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.338198653 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.82110875 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.310315073 seconds)
  done (took 1116.272062268 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.862127453 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.411106613 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.702863497 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 3.168843029 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 3.160915049 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.41773559 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.880751812 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.490801981 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.748729281 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.756225563 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.627635781 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.35926785 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.225740888 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.624759704 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.502963021 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.481980442 seconds)
  done (took 86.736202253 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.354301706 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.366613691 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.390128283 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.400886007 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.367938057 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 7.389371538 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.383378399 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.369519861 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.361888028 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.357199922 seconds)
  done (took 76.053245537 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.803762548 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.409621707 seconds)
  done (took 12.525976443 seconds)
done (took 1603.943669681 seconds)
(8/22) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.346100518 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 2.687789087 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 2.418900462 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.358578104 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 3.936927596 seconds)
    (6/49) benchmarking "13786"...
    done (took 2.341561557 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.344332288 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 2.343886929 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.803407351 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 3.152195953 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.470900676 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.869933167 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 2.802007183 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 2.411834708 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 2.345747358 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 2.34452904 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 2.798227211 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 3.172634369 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.33192168 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 2.365652812 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 2.347823796 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.350836615 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 2.354178048 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 2.360438212 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 2.838518593 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 4.056862114 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 4.731172775 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 2.367428278 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.781879563 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.425386009 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.349614043 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.344464521 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 2.343901102 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 2.345220388 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 3.069822342 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 3.163001136 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.385413891 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.346544999 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.346015911 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.237023317 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 2.36537165 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 2.35260815 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.350272456 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.349977236 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 2.347457686 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 2.34731758 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.28759636 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 4.785680371 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 2.39459677 seconds)
  done (took 139.083044996 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.377245234 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.377676729 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.452795684 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.506559202 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.376757076 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.371503421 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.367320376 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.50176948 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.377238311 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.37845879 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.435671271 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.37845687 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.37736443 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.369614336 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.367266759 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.509176614 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.369998581 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.367093898 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.369511268 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.367975912 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.449204818 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.378132293 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.377024598 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.38281976 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.370519397 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.365745926 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.440094036 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.377347109 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.452703472 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.369820067 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.380279195 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.367923376 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.372256641 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.38064548 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.382660012 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.38589861 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.377826574 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.509007007 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.378178444 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.438467577 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.502019726 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.370241961 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.377823185 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.36820049 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.367967466 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.362887962 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.38692479 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.360172015 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.370182773 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.437624644 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.382791185 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.436978806 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.360570242 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.504555588 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.379774876 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.36755405 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.443778212 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.386688279 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.506910231 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 2.454952698 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.367253101 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.448192929 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.378135805 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.498543676 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 2.385870105 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.369944712 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.362843229 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.385993389 seconds)
  done (took 165.57579221 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.398551547 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.411427395 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.3997427 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.39981998 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.607203146 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.397595113 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.599552954 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.458012186 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.404319279 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.395950146 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.602945507 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.400584865 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.452690388 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.399430428 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.397756268 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.450076016 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.608055436 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.39510691 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.45243255 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.394891377 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.411044383 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.386286631 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.410920492 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.602956616 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.3974608 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.398145938 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.382165776 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.396665523 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.39799814 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.38186536 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.451819569 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.407376332 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.394145786 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.387584374 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.387351221 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.594495684 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.602159059 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.373630107 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.385589088 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.374686017 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.453247101 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.398217914 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.40032066 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.382981948 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.453838604 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.453240268 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.398063694 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.452249664 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.398429616 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.39820035 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.454138974 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.404490895 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.420709521 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.405924121 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.387990599 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.593265344 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.451610714 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.399386803 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.383248414 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.452121306 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.400621193 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.450220573 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.457625398 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.398133738 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.398259609 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.416615412 seconds)
  done (took 162.929534692 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 2.322965633 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 2.32309432 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 2.339562035 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 2.338765397 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 2.324073435 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 2.335943492 seconds)
  done (took 16.298316473 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 2.384351562 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.454584013 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.467325593 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.449632279 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.456214763 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.168929793 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.448573284 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.168616327 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.172432822 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.497197348 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.465575749 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.496999414 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 2.385264501 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 2.384762171 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 2.380299886 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.174351494 seconds)
  done (took 44.277465129 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.41392597 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 2.372501617 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.363204309 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 3.218600141 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.376667958 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.368966943 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.400774147 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 3.311406881 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.433882139 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.387383359 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.377544062 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.371367258 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.37706884 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.371687378 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 2.376738609 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.363613786 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.37680273 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.38272514 seconds)
  done (took 47.03506713 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.455992357 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.371872961 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.505652971 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.554177606 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.392116353 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.456508007 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.365628987 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.54291851 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.551646901 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.542824917 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.49370343 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.50174715 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.371266652 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.494122078 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.435674463 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.365367839 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.434857966 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.431831081 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.364674983 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.431388078 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.370771537 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.391824852 seconds)
  done (took 56.139925682 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.372951511 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.387002762 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.604464916 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.388814567 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.601759708 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.386551921 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.591711316 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.450691786 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.388732845 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.388991847 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.604633468 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.396488829 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.393714625 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.38863856 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.389007404 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.390036611 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.398832385 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.606238465 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.387503985 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.454607755 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.386733765 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.454412564 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.386782859 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.394188553 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.606306827 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.395588801 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.419906637 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.594442827 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.370987153 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.36643719 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.38967141 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.387394722 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.388348304 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.395389291 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.393018364 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.388581922 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.396253101 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.452489284 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.388349784 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.388214961 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.39222439 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.388160916 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.419804532 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.388435636 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.456567523 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.460415982 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.393150227 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.374451751 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.396012904 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.374141229 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.396114526 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.387506776 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.606306412 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.388254843 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.397762382 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.391129453 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.456105721 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.395491856 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.394210084 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.38799635 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.387952814 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.451129049 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.374688363 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.395643636 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.389816801 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.39814214 seconds)
  done (took 162.270951389 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 2.409459379 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.389807967 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.389175796 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.393421226 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.389661768 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.374533553 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.390176305 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.373806016 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.848444665 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.388755562 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.370641287 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.30964577 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.368896089 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.390179558 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.857657036 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.413858789 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 2.389835332 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.361707919 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 2.388030624 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.362978088 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.390731867 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.363428688 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 2.388851873 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.388689668 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.31116235 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.389207817 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.376305615 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.388153269 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.361867946 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.389034342 seconds)
  done (took 90.620942693 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.364299852 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.418548083 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.41862823 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.416807718 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.418336079 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.361736172 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.363242711 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.418897481 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.366167987 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.416940772 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.418362562 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.367006331 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.42035274 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.366075565 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.403398692 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.403396015 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.363083671 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.376091475 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.362352353 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 2.364952371 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.377121937 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.367001391 seconds)
  done (took 54.864273791 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 2.366943586 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.466013395 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.467376346 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.281555414 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.470033277 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.529455623 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.367966182 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.453821209 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.283036414 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.454470179 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 2.434658466 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.368718721 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 2.364146357 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.433892825 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.43479909 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 2.453607591 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.53008126 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.434634796 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.466523286 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.436472479 seconds)
  done (took 54.811855063 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.402937222 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.434159449 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.434348961 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.422255191 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.421875014 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.764709557 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.374905538 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.433596866 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.375417097 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.421613199 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.925028013 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.43647152 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.410704257 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.41106483 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.764548649 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.422686 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.404252346 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.389605887 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.375295987 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.386746264 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.926165505 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.404200245 seconds)
  done (took 57.057217159 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.375978453 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.375121481 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.37542778 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.577165306 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.381256829 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.375661128 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.381161792 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.38122216 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.375891148 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.375773339 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.454733368 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.509555122 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.531435392 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.564620263 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.461860093 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.57974833 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.40732003 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.488353957 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.456955284 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.44384063 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.447936342 seconds)
  done (took 53.635262441 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 2.34886873 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 2.353345606 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.396780648 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 2.361255536 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.336561587 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.346288597 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.341502337 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.417180143 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.337256452 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.358921218 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 2.354196875 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 2.346703046 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 2.353841906 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 2.441519652 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.340753716 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.349018048 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.355508964 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.404825683 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.352186495 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.351666451 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.351274142 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 2.336429415 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.348975434 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.345578698 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.350630638 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 2.377700428 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 2.352458507 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 2.337547446 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 2.335672712 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.347411354 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 2.344412016 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 2.347211027 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 2.352863323 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 2.347367621 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 2.349810953 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.510197098 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 2.377852407 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 2.334102885 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 2.334336098 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.353084358 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.349022303 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 2.363166697 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 2.344969261 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.334258232 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.350252658 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 2.350981571 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 2.347926189 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.334049827 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.33563567 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.349369753 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.333386883 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.34691052 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.334101731 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 2.347978711 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 2.349573231 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.334964638 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 2.334813308 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 2.346539298 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 2.340635824 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.34474996 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.334559867 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.33392484 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.348849899 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 2.333418041 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 2.348685984 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.332783148 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.345440993 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.34805815 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 2.346491817 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 2.350687098 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.433593527 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.355022928 seconds)
  done (took 171.846042566 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.450087304 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.416930376 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.502899534 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.656666076 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.503027277 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.44996644 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.447472612 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.418998686 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.451177734 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.508613705 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.504151563 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.452341388 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.504086028 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.446241901 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.447381977 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.448075596 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.447532357 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.451509687 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.50801705 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.446334678 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.41523261 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.449350697 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.659360628 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.448292999 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.418439292 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.507945333 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.465614043 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.403494562 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.448780438 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.448962259 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.507859086 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.404427163 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.424218692 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.449222345 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.45242324 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.414299169 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.448431949 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.448240531 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.451601531 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.452035227 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.42407503 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.447523825 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.422451001 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.504616869 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.658683488 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.507064526 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.50891219 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.447985534 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.448998242 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.465204808 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.448162518 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.424285052 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.449421376 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.447849303 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.506565785 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.504483964 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.504863241 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.657152902 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.445529446 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.448931981 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.461946272 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.448406335 seconds)
  done (took 155.476039349 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 2.370826923 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 3.265266521 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 3.213754545 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.374116356 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 3.267727689 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.372009687 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 3.244511743 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.371193242 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.370195679 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.37114087 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 3.277943393 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 2.371203123 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 3.301259435 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 3.229486773 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.3750918 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.371261906 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 3.265269003 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.370519259 seconds)
  done (took 52.101318046 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 2.382335919 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.382756898 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.383592602 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.185539476 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.38583671 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.36595378 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.699164104 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.382189817 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.185583125 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.38346664 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.382403535 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.382656761 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 2.382171091 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.322622433 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.323496759 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.324755183 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 2.384621397 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.324752973 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.705001769 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.384529236 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.383185446 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.382740375 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.37682084 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.387415236 seconds)
  done (took 69.497972681 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.372646692 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.373795096 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.379848538 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.375084061 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.370400473 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.40011672 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.379051516 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.398614846 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.560544339 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.37044109 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.400348136 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.38248715 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.400287901 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.402748649 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.398895868 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.403207176 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.56077947 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.378748475 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.373600168 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.373336189 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.379036896 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.374601635 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.371297812 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.403991822 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.374315001 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.373992676 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.374445688 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.373548505 seconds)
  done (took 69.394113642 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.393795729 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 2.373717261 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.399804749 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.44609067 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.446814692 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.400158194 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.377284941 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.390463885 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.3741316 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.39034425 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.446862643 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.450289668 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.437726374 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.393033786 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.375977432 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.373859176 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.404167912 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.372166044 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.370858336 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.374091032 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.405815705 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.368674429 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 2.373626571 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.450963249 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.369869604 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.373385993 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.43763374 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.402935348 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.447846878 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.402139082 seconds)
  done (took 74.3401487 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.357384227 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.392988839 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.358663969 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.36689062 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.39153184 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.369112694 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.367597054 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.383640936 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.364832878 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.362341933 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.737632136 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.364187041 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.392375649 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.395219184 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.361745388 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.356336276 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.387224267 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.361568999 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.355931201 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.838707675 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.368302316 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.391447688 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.384248884 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.358660457 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.369814804 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.367029178 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.384008304 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.381553188 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.383979423 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.728730965 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.39354483 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.368806813 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.363019836 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.355703591 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.365495134 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.391039973 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.720628049 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.837429407 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.38130801 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.363189398 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.355538015 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.392267844 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.355285273 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.384769443 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.356038398 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.356699046 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.356691475 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.352556355 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.381163378 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.383251813 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.353110642 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.386145145 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.385912827 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.362205027 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.721390919 seconds)
  done (took 135.123003524 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.390325031 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 2.370532081 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.372086164 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.374563892 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.373635137 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.390905621 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.38867202 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.435068107 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.421718302 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.372032758 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.366633244 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.422186788 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.372321166 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 3.292483593 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.366681936 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 2.374754573 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.371825207 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 3.310465189 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.374062034 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.374464346 seconds)
  done (took 51.830244456 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.387565668 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.388045043 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.377450032 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.388792356 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.425301251 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.376554896 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.784336201 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.425054034 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.429990278 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.433675524 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.845466517 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.367276327 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.366736132 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.784698252 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.388513418 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.363899029 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 2.377330178 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.37694266 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.376986912 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.362541487 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.844504097 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.388235972 seconds)
  done (took 56.575010981 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 2.368367239 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.549625979 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.478123772 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.493939668 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 2.36854459 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.42940311 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.433156411 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.503094516 seconds)
  done (took 21.939336661 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.347219353 seconds)
    (2/2) benchmarking "in"...
    done (took 2.347119841 seconds)
  done (took 7.008608809 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 3.71224024 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.480803179 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.35094929 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.455988676 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 5.377868554 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.091079421 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.376202134 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 3.941926415 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.357646174 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.351579719 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.351221666 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.919084372 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.460575585 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 3.908732151 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 3.477921729 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.364533189 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.281429833 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.42809234 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.50913062 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.711387971 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.743210974 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.486109545 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.356103054 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.762718987 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.011930811 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.485892858 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.571299481 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.353602098 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.472318817 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 3.908040633 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.208108895 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.280841642 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 3.739557793 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.717434415 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.41787797 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 3.805859576 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.415245673 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.361082062 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.565780117 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.030661255 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 3.654596844 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 3.182023216 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.587569626 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.47281011 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 3.630382009 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.256343473 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 3.963509327 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.353983869 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.352099373 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 3.437099973 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.343872328 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.939653955 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.632921078 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.40435398 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.814009171 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 3.182066688 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.351503208 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 3.937025237 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 3.58649647 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 3.200548368 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 3.060333079 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.218798668 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.246875888 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 3.170066659 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 4.577492785 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 4.554841281 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.355408877 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.353470583 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.350942086 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.353240033 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.202799043 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 5.2527101 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.288772406 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 5.265937152 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 3.172202652 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.585912899 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 5.434933245 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.403759136 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.119743808 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.497768058 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.305990374 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.912906158 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.417782432 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.070021195 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.281176982 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.712647791 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.601318519 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.467538316 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.354176144 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.354255413 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.104642365 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.485975863 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.148995357 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.048050011 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.770181863 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.797982119 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.526438447 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.350225891 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.350552406 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.774978847 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 3.177686244 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.024109302 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.671345561 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.466165065 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.351323453 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.508957104 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 4.04948347 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 4.592471777 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 3.524014571 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.930202562 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.984411163 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.504878031 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.485938325 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.32505075 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 4.934069616 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 5.044639309 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.994994019 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.519826045 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.35976842 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.863688692 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 3.488869698 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.351879705 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.355847337 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.353045283 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.253272812 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.46022869 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.212278706 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.378456209 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.314664449 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.588258155 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.554999051 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.494782874 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.473208923 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.352796593 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.352541727 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.352773339 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 3.050777996 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 3.262357947 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.392758657 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.352886475 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.81019084 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.959255502 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.497309404 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.834393332 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.030227131 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.974450682 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.366296491 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.1085005 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.166335229 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.481550699 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.383963453 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.813840144 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.475470566 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.351957951 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.361042359 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 3.812680483 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.460826719 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.419748349 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.348688912 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.243667226 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.412326869 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.357038422 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.747424359 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 3.004903547 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.535885796 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.189780146 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 3.80658276 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 3.516402279 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 3.446191756 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.3523624 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.62643765 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.486313541 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.35245439 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.352280799 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.349781001 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.39025789 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.622515091 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.502416782 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.355410765 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.189979077 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.478086397 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.066664523 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.166516392 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 3.037880501 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 3.169208148 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.030560103 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.302359733 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 5.30419945 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 3.564728172 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.496920003 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 3.889499996 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.358020646 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.353612197 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.972034409 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.484578799 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.692825329 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.415909522 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.213620516 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.283321874 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.374711442 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.621915023 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.184444526 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.838869609 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.919599634 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.419274868 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.248540294 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.393198869 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.138128146 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.494085039 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.041277326 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.531295065 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.726168619 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.127379519 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 3.184494136 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.358126415 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.355050025 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.292984808 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.42100962 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.235691905 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.812131716 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.454699742 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.779043633 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.762941372 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.755368521 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.506503573 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.355973289 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.161042634 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 3.760210418 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.309584932 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.009849424 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 3.822024712 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.462759994 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.402317491 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.361572292 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.678188452 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.052056169 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.39910679 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.488646808 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.380531149 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.359897947 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.177442901 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.406214693 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.350471244 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.255830551 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.012580006 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.827346843 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.596224305 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 4.693168196 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.8107635 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.651493117 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.472803393 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.449685915 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.913794059 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.487857581 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.812981071 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.712905129 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 3.970636944 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.357510832 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.213423587 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.737963095 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.595816165 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.359818573 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.35267296 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.101355979 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.208641227 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.237441839 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 3.906603388 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.880242835 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.576463131 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 5.39709358 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.800854671 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.388087096 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 3.938418058 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.399931849 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.350077606 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 3.936777678 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 3.186036668 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.349498321 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.355965929 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.68015663 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.170335754 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 3.787801738 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.686998589 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.394819722 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.514143737 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.643267332 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.86337446 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.941276695 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.319845969 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 3.973655444 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.611530755 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.514160554 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.488308625 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.352355732 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.122870926 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.61611697 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 3.907805588 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.123622714 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 3.910751289 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.499585384 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.844799065 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.632448226 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.350712684 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.349964542 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.247577783 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 3.955591128 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.688837459 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.692693695 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 4.782515497 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 3.945407568 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.823984235 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 3.933426311 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 3.085901437 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.10972537 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.491880156 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.783586731 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 3.181387541 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.355580033 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.349544756 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.348769264 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.42299768 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.719788755 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.421856036 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.520354567 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.888619796 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.619955399 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.226531473 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 3.953485464 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.390440701 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.079556575 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.934218848 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.522089827 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.591501363 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 3.843733471 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.879659652 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.808674954 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.482368211 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.388526456 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.477712094 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.181415344 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.186814314 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.176320203 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.833024606 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.413886675 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 3.058219242 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 3.697148515 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.720589122 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.424770564 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.49098425 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.495697544 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.199689058 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.483582665 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.555831496 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.840303196 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.466232813 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.351839826 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.35191645 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.355090849 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.73077688 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.382506488 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.434802516 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.478723999 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.558178495 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.932302933 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.860128333 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.965866142 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.486143434 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.352043302 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.6971346 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.107379053 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.68221103 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 3.797347784 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.714773638 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.196655724 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.84273296 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.028745358 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.601966111 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.814243174 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.400975132 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.423282159 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.351226193 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.347024802 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.089175144 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.494582006 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.357196949 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.311695152 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.400749311 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.484131849 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.352459614 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.286671671 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 5.05406232 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 3.907396938 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.313381035 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.126660525 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.49118303 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.351897282 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.353344057 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.226460925 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.353050058 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.354711414 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.60429826 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.267579027 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.405146575 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.06167039 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.171480518 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.03076222 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.127719503 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 3.171912508 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.350119681 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.781118051 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.683948942 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.716842992 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.416208786 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.553132768 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.466183143 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.355999 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.070934512 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 3.995997656 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.619789086 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.351913047 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.349916007 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.757725897 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.47857578 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 3.848710083 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.476049602 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.353583073 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.501817391 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.835994694 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.544251057 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.352048327 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.352280565 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.832160805 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.537752916 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.261481948 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 3.5524227 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.492944779 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.683080227 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.543244484 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.059147144 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 3.97780758 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.53511329 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 3.91639244 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.619242601 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.353256706 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.324840208 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.81701722 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.364434525 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.967552334 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 3.154926689 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.414361271 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.996381273 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 3.527012247 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.727367387 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.512242587 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.291453432 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.475383577 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 3.926827477 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 4.055498986 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.455249238 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.350165717 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 3.715998465 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.416659964 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.722774207 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.403584977 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.53979208 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.492682725 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.364410501 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 3.639791679 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.350706252 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.3605342 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.713192145 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.423555363 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.217024775 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 3.753513481 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.360973579 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.352424248 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.351605512 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.352473591 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 3.699579778 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.355198694 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.464758633 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 5.251838296 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.743210155 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.213697464 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.496394821 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.489911434 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.66223978 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.288152772 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.248552434 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 4.833089916 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.355234195 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 3.593158691 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.768067585 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.338637001 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.906126508 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.879013837 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.430142921 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.356052655 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.354932305 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.044008626 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 3.303260496 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.365580424 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.356379033 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.738044223 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.955862226 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.487137464 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.35439267 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.353449912 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.356254342 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.465665333 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 3.917718696 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.361912164 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.133555117 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.494780274 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.354182637 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.230235606 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.763030661 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 4.628107275 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 3.988234971 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.360149971 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.352612496 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 3.84730073 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.614960753 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.994385312 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.539012675 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 5.272788977 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.550428791 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.350556872 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.378728089 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.36056297 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.351815053 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.977288635 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.483382073 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.358758879 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.35670614 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 3.865922069 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.625880971 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.43401504 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.391126243 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.379345474 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.52079712 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 4.237077321 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.425577527 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.592794651 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.359241201 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.79374545 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 3.619355527 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.782725249 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.508677416 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.495426845 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.738268846 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.511252581 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.396971188 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 3.971405382 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.450061312 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 4.405208266 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.398015711 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.365991753 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.524445085 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.35795095 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.445371673 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 3.914056 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.358543865 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.353400353 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 3.867630341 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.538144144 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.096577858 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.497983715 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.360296329 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.366229281 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.29427751 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.437095576 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.353888508 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.610403361 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.862846258 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.512076923 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.743739909 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.872509195 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.507083458 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.366577792 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.890118816 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.985147455 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.658375 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.416342 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.35860541 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.358986132 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.344818034 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.707752829 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 3.95027722 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.516128418 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 5.240434865 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 3.046639457 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.875178807 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.569584842 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.012388797 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 4.215879581 seconds)
  done (took 1906.741622947 seconds)
done (took 3878.783393071 seconds)
(9/22) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.549706527 seconds)
    (2/7) benchmarking "month"...
    done (took 2.457855503 seconds)
    (3/7) benchmarking "year"...
    done (took 2.444940658 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 2.358647636 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.371788615 seconds)
    (6/7) benchmarking "minute"...
    done (took 2.372196424 seconds)
    (7/7) benchmarking "second"...
    done (took 2.370202385 seconds)
  done (took 19.243472877 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 2.99250951 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.842839288 seconds)
    (3/9) benchmarking "Date"...
    done (took 2.826543991 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.98667153 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.376169498 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.167487708 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 2.354064542 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.096650368 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.170401978 seconds)
  done (took 28.131035644 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 2.448594239 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.367529942 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.374406777 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.382432403 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.572073062 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.496223703 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.383684054 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.495189759 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.532386079 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.56112771 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 2.515027654 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 2.361408339 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.536464705 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.555810347 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.489901411 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.52384531 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.366669997 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.522513088 seconds)
  done (took 46.802889903 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 2.340383769 seconds)
    (2/2) benchmarking "Date"...
    done (took 2.341863631 seconds)
  done (took 7.001792451 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.353536518 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.358880004 seconds)
  done (took 7.030582806 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 3.446528578 seconds)
    (2/2) benchmarking "Date"...
    done (took 3.401893633 seconds)
  done (took 9.167079118 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 2.863344374 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 2.357104511 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 2.355668726 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 2.358214321 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 2.614754164 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 2.793448588 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 2.673801341 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 2.357959846 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.356873244 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.358161804 seconds)
  done (took 27.469807028 seconds)
done (took 147.925454782 seconds)
(10/22) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 7.321890454 seconds)
  (2/4) benchmarking "strings"...
  done (took 7.41034156 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 7.886125051 seconds)
  (4/4) benchmarking "arrays"...
  done (took 7.554703686 seconds)
done (took 32.493248248 seconds)
(11/22) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.487587994 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.49480356 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.591364808 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.624119986 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.582816548 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 2.895337133 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.58496918 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.469080596 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.587681494 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.486306693 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.480679936 seconds)
  done (took 30.604455828 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.490850525 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.491934996 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.585550812 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.940243989 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.605155712 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 3.222343452 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.586618063 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.53849028 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.585623339 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.492875232 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.60858619 seconds)
  done (took 31.468095272 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.39440858 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.42279881 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.509248479 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.504727409 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.426713843 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.451962049 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.428422909 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.463548798 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.460380024 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.388237744 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.431443283 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.369332098 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 4.613674051 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.450092302 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.384150349 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 4.76883228 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 3.048312594 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.447729471 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.449926881 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.595004394 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.388607544 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.425678952 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.380830004 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.471755496 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.367630178 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.367842623 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.362026576 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.479778772 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.436859717 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.413677506 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.460949747 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.383881227 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.489546285 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.366977966 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.430296942 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.368391763 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.427995484 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 2.908958105 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.407375764 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.383872907 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.46912986 seconds)
  done (took 107.524867274 seconds)
done (took 171.920979693 seconds)
(12/22) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.774567294 seconds)
    (2/2) benchmarking "read"...
    done (took 2.929050027 seconds)
  done (took 8.02217265 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 7.428002203 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.741713338 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.510059328 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.501199553 seconds)
  done (took 25.071680176 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.323233157 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.628705722 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.55505462 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.441034571 seconds)
  done (took 27.263405921 seconds)
done (took 70.104437883 seconds)
(13/22) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.328134469 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.328836015 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.326934198 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.326155024 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.327659808 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.327015566 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.326720788 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.326387434 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.326662573 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.326162314 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.326179651 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.327822616 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.326223505 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.326917334 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.326786269 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.328169827 seconds)
  done (took 39.551483003 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.328089775 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.329227127 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.344973284 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.332945498 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.327998799 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.327860562 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.33156896 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.329014892 seconds)
  done (took 20.972242371 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.327529406 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 2.326917695 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.32871386 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 2.327324025 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 2.328462009 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.327300231 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.327534716 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 2.326996177 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.327112979 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.326151772 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.327519483 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 2.327671062 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.329661114 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.327654698 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.327358667 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.328084106 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 2.325389501 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.326584129 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.327173919 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 2.325295814 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.326605788 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 2.326380837 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.325187301 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.331747502 seconds)
  done (took 58.173199254 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 2.351859842 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 2.729080597 seconds)
  done (took 7.397200756 seconds)
done (took 128.412401029 seconds)
(14/22) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.443411586 seconds)
    (2/2) benchmarking "String"...
    done (took 2.521407955 seconds)
  done (took 7.280000833 seconds)
  (2/7) benchmarking "join"...
  done (took 7.378433199 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 2.486959719 seconds)
    (2/4) benchmarking "different"...
    done (took 2.420355337 seconds)
    (3/4) benchmarking "identical"...
    done (took 2.624626461 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.487618569 seconds)
  done (took 12.340395918 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.289967368 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 7.31671893 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 3.425888883 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 2.874615309 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.869331851 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 2.537972867 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.917477617 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 5.23994299 seconds)
  done (took 33.500122568 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.634311691 seconds)
    (2/3) benchmarking "different"...
    done (took 2.380879031 seconds)
    (3/3) benchmarking "different length"...
    done (took 2.362545593 seconds)
  done (took 9.701102651 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 4.51186678 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.477572519 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.132530691 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.547803328 seconds)
  done (took 15.986166677 seconds)
done (took 91.821629742 seconds)
(15/22) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.382776318 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.359651518 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.384453217 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.875065957 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 3.147441486 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.383189737 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.412561817 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.359124419 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.44775362 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.610491844 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.568868087 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.224759155 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.358647942 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.315361452 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 5.135743442 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.381999391 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.361271825 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.420318462 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.360178428 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.486884268 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.387152354 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.360791697 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.382534522 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.37929012 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.436505126 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.399700431 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.360384538 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.383694922 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.360608465 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.358990988 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.435302385 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.390459779 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.87540556 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 3.169820989 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.668066029 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 4.167192397 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 3.129767685 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.382888177 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.398653013 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.398554915 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.348366125 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.955216355 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.488465634 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.420588468 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.383934716 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.383397378 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.360003555 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.38334692 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.707900617 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.973059657 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.319998956 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.104795615 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.362421527 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.595582086 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.384493015 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.455079886 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.579036629 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 3.020195407 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 3.277880082 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.364224229 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.471645664 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.451801965 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.454128952 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.497328771 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.943605329 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 3.15086916 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.670019191 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 3.099444545 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.421155242 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 6.402585761 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 3.586166913 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.886913846 seconds)
  done (took 208.022952724 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.87631758 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.438005341 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.44898492 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.459230346 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.892082195 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.560525399 seconds)
  done (took 21.78004516 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.379033513 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.369826361 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.357647247 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.658640903 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.448815306 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.387789438 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.363141316 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.365459869 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.410358362 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.397648541 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.385952263 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.366681227 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.36202816 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.317120574 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.624942297 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.3838023 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.364977497 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.376912808 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.659346785 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.374477508 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.364555 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.373497969 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.610735409 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.372632667 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.37662793 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.420543734 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.447478322 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.411556805 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.390153633 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.642495407 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.373142753 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.50124106 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.395790407 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.366752283 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.381539864 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.656834094 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.548293124 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.612533448 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.315775402 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.31990112 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.556781379 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.194979959 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.228108337 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.760168524 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.613892862 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.435676545 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.383459445 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.548105296 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.31901382 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.200742288 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.358322789 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.376334519 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.502534539 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.316969081 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.517176212 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.481634494 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.373533837 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.315594942 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.374850017 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.367258554 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.362321225 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.388267397 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.543533179 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.382343266 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.357487305 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.576392245 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.612359866 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.316220701 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.073810754 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.375462255 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.364599074 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.524605969 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.498061708 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.37340739 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.511640611 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.380300148 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.422890293 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.315595058 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.484372725 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.259482761 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.614968943 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.315304918 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.365579426 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.380638012 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.315857707 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.380490321 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.649587997 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.372450587 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.211646167 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.398314395 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.314840375 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.444166282 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.050024105 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.377291067 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.656755956 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.613044755 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.673419893 seconds)
  done (took 302.108695357 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.578385584 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.658879259 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.920120589 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.669650738 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.465455344 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.664976385 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.97510386 seconds)
  done (took 21.251493161 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.583108934 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.707695777 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.314038165 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.318568511 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.3140122 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.51408515 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.314502853 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.588724308 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.6932711 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.707015191 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.611626015 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.793406041 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.314748841 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.313765666 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.316302421 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.616383676 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.446936172 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.571201019 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.319694144 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.315809212 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.585407423 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.554794865 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.709204312 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.31658418 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.407562684 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.315569003 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.315478622 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.679839755 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.537067837 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.680073956 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.322440814 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.745153432 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.590227881 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.58850307 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.325343255 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.48322916 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.693862796 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.717874049 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.567655885 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.391053174 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.523542038 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.421455485 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.578808053 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.503277767 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.629565123 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.499069057 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.481593132 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.737760639 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.320041834 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.388889167 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.543813608 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.315501996 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.512635099 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.408005897 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.694797815 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.78296517 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.581928119 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.315094444 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.498872317 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.313186807 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.62800893 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.313661274 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.321075573 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.319940145 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.570387502 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.317162301 seconds)
  done (took 277.076511906 seconds)
done (took 832.982795527 seconds)
(16/22) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.219677671 seconds)
  (2/8) benchmarking "mandel"...
  done (took 3.743138327 seconds)
  (3/8) benchmarking "pisum"...
  done (took 7.345914783 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 7.388633468 seconds)
  (5/8) benchmarking "printfd"...
  done (took 7.316727563 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 7.655171258 seconds)
  (7/8) benchmarking "fib"...
  done (took 2.729722246 seconds)
  (8/8) benchmarking "parseint"...
  done (took 3.311656442 seconds)
done (took 47.026238663 seconds)
(17/22) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.369906906 seconds)
    (2/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.322445367 seconds)
    (3/9) benchmarking (5, "tup_tup")...
    done (took 2.791148123 seconds)
    (4/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.364812861 seconds)
    (5/9) benchmarking (3, "scal_tup")...
    done (took 2.35951637 seconds)
    (6/9) benchmarking (10, "tup_tup")...
    done (took 2.36708363 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 2.365400693 seconds)
    (8/9) benchmarking (10, "scal_tup")...
    done (took 2.367890156 seconds)
    (9/9) benchmarking (3, "tup_tup")...
    done (took 2.363835688 seconds)
  done (took 28.99334873 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.32317503 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.323414463 seconds)
    (3/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.691790028 seconds)
  done (took 23.659392551 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 3)...
    done (took 2.595496381 seconds)
    (2/6) benchmarking ("tuple", 5)...
    done (took 2.490482446 seconds)
    (3/6) benchmarking ("array", 5)...
    done (took 2.646034128 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.590498581 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.81029087 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.523652419 seconds)
  done (took 17.97861121 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.329542607 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.323238696 seconds)
    (3/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.325001653 seconds)
    (4/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.324052816 seconds)
  done (took 31.624847117 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.399131524 seconds)
    (2/4) benchmarking ("(10000000,)", 1)...
    done (took 2.718244288 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.441444251 seconds)
    (4/4) benchmarking ("(10000000,)", 2)...
    done (took 2.725380451 seconds)
  done (took 12.60571331 seconds)
  (6/6) benchmarking "26942"...
  done (took 3.44707687 seconds)
done (took 120.645081824 seconds)
(18/22) benchmarking "parallel"...
done (took 2.710151174 seconds)
(19/22) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.576078616 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.632460101 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.49728389 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.43544518 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.513654639 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.936912653 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 3.299555743 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.457546916 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.558343334 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.506686023 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.583283451 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.745827022 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.488343341 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.458311964 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.366177491 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.477906769 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.570886044 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.491825435 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.506176327 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.435620321 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.014512896 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.60234008 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.107718998 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.764538612 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.420019003 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.430896724 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.485143798 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 2.483617654 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.030128111 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.276530951 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 3.017205951 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.447996976 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.398126447 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.582072307 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.468048096 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.458846396 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.516681068 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.384596941 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.430960147 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.430476297 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.362651052 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.900244485 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.569696702 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.347581397 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.364662324 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.887470447 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.379201938 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.544525371 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.319768445 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.431438349 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.375817742 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.870924005 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.911639572 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.584507026 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.621335505 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.519930414 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.789597434 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.563275393 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.567139149 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.573535919 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.529208854 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.185102079 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.70993145 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.624891619 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.48095539 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.478484409 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.492228867 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.869188143 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.366847767 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.479675142 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.488419594 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.757801286 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.078481655 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.759807074 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.587155411 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.57788653 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.59966707 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.602780203 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.232622614 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.962891574 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.874912193 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.932040539 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.615975244 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.636056519 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.795352764 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.477754668 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.57421056 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.486475138 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.392000692 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.490544335 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.385272476 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 3.173659403 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.787118155 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.743534867 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.651672235 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.602338355 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.637605949 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.760032365 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.565639321 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.572954097 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.325703203 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.660007143 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.629640285 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.788667665 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.457855104 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.424385826 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.508451355 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.399230038 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.374646915 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.884014335 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.414873516 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.321053619 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.741650849 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 3.73804323 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.870155539 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.625350256 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.400457327 seconds)
  done (took 340.684884777 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.725191521 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.337949333 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.476043054 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.316073747 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.319362036 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.319170568 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.328354444 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.348846618 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.415490174 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.326154634 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.318184397 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.319436168 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.318730181 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.315930381 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.553089866 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.329935331 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.316717505 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.316399088 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.316273176 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.3179316 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.319834597 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.317833589 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.998574221 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.405899684 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.315559017 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.320518331 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 4.025719021 seconds)
  done (took 181.493707586 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.403071389 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.816087261 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.577642673 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.674725993 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.739609806 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.653541286 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.397937302 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.391152663 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.455187761 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.590787383 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.317997265 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.759251293 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.357139193 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.69313142 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.377854195 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.393024469 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.399925092 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.351125606 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.431213815 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.56757471 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.450627238 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.390503444 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.884535403 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 2.407379449 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.39039852 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.542993348 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.56023342 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.548116991 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.481909566 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.567689041 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.741715584 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.370851077 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.351339285 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.405977083 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.45800798 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.53830729 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.441310955 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.737589796 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 2.365442787 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.554597732 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.363694957 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.746048557 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.359082691 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.395835191 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.531322394 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.456299297 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.786247237 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.900296681 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.620493456 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.392226109 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.383579036 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.457688887 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.739447439 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.588991548 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.744565736 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.353749979 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.781144382 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.657771148 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.653182817 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.351380824 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.62218519 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.381896341 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.377530314 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.460498427 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.825455989 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.548150062 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.742152276 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.667854178 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.396125291 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.858796371 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.402930508 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.592971207 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.048941813 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.490983978 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.197987393 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.538445214 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.363207168 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.411875757 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.403883803 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.658410375 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.390373417 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.454682252 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.420721625 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.497653033 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.532346229 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.486155469 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.680722237 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.832741941 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.431886301 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.730311546 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 3.937950214 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.657449609 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.368080705 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.450240906 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.354662357 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.457940616 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.527509242 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.706274728 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.785584237 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.636805854 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.173117731 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.889786245 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.361373571 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.443209944 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.385879793 seconds)
  done (took 279.701641621 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 4.473172841 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.569585263 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.86278809 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.688749988 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.720363723 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.507973654 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.444593725 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.398509155 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.503703967 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.490193259 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.478920567 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.429620387 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.611805208 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.839513103 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 2.634281867 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.984486637 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.397075821 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.847099049 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.455970891 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.465796977 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.999212206 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.386512798 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.623220553 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.570697684 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.332131847 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.613928895 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.660199687 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.527482193 seconds)
  done (took 81.833396521 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.407909473 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.435534459 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.359624279 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.467686444 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.447493593 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.451999524 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.433594537 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.833089916 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.427162449 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.408301966 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.446869012 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.363669239 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.86569162 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.363790298 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.39957197 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.450263776 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.469710602 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.847990763 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.455625682 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.850006475 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.409755402 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.457721152 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.415338575 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.375527163 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.421282692 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.364841832 seconds)
  done (took 66.959792814 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.485374887 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.462584991 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.744850408 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.655580716 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.85919764 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.557288152 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.822447748 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.398638107 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.607788963 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.501018857 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 5.088994441 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.872304246 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.492342817 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.883602645 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.479363382 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.364675006 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.837875185 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.450195455 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 2.735227116 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.502851723 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.97748574 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.474000757 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.584920245 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.578374144 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.482479758 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.524490424 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.449971393 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.881742517 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.465522446 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.571540298 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.607721841 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.450748384 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.980067522 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.447753317 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.458281812 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.750744654 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.527468781 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.848726222 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.481787315 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.287056314 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.511515676 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.530552332 seconds)
  done (took 119.991338499 seconds)
done (took 1072.987297373 seconds)
(20/22) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.338945092 seconds)
  (2/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.347411681 seconds)
  (3/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.334783195 seconds)
  (4/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.342590585 seconds)
  (5/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.375371711 seconds)
  (6/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.351184107 seconds)
  (7/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.337948808 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.370033115 seconds)
  (9/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.350107547 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.374464824 seconds)
  (11/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.376277066 seconds)
  (12/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.38724 seconds)
  (13/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.378237536 seconds)
  (14/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.337243787 seconds)
  (15/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.35501368 seconds)
  (16/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.353331011 seconds)
  (17/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.339641804 seconds)
  (18/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.354633151 seconds)
  (19/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.348013378 seconds)
  (20/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.340882637 seconds)
  (21/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.345344088 seconds)
  (22/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.329371403 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.374139022 seconds)
  (24/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.340984857 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.339673835 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.367338977 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.35029253 seconds)
  (28/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.32687551 seconds)
  (29/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.340491815 seconds)
  (30/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.377032788 seconds)
  (31/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.341617561 seconds)
  (32/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.334996245 seconds)
  (33/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.331291228 seconds)
  (34/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.374125152 seconds)
  (35/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.345108141 seconds)
  (36/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.340521897 seconds)
  (37/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.335735284 seconds)
  (38/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.37044531 seconds)
  (39/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.373028714 seconds)
  (40/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.347053743 seconds)
  (41/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.345424613 seconds)
  (42/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.344816147 seconds)
  (43/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.339623681 seconds)
  (44/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.389811298 seconds)
  (45/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.344059335 seconds)
  (46/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.366277686 seconds)
  (47/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.35662698 seconds)
  (48/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.34297879 seconds)
  (49/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.339895021 seconds)
  (50/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.385773174 seconds)
  (51/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.389453837 seconds)
  (52/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.34607656 seconds)
  (53/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.365208634 seconds)
  (54/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.332007167 seconds)
  (55/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.354732051 seconds)
  (56/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.351023658 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.361949481 seconds)
  (58/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.362045353 seconds)
  (59/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.338558099 seconds)
  (60/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.413459486 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.333794129 seconds)
  (62/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.335551529 seconds)
  (63/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.356218717 seconds)
  (64/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.358273221 seconds)
  (65/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.340927357 seconds)
  (66/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.330497381 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.370071884 seconds)
  (68/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.347245468 seconds)
  (69/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.340931242 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.344646143 seconds)
  (71/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.345790758 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.333439757 seconds)
  (73/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.375316668 seconds)
  (74/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.341163493 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.336396293 seconds)
  (76/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.428414102 seconds)
  (77/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.337600988 seconds)
  (78/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.354518685 seconds)
  (79/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.410360544 seconds)
  (80/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.344270014 seconds)
  (81/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.33119758 seconds)
  (82/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.396025996 seconds)
  (83/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.460529686 seconds)
  (84/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.352239505 seconds)
  (85/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.33035617 seconds)
  (86/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.342535256 seconds)
  (87/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.389033662 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.336692817 seconds)
  (89/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.339853952 seconds)
  (90/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.344641195 seconds)
  (91/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.342541643 seconds)
  (92/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.334974858 seconds)
  (93/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.34903401 seconds)
  (94/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.345909227 seconds)
  (95/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.327790389 seconds)
  (96/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.354205128 seconds)
  (97/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.341877779 seconds)
  (98/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.409865244 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.386902171 seconds)
  (100/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.331150142 seconds)
  (101/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.351919876 seconds)
  (102/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.337114099 seconds)
  (103/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.359843503 seconds)
  (104/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.338578265 seconds)
  (105/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.390856806 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.34427283 seconds)
  (107/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.374457911 seconds)
  (108/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.379945394 seconds)
  (109/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.454988549 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.350518755 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.340970614 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.357040173 seconds)
  (113/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.32770027 seconds)
  (114/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.370978134 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.405612564 seconds)
  (116/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.33175265 seconds)
  (117/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.353044325 seconds)
  (118/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.347141222 seconds)
  (119/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.344963486 seconds)
  (120/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.339858946 seconds)
  (121/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.337374491 seconds)
  (122/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.343381462 seconds)
  (123/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.331948176 seconds)
  (124/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.343375219 seconds)
  (125/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.328020505 seconds)
  (126/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.348925056 seconds)
  (127/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.38050777 seconds)
  (128/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.372141937 seconds)
  (129/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.337111887 seconds)
  (130/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.350958292 seconds)
  (131/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.346618141 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.360384859 seconds)
  (133/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.33707045 seconds)
  (134/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.344267386 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.348472227 seconds)
  (136/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.352286547 seconds)
  (137/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.336022185 seconds)
  (138/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.399807158 seconds)
  (139/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.369112968 seconds)
  (140/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.355487868 seconds)
  (141/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.343463194 seconds)
  (142/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.340434097 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.378954387 seconds)
  (144/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.352617371 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.376141578 seconds)
  (146/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.345656932 seconds)
  (147/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.340936364 seconds)
  (148/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.332823897 seconds)
  (149/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.338306053 seconds)
  (150/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.354296206 seconds)
  (151/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.328226102 seconds)
  (152/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.338276526 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.341573961 seconds)
  (154/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.35339951 seconds)
  (155/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.333886932 seconds)
  (156/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.337591107 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.346388354 seconds)
  (158/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.346034518 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.389953333 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.411375069 seconds)
  (161/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.393065929 seconds)
  (162/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.397724968 seconds)
  (163/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.333108273 seconds)
  (164/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.350224473 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.348391935 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.38879348 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.407488507 seconds)
  (168/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.341805444 seconds)
  (169/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.377682883 seconds)
  (170/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.458377973 seconds)
  (171/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.343087979 seconds)
  (172/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.343143247 seconds)
  (173/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.343463435 seconds)
  (174/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.367983702 seconds)
  (175/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.34096876 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.356999167 seconds)
  (177/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.430334189 seconds)
  (178/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.372607698 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.365456001 seconds)
  (180/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.345308517 seconds)
  (181/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.344198668 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.393137687 seconds)
  (183/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.380641069 seconds)
  (184/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.359679674 seconds)
  (185/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.342800592 seconds)
  (186/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.342080502 seconds)
  (187/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.368273688 seconds)
  (188/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.336589755 seconds)
  (189/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.331039505 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.366463292 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.342090702 seconds)
  (192/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.340026607 seconds)
  (193/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.340335519 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.343203516 seconds)
  (195/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.339444247 seconds)
  (196/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.346480875 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.348747057 seconds)
  (198/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.347726101 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.351080427 seconds)
  (200/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.339348825 seconds)
  (201/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.339077744 seconds)
  (202/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.345356238 seconds)
  (203/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.343901997 seconds)
  (204/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.32909194 seconds)
  (205/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.332638662 seconds)
  (206/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.351714014 seconds)
  (207/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.340125167 seconds)
  (208/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.389318223 seconds)
  (209/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.352304351 seconds)
  (210/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.366572829 seconds)
  (211/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.342884832 seconds)
  (212/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.345076682 seconds)
  (213/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.347558887 seconds)
  (214/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.336137643 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.338953222 seconds)
  (216/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.345232393 seconds)
  (217/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.376682491 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.338984853 seconds)
  (219/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.346014357 seconds)
  (220/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.492966848 seconds)
  (221/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.371874071 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.370245918 seconds)
  (223/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.342586618 seconds)
  (224/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.452652959 seconds)
  (225/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.345499122 seconds)
  (226/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.371226704 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.351527558 seconds)
  (228/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.345877729 seconds)
  (229/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.350718374 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.363866685 seconds)
  (231/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.398913987 seconds)
  (232/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.402492096 seconds)
  (233/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.369406248 seconds)
  (234/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.331442758 seconds)
  (235/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.344917573 seconds)
  (236/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.339690962 seconds)
  (237/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.378723589 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.368995107 seconds)
  (239/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.344707536 seconds)
  (240/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.356637269 seconds)
  (241/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.368287818 seconds)
  (242/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.453482068 seconds)
  (243/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.343359179 seconds)
  (244/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.37516639 seconds)
  (245/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.367398041 seconds)
  (246/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.339243843 seconds)
  (247/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.335621483 seconds)
  (248/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.363016495 seconds)
  (249/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.335860552 seconds)
  (250/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.335356393 seconds)
  (251/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.391201269 seconds)
  (252/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.454149156 seconds)
  (253/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.340710306 seconds)
  (254/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.352853295 seconds)
  (255/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.35502322 seconds)
  (256/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.433726088 seconds)
  (257/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.336306018 seconds)
  (258/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.337239659 seconds)
  (259/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.343992059 seconds)
  (260/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.343968038 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.357277459 seconds)
  (262/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.360806101 seconds)
  (263/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.395648984 seconds)
  (264/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.354537165 seconds)
  (265/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.421416595 seconds)
  (266/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.349822837 seconds)
  (267/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.348265867 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.366288472 seconds)
  (269/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.337799576 seconds)
  (270/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.329020362 seconds)
  (271/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.335290048 seconds)
  (272/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.349485828 seconds)
  (273/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.35949923 seconds)
  (274/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.355123658 seconds)
  (275/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.547025378 seconds)
  (276/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.340309255 seconds)
  (277/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.374188618 seconds)
  (278/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.341158919 seconds)
  (279/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.34620315 seconds)
  (280/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.376742239 seconds)
  (281/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.33191282 seconds)
  (282/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.334977271 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.34318601 seconds)
  (284/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.398234505 seconds)
  (285/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.356805194 seconds)
  (286/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.342574575 seconds)
  (287/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.345980407 seconds)
  (288/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.419226135 seconds)
  (289/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.345750677 seconds)
  (290/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.335605153 seconds)
  (291/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.346348984 seconds)
  (292/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.334343056 seconds)
  (293/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.346474911 seconds)
  (294/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.35446424 seconds)
  (295/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.372129789 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.357160497 seconds)
  (297/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.359412082 seconds)
  (298/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.330852442 seconds)
  (299/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.360603016 seconds)
  (300/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.378891464 seconds)
  (301/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.349183428 seconds)
  (302/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.339964582 seconds)
  (303/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.365076752 seconds)
  (304/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.372168292 seconds)
  (305/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.343694054 seconds)
  (306/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.345374014 seconds)
  (307/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.348621034 seconds)
  (308/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.497050081 seconds)
  (309/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.370552372 seconds)
  (310/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.404579254 seconds)
  (311/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.333709075 seconds)
  (312/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.368942194 seconds)
  (313/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.34554763 seconds)
  (314/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.366527357 seconds)
  (315/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.33335326 seconds)
  (316/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.410335672 seconds)
  (317/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.352873798 seconds)
  (318/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.352372292 seconds)
  (319/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.334404973 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.372917671 seconds)
  (321/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.396817972 seconds)
  (322/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.547200821 seconds)
  (323/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.339165986 seconds)
  (324/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.378523191 seconds)
  (325/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.340422589 seconds)
  (326/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.332675127 seconds)
  (327/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.355469909 seconds)
  (328/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.333049042 seconds)
  (329/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.367670063 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.337358454 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.336176772 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.374785164 seconds)
  (333/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.369506574 seconds)
  (334/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.344770073 seconds)
  (335/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.338552192 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.347515857 seconds)
  (337/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.342484609 seconds)
  (338/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.35210427 seconds)
  (339/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.355960936 seconds)
  (340/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.350386836 seconds)
  (341/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.367486942 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.35181013 seconds)
  (343/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.371443998 seconds)
  (344/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.375468566 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.344304145 seconds)
  (346/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.35489349 seconds)
  (347/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.371495759 seconds)
  (348/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.345199821 seconds)
  (349/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.332083932 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.350270541 seconds)
  (351/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.345368666 seconds)
  (352/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.358072511 seconds)
  (353/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.34705108 seconds)
  (354/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.340142105 seconds)
  (355/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.358745245 seconds)
  (356/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.345456355 seconds)
  (357/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.330018495 seconds)
  (358/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.369677739 seconds)
  (359/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.341885371 seconds)
  (360/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.351154174 seconds)
  (361/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.358384903 seconds)
  (362/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.356537744 seconds)
  (363/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.472611304 seconds)
  (364/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.355935323 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.392973746 seconds)
  (366/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.351037549 seconds)
  (367/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.340558473 seconds)
  (368/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.346089888 seconds)
  (369/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.338139023 seconds)
  (370/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.334463344 seconds)
  (371/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.45215265 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.358368677 seconds)
  (373/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.351063516 seconds)
  (374/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.35726428 seconds)
  (375/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.34197274 seconds)
  (376/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.342524031 seconds)
  (377/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.377911199 seconds)
  (378/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.354945789 seconds)
  (379/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.465039987 seconds)
  (380/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.361656958 seconds)
  (381/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.343354457 seconds)
  (382/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.34418591 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.381277138 seconds)
  (384/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.401168463 seconds)
  (385/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.343198887 seconds)
  (386/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.367323404 seconds)
  (387/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.347378756 seconds)
  (388/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.341395497 seconds)
  (389/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.355726501 seconds)
  (390/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.338538052 seconds)
  (391/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.367288551 seconds)
  (392/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.34609039 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.37840287 seconds)
  (394/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.349013986 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.337216151 seconds)
  (396/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.40979462 seconds)
  (397/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.353029755 seconds)
  (398/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.348256207 seconds)
  (399/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.359973794 seconds)
  (400/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.34524415 seconds)
  (401/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.338778793 seconds)
  (402/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.346034948 seconds)
  (403/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.455984844 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.337641121 seconds)
  (405/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.431107298 seconds)
  (406/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.340533066 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.354828233 seconds)
  (408/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.355654533 seconds)
  (409/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.338543504 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.352128724 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.399365669 seconds)
  (412/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.361157571 seconds)
  (413/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.337889207 seconds)
  (414/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.380297701 seconds)
  (415/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.342888801 seconds)
  (416/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.499271739 seconds)
  (417/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.34836175 seconds)
  (418/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.336250909 seconds)
  (419/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.339307248 seconds)
  (420/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.355426406 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.350113926 seconds)
  (422/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.350106552 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.36295578 seconds)
  (424/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.347533604 seconds)
  (425/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.381520601 seconds)
  (426/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.351434226 seconds)
  (427/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.340268024 seconds)
  (428/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.339837779 seconds)
  (429/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.341176576 seconds)
  (430/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.339648793 seconds)
  (431/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.351369618 seconds)
  (432/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.338125884 seconds)
  (433/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.348044176 seconds)
  (434/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.336780981 seconds)
  (435/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.409801608 seconds)
  (436/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.345803264 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.346400752 seconds)
  (438/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.342754099 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.339264911 seconds)
  (440/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.410487354 seconds)
  (441/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.499759916 seconds)
  (442/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.343437387 seconds)
  (443/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.352527589 seconds)
  (444/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.362489037 seconds)
  (445/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.335585812 seconds)
  (446/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.3414676 seconds)
  (447/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.346771252 seconds)
  (448/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.386548165 seconds)
  (449/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.347449007 seconds)
  (450/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.33518573 seconds)
  (451/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.353434409 seconds)
  (452/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.368603128 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.338075208 seconds)
  (454/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.35791653 seconds)
  (455/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.357441285 seconds)
  (456/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.346975625 seconds)
  (457/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.411364527 seconds)
  (458/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.369019977 seconds)
  (459/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.349195534 seconds)
  (460/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.37385336 seconds)
  (461/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.346947469 seconds)
  (462/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.376522447 seconds)
  (463/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.539594 seconds)
  (464/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.359031894 seconds)
  (465/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.364399624 seconds)
  (466/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.452860553 seconds)
  (467/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.398526102 seconds)
  (468/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.355460474 seconds)
  (469/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.434927395 seconds)
  (470/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.345185343 seconds)
  (471/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.352554124 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.338615619 seconds)
  (473/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.343651445 seconds)
  (474/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.344443838 seconds)
  (475/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.34773384 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.33870604 seconds)
  (477/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.345997979 seconds)
  (478/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.347274062 seconds)
  (479/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.346744666 seconds)
  (480/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.420769307 seconds)
  (481/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.37129805 seconds)
  (482/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.346574425 seconds)
  (483/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.350984792 seconds)
  (484/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.353245117 seconds)
  (485/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.402997322 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.350975315 seconds)
  (487/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.331049863 seconds)
  (488/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.365927988 seconds)
  (489/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.347972524 seconds)
  (490/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.363772036 seconds)
  (491/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.344562582 seconds)
  (492/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.345964264 seconds)
  (493/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.347003173 seconds)
  (494/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.346538735 seconds)
  (495/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.372015452 seconds)
  (496/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.33628405 seconds)
  (497/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.368330619 seconds)
  (498/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.340740552 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.351358416 seconds)
  (500/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.345029319 seconds)
  (501/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.366700023 seconds)
  (502/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.395923736 seconds)
  (503/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.380265659 seconds)
  (504/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.341600237 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.368406991 seconds)
  (506/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.342751458 seconds)
  (507/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.330602899 seconds)
  (508/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.37464729 seconds)
  (509/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.334062827 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.345060064 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.354761498 seconds)
  (512/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.342952005 seconds)
  (513/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.342287222 seconds)
  (514/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.361832255 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.351136822 seconds)
  (516/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.399348555 seconds)
  (517/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.354550378 seconds)
  (518/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.338085128 seconds)
  (519/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.338973821 seconds)
  (520/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.346428158 seconds)
  (521/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.336461607 seconds)
  (522/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.353224561 seconds)
  (523/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.34026203 seconds)
  (524/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.35035795 seconds)
  (525/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.346263193 seconds)
  (526/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.38191038 seconds)
  (527/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.345882986 seconds)
  (528/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.334737703 seconds)
  (529/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.432255252 seconds)
  (530/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.347832524 seconds)
  (531/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.379081489 seconds)
  (532/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.473474076 seconds)
  (533/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.353893016 seconds)
  (534/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.3706563 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.337738097 seconds)
  (536/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.359045389 seconds)
  (537/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.348267126 seconds)
  (538/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.347012715 seconds)
  (539/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.352667526 seconds)
  (540/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.367399222 seconds)
  (541/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.350576756 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.359693922 seconds)
  (543/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.341213277 seconds)
  (544/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.331892749 seconds)
  (545/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.344673239 seconds)
  (546/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.370148367 seconds)
  (547/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.349826994 seconds)
  (548/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.367363607 seconds)
  (549/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.336634073 seconds)
  (550/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.352045753 seconds)
  (551/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.349233873 seconds)
  (552/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.341152295 seconds)
  (553/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.359343802 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.341660918 seconds)
  (555/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.35088234 seconds)
  (556/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.345344421 seconds)
  (557/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.384708132 seconds)
  (558/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.335915554 seconds)
  (559/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.344181606 seconds)
  (560/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.387306573 seconds)
  (561/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.366478201 seconds)
  (562/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.34718544 seconds)
  (563/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.400910805 seconds)
  (564/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.346440676 seconds)
  (565/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.360181816 seconds)
  (566/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.367627731 seconds)
  (567/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.403617676 seconds)
  (568/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.337161838 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.382886139 seconds)
  (570/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.338732711 seconds)
  (571/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.345376555 seconds)
  (572/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.352268528 seconds)
  (573/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.364847529 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.339069238 seconds)
  (575/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.344178018 seconds)
  (576/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.355045271 seconds)
  (577/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.349626672 seconds)
  (578/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.337931995 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.346563994 seconds)
  (580/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.348141319 seconds)
  (581/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.382999678 seconds)
  (582/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.348219167 seconds)
  (583/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.36077185 seconds)
  (584/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.346891527 seconds)
  (585/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.368429727 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.374939364 seconds)
  (587/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.339238547 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.381123244 seconds)
  (589/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.394410431 seconds)
  (590/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.500364645 seconds)
  (591/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.344827435 seconds)
  (592/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.341411972 seconds)
  (593/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.344408032 seconds)
  (594/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.338464125 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.346229233 seconds)
  (596/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.496666349 seconds)
  (597/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.340606153 seconds)
  (598/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.345629736 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.376165971 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.347948228 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.356325428 seconds)
  (602/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.490546443 seconds)
  (603/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.350869162 seconds)
  (604/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.370865563 seconds)
  (605/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.342405843 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.354900032 seconds)
  (607/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.37990162 seconds)
  (608/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.356395381 seconds)
  (609/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.35952562 seconds)
  (610/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.366888043 seconds)
  (611/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.350766436 seconds)
  (612/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.338260134 seconds)
  (613/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.350262091 seconds)
  (614/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.343369176 seconds)
  (615/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.374074058 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.343961086 seconds)
  (617/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.354516674 seconds)
  (618/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.373429029 seconds)
  (619/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.341276638 seconds)
  (620/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.348317409 seconds)
  (621/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.438404799 seconds)
  (622/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.345048707 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.355971093 seconds)
  (624/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.373343599 seconds)
  (625/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.367445604 seconds)
  (626/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.348425032 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.351148327 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.359781897 seconds)
  (629/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.332709093 seconds)
  (630/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.369653894 seconds)
  (631/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.400228538 seconds)
  (632/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.340328651 seconds)
  (633/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.366063381 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.338327105 seconds)
  (635/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.379642939 seconds)
  (636/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.335419053 seconds)
  (637/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.495387401 seconds)
  (638/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.380489887 seconds)
  (639/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.344241953 seconds)
  (640/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.358084204 seconds)
  (641/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.353753022 seconds)
  (642/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.353491123 seconds)
  (643/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.34965785 seconds)
  (644/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.346401278 seconds)
  (645/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.384444319 seconds)
  (646/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.366038915 seconds)
  (647/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.458514371 seconds)
  (648/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.356076179 seconds)
  (649/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.350597246 seconds)
  (650/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.365198977 seconds)
  (651/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.351906343 seconds)
  (652/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.404235173 seconds)
  (653/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.348522543 seconds)
  (654/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.382497157 seconds)
  (655/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.342244998 seconds)
  (656/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.348919809 seconds)
  (657/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.342929806 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.33769218 seconds)
  (659/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.350964379 seconds)
  (660/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.333700441 seconds)
  (661/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.368722519 seconds)
  (662/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.357171625 seconds)
  (663/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.343727199 seconds)
  (664/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.541451164 seconds)
  (665/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.336740799 seconds)
  (666/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.339992256 seconds)
  (667/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.457632074 seconds)
  (668/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.344223168 seconds)
  (669/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.35111188 seconds)
  (670/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.36060386 seconds)
  (671/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.363371222 seconds)
  (672/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.346316731 seconds)
  (673/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.34142161 seconds)
  (674/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.350590589 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.353113489 seconds)
  (676/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.36798948 seconds)
  (677/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.346095328 seconds)
  (678/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.354413528 seconds)
  (679/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.339148153 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.437152221 seconds)
done (took 1607.283950743 seconds)
(21/22) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 39.042557675 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 33.835235208 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 33.192650943 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 33.504170372 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 34.957618966 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 35.126170862 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 43.181028974 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 36.535267337 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 38.238368794 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 35.78898676 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 34.902207186 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 35.64144071 seconds)
  done (took 436.264516789 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 36.661803673 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 35.592156974 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 36.655455597 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 35.293296025 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 36.124779529 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 38.398870207 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 39.198325953 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 36.5667079 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 36.418792602 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 36.05833672 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 38.301756243 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 35.939577115 seconds)
  done (took 444.748727172 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 37.688038288 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 37.502690868 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 37.889392372 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 36.18014647 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 38.006077567 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 38.049006464 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 41.92460715 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 35.273961415 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 37.383452645 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 35.557231644 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 37.03050003 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 35.697746111 seconds)
  done (took 452.646746425 seconds)
done (took 1335.980483636 seconds)
(22/22) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 5.128285826 seconds)
    (2/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 5.086766787 seconds)
    (3/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 5.262358945 seconds)
    (4/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 5.090653089 seconds)
    (5/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 5.396222387 seconds)
    (6/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 5.42864349 seconds)
    (7/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 5.150555724 seconds)
    (8/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 5.428321353 seconds)
    (9/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 5.140343282 seconds)
    (10/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 5.150629277 seconds)
    (11/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 5.140752732 seconds)
    (12/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 5.082264689 seconds)
    (13/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 10.066090825 seconds)
    (14/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 11.944158248 seconds)
    (15/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 6.120781165 seconds)
    (16/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 5.316074733 seconds)
    (17/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 5.325513622 seconds)
    (18/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 5.201538959 seconds)
    (19/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 5.39935843 seconds)
    (20/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 5.320488047 seconds)
    (21/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 5.088432538 seconds)
    (22/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 5.416645965 seconds)
    (23/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 5.322669192 seconds)
    (24/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 5.196915513 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 5.124400798 seconds)
    (26/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 5.683743771 seconds)
    (27/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 5.283544215 seconds)
    (28/434) benchmarking ("sort", "Int64", 0)...
    done (took 7.593693426 seconds)
    (29/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 10.069384503 seconds)
    (30/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 15.957291235 seconds)
    (31/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 8.243469796 seconds)
    (32/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 5.130206975 seconds)
    (33/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 5.47572512 seconds)
    (34/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 5.155550254 seconds)
    (35/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 6.093249314 seconds)
    (36/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 5.535918157 seconds)
    (37/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 5.256005447 seconds)
    (38/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 5.5127397 seconds)
    (39/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 5.326473492 seconds)
    (40/434) benchmarking ("sort", "Float64", 0)...
    done (took 7.197321645 seconds)
    (41/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 5.160222035 seconds)
    (42/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 5.601746495 seconds)
    (43/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 5.093396523 seconds)
    (44/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 5.148631579 seconds)
    (45/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 5.120144385 seconds)
    (46/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 5.29551303 seconds)
    (47/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 5.335713962 seconds)
    (48/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 5.320216841 seconds)
    (49/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 5.348437359 seconds)
    (50/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 5.088051315 seconds)
    (51/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 5.346984427 seconds)
    (52/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 5.22149203 seconds)
    (53/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 5.092500598 seconds)
    (54/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 5.299038161 seconds)
    (55/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 5.154620056 seconds)
    (56/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 10.066964058 seconds)
    (57/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 12.600510922 seconds)
    (58/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 5.095201283 seconds)
    (59/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 5.339709455 seconds)
    (60/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 6.092833119 seconds)
    (61/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 5.131943936 seconds)
    (62/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 10.065612783 seconds)
    (63/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 13.036854295 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 5.207123316 seconds)
    (65/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 5.304856049 seconds)
    (66/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 10.070014521 seconds)
    (67/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 11.919692853 seconds)
    (68/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 10.064677784 seconds)
    (69/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 5.65727312 seconds)
    (70/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 5.174420469 seconds)
    (71/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 5.293195674 seconds)
    (72/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 6.113181288 seconds)
    (73/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 5.22166635 seconds)
    (74/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 5.204782165 seconds)
    (75/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 5.088390799 seconds)
    (76/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 5.085448098 seconds)
    (77/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 5.402756661 seconds)
    (78/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 5.082341674 seconds)
    (79/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 10.061313641 seconds)
    (80/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 6.170357827 seconds)
    (81/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 5.282993016 seconds)
    (82/434) benchmarking ("perf_countequals", "Float32")...
    done (took 5.132232791 seconds)
    (83/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 5.402019671 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 5.393558477 seconds)
    (85/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 6.343607069 seconds)
    (86/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 6.015923839 seconds)
    (87/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 5.187411642 seconds)
    (88/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 5.540083291 seconds)
    (89/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 10.243042187 seconds)
    (90/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 5.44568451 seconds)
    (91/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 5.316654685 seconds)
    (92/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 5.157867769 seconds)
    (93/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 10.077108957 seconds)
    (94/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 14.387249653 seconds)
    (95/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 5.369553258 seconds)
    (96/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 5.155453539 seconds)
    (97/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 5.149648617 seconds)
    (98/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 10.12319572 seconds)
    (99/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 5.133617243 seconds)
    (100/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 5.102541503 seconds)
    (101/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 5.609647744 seconds)
    (102/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 5.466304177 seconds)
    (103/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 5.161844281 seconds)
    (104/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 5.288518668 seconds)
    (105/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 5.149249514 seconds)
    (106/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 5.134304864 seconds)
    (107/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 5.081641638 seconds)
    (108/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 5.288388006 seconds)
    (109/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 5.93093263 seconds)
    (110/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 6.076859195 seconds)
    (111/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.322957722 seconds)
    (112/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 5.232053907 seconds)
    (113/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 5.353210176 seconds)
    (114/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 5.180814562 seconds)
    (115/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 10.068448942 seconds)
    (116/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 5.612732036 seconds)
    (117/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 5.092280027 seconds)
    (118/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 5.080863937 seconds)
    (119/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 5.145542599 seconds)
    (120/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 5.318494258 seconds)
    (121/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 5.275402943 seconds)
    (122/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 5.081736113 seconds)
    (123/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 5.241734716 seconds)
    (124/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 10.095224862 seconds)
    (125/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.275824715 seconds)
    (126/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 5.315347335 seconds)
    (127/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 5.326879293 seconds)
    (128/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 9.677555604 seconds)
    (129/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 9.460504908 seconds)
    (130/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 5.201846979 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 5.137264822 seconds)
    (132/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 10.069348475 seconds)
    (133/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 16.886077348 seconds)
    (134/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 5.913111593 seconds)
    (135/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 5.445756485 seconds)
    (136/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 5.101101101 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 5.312717957 seconds)
    (138/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 5.5892201 seconds)
    (139/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 5.492241075 seconds)
    (140/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 5.435653028 seconds)
    (141/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 5.549512674 seconds)
    (142/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 5.37928212 seconds)
    (143/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 10.076363452 seconds)
    (144/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 10.212353442 seconds)
    (145/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 5.157100189 seconds)
    (146/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 5.41178614 seconds)
    (147/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 5.185765541 seconds)
    (148/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 5.249087679 seconds)
    (149/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 5.255782438 seconds)
    (150/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 5.208135352 seconds)
    (151/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 5.159015781 seconds)
    (152/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 10.672790143 seconds)
    (153/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 5.400732789 seconds)
    (154/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 10.356288195 seconds)
    (155/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 5.082590299 seconds)
    (156/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 5.086808398 seconds)
    (157/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 5.128617917 seconds)
    (158/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 10.066002244 seconds)
    (159/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 5.379200722 seconds)
    (160/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 5.329947248 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 9.897431148 seconds)
    (162/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 10.073356141 seconds)
    (163/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 9.831694695 seconds)
    (164/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 5.315318527 seconds)
    (165/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 5.29230856 seconds)
    (166/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 5.404010907 seconds)
    (167/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 5.204409904 seconds)
    (168/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 5.086797272 seconds)
    (169/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.239336211 seconds)
    (170/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 5.152299868 seconds)
    (171/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 5.289942982 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 10.564448836 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 5.173606483 seconds)
    (174/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 5.448524925 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 8.588279617 seconds)
    (176/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 10.076652234 seconds)
    (177/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 9.333922257 seconds)
    (178/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 5.159017905 seconds)
    (179/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 10.073921946 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 12.069959165 seconds)
    (181/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 5.319288552 seconds)
    (182/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 5.263328341 seconds)
    (183/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 5.177389161 seconds)
    (184/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 5.154066136 seconds)
    (185/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 5.440979286 seconds)
    (186/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 5.331752315 seconds)
    (187/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 10.076696857 seconds)
    (188/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 6.163918555 seconds)
    (189/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 5.367795318 seconds)
    (190/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 5.09803096 seconds)
    (191/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 5.284169102 seconds)
    (192/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 5.344116884 seconds)
    (193/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 5.739689949 seconds)
    (194/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 5.451403061 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 5.080212463 seconds)
    (196/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 5.294364472 seconds)
    (197/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 5.444447926 seconds)
    (198/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 5.275429596 seconds)
    (199/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 8.986622354 seconds)
    (200/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 6.088641819 seconds)
    (201/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 9.854812276 seconds)
    (202/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 5.820112177 seconds)
    (203/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 5.284885489 seconds)
    (204/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 5.151805066 seconds)
    (205/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 5.134315442 seconds)
    (206/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 5.266857874 seconds)
    (207/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 5.313083385 seconds)
    (208/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 5.160121007 seconds)
    (209/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 5.405005677 seconds)
    (210/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 5.098156077 seconds)
    (211/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 5.150997015 seconds)
    (212/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 5.096544992 seconds)
    (213/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.318735122 seconds)
    (214/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 8.009731289 seconds)
    (215/434) benchmarking ("perf_countequals", "Int64")...
    done (took 5.185200401 seconds)
    (216/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 5.092736435 seconds)
    (217/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 5.4030323 seconds)
    (218/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 5.333127964 seconds)
    (219/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 8.041007591 seconds)
    (220/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 5.90127915 seconds)
    (221/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 5.100433967 seconds)
    (222/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 5.305350728 seconds)
    (223/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 5.321608039 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 5.328050708 seconds)
    (225/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 10.079229537 seconds)
    (226/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 6.985369283 seconds)
    (227/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 10.074738273 seconds)
    (228/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 5.726993536 seconds)
    (229/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 6.177535914 seconds)
    (230/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 5.157926289 seconds)
    (231/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 5.317541783 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 5.325554314 seconds)
    (233/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 5.216102078 seconds)
    (234/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 5.288071693 seconds)
    (235/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.244442489 seconds)
    (236/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 5.379390207 seconds)
    (237/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 5.357179699 seconds)
    (238/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 5.348965141 seconds)
    (239/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 10.081709476 seconds)
    (240/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 13.556245401 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 5.136749739 seconds)
    (242/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 5.217302493 seconds)
    (243/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 5.080184839 seconds)
    (244/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 5.31975373 seconds)
    (245/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 5.269809222 seconds)
    (246/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 9.044295168 seconds)
    (247/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 8.775663633 seconds)
    (248/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 5.089186989 seconds)
    (249/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.177266075 seconds)
    (250/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 5.644191498 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 5.32424889 seconds)
    (252/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 5.407227436 seconds)
    (253/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 5.176399217 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 5.317636178 seconds)
    (255/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 5.715953282 seconds)
    (256/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 5.275624711 seconds)
    (257/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 5.329968638 seconds)
    (258/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 5.418413466 seconds)
    (259/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 5.217229102 seconds)
    (260/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 5.798008118 seconds)
    (261/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 5.254777872 seconds)
    (262/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 5.320949083 seconds)
    (263/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 5.159147307 seconds)
    (264/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 5.246433828 seconds)
    (265/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 9.288641415 seconds)
    (266/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 5.968044033 seconds)
    (267/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 10.07486516 seconds)
    (268/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 12.066397588 seconds)
    (269/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 5.141351298 seconds)
    (270/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 5.46683945 seconds)
    (271/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 5.50906332 seconds)
    (272/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 5.584830525 seconds)
    (273/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 10.082303441 seconds)
    (274/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 9.516047581 seconds)
    (275/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 5.162979357 seconds)
    (276/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 5.135959999 seconds)
    (277/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 10.070455716 seconds)
    (278/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 5.889890759 seconds)
    (279/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 9.10063314 seconds)
    (280/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 9.172957981 seconds)
    (281/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 8.006812519 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 5.283569139 seconds)
    (283/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 10.072887146 seconds)
    (284/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 6.599182317 seconds)
    (285/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 5.338364571 seconds)
    (286/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 5.436666011 seconds)
    (287/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 5.544865331 seconds)
    (288/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 5.095601855 seconds)
    (289/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 5.086815569 seconds)
    (290/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 5.270752538 seconds)
    (291/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 5.678335928 seconds)
    (292/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 9.880761929 seconds)
    (293/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 5.18925281 seconds)
    (294/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 5.339809387 seconds)
    (295/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 5.191233015 seconds)
    (296/434) benchmarking ("perf_countequals", "Int8")...
    done (took 5.248121212 seconds)
    (297/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 5.243581447 seconds)
    (298/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 5.27146863 seconds)
    (299/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 5.322399067 seconds)
    (300/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 10.079569785 seconds)
    (301/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 12.048619819 seconds)
    (302/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 10.0721608 seconds)
    (303/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 12.433869135 seconds)
    (304/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 10.075585318 seconds)
    (305/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 14.228965488 seconds)
    (306/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 10.513837486 seconds)
    (307/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 5.353575275 seconds)
    (308/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 9.706152457 seconds)
    (309/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 6.104887479 seconds)
    (310/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.156024537 seconds)
    (311/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 5.086239753 seconds)
    (312/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 5.099996514 seconds)
    (313/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 5.26555534 seconds)
    (314/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 5.921412148 seconds)
    (315/434) benchmarking ("sort", "Int8", 0)...
    done (took 5.155171186 seconds)
    (316/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 5.0975773 seconds)
    (317/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 10.073149964 seconds)
    (318/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 9.479530898 seconds)
    (319/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 5.148988275 seconds)
    (320/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 5.310158357 seconds)
    (321/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 5.25934903 seconds)
    (322/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 10.073033033 seconds)
    (323/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 5.984597425 seconds)
    (324/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 5.131016153 seconds)
    (325/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 5.469628455 seconds)
    (326/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 5.139390634 seconds)
    (327/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 5.293359885 seconds)
    (328/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 5.339584638 seconds)
    (329/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 5.40029799 seconds)
    (330/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 5.225971484 seconds)
    (331/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 5.271721248 seconds)
    (332/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 5.28653026 seconds)
    (333/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 5.09551724 seconds)
    (334/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 6.237990064 seconds)
    (335/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 5.114654053 seconds)
    (336/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 5.186540456 seconds)
    (337/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 5.463194782 seconds)
    (338/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 5.45674031 seconds)
    (339/434) benchmarking ("perf_countequals", "Float64")...
    done (took 5.167784874 seconds)
    (340/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 5.317689801 seconds)
    (341/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 5.326674634 seconds)
    (342/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 5.326543003 seconds)
    (343/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 5.808287834 seconds)
    (344/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 5.606380723 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 5.747241987 seconds)
    (346/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 10.071157225 seconds)
    (347/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 6.05041946 seconds)
    (348/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 5.097766799 seconds)
    (349/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 5.295681167 seconds)
    (350/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 5.273762351 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 5.179170234 seconds)
    (352/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.253595764 seconds)
    (353/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 10.070351075 seconds)
    (354/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 5.295316884 seconds)
    (355/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 10.070961519 seconds)
    (356/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 5.860446641 seconds)
    (357/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 5.183237932 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 5.433128469 seconds)
    (359/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 5.091247491 seconds)
    (360/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 5.146755654 seconds)
    (361/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 5.08941434 seconds)
    (362/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 5.506488438 seconds)
    (363/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 5.551143064 seconds)
    (364/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 5.321094696 seconds)
    (365/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 10.076866353 seconds)
    (366/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 5.980005124 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 5.792369395 seconds)
    (368/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 5.501512676 seconds)
    (369/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 5.325841719 seconds)
    (370/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 10.115794768 seconds)
    (371/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 16.791874693 seconds)
    (372/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 10.073995222 seconds)
    (373/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 6.040426132 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 5.330080671 seconds)
    (375/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 5.157991551 seconds)
    (376/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.244637083 seconds)
    (377/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 10.073481528 seconds)
    (378/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 10.092333203 seconds)
    (379/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 5.247622514 seconds)
    (380/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 5.42640376 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 10.071009615 seconds)
    (382/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 5.769397515 seconds)
    (383/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 5.270279348 seconds)
    (384/434) benchmarking ("sort", "BigInt", 0)...
    done (took 10.072503095 seconds)
    (385/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 5.32985668 seconds)
    (386/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 5.898037848 seconds)
    (387/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 5.203728219 seconds)
    (388/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 5.184667897 seconds)
    (389/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 10.066138635 seconds)
    (390/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 5.573949524 seconds)
    (391/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 5.265374098 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 5.2377698 seconds)
    (393/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 8.89655846 seconds)
    (394/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 6.059735178 seconds)
    (395/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 5.303655715 seconds)
    (396/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 5.488246781 seconds)
    (397/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 5.256672231 seconds)
    (398/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 5.105836236 seconds)
    (399/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 10.074822531 seconds)
    (400/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 13.641766611 seconds)
    (401/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 5.248055506 seconds)
    (402/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 5.237866148 seconds)
    (403/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 5.326640179 seconds)
    (404/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 5.128174717 seconds)
    (405/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 10.066868787 seconds)
    (406/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 5.626665972 seconds)
    (407/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 5.276703637 seconds)
    (408/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 5.175042884 seconds)
    (409/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 5.284487623 seconds)
    (410/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 5.131261083 seconds)
    (411/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 5.284756539 seconds)
    (412/434) benchmarking ("sort", "Float32", 0)...
    done (took 5.778711882 seconds)
    (413/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 5.14067981 seconds)
    (414/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 5.087682131 seconds)
    (415/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 5.07783038 seconds)
    (416/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 10.066998148 seconds)
    (417/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 5.733228116 seconds)
    (418/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 10.077123575 seconds)
    (419/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 5.239393375 seconds)
    (420/434) benchmarking ("sort", "Bool", 0)...
    done (took 5.098635271 seconds)
    (421/434) benchmarking ("perf_countequals", "Bool")...
    done (took 5.245682714 seconds)
    (422/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 5.297101756 seconds)
    (423/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 5.219868862 seconds)
    (424/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 5.093849261 seconds)
    (425/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 5.152589021 seconds)
    (426/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 5.273298609 seconds)
    (427/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 5.159582165 seconds)
    (428/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 5.411899361 seconds)
    (429/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 9.7887153 seconds)
    (430/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 14.036385998 seconds)
    (431/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 11.63674995 seconds)
    (432/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 5.096333759 seconds)
    (433/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 5.133228087 seconds)
    (434/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 5.287581522 seconds)
  done (took 2801.375063723 seconds)
done (took 2806.449671019 seconds)
SAVING RESULT...
DONE!
