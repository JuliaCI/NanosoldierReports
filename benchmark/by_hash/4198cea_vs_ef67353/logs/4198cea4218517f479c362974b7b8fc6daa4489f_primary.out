cset: moving following pidspec: 210684
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.815650145 seconds)
loading group "shootout"... done (took 0.807942647 seconds)
loading group "string"... done (took 0.231439168 seconds)
loading group "linalg"... done (took 3.216812079 seconds)
loading group "parallel"... done (took 0.02237639 seconds)
loading group "find"... done (took 1.209398133 seconds)
loading group "tuple"... done (took 0.715655581 seconds)
loading group "union"... done (took 3.090233216 seconds)
loading group "dates"... done (took 0.155251385 seconds)
loading group "micro"... done (took 0.058669808 seconds)
loading group "simd"... done (took 0.367276973 seconds)
loading group "io"... done (took 1.417495595 seconds)
loading group "random"... done (took 2.389837334 seconds)
loading group "problem"... done (took 1.209456505 seconds)
loading group "array"... done (took 4.648270055 seconds)
loading group "misc"... done (took 0.988417662 seconds)
loading group "scalar"... done (took 3.490840434 seconds)
loading group "sort"... done (took 0.310881072 seconds)
loading group "sparse"... done (took 3.570522045 seconds)
loading group "collection"... done (took 6.101894209 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.5463043 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.075191628 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.252356837 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.079055978 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.282760928 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.082623969 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.088758712 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.071884714 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.031265061 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.163093359 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.214040707 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.386247812 seconds)
done (took 5.021051776 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.26465095 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.033564417 seconds)
    (2/2) benchmarking "String"...
    done (took 0.125061713 seconds)
  done (took 0.780417459 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.139193999 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.015834765 seconds)
    (3/3) benchmarking "different"...
    done (took 0.022930946 seconds)
  done (took 0.78753926 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020770744 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.097299555 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021866576 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.022413142 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.022340418 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.021765285 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.021553172 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.021533172 seconds)
  done (took 0.844214804 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.029493091 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.023239525 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021203872 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022633265 seconds)
  done (took 0.713735118 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.022943356 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.084021194 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.020473562 seconds)
    (4/4) benchmarking "different"...
    done (took 0.020339442 seconds)
  done (took 0.754804829 seconds)
done (took 4.796865051 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.198090702 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.78533646 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.985128524 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.183920617 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.359451022 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.306710981 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.080134951 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.24485379 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.148482542 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.031944585 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.18116908 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.040381204 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.572504706 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.461299691 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.028865887 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.145953039 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.580951499 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.039724695 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.0707038 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.222488861 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.040127084 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.039580818 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.04461201 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.0273026 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.125069038 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.138304654 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.585815592 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.066251643 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.115734722 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.04844103 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.028673537 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.031010696 seconds)
  done (took 9.615483224 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.150115813 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.145016774 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.024062547 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.060089745 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.051168767 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.025054136 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.030400706 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.023327132 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.043160203 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.089130244 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.046277851 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.160953034 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.021584887 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.024717569 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.138581397 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.117933949 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.038489593 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.037787039 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.022722099 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.036791095 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.049704087 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.035564547 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.033526082 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.034946005 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.070755135 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.091699587 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.042304803 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.064814106 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.023107945 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.035106029 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.05234906 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.064426236 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.023311395 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.021496306 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.066105714 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.043715441 seconds)
  done (took 2.682910618 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.702985664 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.051224063 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.139392341 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.130233729 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.064753771 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.0550386 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.180925196 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.078029796 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.055584837 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024238773 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.208199137 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.636544812 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.17126354 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.070719912 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.028787956 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.181529288 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.882051986 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.943761558 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023894038 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.024666278 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.138006695 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026957916 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.176510243 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.022064765 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.136194925 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.813553075 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026307154 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024879228 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.053188089 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.143289524 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.021399946 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.09895954 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.050427852 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.025525301 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.537403576 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.022576854 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.020393997 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.043577326 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.050918384 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022369999 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.023524005 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.034336773 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021603511 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074852745 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.036365841 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.518558785 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.025758137 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.701666782 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.83299709 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.031267112 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.028126001 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.057944664 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.020204518 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.02389256 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.593921278 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.11144777 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.023076668 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.248638761 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.025735919 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024706299 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024849561 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.057205709 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023969534 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.02507187 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.02715243 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.04189771 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.979759763 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.033006683 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.043537819 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.0222146 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.02320441 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.021680672 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.392947263 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029747129 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.025572425 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.021081077 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027419563 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023280114 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.02268747 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.067985202 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.050159868 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.048198631 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026612194 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023839651 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022859533 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.541665432 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.071219878 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.025378191 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.024516635 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.474771819 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020751881 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022628172 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024336699 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.044214972 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023466451 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.020081689 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058900608 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025159955 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.127145289 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.537720492 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.024824757 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.020336842 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.536647653 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.024587513 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.05482506 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.076558674 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.02273281 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.060350061 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.023186045 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.021111009 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026635103 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.020264903 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024657269 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.021592751 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.022410869 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.021448798 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.023030026 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024268719 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.0229774 seconds)
  done (took 19.905490139 seconds)
done (took 34.518085881 seconds)
(4/20) benchmarking "parallel"...
done (took 0.754206184 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.217411196 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.049575486 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019722111 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.17049452 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.045834437 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.139672747 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.180165651 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.130339572 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.046453729 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.046006167 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.046497509 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.189053378 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.197873268 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.047522941 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.122784893 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.199343464 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.04780529 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.020210427 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.046604808 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.047730723 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.047864609 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.020607647 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.047657984 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.04788901 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.123632998 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.048005613 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.020125252 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.124932667 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.049251315 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.127404851 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.049757338 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.048194337 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.048693023 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.126060487 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.050356182 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.126631514 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.020529274 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.050035464 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.050023372 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.050490174 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.049755834 seconds)
  done (took 4.060442795 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.046451405 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.038598608 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.041000622 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018240388 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028278112 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.038532059 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018237949 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038112891 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.042082456 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.038578057 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.03852322 seconds)
  done (took 1.146958002 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.041054219 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039383821 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.040932049 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018262987 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030014996 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039135492 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018121306 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038766382 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.041410711 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039071659 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039113568 seconds)
  done (took 1.092083609 seconds)
done (took 6.977239831 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.154345528 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.124942274 seconds)
  done (took 0.97094666 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.55343276 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.221368394 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.130847805 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.253257778 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.124269604 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.158204933 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.204233448 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.160796943 seconds)
  done (took 6.5568322 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.075513065 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.141907498 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.024529802 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.022857396 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.023029356 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.0231599 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024761399 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.023473158 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022789358 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.025231945 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.024895645 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.022946042 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.023802876 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.02496627 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.023003449 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.023331585 seconds)
  done (took 1.394192833 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.028959871 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.02584361 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.026778428 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.017208847 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.027727039 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.026456947 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.027457286 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.029086403 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.028524464 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.02780188 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.026038402 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.029302217 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.026918281 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.025369676 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.027975758 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.017311394 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.027857901 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.027307019 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.02906371 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.028066415 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.027157054 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.02478102 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.028728572 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.02612045 seconds)
  done (took 1.353263348 seconds)
done (took 10.978370158 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.142053803 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029859514 seconds)
  done (took 0.874287864 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.129529549 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.127759707 seconds)
  done (took 0.974783007 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.028915475 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.016132894 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.03235234 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.024257643 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.016187333 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.016064985 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.031458876 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.016308406 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.016121998 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.016245388 seconds)
  done (took 0.929296606 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019538342 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.023167664 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.02116541 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.019287373 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.020971854 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.017063378 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.019295616 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.01740892 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.022941754 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.016488795 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.020260746 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.038489053 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019731787 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.038834742 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.019605267 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.020152046 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.02161607 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.019421631 seconds)
  done (took 1.114788971 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017805637 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.017015896 seconds)
  done (took 0.751202667 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.0207232 seconds)
    (2/7) benchmarking "second"...
    done (took 0.017110903 seconds)
    (3/7) benchmarking "month"...
    done (took 0.018813549 seconds)
    (4/7) benchmarking "year"...
    done (took 0.018646174 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016711974 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.016156363 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016661695 seconds)
  done (took 0.835172623 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.391648035 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.090061168 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.322039728 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.024709795 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.03830499 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.234332002 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.019929698 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.024353817 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.024219627 seconds)
  done (took 1.887984262 seconds)
done (took 8.080710383 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.040720951 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.143949549 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.148421405 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.452068264 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.03434195 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.023653612 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.053823285 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.229579674 seconds)
done (took 1.857890133 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.485560349 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.274920165 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.193476162 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.024175437 seconds)
  done (took 2.214339628 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.314637297 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.1415573 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.030711457 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.023028473 seconds)
  done (took 1.241538696 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.022584265 seconds)
    (2/2) benchmarking "read"...
    done (took 0.028322341 seconds)
  done (took 0.782085318 seconds)
done (took 5.452531893 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030292103 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.016976894 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.02322 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018441034 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.018129348 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.01753565 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.017595764 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.018310413 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.01654645 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.018614782 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018580591 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018577105 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.0183224 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018311602 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017794852 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018647108 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.016673096 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.018271254 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018290678 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018278326 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.016702131 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018609913 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.017861656 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.018250844 seconds)
  done (took 1.164062509 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.036427363 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.02109572 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.021681023 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.021488145 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.022093237 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.021661459 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.021577723 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.020730503 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.021585396 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.020419033 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.022103736 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.022194615 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.02054802 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.022247083 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020655369 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.022229192 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.021865243 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021006324 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020655617 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.022263252 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.021725582 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020984026 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.02221995 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.021721216 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.022201535 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.022109326 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.020623056 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.020953439 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.021870522 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.022183033 seconds)
  done (took 1.397574198 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.023217658 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015276165 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.015501117 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.025697705 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.01516586 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.015305051 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.015734389 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.014901148 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015295962 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.016087921 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.015614748 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.015027416 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.015841401 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.015172499 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.016020835 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.016285173 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.020637006 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.036361953 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015495584 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015218144 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.020020726 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.015452418 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015413715 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.016080998 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.016500196 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.016057629 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015630844 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015853417 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.015431361 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.016136851 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.015458888 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.020063881 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.021596197 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.015732548 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.025731412 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020430702 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.01569316 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.019759195 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.016103858 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015057722 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015042219 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.01509199 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.015247652 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015199282 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.025986883 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.015534189 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.016352011 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.01573913 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015407992 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.015089631 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.01517199 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016758222 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.021160085 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.016569037 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.015125338 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.016456947 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015121715 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.01590799 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.015326555 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015159433 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015164061 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019407133 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.016680431 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.016044685 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.037200428 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.01675163 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.026174909 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015416953 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015841045 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.019585862 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.01592618 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.03525039 seconds)
  done (took 2.007658962 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.027866752 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.02573188 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.034291591 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.025051962 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018670794 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.01598697 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018951034 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016044219 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025384737 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019699276 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016186788 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019315207 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025471777 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019699532 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017224581 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.025311676 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019650343 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.01888909 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.016177178 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019708979 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017234801 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.01928143 seconds)
  done (took 1.194495014 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.104044651 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.021512391 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.06543213 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.024685526 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.023447047 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.024829774 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.021522542 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.021526371 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021679461 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022165549 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.022132798 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021668795 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.02359605 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.022206149 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.02217926 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021913861 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021675826 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.021977665 seconds)
  done (took 1.26266905 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.033933947 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.021303657 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.048816766 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.021043092 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.02115471 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.020727541 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024383249 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.024543828 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.02096004 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.021321586 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.025008585 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021022493 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.02100962 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021359355 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021005653 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.02133104 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.020975359 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021253127 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.026389176 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.026184114 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.025777922 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.02537815 seconds)
  done (took 1.264950133 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.035336362 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020468418 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.036720093 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.021836302 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015631777 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015543556 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.021977259 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.02054889 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.021729928 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.020161036 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020603564 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.01557458 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.022788223 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020818992 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.022893914 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020772336 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.02044104 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020813449 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020361748 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015773226 seconds)
  done (took 1.165920739 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.13090919 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017904145 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017577321 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021909532 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017440081 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.017457193 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021949452 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.018082604 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.018725715 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.043890548 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.018201907 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017992257 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.023873622 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.021047938 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017891942 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022308435 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.022082452 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.022095697 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.017623267 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017622831 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.042235505 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.017881544 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.022493637 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017850017 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017784405 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017860153 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017841468 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020868203 seconds)
  done (took 1.430676062 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.037845965 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.018072841 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.015886309 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.019710153 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.019596051 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.032154133 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.019639669 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.01942583 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017931377 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.015913177 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.018087602 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.018026922 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017956705 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.028399525 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.017958778 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.018040788 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.028385766 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.019795359 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.03257038 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.032376823 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.018174858 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.028292806 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.018144817 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.015917048 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.03249275 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018150249 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020087168 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.020933385 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018322808 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.016083341 seconds)
  done (took 1.388540148 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.03003256 seconds)
    (2/2) benchmarking "in"...
    done (took 0.026761198 seconds)
  done (took 0.795213357 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018702019 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.033549647 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.015091343 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.028447823 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.0239135 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.019378737 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.023919791 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024011247 seconds)
  done (took 0.918330206 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.1259206 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.15150325 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.018161081 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.01775382 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.125195858 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.085304693 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.135044991 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.029181462 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031147839 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.020071603 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.017125618 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.135015633 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.016892491 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.030659561 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018271599 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.027423901 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024669255 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.035122138 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.030218313 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.015831913 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.029698893 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017542368 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.016687848 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.01760944 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.018017864 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.023862607 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.033022209 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.029578312 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025384812 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.015192278 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.035921651 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.016047771 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.016801912 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025490861 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.126052418 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.016451672 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.054786528 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.016276528 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.020677468 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.015906233 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.028484922 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.037425042 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.030632982 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.034455326 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.017502145 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.017961574 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.015872049 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.01773242 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020202458 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.025352773 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.016233166 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.0236043 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.015816895 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.0175213 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.02672558 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.016230853 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.020890531 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.025514401 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029953039 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.026820603 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.0285549 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.031694699 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.025082632 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.024848522 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.016821685 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.036353113 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.017779128 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.029710093 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031391625 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.017308506 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.029444178 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.015966118 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.015194332 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.016135107 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.05272296 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.018542384 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.017336868 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.016472401 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.016685159 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.017930468 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.026088415 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.02112061 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023669004 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019281493 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032383809 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.025475561 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.015984235 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.023584255 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.03494763 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.020395072 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.016220968 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.033575554 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020301189 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.015992051 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.034538739 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.026951931 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.017713876 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.016857544 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020257131 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030007911 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.017588756 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.01527477 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024796416 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.017768426 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.127831905 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.021902701 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.025160425 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.016446465 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.027191437 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.023332223 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.018195333 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.015662391 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.021606942 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.017451521 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.015660395 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02622854 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.016658395 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.032166289 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.02383166 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.031636711 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.031954114 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.027468726 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.033070518 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.016435889 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.015606238 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.035753723 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.026566182 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.018933001 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.036110417 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.016649971 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.027441417 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.016702508 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.018186021 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.026149505 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.015926693 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018461481 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.016796575 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.023262583 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.018201096 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.018291079 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.022899071 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.025263868 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.0293264 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.017754363 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.025837587 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.017149561 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.03342937 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.026758318 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.021871466 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020427563 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.017628824 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.029360132 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.024047607 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.026247296 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.016706683 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.017668465 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.016811985 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.028317721 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026658466 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.018708189 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.026803361 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.021962879 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.017639279 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.016792777 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.017855523 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020842956 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020510297 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.017420272 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02479069 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.027164029 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.033291168 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.02541953 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.026581742 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.016579383 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.016851728 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.018802669 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.016725094 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.021840796 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.026441399 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.033065325 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.029160826 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.039007753 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.017037613 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.026848482 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.018751207 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.034867088 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.030718593 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.018016019 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022210621 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.0161528 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018820219 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.026592736 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028869181 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.031730092 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032454334 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.022067167 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.02192943 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.016799261 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.032592332 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.017328037 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.025511106 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.026357264 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.023781594 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.016774115 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.018759794 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.026288361 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021994449 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.017981807 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.033245531 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.025328915 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.016834132 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.031831637 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.017194866 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.028111726 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.016817881 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.02087051 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.022627477 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.01912378 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.026906373 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.032935565 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.016039228 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.0173036 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.033310116 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.018991746 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018829838 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.025206961 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.032704678 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.022039735 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.171982935 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026935761 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.027188176 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.021085493 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.026699289 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.016779177 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.025299937 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.018649303 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.027717884 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.015855806 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034127705 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.015130705 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.0313622 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.016459874 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.026908838 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.016164844 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025323026 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.016494739 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.033069274 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.017095675 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.0165024 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.027473174 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.01500641 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.02497038 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.015614338 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021405223 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.022938662 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.02511593 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.017240148 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025250715 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.017768922 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.026180495 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.022070242 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.025218085 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.025332061 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.021298467 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.015673095 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.024215494 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026582399 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.02395133 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.017001086 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.017043862 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.016031653 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.025017379 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.016966997 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.016524647 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023813638 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020922283 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.022036989 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.016996029 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.017087089 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.016904605 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024047338 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025079128 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033646788 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024159814 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.023099647 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.024786879 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.015480915 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.031115039 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.015505043 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.023134095 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.014907598 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.021818287 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.024730444 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.015767353 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034600422 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.016978984 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.02347749 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02748272 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.02419242 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019846433 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.033512243 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.018474343 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.024044477 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.023627288 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020708027 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.022804469 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.017084257 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.024094704 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.025038801 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.026129029 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.016276752 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.023159582 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024617154 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017072001 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.023692492 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.017101894 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.024229188 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.017567096 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.015333978 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.021183284 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.027416976 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.021299164 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.021514445 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.016237732 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.015148462 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.016136029 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023094248 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.021147227 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.024618724 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.0316948 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.015322932 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.016795213 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.015943282 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.020210627 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.034574943 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025846829 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.024104719 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.021297267 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.015461569 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.017469744 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.017698783 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.01618363 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.01924353 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.016574624 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.016725871 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.027262171 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.017927381 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.02120002 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.01641629 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.017263545 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.02639579 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.020514803 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.016572382 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.023524999 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.015981974 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.021863481 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.015581807 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.017626176 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.021236525 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.015886982 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.020400518 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.026696166 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.033137986 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.024047338 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.026532524 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.018141111 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.024952666 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.03266813 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.025110146 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017312599 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.025878435 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.015787631 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.035529493 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.025703336 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024876997 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.026720188 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.017500921 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.034185733 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.021701635 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.027016829 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.032565751 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.01766892 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.025558177 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.016626615 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.032974531 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.021733388 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.016523238 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.025537388 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024565016 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.023135998 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.028913864 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.017490566 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.025491902 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022054086 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.020807571 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.018392981 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.018404304 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.025638398 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.033298203 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.017541545 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.02272905 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.024898542 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.025185145 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021743421 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.029249793 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.024923018 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017691127 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.018364374 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020727742 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.017477132 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.029123446 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016959576 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.02172956 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.021850619 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.016747501 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.024124416 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.033988887 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.026445331 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026613497 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.016810055 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.016151051 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.035628168 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.0210741 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.020529916 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.025091686 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.027009191 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.029657482 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.026420288 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.034401663 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.017232455 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.023274297 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.029455109 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.017783803 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.016590499 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020956852 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.018678295 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.026166782 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026940815 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.024334017 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.01879073 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.024184083 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.030718948 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.018355382 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021947461 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.023583279 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.017685777 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.027725473 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.025073556 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.025577934 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.018394734 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.016639461 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.020570933 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.025812031 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.024386244 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.026031902 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017807417 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.02614451 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.031533021 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.024890568 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021692772 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.017672653 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021174063 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.026588826 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.024479354 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.016958768 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.022098016 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020849096 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.026520645 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.026650387 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.021882014 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.016767598 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.034832088 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.025912013 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.026266113 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.018765364 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.018868955 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017212615 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.016803353 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.028605219 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.016817411 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.018662375 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.022086868 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.018943822 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.03572042 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.025156166 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.033337567 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017927432 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.02188497 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.016815113 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026824715 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.022157665 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.017143382 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.027813165 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.016270505 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.03301737 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.029757966 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.025272335 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.016910685 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.022506769 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.174746793 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.031684231 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025671169 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.024972855 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.018761568 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025567414 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.017289154 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.026812418 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.015722712 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.015082425 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.025855933 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024479545 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027951069 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.01566951 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.025727667 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.017231155 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.024127297 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.024330986 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.017048362 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017116928 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.017012117 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025167924 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.020856167 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.024909848 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.02095785 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.032715365 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.016481948 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.026707884 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.024889288 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.026557421 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.029754162 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.027639399 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.024272308 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.016037921 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023206298 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.024139037 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.016496135 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.02129604 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.018383012 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.037330529 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.017036811 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.016978984 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.029490044 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022334864 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.015615325 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.02207454 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.020794054 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.025625139 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.016410355 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.025967226 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.020203865 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.016275053 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.021561038 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.021801972 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.015732729 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.015970838 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.016709927 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.026430185 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.02125762 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.016219273 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.034820483 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.016884817 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.02432832 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026438181 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.022776591 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.016838836 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.014860936 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.016345708 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.028980079 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031050768 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.019987373 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024307109 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.017089433 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.024849266 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.01495794 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.024316434 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.023503015 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024134139 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.015543402 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.015803659 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.030650785 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031101233 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020857693 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.032473827 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.024755424 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.016971001 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.037403314 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.024843568 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016724938 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.026825973 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017939537 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.015526907 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.015354206 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.017423599 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.027582803 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.015938869 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.01799637 seconds)
  done (took 15.434624881 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.060521184 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.016892783 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.015501054 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.015461895 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02230885 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016599457 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.015442108 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016626145 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.016634845 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017599075 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.015607603 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015716699 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.021052328 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.030709627 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.023395056 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.019224667 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015636919 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.016839587 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015611423 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016884593 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021631246 seconds)
  done (took 1.214402609 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020060843 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.019896836 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.019238645 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019393482 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018637012 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015658145 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018951268 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.01562635 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019362285 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015989311 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019565508 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01582348 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.016153716 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.016178585 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.01617657 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017240121 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019686353 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018988274 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015821219 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019395115 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017222065 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.019277647 seconds)
  done (took 1.167826995 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.018501315 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.016359598 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.024503328 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.015293626 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.015235568 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.018024442 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.015166238 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.020103158 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.02003237 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.020058567 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.024242862 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.015884976 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.015140008 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.021418804 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.015014677 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.0158297 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.060548419 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.016184832 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.017153707 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.016310056 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.01852968 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.025155152 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.015744105 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.015901655 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020641622 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.018214774 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.015442078 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.017685024 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.015931927 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.02027325 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.016168304 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.015167559 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.024476789 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.023616638 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020202752 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.020141363 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.016557329 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.016060943 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.01535911 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.015457013 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023719029 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.01657336 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015724825 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.016497742 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.024424563 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.015540161 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.015320068 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.024490164 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.015510022 seconds)
  done (took 1.706977705 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.028521957 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.068067358 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.021598503 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.050465973 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.02711565 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.020680303 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.021437922 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.053349357 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.016581903 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.016964332 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.02826339 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.028369662 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.018039791 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.019215898 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.022618028 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018018079 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018665698 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017351105 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.020308026 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017629004 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.020452745 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.022892416 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.027910892 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.028388844 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019187997 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017586442 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017819401 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.019399057 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.028023954 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.021071634 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.019604166 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.020796613 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.029845803 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.024493191 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018284311 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.018317463 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.029589458 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.018668652 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.018289034 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.016781911 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.018037996 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.019490804 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.023031014 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.029106471 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018456747 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.023383933 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018417665 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.016474744 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.028585343 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.018229154 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.021790058 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.029489913 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019352342 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.01863966 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019757843 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.02862444 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.018496577 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.017242886 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.01860754 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.02827679 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.016819415 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.019155777 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.029025976 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.017974139 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.021443663 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.029307271 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.023507834 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.01932665 seconds)
  done (took 2.476704566 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.025164474 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.051686828 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.029311536 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.029263735 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.024915228 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.02501119 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.025055363 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.025167775 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.025108369 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.027831796 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.025259046 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.167055113 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.022621553 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.027158147 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.025419096 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.025443452 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.025421695 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.02546213 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.025686108 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.026346965 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.027080474 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.031461905 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.026232913 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.030770266 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.030481836 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.022664346 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.025631348 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.025658114 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.030418178 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.025645924 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.030084569 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.025577539 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.025635265 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.030438223 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.030090003 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.025545267 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.016316788 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.025595791 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.02564858 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.025612244 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.022457997 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.030619683 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.025815007 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.022521019 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.025929214 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.025767894 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.030858352 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.030523645 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.027728705 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.028818371 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.025882359 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.03077625 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.025754834 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.026151359 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.031047607 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.034232239 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.031046053 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.03109727 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.026702434 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.032304982 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.03151247 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.03461516 seconds)
  done (took 2.639243182 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030547704 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.021350115 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.034341674 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.015296742 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.01523808 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.024227985 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.015241444 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.015204147 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.02107341 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.021105448 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022607021 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.024645107 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.027065425 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024054829 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.025916801 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026997934 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.025089063 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.025126084 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021464449 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.02474179 seconds)
  done (took 1.252492083 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.019186161 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020693206 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.016087302 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.03177146 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.016102869 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.023428663 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.016078634 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016024258 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015982049 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015986456 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020428068 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020510096 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016185344 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.024074246 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019606421 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.023637127 seconds)
  done (took 1.091310751 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020608003 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.02439933 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.126228814 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.016819693 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.019043077 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.016859903 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.017670908 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.016597461 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.018700102 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.030572733 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.017340292 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.019267463 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.017026949 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.015675552 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.016279326 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.018933907 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.018148682 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.017001711 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.016999699 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.127512185 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.025400513 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.017511651 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.019034772 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.017607026 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.018862042 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.025284034 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.018467923 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.01884001 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.017013089 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.019262229 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.018812979 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.028121155 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.018805827 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.017532292 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.015765011 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.01665167 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.017159878 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.019204174 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.019140972 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.017076219 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.015898345 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.018786397 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.017144586 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.017439249 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.018242086 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.019129181 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.018253738 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.027283671 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016993911 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.018974153 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.017067779 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.018210362 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.017409472 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.028427555 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.019083504 seconds)
  done (took 2.041325344 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.034938661 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.021058424 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.01528103 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015181036 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020621983 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.021259439 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.020776131 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.020828461 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021170726 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015166915 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.021243217 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.020305921 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021301754 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020984325 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.021452791 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021072289 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015268125 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.021146339 seconds)
  done (took 1.157343376 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.024461313 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020911203 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.021109246 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.017202309 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.017096248 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020902739 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.015522959 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.016713479 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016683011 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.017164581 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017273295 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.016891714 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016818958 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.016932584 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.020830894 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017208038 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016836906 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.015790305 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.017273231 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.015639576 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021268611 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.015761193 seconds)
  done (took 1.176697158 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.192738288 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.151235117 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.042429345 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.036261372 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.027658076 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.053208653 seconds)
  done (took 1.281635718 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.052974278 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.054404128 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020901537 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.020728358 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02475367 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023138641 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023072702 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023167282 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026066192 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028974335 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023536642 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026665205 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0264664 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028119296 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024975048 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025116702 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023578258 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023567501 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020984196 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030754702 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023620072 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027005799 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023961302 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023687697 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023834564 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028587659 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026954326 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029677938 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02390679 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027136746 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025396647 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023931066 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027129876 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029535265 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021101294 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026863631 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023929579 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031523193 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025403355 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028610846 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.021039611 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02654015 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028016452 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027192864 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027619158 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024406324 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027187042 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024312249 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025377103 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.037358506 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026665415 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029541536 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.0266801 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027938665 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027410451 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.035573211 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.030155697 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029252032 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02599153 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030274719 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029405475 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026059921 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029311303 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030464544 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026146676 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029578489 seconds)
  done (took 2.586991831 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.061162968 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.021243491 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023325842 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028534032 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027501156 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023154604 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023375139 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023432878 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023455162 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021110558 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.060317463 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023673155 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028135662 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028076038 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023680209 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023489798 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023566613 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028012233 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021272757 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.034304776 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023826556 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028535268 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028532749 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028508897 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029634864 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02554324 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023918204 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023861579 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023731663 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02379398 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026757419 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023993309 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028676213 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.142395708 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029745301 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024315207 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024046052 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026819269 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023936045 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025591071 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028709822 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.031571222 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024036932 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024108343 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030254146 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024232196 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024171546 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021690848 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024150089 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021637841 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029993411 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.030044672 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029983811 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029069059 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024357252 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024321832 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024173667 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024236343 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02427612 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025761616 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029084805 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024090219 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.035918466 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024350754 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024369983 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029407194 seconds)
  done (took 2.689547028 seconds)
done (took 52.632748062 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.206448538 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.167781055 seconds)
  done (took 1.149301902 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.137799425 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.135642209 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.164563734 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.024173287 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.082115172 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.17490166 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.125496196 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026841648 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.024623253 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.02609524 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.024371877 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025840754 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025746161 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023882746 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.086925053 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.02650164 seconds)
  done (took 1.922717435 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.07398134 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.242992459 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.058892316 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.023054186 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.104401393 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.029320375 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.024541067 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.028665144 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.0291706 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.023140135 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.070847776 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.03597114 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.027775646 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.028750674 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.024465776 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.027693876 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.028617607 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.029010458 seconds)
  done (took 1.69730262 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.082501094 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.033842708 seconds)
  done (took 0.910505499 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.126482316 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.064131523 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.106371741 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.312267726 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.095462166 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.100030274 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.103138036 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.100859646 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.068198481 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.095311966 seconds)
  done (took 1.955969805 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.062344926 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.057077844 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.287396084 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.054837817 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.034967956 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.029940849 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.030391124 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.031442182 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.030677624 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.029747877 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.075743123 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.028362089 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024730047 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.073122388 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.050965699 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.059175539 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.024021164 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.030542181 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.033026186 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.024042027 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.03024278 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.033236617 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.137207263 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.03141056 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.052938644 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.029869021 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.030005604 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.029873415 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.02985213 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.031324111 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.031927011 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.054795714 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.030896438 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.037925716 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.029356151 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.050678176 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.02483311 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.051803149 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.027609568 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024757354 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.028220266 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.031713809 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.025349927 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.031177217 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.031063351 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.030837871 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.031970664 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.024045628 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.03114421 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.027852386 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.024953734 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.029298173 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.029048288 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.030116264 seconds)
  done (took 3.077700934 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.077912658 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.067143555 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024574246 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.074070912 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068165701 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025126596 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.080662357 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.061222033 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078589698 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.02431285 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023674918 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023764707 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031650081 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.035546757 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077024353 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.069992392 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025916854 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.024421981 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.06949177 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.069656203 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023389275 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.081226963 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.071056953 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.068516779 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.023202534 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.024641791 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023291054 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023907141 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.032112477 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.031567277 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023739168 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.034452928 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.03536671 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.031276413 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023052586 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023390114 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023304755 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.031957908 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033616248 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.033480009 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.030461304 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023022227 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.023383194 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023861749 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.024343006 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022902353 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.033344833 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.031292557 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.033226858 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023867981 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023869705 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.023243815 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.024144579 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031073221 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.029836901 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.031353385 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.034478711 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.024098406 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024250686 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.025384618 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035449588 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.032422098 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.032173419 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024756342 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.033369276 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023725982 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034413386 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.03881571 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.024919371 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.02470199 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024120036 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024105648 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.024559857 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.030681134 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.030708327 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024189669 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.024078436 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02347287 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.032472146 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030913003 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023592234 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.032800266 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023133647 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023734409 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024186908 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024436454 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.033937656 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.032160613 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.024364659 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023845728 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023811022 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023765896 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.02306023 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.033345658 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.032996052 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.033320369 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.035183038 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024726374 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.036053313 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.033398861 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024827944 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.032380888 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024293838 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024726212 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024578547 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.032181774 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.031957538 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.033668455 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.024294609 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023923911 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.033582334 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.036588521 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.024307706 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.031958772 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034868523 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.03247674 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.023742972 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.035282619 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024294938 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.035284688 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024566234 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035278032 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024681438 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.033018097 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024610479 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.023737634 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024419336 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.036564964 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024980615 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.02442027 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024886536 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.025559139 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.033590243 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.037490813 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.025200699 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.033395768 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.03330755 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024988505 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.03553082 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024595004 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.035485378 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024613864 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024791384 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023705997 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.037510666 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.024863147 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.025854907 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.02554633 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.035713412 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024949244 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035340901 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.032511133 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023976524 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.036566805 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.035163338 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.032607506 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.035573781 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.025322623 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024586275 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024313122 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.024562452 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.035683416 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.037967021 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025453477 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024574136 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.032070394 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.035965839 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.024108828 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.032484663 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.032274679 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.032746734 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024729175 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.167106301 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.033617725 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.034240801 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.029992549 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.032549693 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030862479 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023476521 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.029533115 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.032419363 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023542014 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.036197645 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023546201 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.033395586 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.032640635 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.028907449 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.032181943 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.033370719 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.032079625 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.031836804 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.033793947 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023046421 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023292667 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.029654606 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023245141 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023423329 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.029295888 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023743991 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023944283 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.035751298 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023651167 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.032518552 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022949398 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.030378265 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022830131 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02372659 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03465732 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023287623 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023738799 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.030285802 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023634646 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.029494571 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.032462224 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.029418173 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023186614 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023642863 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.032993978 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.033916791 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.024445771 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023736714 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024027305 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.03267607 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.031628824 seconds)
  done (took 7.95748227 seconds)
done (took 19.463027696 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.144311317 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.072866962 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.143570952 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.085261985 seconds)
  done (took 1.228124747 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.057331129 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019845851 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.141489133 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.152855073 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.020137923 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.135558697 seconds)
  done (took 1.335253306 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.213162898 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.139014079 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.142926248 seconds)
  done (took 1.300480302 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.138961724 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.282196968 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.551466164 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.133872572 seconds)
  done (took 1.917692405 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.174200272 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.166502647 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.03165555 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.182319552 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.038710399 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.016283332 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.103131909 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.022980469 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.052869457 seconds)
  done (took 1.660770665 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.100012316 seconds)
done (took 8.347132483 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.185669086 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.140407872 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.034575174 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.028076896 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.133821745 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.132219471 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.148889053 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.029880469 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.135043974 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.296412017 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.164522412 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.048573769 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.156113918 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.043695491 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.263806253 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.031861161 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029279978 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.025090747 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.141807512 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.135466149 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.243418626 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.02884412 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.097079261 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.030574111 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.101418457 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.080600588 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.170608246 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.294706359 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.278747937 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.030860779 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.128324192 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.042754484 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.115856069 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.13284204 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.1350064 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.048798096 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.02048294 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.243922107 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.109955761 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.311175343 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.152689104 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.027571067 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.141653703 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.025442976 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.019673624 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.144168038 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.032987057 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.026742003 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.043147339 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.027087776 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.04405138 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.029018946 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.143533015 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.024370153 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.093852747 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.140690257 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.165771531 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.097997138 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.026324313 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.03963817 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.029752553 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.157677997 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.038980375 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.026224828 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.032787533 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.020368825 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.138288077 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.040286294 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.02076965 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.030497442 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.02878133 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.111779037 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.156762174 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.067278729 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.032733043 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.119030593 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.095570572 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.047455815 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.049929954 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.030366175 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.020078802 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.173482753 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.027246703 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.040333055 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.027640451 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.053785389 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.020336422 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.035946937 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.157242676 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.149730062 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.088590604 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.021364072 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.237548722 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.022663164 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.200050738 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.02135588 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.020225806 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.166098484 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.019990957 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.020110956 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.029500479 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.028352957 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.021684608 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.150060782 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.100187645 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.027538506 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.026947041 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.020330788 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.025948202 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.020959644 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.020391494 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020249782 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.095031273 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.038552599 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.019383679 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.108070798 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.126841469 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.031319165 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.038192808 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.087072557 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.023459044 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.029349175 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.027047645 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.12457838 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.028160718 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.13528078 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.021201099 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.042633043 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.119770355 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.094438593 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.107025439 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.019892698 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.155264493 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.030048152 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.019408572 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027002276 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.048085992 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.029422451 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.038543277 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.028204438 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.15558656 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.030692588 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.025746324 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.119659295 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.01930094 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.116865431 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.094500236 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.129497619 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.025187424 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.030261127 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.09473856 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.044192106 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.048926588 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.043007658 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.025572901 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.021097155 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.020543042 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.035120638 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.019422552 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.02041206 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.034075198 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.026794595 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.01973487 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.242863542 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.030284978 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024544461 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.259318325 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.032741414 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.097944315 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.040896556 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.020535893 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.102215207 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.022221053 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.040702506 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.085242255 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.020704855 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.094896846 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.020707486 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.020393093 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.027864409 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.02194709 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.0292008 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.034159605 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.020883422 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.033874621 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.028109289 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.020501704 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.101330135 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.022136943 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.170892661 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.099601436 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.113265203 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.020730848 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.039068765 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.020076954 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.138202208 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.021054832 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.071578781 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.111606005 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.0354651 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.040727632 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021531664 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.094506498 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.034855675 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.020062337 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.099803769 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.130700421 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.097513721 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.027971101 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.247562669 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.029445185 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.020872206 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.027608827 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.028487141 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.021000584 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.097094931 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.024988326 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.019686572 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.020012498 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.021883023 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.019323095 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.044682639 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.019747157 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.027836758 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.020530524 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.023231169 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.022336112 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.01969724 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.028002401 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.09715387 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.131156003 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.026712079 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.040485521 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.033572003 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.03175758 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.068129396 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.027735041 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.145922678 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.020933345 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.030683706 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.043455186 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.020328262 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.02531207 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.02054602 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.038633251 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.024013377 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.022215301 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.028934995 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.021088878 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.022165066 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.020917 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.020956454 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.028956513 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.022130303 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.020149845 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.02006962 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.020523668 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.025248165 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.025853776 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.031446286 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.041097687 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.48036876 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.022877355 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.0231389 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.020891583 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.020681064 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.020977158 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.022234846 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.020556466 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.022546886 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.020820124 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.020219541 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.050089634 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.025699885 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.021469781 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.041953411 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.020698834 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.030053995 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.130060929 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.037797944 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.025620842 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.019945069 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.26863222 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.108803968 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.042752813 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.04080438 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.021088882 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.031196652 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.021256544 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.022378281 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.021028906 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.04967178 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.026551608 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.021290908 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.019982806 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.0202374 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.068882072 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.02847721 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.020178131 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.028364168 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.020749948 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.020686908 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.049006091 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.021855149 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.020621525 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.039173453 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.033583162 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.108739718 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.032891352 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.02375557 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.073005871 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.019991604 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.020689166 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.021113837 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.119466899 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.033795583 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.022300039 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.020750042 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.028496892 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.02934226 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.075113524 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.026956879 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.023771519 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.028445329 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.019910377 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.021097205 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.046664762 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.049559987 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.021896197 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.024412659 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.020510104 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.02117799 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.098103611 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.028435443 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.025379797 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.112335639 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.022688853 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.028201647 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.020015577 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.482651751 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.027388088 seconds)
  done (took 22.227170695 seconds)
done (took 23.05569623 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.169897298 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.035140731 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.033671564 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.029128097 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.032500844 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.032970167 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.034266414 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.03005889 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.033063284 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.037811842 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.144210646 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.020357303 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.028106943 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.035932632 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.029047316 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.036710793 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.033006046 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.035958061 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.020988463 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.03625648 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.031508779 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.033835814 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.029283397 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.035647869 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.020917084 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.028970531 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.16237236 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.04169537 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.024397457 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.030447942 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.028339804 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.034472414 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.028338095 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.027845574 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.030092842 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.02579807 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.030694997 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.026825505 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.159225451 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.026249565 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.020990128 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.033435275 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.027625765 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.028337339 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.02908095 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031849612 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.025780777 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.034400373 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.020202252 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.033415532 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.158765234 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.025253133 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.024157782 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.029005685 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.025770476 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.029832215 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.023898829 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.032348274 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.026869962 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.035093849 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.029527039 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.028556253 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.020316569 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.029065576 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.027748157 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.027978185 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.019297777 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024951646 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.020211346 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.020199801 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.019669017 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.028983598 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.027204072 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.02521848 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.019714883 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.020104511 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.019764041 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.032806943 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.027444631 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.02926025 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.020681262 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.025758237 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.025376178 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.020771702 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.025007135 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.031658638 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.019753658 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.020718257 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.019674822 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.032009347 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.02684667 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.020191998 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.031544143 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024879988 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.024572081 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.020220145 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.019778303 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.025993858 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.029795802 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.020982868 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.019732675 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.025542795 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.025905012 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.029191287 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.020635003 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024859625 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024514236 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.019380672 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.02895271 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.027528391 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.029364593 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.033283476 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.028957526 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.0316632 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.020650641 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.019239677 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.029894322 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.020542459 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024956721 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.028095408 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.025484524 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.028070062 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.020713564 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.019636723 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.02477234 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.026063784 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.020507394 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.020627234 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.020518255 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.02915044 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.027615768 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.019321021 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.020098642 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.029065713 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.028966525 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.019795098 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.019741319 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.029166813 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020836871 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.026141663 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.025641757 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.029244207 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.020108152 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.020581857 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.019621397 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.020098637 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.01976898 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.025571709 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.025023287 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020817026 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.029591658 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.028814206 seconds)
done (took 5.780744197 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.034142658 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.065163947 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.179224049 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.141389095 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.03415988 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.021469597 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.025481207 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.041414522 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.02420172 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.046550928 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.04683844 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.043408392 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.164640234 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.019627672 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.020559173 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.021479694 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.018977988 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.033035087 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.146746517 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.045639138 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.064545675 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.020321008 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.037310154 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.041808867 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.035828886 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.041348678 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.022452371 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.022204119 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.023823379 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.038883375 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.047660306 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.020283465 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.021660883 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.040850215 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.037375257 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.029874717 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.02139237 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.027781268 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.02139548 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.020454753 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.022493548 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.039609635 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.027771902 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.028020752 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.021844258 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.021114633 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.021109606 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.02882703 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.035324674 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.027257065 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.033571168 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.037841119 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.022588633 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.021100993 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.019360765 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.028470374 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.020978912 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.021101575 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.021368861 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.020270756 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.021391785 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.023537453 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.026553813 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.031579566 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.024835501 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.028379622 seconds)
  done (took 3.388046328 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.040472917 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.048698754 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.035082967 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.035709393 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.02121644 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.021717944 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.021396309 seconds)
  done (took 1.151536682 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067804912 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.137937734 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.1460131 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.147001263 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.15826647 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.145071769 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.034062392 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.051340636 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.020312143 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.159336387 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.155882528 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.153137347 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.02600013 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.034222841 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.054372306 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.153798312 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.03434949 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.028250433 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.1447041 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.151269155 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026111939 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.052746082 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.033526067 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.021885554 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.148571875 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.142944111 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024841674 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.022058762 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023974211 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021246863 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021150223 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.044662127 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.140777549 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.036709678 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022235688 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.020185427 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.138352413 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022590715 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.141218557 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.029155543 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.141462367 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023891096 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023861407 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.021480437 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.02264617 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.144901331 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.023655638 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.022500695 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.022180585 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.146335061 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.020883164 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.142256279 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.024304076 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.026797316 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.028690549 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.028018428 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.028427155 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021828478 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.145115002 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.031806521 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023169774 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.153303907 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.15274618 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.142609492 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.153017742 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.030712362 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.14300176 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.142354153 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021487065 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.02944627 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021997218 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.153693652 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.025077389 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.023850265 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.026778073 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.028595964 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.158796644 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.161607757 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.163693304 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.036616223 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.02443721 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021909049 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.159413378 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.16245168 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027794914 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021806329 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.022778557 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.038230777 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.047369469 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.024002689 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.026803179 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021995843 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.032345835 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.024407351 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.024549652 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.155020288 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.022151727 seconds)
  done (took 7.792653176 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.028650056 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.021903994 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.021336737 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021671523 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021908698 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.022794662 seconds)
  done (took 1.15684664 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.04916037 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.022211568 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.034721448 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.022009201 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.04461519 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.142542084 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.142960324 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023436718 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.038555866 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.034242962 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.143083763 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.148067391 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.146297923 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.02326173 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.143815769 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.034255015 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.146099424 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.028386944 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.03406619 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023999127 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.036210877 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.022969869 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023176516 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.153203079 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.024330991 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.033689831 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.031495373 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.033681671 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.033153887 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.023151917 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.022788034 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.023811342 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.02864541 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.023150744 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.145780915 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.029199583 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022477679 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.026257311 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.024156121 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.023850218 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.149387512 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023791756 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.027234199 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.026255447 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.023251701 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.02881106 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.026187555 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026017313 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.146339851 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.026689059 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.02623788 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.02278089 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.023982284 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.026154041 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.028964266 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023332011 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.026145471 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.147080532 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.023294916 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.029030537 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.022543838 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.023990227 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.02324039 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.024074398 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.027468778 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.026061284 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.028888537 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.023378395 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023342686 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.02245553 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.026262544 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.022448106 seconds)
  done (took 4.332798405 seconds)
done (took 18.754253792 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.509203938 seconds)
  done (took 1.445960225 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.026639725 seconds)
  done (took 1.991951052 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.052887705 seconds)
  done (took 1.020388218 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.283942104 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.385201177 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.729097133 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.092797438 seconds)
  done (took 2.442529265 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.845139569 seconds)
  done (took 1.810849676 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.213423413 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.176982817 seconds)
  done (took 1.38218016 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.496097591 seconds)
  done (took 1.462445752 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.31990134 seconds)
  done (took 2.284630581 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.19400169 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.133276654 seconds)
  done (took 1.29135869 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.604615882 seconds)
  done (took 1.568716224 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.592230616 seconds)
  done (took 5.563573846 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.189761204 seconds)
  done (took 1.213698604 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.197788487 seconds)
  done (took 1.171810516 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.696977111 seconds)
  done (took 1.664376652 seconds)
done (took 27.288600357 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.043549104 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.039809676 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.039598144 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.03700013 seconds)
  done (took 1.114025935 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.031126257 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.025307665 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.02762798 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.027952565 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.025361562 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.027221208 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.027902519 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.024107158 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.025227377 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.024459483 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.022911812 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.024379314 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.026967282 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.024033565 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.026603186 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.027955297 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.024476237 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.02508244 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.026606533 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.024130725 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.027051796 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.024429135 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.02462717 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.025911425 seconds)
  done (took 1.590307338 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.034465327 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.026285403 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.029410222 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.025082 seconds)
  done (took 1.092005774 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.033486889 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.031184889 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.039741186 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.044511315 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.030963432 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.031543392 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.038066019 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.038280307 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.044942293 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.040830748 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.021959439 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.021649614 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.020845594 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.040129065 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.037624662 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.016236331 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.017732661 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.031868775 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.030832521 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.033683872 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023985827 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.019622724 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.031143688 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.031573156 seconds)
  done (took 1.720441095 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.037956526 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019750287 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.035975673 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.045096639 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.045575691 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.019591321 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.033658222 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.046048637 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.082801477 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.019644385 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.025725883 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.019531881 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.058248789 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.01967271 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.034957479 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.065160037 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.067988146 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.023843502 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.050915549 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.019665763 seconds)
  done (took 1.750928581 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.029036324 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024724661 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025464285 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019588896 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.030612873 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.027199279 seconds)
  done (took 1.141827435 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.024549813 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.02173286 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.021459301 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025673382 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.02210845 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021272233 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.021473183 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.020183178 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.02009439 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020919244 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020849077 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.021310346 seconds)
  done (took 1.233341422 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.165717989 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.026871937 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.024742058 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.020120059 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021951858 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020907039 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.035903168 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.022924546 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.039150567 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.02087953 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.021122604 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.023374336 seconds)
  done (took 1.422511241 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.06068471 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.066038256 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100142373 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070977132 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073233381 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05197012 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.199505983 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.033792049 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.12175255 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.0953293 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073307291 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046527125 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040698938 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.024034887 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056541038 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074337909 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093841647 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027599384 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070261976 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.24351118 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090017386 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.093329081 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105892127 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073891803 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.048522525 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10592534 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051196167 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.059293114 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080196292 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084227423 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075725208 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.055231016 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.027046688 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.026671568 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111264505 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.063937481 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077520041 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.048616704 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060800855 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.044243426 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067558736 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.024197352 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.037415507 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.067716132 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041937461 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090869708 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.048784523 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071681961 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036286861 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098045734 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08915073 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.178446198 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042929598 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063500159 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102844568 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073533126 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099848046 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.066003036 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040202097 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.228195338 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.059404821 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05527547 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062243008 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034705281 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136855857 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044156197 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.072460795 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065333133 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.050290138 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049442305 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.061692571 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091388619 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081087387 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.080722912 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091189619 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04626342 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074504872 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.054252615 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.081454518 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058341016 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.026678081 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078580799 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084829308 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.054882814 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.056235009 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086790074 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048394628 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030936784 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.05683897 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.07626483 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035098188 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.070565271 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035978522 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.06743674 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09670999 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054841284 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067690658 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07515522 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03513564 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118413302 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064366081 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0278065 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.073049422 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070089813 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113249562 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05351661 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.029844956 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056745679 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060368081 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.115984599 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067270942 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.037067272 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070123558 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104695562 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052408104 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.262621 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054281714 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106337671 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073567231 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042754193 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.031506604 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.04794788 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076117755 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06871272 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074640547 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053604367 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.042040237 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042891697 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077918889 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051518572 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040095686 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076729209 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.061845322 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.03211435 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04812347 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.032741843 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112568419 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.035485708 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103391929 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088899962 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.030987701 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067227501 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.054515374 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066314721 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.056602307 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080009788 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106968041 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.15174355 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.049978275 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.055313803 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069115636 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110269841 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090413736 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.050358719 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.033955201 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.060648059 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072325331 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.058966447 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087930614 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.052505242 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06892084 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062630389 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10867285 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113582868 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059825456 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060403296 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070069786 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.085504485 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030877173 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124006887 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064934511 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079673935 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.044307641 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107918736 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.070135404 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051449719 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.043375972 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059335087 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.066284455 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066589556 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110515914 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.053122047 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.027645467 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053809756 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111409935 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.034512843 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071327108 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.047461847 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.050429458 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079694 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.05465669 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.039653649 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.023739121 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.413677006 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114930678 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.024962254 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.069603267 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.063487336 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.057873487 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.076935496 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.024300189 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.075213507 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094792745 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073575926 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101549972 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15203038 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07384697 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.075590059 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.072743973 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.063125838 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03491258 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.084474788 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094503788 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052613288 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048578489 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094272736 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076320437 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.096813793 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.076302927 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077871004 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.064296733 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063878877 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06402528 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.063472805 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10725714 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.080913158 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.084214039 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.03961338 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064386368 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.075639346 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096218856 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03682486 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102362257 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.04151454 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.077723032 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.034117082 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.083424353 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.031273155 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.128781322 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035086001 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057387875 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.024686131 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.029514243 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102760719 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.075564241 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065534738 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058499417 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.098517064 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098128871 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.033005123 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067106516 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074004723 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.060310824 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.225405409 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.064262424 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.044359938 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049647689 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.062626445 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.039334723 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.035566249 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071585938 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049223407 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080731012 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.03738184 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028939301 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094243045 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059280264 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049373014 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030699397 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060872821 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.081892064 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04669415 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040172184 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07009031 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059634894 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097106667 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.044395843 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.053104811 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081302472 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.035990083 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.048235854 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.024188046 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.040842228 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.030877276 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086683805 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.030847824 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.074696372 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.023482487 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08905562 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043499616 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.048848571 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.058534829 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066666045 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087411762 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.052107779 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101932726 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045995769 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07814115 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06523277 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052101408 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042862345 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059667185 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.057459884 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08041366 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.051680647 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081070429 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104591623 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060000738 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102236935 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04705599 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.080586905 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063637544 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082334376 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070493094 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153438819 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100523188 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069219086 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066749643 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030176214 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051783284 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063302358 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072317847 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.293537967 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080153887 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026692306 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.058947244 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04755834 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062772615 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057847695 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036372606 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099988872 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057417857 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.041585956 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065966163 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.044825066 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057766594 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030249881 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056048689 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.054461414 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048898643 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050918506 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.0678232 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083118984 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066627271 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098527057 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.057178783 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.046257594 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.074062172 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066403161 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064570072 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040299712 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040924004 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095998573 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.076613531 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.083334072 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.054021486 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065421543 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.067445675 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055906677 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084680252 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064452459 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.085972686 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035434661 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.032027719 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022992732 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.026564245 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082311714 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065034709 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067774254 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055762416 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.026849728 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.060069216 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060928926 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027194253 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043384763 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05194748 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.05520926 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.049169897 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064649672 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.068667164 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.052002441 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06075126 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054305833 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108613654 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.054964699 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045080616 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104807614 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111737414 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044466792 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050040452 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.026033993 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033970214 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073070256 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110922964 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.253928596 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.033792278 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041688789 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.04060996 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041185999 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025691856 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.042111951 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.043798053 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060053832 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051653373 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.068619303 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059400199 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029734818 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056555642 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053485976 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046917819 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.060821116 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074061322 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080633896 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.096504947 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067694282 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062547521 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030300609 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.034837964 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.030351898 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033650575 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.055447489 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.033092474 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030409566 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100315678 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.046701936 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061731957 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064919901 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043165829 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030363279 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093365172 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.02420204 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094598227 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.025620824 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037734437 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.036853948 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033696525 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050379402 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099174688 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068165958 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07033214 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063463657 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06162131 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146179417 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119994265 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037900293 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101842423 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031031838 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031782825 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031298011 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068525575 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046494653 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.071387443 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104993017 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044435956 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058030664 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.033599407 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105050317 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.06069675 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061381285 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041398576 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034401763 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103776735 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034570892 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.038280152 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04528381 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.067331958 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.026952501 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.058432178 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039577462 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.035440749 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.291769355 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.666478835 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047577505 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.030204815 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.050272195 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096663987 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086116216 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050484676 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061999856 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.074520792 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.055237887 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048209555 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062639932 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.154009655 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028171757 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049050538 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.057594492 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051353954 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056415843 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.052703152 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.040441428 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.047325134 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.040312953 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.033550984 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062492158 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040622764 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051008785 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.060706465 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037737716 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.043353302 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091047929 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.060490557 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.038965157 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044601135 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.059727533 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041565024 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059763308 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.024159172 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068139965 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.044737364 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075014247 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.055991294 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064736556 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084046923 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049754883 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096343047 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.065052882 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080318563 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.042163383 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.033558821 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084634122 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.046836794 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032617228 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105894958 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.054736197 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.06053178 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061527789 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.051186959 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070776891 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077109068 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070363951 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.052875511 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033793319 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059102743 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.06174175 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044194488 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036126364 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.030692685 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.031115049 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06837518 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.045858022 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042727478 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.072290109 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046861255 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.20356925 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.054269206 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077256335 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043407906 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056691184 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06573896 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046485471 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063516143 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055959736 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.084657677 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130350335 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078944184 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084458011 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.337702198 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.032374835 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.029721167 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.023013623 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068965927 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033802423 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.043002823 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033037488 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089538974 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.038439648 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065834011 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.213017866 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.035585921 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.049807662 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052108653 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.024477335 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.03841298 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063105104 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041311129 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035473502 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074481737 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.036895637 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086970387 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06774949 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05521647 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.051453985 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036245069 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070578517 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.060031973 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.087675646 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.050879574 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.030271018 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081335024 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059750585 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097954855 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.029276738 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036384323 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089063407 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059882647 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091063498 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.036382472 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113018559 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101783423 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057535084 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095085707 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025922696 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044690567 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.046262602 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.081777136 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0434239 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070033003 seconds)
  done (took 41.923755699 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.145226667 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.137225026 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.077457145 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.089607494 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.245899482 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.253477198 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.10747486 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.079533572 seconds)
  done (took 2.309063265 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.028239404 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.038164239 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.035909504 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.289353011 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.058447035 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.021666824 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.026192304 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.036599068 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.025062304 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.021153814 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.060084201 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.021330433 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.025279277 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.444392083 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.020761339 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.02637031 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.025226225 seconds)
  done (took 2.32634457 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.308390858 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.621033112 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.350872446 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.418704592 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.105144422 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.566612533 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.030159499 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.036614339 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.637669496 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.364935665 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.099484929 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.181666341 seconds)
  done (took 17.830981505 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.031242984 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.155877308 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.155160729 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.028395081 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.027774192 seconds)
  done (took 1.505260148 seconds)
done (took 77.998487253 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.041083748 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.125003469 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.021027189 seconds)
  done (took 1.286471269 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.159341714 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.154584684 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.154571395 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.157621631 seconds)
  done (took 1.737430791 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.031007742 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.030458284 seconds)
  done (took 1.180597397 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.196003711 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.251518591 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.045122657 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.03965194 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.035256259 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.035695205 seconds)
  done (took 1.228785921 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.027439219 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.025223053 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.025280511 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.025665553 seconds)
  done (took 1.218369807 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.136263845 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019865298 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.022328836 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.02400683 seconds)
  done (took 1.309913159 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.041049887 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.040205308 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.070913657 seconds)
  done (took 1.269323801 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.039829136 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.039033827 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.033570602 seconds)
  done (took 1.231174413 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.06409072 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.05005139 seconds)
  done (took 1.224345776 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.036394373 seconds)
  done (took 1.154409346 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.048824804 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.052639388 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.222014536 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.189557226 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.225937233 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.212645595 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.031272408 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.031419346 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.027133944 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.025973478 seconds)
  done (took 2.174088804 seconds)
done (took 16.671895029 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.036590396 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.142641179 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.39429698 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.041282094 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.609379613 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.392849185 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.680294895 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.044170816 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.053985739 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022099306 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038834742 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.586640084 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.682989641 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.103119944 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.669143211 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.092364857 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.763770724 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.024353775 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021958234 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022350046 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.661007732 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.024529622 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022808966 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.02274886 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.759388574 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.288143218 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023299424 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.090278164 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.024573056 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026670309 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.270442242 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023348855 seconds)
  done (took 12.771014004 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.02624963 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.077085194 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027058955 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.037911775 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.024104809 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023956947 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.025858393 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.022478387 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.067193312 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.023299244 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.04001649 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021751972 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.026737419 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.024828597 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.044781937 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022598218 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.024964376 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.023277578 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022318651 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022953181 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.041255033 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021905664 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022687205 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.02275352 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022465787 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037337924 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.0233175 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022123248 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022333272 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026215368 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027529243 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.0236581 seconds)
  done (took 2.070555491 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078905912 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.078687848 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027704314 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.062594237 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.074465462 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024697485 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.106206667 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.044442243 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.067612845 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022508836 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039715661 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.023514485 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.06198522 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.024340548 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.044347087 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022577646 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.024859995 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022947075 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022267518 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.02281048 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.041878843 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.022253538 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.02272552 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.023052334 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022876306 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.039450609 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023530411 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.02240664 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022325819 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026403525 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.028133627 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023574893 seconds)
  done (took 2.337657557 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.025903335 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.026478972 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.032245027 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.035398072 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.020629677 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.02313887 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.024324937 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.020718393 seconds)
  done (took 1.336125021 seconds)
done (took 19.642227785 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.036293519 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.022523362 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.025546325 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.041535369 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.028865279 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.144934141 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.019639392 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.02809431 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.027612929 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.026625483 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.028110951 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.021049343 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.025021316 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.019354885 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.026514813 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.020509701 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.148060349 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.02528193 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.146649217 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.148360423 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.023491534 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.026448878 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.02942637 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.146625055 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.146876122 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.147978858 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.029967578 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.026879433 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.020972823 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.023864183 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.14461744 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.146576306 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.02364744 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.142584068 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.02113435 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.020814634 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.025216785 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.022465941 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.150196317 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.030049727 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.023679123 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.030945425 seconds)
  done (took 3.522507212 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.149066574 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.155565949 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.148003322 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.032890884 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.029312727 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.032193829 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.154839056 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.029816825 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.028313397 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.153843355 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.024220028 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.028226447 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030328106 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021323537 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027793271 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.024478139 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.029953896 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022387206 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027820505 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.028251296 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.155196976 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.02272471 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.029724788 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.029884308 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024038567 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.030010561 seconds)
  done (took 2.615859521 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.03096731 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.043762417 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.046257071 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.099569586 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.063720837 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.036684613 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.03734442 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.047834992 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.054200105 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021811174 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.043930286 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.050497978 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.050422295 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.02875187 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.061113849 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.040690616 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.034695507 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.023517917 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.028432264 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.056681825 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.046493214 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.043194991 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.055663535 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.042507383 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.021032371 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.031416155 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.029306828 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.038499757 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.030501159 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.034609043 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.025867509 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.025259087 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.022543564 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032714621 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.025547618 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.01993316 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.04515851 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.034591269 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.036967724 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.061251707 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.032056625 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.023233827 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.048645301 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.087053988 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.021442838 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.024521853 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.026068492 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.034555681 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.023231956 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.052165054 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.037466286 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.021644437 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.041179186 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.023302645 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.023233119 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037288641 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.023374023 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.023875277 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.033647406 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.027955674 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.04371159 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.027567364 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.04236453 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.021538584 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.033152473 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.023153311 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.023397036 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020466335 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.056076931 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.029369081 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.070972272 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022988587 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.020145873 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.03435394 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.033519115 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.029449891 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.021465585 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.040561322 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.034732823 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.02552196 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.032950224 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.024663591 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.025016189 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.057754684 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.020941078 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.020026413 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019914271 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.024305313 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.025260169 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.023512421 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.036304345 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.021622359 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.02541673 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.036596617 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.021765655 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.022550486 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.024336265 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.023100018 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.021141486 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.031747602 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.025402165 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.023335194 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.034678169 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.022690721 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.024931668 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.037346558 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.031085519 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.024760259 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.023014242 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.024230327 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.023457214 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.026164512 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.025024181 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.023680292 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.027051746 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.029288667 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.027847718 seconds)
  done (took 5.058591374 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.241611335 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.233952524 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.023104742 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.229340451 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.03079257 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.16077292 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.232266612 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.234201873 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.022666902 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.023315659 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.021492268 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.174449481 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.169138537 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.181230832 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.161095478 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.024570782 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.048645124 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.18118393 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.237169921 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.235000797 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.047760095 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.029698594 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.024513469 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.023731984 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.02306964 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.03121623 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.038663063 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.03124017 seconds)
  done (took 4.26655038 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.030074812 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.066404637 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.0258168 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.046846001 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.039357799 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.022337082 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.024012501 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022818049 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.03895893 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027539386 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.022141182 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.026126081 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.025607986 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.024246652 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022420394 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.028786683 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.028724467 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.029750898 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.026571155 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.028381109 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.034686614 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.047681656 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.026723265 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.022498084 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.025948484 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.022353411 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.027734519 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.031103017 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.022032675 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021976514 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019313248 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.026684132 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.037180817 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.023421446 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.02202384 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.02278276 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.022423422 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.022469302 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.022673672 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020537508 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020510015 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.027393833 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.021059877 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.027258836 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.036128122 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.024490986 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.024056273 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.02499367 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.024994028 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019241779 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.025457939 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.025535876 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.024929423 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.030912116 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.026113419 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024859616 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.023572482 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.036894571 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.02800122 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.02181583 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021324096 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.020756922 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.024257812 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.028748119 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.038541707 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.024126079 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020610142 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.02270023 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.02502646 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.036449561 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.021714968 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.028093585 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019423815 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.022456684 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.024669731 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.025413693 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.023769561 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.02081406 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.022087792 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021797489 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.022326578 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.022207547 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.021532264 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.02492748 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020347316 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.020780365 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.022995913 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.024071966 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.027816128 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.021329966 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.025070843 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.023769834 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.021022141 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.024854386 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.027596014 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.025125172 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.042800475 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.030228683 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.022967514 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.020132203 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.037304148 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.024196281 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.021650915 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.024164091 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.026693455 seconds)
  done (took 3.940596233 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.052570374 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.024470287 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.041894267 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.053991813 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.032598683 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.028008963 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.036182801 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.023632751 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.043985147 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021597217 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.031705721 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020788273 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.035458926 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.031276453 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.024249284 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.03234484 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.02504171 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.042769815 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.037321187 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021215734 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.031473524 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.035089025 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.035232109 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.040260478 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.039684886 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.040854337 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.034946204 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.025269346 seconds)
  done (took 2.103637129 seconds)
done (took 22.63433712 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.196898842 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.379984515 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.157151067 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.836262892 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.233279276 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.197894965 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.273030903 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.150391577 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.7174062 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.248467899 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.988224507 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.812540839 seconds)
done (took 60.418480938 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.234906398 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.301988584 seconds)
    (2/2) benchmarking "String"...
    done (took 1.396000242 seconds)
  done (took 3.849899259 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.597300147 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.155020781 seconds)
    (3/3) benchmarking "different"...
    done (took 1.185032508 seconds)
  done (took 5.076986543 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.467378972 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.01414268 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.425805238 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.138403933 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.147323 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.604149117 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.312358796 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.811182314 seconds)
  done (took 27.605207337 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.140873379 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.399429689 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.490801416 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.596633042 seconds)
  done (took 17.851157052 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.596087438 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.591014005 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.593462109 seconds)
    (4/4) benchmarking "different"...
    done (took 1.855631401 seconds)
  done (took 7.901780389 seconds)
done (took 72.223491444 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.141745437 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.451881094 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.172960887 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.333941487 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.205888275 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.246189911 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.154268342 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.151541309 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.146161322 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.14721246 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.149698239 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.148864139 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.147008513 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.187222685 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.153655925 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.174255422 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.443858065 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.153758472 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.168798771 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.987318561 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.487742835 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.145096245 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.146541014 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.220376899 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.579892459 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.166884968 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.602613514 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.14994393 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.758058827 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.141867123 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.152768343 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.149852219 seconds)
  done (took 183.712765917 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.13876723 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.988682761 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.014765924 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.14301218 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.525925592 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.502536509 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.021700842 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.54784424 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.149536681 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.152095015 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.154324784 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.141774858 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.188476632 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.741702513 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.190768925 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.205151701 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.073977642 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.9815949 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.190194636 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.100347674 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.144047523 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.722628914 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.679929081 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.980300049 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.162005182 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.210160089 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.148687037 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.162392859 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.653550007 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.022872484 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.154876289 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.158709593 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.331338813 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.387778173 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.150530524 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.158455371 seconds)
  done (took 154.532018262 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.371033798 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.145579539 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.18579505 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.25239224 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.116880169 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.012739565 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.149068123 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.134087105 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.140244362 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.145656701 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.142096963 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.203973275 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.150297326 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.210855457 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.175130832 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.137135204 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.139510619 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.204087428 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.163101093 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.134532474 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.141192835 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.236802416 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.493482694 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.24712407 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.147757059 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.142386076 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.255285904 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.148781607 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.142444642 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.133713896 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.255606754 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.148073448 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.266130601 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.25818474 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.150352796 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.199537023 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.149495467 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.452575112 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.145011285 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.140274229 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.134844023 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.190343829 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.14330128 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.217431989 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.244980286 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.153139599 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.157636221 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.660649335 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.721674755 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.155463884 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.135298124 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.141590311 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.137722499 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.14609947 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.268659798 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.152273882 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.168876555 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.812859206 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.150475861 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.139590561 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.137369491 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.138223641 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.141224139 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.142756591 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.174629039 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.775616105 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.991303047 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.495022814 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.879876424 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.144342993 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.137600692 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.142473158 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.118895879 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.207430811 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.138374786 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.142750691 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.310602989 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.142774407 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.141380445 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.059702597 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.056960102 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.149371402 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.243158083 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.150561555 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.139062866 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.493526743 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.227068022 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.156889444 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.158525447 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.199622943 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.138517223 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.13858069 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.145133511 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.064404113 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.143552161 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.156905882 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.51287057 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.143229004 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.141839656 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.53641544 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.513727598 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.150687618 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.216709706 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.544901726 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.096636953 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.142271129 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.145668782 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.152836662 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.14104805 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.145761232 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.154681702 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.13609035 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.142308752 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.139912301 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.142194719 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.137371061 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.141574365 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.15286486 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.14259511 seconds)
  done (took 331.600562386 seconds)
done (took 672.482435487 seconds)
(4/20) benchmarking "parallel"...
done (took 1.1369265 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.396178309 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.152174184 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.252338501 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.399070498 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.355643417 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.314961421 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.349066483 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.435677747 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.370833182 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.315905252 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.367677682 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.318255816 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.441882942 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.395511845 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.446357282 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.406197105 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.342903669 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.852763384 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.364241571 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.322238576 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.346197638 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.315521305 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.301739126 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.38193338 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.442901491 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.316886429 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.545441999 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.383831838 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.353675344 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.402854125 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.409956148 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.4277926 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.366033509 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.425469365 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.397049605 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.44601078 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.308354253 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.414677214 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.33070484 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.362601075 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.370643108 seconds)
  done (took 64.786891907 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.532674451 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.355498078 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.45637941 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.445587534 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.013272261 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.460078185 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.531577084 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.34145537 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.348600424 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.465886235 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.484195001 seconds)
  done (took 18.602526407 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.391236913 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.347989081 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.471425238 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.466226988 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.570004739 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.470625224 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.504040492 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.339798436 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.338753304 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.471742814 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.500680147 seconds)
  done (took 18.031985619 seconds)
done (took 102.563255287 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.701503653 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.211996941 seconds)
  done (took 4.060670161 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.170827761 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.1612373 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.151338912 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.158786511 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.152068995 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.155075369 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.199155167 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.1639692 seconds)
  done (took 10.453149639 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.158486586 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.147705063 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.155861923 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.146946722 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.157160623 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.146139663 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.153525492 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.14607045 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.154367571 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.146889295 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.152888315 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.147429255 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.155782399 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.15190539 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.155110468 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.146256177 seconds)
  done (took 19.560101285 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.150361383 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.153061641 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.150308627 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.148891286 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.156748719 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.147508255 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.154860677 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.164793386 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.155517482 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.151690439 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.153818031 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.147098074 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.156433808 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.150800942 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.154040803 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.147268721 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.156758231 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.152874777 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.155104627 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.147625953 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.152846374 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.146335288 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.157572408 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.149640416 seconds)
  done (took 28.806405183 seconds)
done (took 64.03596333 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.734885106 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.154722363 seconds)
  done (took 7.026316123 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.159017072 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.147904436 seconds)
  done (took 3.549641029 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.149179669 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.151264949 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.150580385 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.153287293 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.158317486 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.147624302 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.154513733 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.146761559 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.157486497 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.14805026 seconds)
  done (took 12.66106669 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.146155707 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.154228971 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.152254304 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.153253851 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.146725207 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.154153908 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.151139401 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.156695155 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.146455378 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.155809888 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.149606103 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.341370214 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.152681186 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.38122974 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.151013735 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.155805069 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.150128995 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.151553978 seconds)
  done (took 22.292968411 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.153155858 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.152794657 seconds)
  done (took 3.445654673 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.155453126 seconds)
    (2/7) benchmarking "second"...
    done (took 1.151789293 seconds)
    (3/7) benchmarking "month"...
    done (took 1.154753102 seconds)
    (4/7) benchmarking "year"...
    done (took 1.146735263 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.153802742 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.150660915 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.153823643 seconds)
  done (took 9.204052566 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.602377407 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.313633306 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.371316511 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.626370311 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.793709892 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.093356678 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.800579406 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.093811766 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.972175991 seconds)
  done (took 16.804378246 seconds)
done (took 76.124220808 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.773288488 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.153871567 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.804765276 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.303538456 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.159489872 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.520295246 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.13952183 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.681857604 seconds)
done (took 37.701889197 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.363667797 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.143987869 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.183354583 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.189151155 seconds)
  done (took 19.66844524 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.146190847 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.732069025 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.186007237 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.259509297 seconds)
  done (took 19.559497398 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.673130524 seconds)
    (2/2) benchmarking "read"...
    done (took 1.675774529 seconds)
  done (took 4.501928286 seconds)
done (took 51.236982831 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.150699688 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.152618252 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.147163521 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.154299241 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.152243462 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.155294705 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.147791415 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.154067268 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.146693964 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.157712335 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.147292312 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.15229945 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.147210334 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.155922822 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.14674464 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.154992998 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.14654712 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.160493101 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.147614335 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.155047734 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.148068278 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.15428255 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.155347528 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.154382626 seconds)
  done (took 28.790917692 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.224245925 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.212657995 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.224436113 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.216863101 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.245334943 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.218277444 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.212032743 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.196222318 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.216228406 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.212478873 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.187478492 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.245629075 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.192409731 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.255618138 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.191578208 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.246924755 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.227435777 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.193593881 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.19348961 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.245622287 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.225984473 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.191475748 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.25061851 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.181246763 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.244368887 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.187282371 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.208391763 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.213838348 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.182031305 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.244959565 seconds)
  done (took 37.627150908 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.186942886 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.149094346 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.155562795 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.240794639 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.155358192 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.148633328 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.152632911 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.15178117 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.155277923 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.14859871 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.156795804 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.147270876 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.159262982 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.147303696 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.153774944 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.147924792 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.188929776 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.325317976 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.154199803 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.152410154 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.19896439 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.155469135 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.147777482 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.154495354 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.150149215 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.155864323 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.153007087 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.153845682 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.148385267 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.157027644 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.149047293 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.204056732 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.186608611 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.156556139 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.271809756 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.215248447 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.148597822 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.188187951 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.148444456 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.154700872 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.155641188 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.157256549 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.148892611 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.155289551 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.214617975 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.153372124 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.161267288 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.148562425 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.155558503 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.14821785 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.159232286 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.148545595 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.168237515 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.147686776 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.156032758 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.148214121 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.158300885 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.148250615 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.15581341 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.152172308 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.154573335 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.223066303 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.153476163 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.153625039 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.523713151 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.148943333 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.219219531 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.15652608 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.148806133 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.368439913 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.148642662 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.361976174 seconds)
  done (took 85.820068559 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.152788705 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.148443826 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.238180478 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.225539912 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.153845723 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.147348573 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.154670499 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.154004239 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.816381319 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.155079294 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.153193107 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.15405694 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.819950855 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.15414382 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.159853391 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.224974149 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.161851635 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.148122608 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.161221419 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.147427003 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.154625615 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.148780815 seconds)
  done (took 28.07322954 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.194589403 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.170383576 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.184109478 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.171749516 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.165971972 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.169083805 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.18401772 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.170327582 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.18736049 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.192213222 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.188535479 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.192014359 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.171926575 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.185092161 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.197218574 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.223611023 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.197338609 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.226693969 seconds)
  done (took 22.518658512 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.327684415 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.3199877 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.231327531 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.196874913 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.414592741 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.38541626 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.262330573 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.324238612 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.199502943 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.317621596 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.330214914 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.197286367 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.383311708 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.199387859 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.19055539 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.417816772 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.228567277 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.199910255 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.268934892 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.252722024 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.331994622 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.26539502 seconds)
  done (took 29.389093121 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.196978084 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.207660499 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.228545831 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.240038705 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.152208519 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.157608604 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.21410241 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.186765052 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.171290525 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.184098528 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.189536849 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.152377136 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.245211797 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.207512547 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.242929206 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.187579341 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.208249376 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.207981828 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.197486035 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.151799368 seconds)
  done (took 25.07726162 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.148271022 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.154001928 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.155687591 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.151322861 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.153506737 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.148544496 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.154782671 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.152286273 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.15555972 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.403465455 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.157658629 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.149754497 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.155565836 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.149605483 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.154072606 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.153558581 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.154649856 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.147985696 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.156109743 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.151198531 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.410776427 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.149715734 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.156202044 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.150539263 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.155420754 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.152892509 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.150021764 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.153908732 seconds)
  done (took 33.9331231 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.202490642 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.153186517 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.15482972 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.150983811 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.155526649 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.212523899 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.157045195 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.150909495 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.157370602 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.149573444 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.156117064 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.148037177 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.157245556 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.199493867 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.15524055 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.148519929 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.248509948 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.160562027 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.218200749 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.136435527 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.158507116 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.208279201 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.162830154 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.147715477 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.14342317 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.160701133 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.154668218 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.155762199 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.149016286 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.158152141 seconds)
  done (took 54.114793421 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.180339284 seconds)
    (2/2) benchmarking "in"...
    done (took 1.166352429 seconds)
  done (took 3.484116238 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.148263582 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.259208493 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.148106932 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.360360622 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.315549335 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.335106908 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.320620729 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.247694452 seconds)
  done (took 11.27691225 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.154594637 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.497891408 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.17368478 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.148244622 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.156702807 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.578832864 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.084807562 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.985527733 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.955531902 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.115976775 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.285577086 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.807147775 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.216645335 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.490829146 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.265238055 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.012226409 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.383928091 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.660893917 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.21526489 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.275214596 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.878220524 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.252405002 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.158492796 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.147707942 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.156756171 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.046544004 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.979117139 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.579083105 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.295322145 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.277733051 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.892150808 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.237447408 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.152907469 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.387843272 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.268467293 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.155439402 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.285264261 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.263063906 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.155458017 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.148189871 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.851014748 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.808358504 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.419030628 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.356401507 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.236629426 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.158159133 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.151055531 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.159461078 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.427039584 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.757970834 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.226444458 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.124417465 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.286046754 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.161298982 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.829705337 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.162836389 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.156317716 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.047997897 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.655314486 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.385248879 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.600363356 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.349588298 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.162164195 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.284087161 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.151125259 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.329713499 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.068852669 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.911556519 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.932047202 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.267446022 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.632828587 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.170490981 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.15617779 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.149491862 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.131653346 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.470068306 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.149930087 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.156405588 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.151021913 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.157200374 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.401282167 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.275491251 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.984770035 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.286690007 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.329886147 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.685477519 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.278862282 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.149818206 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.827331019 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.054443583 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.209081958 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.756882892 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.372162174 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.294209472 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.143234452 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.406700675 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.193278784 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.150178774 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.004760017 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.757415155 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.167177906 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.154779586 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.472689124 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.28281192 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.158181279 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.148672598 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.842395771 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.27568229 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.256033995 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.193220276 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.154849909 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.151248668 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.738898747 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.213393806 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.161972453 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.602774486 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.224288584 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.662358817 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.38536103 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.351323808 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.498482285 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.081874479 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.392562295 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.065253956 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.159186471 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.66171021 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.977257043 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.840016249 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.397357475 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.273602175 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.968841416 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.217881403 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.154268774 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.278744012 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.231411729 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.156783998 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.15213715 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.152636886 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.15013831 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.158133042 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.265483874 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.511675893 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.975169778 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.173099716 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.383081207 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.272535551 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.97052233 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.377043362 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.866654972 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.293336868 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.155752454 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.874848573 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.379833476 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.840627008 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.278710779 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.15396893 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.156628293 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.022993602 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.153497147 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.250458701 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.160838128 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.754429079 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.215872854 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.152169887 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.156986324 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.605650882 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.288130221 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.157714351 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.253202632 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.928849119 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.021557592 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.163665122 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.468717188 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.268676065 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.154136077 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.155886835 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.158418839 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.937612987 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.765277117 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.363732512 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.74620915 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.967551354 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.251867829 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.281856682 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.252084203 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.403722552 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.375632635 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.293928692 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.153925354 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.154279959 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.155481482 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.618048728 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.070429639 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.155463149 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.013102922 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.158216464 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.076453883 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.207127217 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.931176661 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.173593046 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.86149483 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.152101596 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.253661248 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.155708375 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.153727455 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.414722873 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.326034736 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.2910905 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.714664835 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.164647571 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.155597264 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.792472602 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.285392898 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.811930715 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.265405014 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.983667098 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.222269127 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.283195006 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.255246195 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.79824011 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.284882451 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.150252004 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.838681732 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.298293779 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.158833255 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.194251423 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.83982715 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.950702001 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.921714993 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.753599016 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.093478004 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.709193523 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.422277583 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.298251476 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.025157013 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.255693265 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.373357523 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.302141479 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.621377933 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.170705736 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.893337654 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.167516503 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.872868607 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.170987244 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.118612718 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.282604268 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.600043252 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.275686026 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.155946264 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.307102838 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.24886388 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.808012137 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.277262393 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.306883049 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.446243155 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.099050372 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.260218714 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.367361056 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.297905006 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.071570904 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.106003389 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.480570968 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.091456424 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.141463927 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.210118635 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.906751413 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.350885363 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.391915458 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.286765307 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.157736353 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.151205461 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.338477799 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.246761052 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.153731089 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.462373089 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.148417052 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.189522362 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.20430144 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.158446311 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.149887151 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.354184173 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.315812165 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.418776123 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.60165965 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.721799138 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.935708344 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.288006534 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.781158387 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.282471984 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.833172011 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.219548387 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.160653972 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.804175938 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.287103521 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.414497586 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.304134898 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.27384919 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.776997443 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.258968976 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.438390934 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.289817016 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.284777335 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.908340767 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.699646914 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.405681451 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.522956505 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.196462831 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.681809038 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.323043009 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.701682691 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.254464005 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.840256854 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.151147202 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.217526842 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.151014751 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.162463942 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.62973599 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.22216505 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.159181042 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.940567719 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.835562235 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.066822157 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.868777829 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.224093168 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.151839072 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.158013815 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.151093825 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.060255675 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.195069949 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.475115201 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.295692248 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.152800287 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.155553656 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.123997332 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.462779918 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.969327891 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.030385373 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.150638817 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.298483214 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.153009984 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.160103793 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.151624474 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.162466992 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.152417798 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.157997132 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.626592785 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.174331019 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.75847081 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.223104695 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.152045463 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.331397695 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.217220729 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.160283826 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.315815154 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.235811334 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.264989996 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.227913954 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.151742239 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.562262468 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.293030395 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.113061796 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.364977405 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.460825443 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.383661817 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.650862163 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.209921515 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.564638208 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.43963343 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 3.022593048 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.159060113 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.057766788 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.202858682 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.936597064 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.128062238 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.526200851 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.730725244 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.241171001 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.406228404 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.057936956 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.507132034 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.383335385 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.231264191 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.150992763 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.158026658 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.207028316 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.398185775 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.204281535 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.405584406 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.352215717 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.12463415 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.376258259 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.250049316 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.347564294 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.188580909 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.169696946 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.159812647 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.156386106 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.580073916 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.016266743 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.243280165 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.156984697 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.046315944 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.969219365 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.06177617 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.759480925 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.137353678 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.288671531 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.158985689 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.352462152 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.213343437 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.891486061 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.175862998 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.93971988 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.566096638 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.206857971 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.298721878 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.518731395 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.934915474 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.535239988 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.273679225 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.159137785 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.5148359 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.142486234 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.298983895 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.060539259 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.463941935 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.676406833 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.654293609 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.477620453 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.272892749 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.042048493 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.656899091 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.2412888 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.163758596 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.00186368 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.303696724 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.429496377 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.119633441 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.425382908 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.291395869 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.793488506 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.802854857 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.289528701 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.759297262 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.290452635 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.16102974 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.94884744 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.063013687 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.261987708 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.274593113 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.157923506 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.170450938 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.826094476 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.734868489 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.38635335 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.233378054 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.158073827 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.895691654 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.85526958 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.217570777 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.153294654 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.160201306 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.537262919 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.202859142 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.160925203 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.558067892 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.753170732 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.297539135 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.632521086 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.371098492 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.300149387 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.406237797 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.50489581 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.356192536 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.222566228 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.152114367 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.157837214 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.154860266 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.701197335 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.168319738 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.160333702 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.740561689 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.298760313 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.890264992 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.063557679 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.402543903 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.229393248 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.568192677 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.291414216 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.624536498 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.122103174 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.204386401 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.388191873 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.306706371 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.263924298 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.8962394 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.258732398 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.159813633 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.073644227 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.446199405 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.508574038 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.540282327 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.505448858 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.248859422 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.833339329 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.264635646 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.927529696 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.181448923 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.151893429 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.61719728 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.371592964 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.596799542 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.303765161 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.623746411 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.269948958 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.453025928 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.484902907 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.251390733 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.152857781 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.158955621 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.155645743 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.182535891 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.662076587 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.14322373 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.614998821 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.284264073 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.954918559 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.807286839 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.003934708 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.324408514 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.514852642 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.405961389 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.188790561 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.134134041 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.480399874 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.241094793 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.316364451 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.251775761 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.923686654 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.237294322 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.152676779 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.709487962 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.17000963 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.156189898 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.161296033 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.050618021 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.876326561 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.259044527 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.39568296 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.252203349 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.159954932 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.754109306 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.426144646 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.198091705 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.152522944 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.159049714 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.004686794 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.268601704 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.157032173 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.489348146 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.311701992 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.443243712 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.974583857 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.593598827 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.253032759 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.156673118 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.160928238 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.844433899 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.710437017 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.196845992 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.463322424 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.285804073 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.636686732 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.234124584 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.599269567 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.684925305 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.13959224 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.282939068 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.153100655 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.177468763 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.040152993 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.080726754 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.882938451 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.515592172 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.248158904 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.93841283 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.128192344 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.219623946 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.291645541 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.230005153 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.1532733 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.156916995 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.153556769 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.624003921 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.244474334 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.157273883 seconds)
  done (took 1458.546034783 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.435351177 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.166264295 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.153140583 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.159343021 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.154398608 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.158603014 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.157353774 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.161288657 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.158703591 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.157439573 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.161155858 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.152241448 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.158684346 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.442957054 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.164093046 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.153224627 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.158650359 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.152066312 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.161817669 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.155170796 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.160939926 seconds)
  done (took 26.031373382 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.160455743 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.153396211 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.157902056 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.152280677 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.159865093 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.156599699 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.160491047 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.158254797 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.158814994 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.160795434 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.156527596 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.158203622 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.152128539 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.163149415 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.153275985 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.160833745 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.151724195 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.161556025 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.153453973 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.156841128 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.152731186 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.158671965 seconds)
  done (took 26.600184093 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.161594682 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.151562908 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.878498557 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.281036513 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.1620258 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.153179542 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.163852502 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.349050104 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.185309969 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.036146176 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.51089292 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.289293325 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.163672419 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.333346492 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.255653336 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.156761308 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.286831629 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.153482993 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.158955164 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.152752967 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.163375366 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.353614832 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.298274952 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.152872501 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.997471716 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.304019099 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.154658022 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.159390314 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.153475952 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.125295715 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.20181932 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.163605307 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.004042179 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.905093439 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.492567011 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.041698016 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.213483782 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.155054854 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.159229194 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.157109058 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.338228315 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 3.027946593 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.158234796 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.161347049 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.420943899 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.274843674 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.153226717 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.49329579 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.290428158 seconds)
  done (took 90.806347186 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.154332075 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.285253229 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.219120501 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.160942226 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.279137331 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.159864612 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.21501499 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.162055691 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.152384303 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.163055446 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.289889763 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.322335367 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.157492644 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.154093729 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.242497401 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.156456182 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.15834797 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.15287469 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.157602997 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.159642666 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.160245431 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.211649174 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.282131129 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.313965063 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.163289725 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.152988371 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.158624141 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.154923386 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.313223182 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.157903266 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.154045315 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.159446097 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.291611833 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.273462873 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.153677081 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.16058901 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.284054479 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.167088107 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.153277689 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.161027033 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.157025493 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.160191154 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.208108567 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.293151424 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.162204945 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.260230117 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.161553639 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.152765633 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.309380518 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.155127507 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.161126988 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.320903866 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.164448503 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.154517395 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.161327027 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.275507411 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.159061603 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.157566366 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.161458528 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.302490657 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.159941454 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.162255329 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.310842291 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.160494492 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.153373254 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.331813264 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.260528138 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.160811088 seconds)
  done (took 82.822703024 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.162977451 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.2910357 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.337559423 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.337127949 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.294900834 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.296029926 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.294169114 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.297734261 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.293078791 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.300859755 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.298643858 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.240128614 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.272158304 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.239996004 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.301978357 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.275987377 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.288177209 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.283043675 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.294748358 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.301441001 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.284321384 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.337863348 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.290447069 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.342721084 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.523473832 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.263851365 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.298878202 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.296272734 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.341430071 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.298083183 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.516885875 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.307062299 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.291089272 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.340140991 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.524129853 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.293370876 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.168342045 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.298440264 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.308100335 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.296736369 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.262473118 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.339182932 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.295399515 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.269686652 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.285013755 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.294615577 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.341919572 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.514633484 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.248710104 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.29540395 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.300091231 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.336603975 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.292498332 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.295078061 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.335494006 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.256140784 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.328709837 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.344961285 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.30074036 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.329764138 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.33684037 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.255232112 seconds)
  done (took 82.326065419 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.15359379 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.160996319 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.242844997 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.159063986 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.160463731 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.239011813 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.162415589 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.153957923 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.15922567 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.153525011 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.159677353 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.243117928 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.522526694 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.164514987 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.24708848 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.520791251 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.245292403 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.251962058 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.154312158 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.248672503 seconds)
  done (took 27.656832409 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.16230894 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.153093008 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.162682048 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.309076481 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.164044506 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.290150471 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.160730398 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.15221639 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.164391282 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.155122121 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.15733211 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.158848963 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.15431668 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.317967757 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.155901759 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.294120523 seconds)
  done (took 20.255177118 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.16633088 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.154553367 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.159729619 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.154576243 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.163257721 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.154450002 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.161467073 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.158382793 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.163888671 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.61053617 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.16090186 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.161408689 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.158814076 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.159442553 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.153971333 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.159418423 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.153253024 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.16331657 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.153455129 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.161286485 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.726781258 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.162159937 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.156557548 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.155299768 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.159840143 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.736728244 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.163107816 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.153418739 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.159422723 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.158008257 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.159750719 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.635427218 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.160751325 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.163410129 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.154768853 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.16205605 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.156254978 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.167941609 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.153974038 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.160249943 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.153599034 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.16152256 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.153258952 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.160379277 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.153369666 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.163114691 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.155355124 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.615183063 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.163760481 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.157936316 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.16041473 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.153560689 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.158799624 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.628700323 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.163247773 seconds)
  done (took 67.884971628 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.198382805 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.207043232 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.162134916 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.154246145 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.214777564 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.197580399 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.200391181 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.176115715 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.196682553 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.158544406 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.223905992 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.176438829 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.19209248 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.21332954 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.219174676 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.199761068 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.154118688 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.231963984 seconds)
  done (took 22.61927581 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.16279047 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.153222065 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.162497186 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.159351818 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.163436629 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.157339091 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.162407186 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.161333545 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.156071742 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.161517959 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.153400395 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.161036037 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.158793586 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.15867061 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.154994994 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.160360958 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.153349364 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.165326516 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.152823523 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.159295571 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.153989356 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.164170456 seconds)
  done (took 26.644631409 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.19141156 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.199532641 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.165297285 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.154379759 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.160703182 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.17684268 seconds)
  done (took 8.192543954 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.206687498 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.226407994 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.194268297 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.204843893 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.237629344 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.233764232 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.245583437 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.23761353 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.237558798 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.465335313 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.250724071 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.237595382 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.236619428 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.290664187 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.220285805 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.232884141 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.251904653 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.243872358 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.205213023 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.238466354 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.264614441 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.226779038 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.260320793 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.23426633 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.261281553 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.286150538 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.242631451 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.466711211 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.24721689 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.232466466 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.22156453 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.259095889 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.233118924 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.474516375 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.20011323 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.241509647 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.248830717 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.232384716 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.229454433 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.282375754 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.197066187 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.220455015 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.239072385 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.251995246 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.23137665 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.254911852 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.24738546 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.264734802 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.247739772 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.493854142 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.226011352 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.287856666 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.222636094 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.234113295 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.236015238 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.48099187 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.476593458 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.278335827 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.225215703 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.48009038 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.304688505 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.25778074 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.282092874 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.479531181 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.22926001 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.286930467 seconds)
  done (took 85.053059986 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.281575214 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.203884296 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.254696984 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.474363915 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.290409766 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.241328877 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.26194812 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.255609766 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.259834711 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.223099159 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.250157222 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.258185698 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.288249616 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.294302608 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.245736593 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.255017479 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.242253321 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.287913304 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.218840807 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.488821352 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.249273262 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.281652658 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.290177867 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.283990706 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.473029464 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.243142006 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.250463229 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.251715707 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.238803884 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.252394635 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.250195821 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.261016139 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.282312941 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.204862646 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.283658549 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.24945362 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.25666904 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.252214192 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.253477259 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.237708622 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.293610266 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.237094799 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.252060378 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.247453 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.468804191 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.255941414 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.27488325 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.242571437 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.249464913 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.225887615 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.469219903 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.470294896 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.481321536 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.284636861 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.255954526 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.249403598 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.246790125 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.25455542 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.254127047 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.242910508 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.279114619 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.248730241 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.490731929 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.241928147 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.260792623 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.280328089 seconds)
  done (took 85.837640138 seconds)
done (took 2472.525779786 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.216294585 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.21201353 seconds)
  done (took 13.573146313 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.15946847 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.154589997 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.313706001 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.162635016 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.162840019 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.266561409 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.169155594 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.167988367 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.161982389 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.239487099 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.165745395 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.286068461 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.264356544 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.1620847 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.164822531 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.168302091 seconds)
  done (took 40.331020625 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.222185 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.68233069 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.056882387 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.929039061 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.187544728 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.847909913 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.461520675 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.800612978 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.4658326 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.608501051 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.415706094 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.995842718 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 6.03216959 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.27256682 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.603571821 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.628492403 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.714859018 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.768985776 seconds)
  done (took 60.841264198 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.151573096 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.310060797 seconds)
  done (took 8.618393446 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.162622382 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.188013989 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.157330089 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.183568304 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.179335559 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.178335092 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.166097455 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.170147196 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.179904907 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.180322768 seconds)
  done (took 62.910008178 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.304664953 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.612548509 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.478910418 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.6018316 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.75746134 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.634789873 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.322920039 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.495718621 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.249144126 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.149816403 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.334837598 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.560725066 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.995822683 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.427589737 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.767117045 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.375531922 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.847948612 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.51474471 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.468808523 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.53604463 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.414347745 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.275285871 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.580110986 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.95985632 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.153552284 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.707836048 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.350723797 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.28832783 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.238758951 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.301833479 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.43714145 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.176490294 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.472400168 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.171926554 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.339118651 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.703545915 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.816485419 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.363352229 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.614254684 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.501215996 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.529046784 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.813627369 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.220534049 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.781095732 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.325521145 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.48558775 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.106108479 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.422418997 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.250066861 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.292730844 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.553393582 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.336613268 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.291525507 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.276423404 seconds)
  done (took 156.142398898 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.147488259 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.551933529 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.302519178 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.148128399 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.569535439 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.365856293 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.895593271 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.586509279 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.155720351 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.367354253 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.331602911 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.285899669 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.152255474 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.162212465 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.153063187 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.151050346 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.352074248 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.587224624 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.159445089 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.158637708 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.375345819 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.399915934 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.288735881 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.15337762 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.321505414 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.403686626 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.540193785 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.292058443 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.547789757 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.143442765 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.583353385 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.165684725 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.155405965 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.045249173 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.528428817 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.491317818 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.610871285 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.157891319 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.914192095 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.150826641 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.770561644 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.359426075 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.488266964 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.296707225 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.413260738 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.383587459 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.805312552 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.151817678 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.910827433 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.328345339 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.381824919 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.37288891 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.431995314 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.157980672 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.697070054 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.156106855 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.157369414 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.421503408 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.307814529 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.288088566 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.14648163 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.15426108 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.158013754 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.405916718 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.149154378 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.281845571 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.14708134 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.153826292 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.280686879 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.283679487 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.311280303 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.40625708 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.39934922 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.404607276 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.149564294 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.390969556 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.573332558 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.396346743 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.149790771 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.156206037 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.584957714 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.592152126 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.316255524 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.399010006 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.464707517 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.451979566 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.729414939 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.150194739 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.384899714 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.326348809 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.499992247 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.422714557 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.520087075 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.079255066 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.151430837 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.156985909 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.421528694 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.283412276 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.154344685 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.650206492 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.428737616 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.219909596 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.343792172 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.635299673 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.269815531 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.157199967 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.756095939 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.149784436 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.382978315 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.441720281 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.160336687 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.160710739 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.321033632 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.08348902 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.157329586 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.24417085 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.53328516 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.162415258 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.325197731 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.146162438 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.417572491 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.07695421 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.389844828 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.155222032 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.437517891 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.33708966 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.435878648 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.147348288 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.508908643 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.430604512 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.554859408 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.390376371 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.008005738 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.151773381 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.465636497 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.155291625 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.158634442 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.334083546 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.15791234 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.331710962 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.155780161 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.525389182 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.320370027 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.533018536 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.149580843 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.401250039 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.405546734 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.52091803 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.153246739 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.298613079 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.153306916 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.245788076 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.32282855 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.151981592 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.153013385 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.008754095 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.154946484 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.308429958 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.388576636 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.849583801 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.526045133 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.510930938 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.150435306 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.604733894 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.359187982 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.587239389 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.711145915 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.334842111 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.871629419 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.387114718 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.15088227 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.395848912 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.349264312 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.149086513 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.151674025 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.895971263 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.290562329 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.16338431 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.320288996 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.862830292 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.579328885 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.376252413 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.150522574 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.524429944 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.155362043 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.321685805 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.65563452 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.390905547 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.156518604 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.15145294 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.160586056 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.159349722 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.366389676 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.410105726 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.806406844 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.312939045 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.451985785 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.374159888 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.472877151 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.621463368 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.164009357 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.481671746 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.151855535 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.547766509 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.161823953 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.339249994 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.415232553 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.150441933 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.468777113 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.516210835 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.334878005 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.552949601 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.155588961 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.158664925 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.760721179 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.32724893 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.603739682 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.147225124 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.248027858 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.521064815 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.278578038 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.367570854 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.371827883 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.149415197 seconds)
  done (took 739.601601412 seconds)
done (took 1083.168637962 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.143559462 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.156196712 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.160278364 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.151893199 seconds)
  done (took 25.768566088 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.157220717 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.247729225 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.336583048 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.159159824 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.552854412 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.216516747 seconds)
  done (took 11.825881516 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.152240192 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.162284113 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.153698492 seconds)
  done (took 19.61452329 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.45510413 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.615551538 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.339226005 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.261198529 seconds)
  done (took 6.824920227 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.182926143 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.17777661 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.164657781 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.189732446 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.165583254 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.155377826 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.197203664 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.170974134 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.163725207 seconds)
  done (took 11.718296276 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.864924181 seconds)
done (took 81.767531528 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.512541122 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.445663327 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.15826341 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.502733265 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.278310283 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.474467913 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.280548726 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.175750535 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.50929087 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.659015066 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.68158565 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.24758667 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.564370257 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.618569479 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.407656742 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.182945516 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.178851257 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.216430553 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.834305363 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.340756246 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 6.16381231 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.293551673 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.891627703 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.186112251 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.088733782 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.268045449 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.411398468 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.058734895 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.345303845 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.180994385 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.237686049 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.670835544 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.308998013 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.454077756 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.253252198 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.985924381 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.602937877 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.275690682 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.295040006 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.611474387 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.452833025 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.24218254 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.149427881 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.319933993 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.594231119 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.170788273 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.132954735 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.323202971 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.729138685 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.350263372 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.537292289 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.166505478 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.794855102 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.234557545 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.246645606 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.146084192 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.126877622 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.62762006 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.315136052 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.456006315 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.176114481 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.274321939 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.101960889 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.195116294 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.358941564 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.489908357 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.568412114 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.251182032 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.779394782 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.186816064 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.17473972 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.179828007 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.833450154 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.290475816 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.144915737 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.301919852 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.424426549 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.239232662 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.15246772 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.382617921 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.373364226 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.153970678 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.300945714 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.511824594 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.318932516 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.571044039 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.689048901 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.622338762 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.559424613 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.086474644 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.8138853 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.107412859 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.260977991 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.16541138 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.596282899 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 6.272312062 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.423952639 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.69115182 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.298457408 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.756022873 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.185399337 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.171101997 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.74307051 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.545843675 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.984815798 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.194679383 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.293320554 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.150219189 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.45507541 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.98291942 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.253033306 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.754799322 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.16116364 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.223511896 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.706534116 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.165206595 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.477283443 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.603754475 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.217044244 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.150746857 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.455920073 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.15852453 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.287056032 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.76858388 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.569100737 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.416009494 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.154958692 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.45665161 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.155235203 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.352740988 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.16544665 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.733678741 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.696883102 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.194056326 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.412930828 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.283062134 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.154785043 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.460856454 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.212935341 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.294772179 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.463981724 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.49040844 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.330528228 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.147432431 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.513103986 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.160592882 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.361834502 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.477492777 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.320037746 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.462282642 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.246577122 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.168655685 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.141004271 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.600198203 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.79500969 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.762039691 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.409412512 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.292588986 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.678596802 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.507999888 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.985170136 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.260330338 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.210079506 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.161004576 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.171166711 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.22295084 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.148852484 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.152318041 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.454423223 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.460729841 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.699464388 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.960655227 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.874340605 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.424727951 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.312019428 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.097500358 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.738558017 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.166717767 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.557692019 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.657095493 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.32020838 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.18187485 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.157069931 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.210312385 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.883008438 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.199295289 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.497515386 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.857212091 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.532355286 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.521550784 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.371430625 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.194623774 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.541508616 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.42199453 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.460342981 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.361970899 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.552219185 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.280802338 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.551765667 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.187157964 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.465798671 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.155656316 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.214015073 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.372175796 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.651271573 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.531014829 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.395231336 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.3278034 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.493845027 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.162193442 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.388784532 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.256822695 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.54389339 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.187830156 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.371223107 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.25288651 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.585089183 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.085447808 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.27794355 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.533756918 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.282789502 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.240335909 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.664308753 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.174469925 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.490730523 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.326529807 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.29432075 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.360179226 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.193389001 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.284425008 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.334663225 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.295269812 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.404023208 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.006417277 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.554976984 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.732154191 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.283069906 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.143662922 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.623300578 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.179414999 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.174901671 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.496559896 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.380104467 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.472077094 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.26607002 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.322077276 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.22380613 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.18468268 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.584985586 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.022344212 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.739004318 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.315384867 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.183957709 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.148395784 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.666921618 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.587722613 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.228175185 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.289587375 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.740583236 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.192942635 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.358728256 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.164854391 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.155830895 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 3.121334574 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.288922908 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.397307835 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.71577517 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.156869228 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.347004831 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.239686097 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.582075851 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.702632644 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.206773668 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.28516952 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.447119629 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.174718008 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.552954027 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.181566727 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.311614622 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.529022844 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.280490546 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.269585794 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.155039596 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.188533493 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.709632983 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.471144227 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.675668447 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.189496279 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.623916235 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.157952131 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 2.91163026 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.175909038 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.248470129 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.564920387 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.300292783 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.503646291 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.157941558 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.315217661 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.410183063 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.181428472 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.15096898 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.294009045 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.777887123 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.567762922 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.477791376 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.255299097 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.092454568 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.395114548 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.155592594 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.795125945 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.287595597 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.262051762 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.802968121 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.668639119 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.1573221 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.381843494 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.153042114 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.504038865 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.188328812 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.169045816 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.286400043 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.246173805 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.15007626 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.758865111 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.322132614 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.684437186 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.25646351 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.999888268 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.259707969 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.340754724 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.271706483 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.556852707 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.940549869 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.171368824 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.302959429 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.762121369 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.228034445 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.186382058 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.433437509 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.166794331 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.755653677 seconds)
  done (took 886.712753645 seconds)
done (took 888.037118572 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.353409566 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.527580865 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.403367593 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.12768469 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.963207123 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.807211679 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.42201712 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.389621829 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.243169569 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.415767343 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.104498724 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.962741314 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.259510129 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.274517228 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.259512299 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.2979974 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.369485651 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.407900205 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.280489169 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.162714659 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.525928138 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.170099684 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.580892789 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.457101524 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.528347595 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.266913211 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.365156114 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.515318842 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.512249477 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.351502681 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.354695954 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.401678197 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.98461814 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.409593441 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.260311797 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.239187261 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.047092232 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.255360326 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.357965101 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.247460555 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.528186834 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.283574626 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.890112252 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.067324945 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.942872925 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.584764308 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.032939877 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.269756953 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.300488141 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.361056227 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.356452359 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.363196605 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.508669059 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.376224626 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.006993619 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.064567024 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.514248413 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.061816674 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.893776232 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.371185309 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.534334845 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.255779419 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.36228221 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.397702929 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.274123835 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.450995868 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.575190729 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.357578709 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.402048001 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.422661897 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.410070812 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.387270849 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.274813941 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.294387178 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.300966431 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.419267771 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.010920055 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.397691011 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.95011884 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.269379119 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.111781009 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.026474212 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.113293151 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.243976564 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.352593634 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.946503744 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.978595309 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.1239344 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.285482887 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.409656052 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.080363493 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.402380653 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.621458884 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.369663954 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.347024321 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.402866868 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.983837683 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.352368585 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.188600819 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.403001892 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.945276625 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.366334996 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.197866497 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.263359466 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.261104559 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.356155142 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.36665781 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.571670294 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.388925124 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.331881882 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.541194351 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.302972807 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.385513221 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.279172788 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.23528172 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.941809189 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.441052506 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.050689472 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.348676539 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.824300814 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.44180552 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.265228437 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.534847634 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.462311288 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.349644934 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.254780712 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.266974514 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.114417601 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.266478891 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.256701743 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.349050967 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.608225413 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.37115907 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.130967801 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.387764846 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.948940558 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.403499259 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.384520899 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.234764405 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.050746548 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.260512715 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.167030602 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.460740398 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.539816836 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.404569235 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.460542725 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.281447152 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.441693806 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.355001715 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.272639047 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.387197292 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.289788922 seconds)
done (took 253.105434258 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.508336097 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.367568522 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.452680492 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.439329691 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.519333921 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.522461345 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.225084128 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.594349445 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.274100782 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.573345857 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.408934105 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.042220169 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.322681163 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.371964081 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.51283292 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.423965451 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.27320874 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.41999496 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.607223262 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.516582172 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.948678647 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.445079115 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.299484653 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.568333134 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.151569295 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.96507221 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.520911055 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.297829926 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.418963433 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.925399505 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.967362223 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.426446404 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.520856793 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.938390494 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.609681612 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.897939076 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.523199248 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.988372504 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.51396193 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.50651676 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.44333816 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.036124874 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.935827814 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.972640539 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.316929972 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.516645752 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.219762762 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.080025052 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.15323416 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.902936099 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.42166096 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.963799106 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.041386968 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.497261912 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.370542533 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.809332945 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.643092795 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.658693115 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.512890768 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.466986491 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.512161375 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.573047473 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.57704789 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.343662422 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.969738136 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.447672468 seconds)
  done (took 151.344846148 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.564501955 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.49240648 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.591003287 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.621155218 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.754925723 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.623308515 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.700106926 seconds)
  done (took 14.494868147 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.217336757 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.206200553 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.408880447 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.455011718 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.205445053 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.340663116 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.292557315 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.939343298 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.456912002 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.251301734 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.530472479 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.403623215 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.847705958 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.935100004 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.29680171 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.48527867 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.176253176 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.285451712 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.268620007 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.468967333 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.941744049 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.915232042 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.402342272 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.299555461 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.213897125 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.251147098 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.198306235 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.187829393 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.251896454 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.188518211 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.218838962 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.314619754 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.207025712 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.899662229 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.241054753 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.530672736 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.217900421 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.254023957 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.346844141 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.157758894 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.19275696 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.213074129 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.343170796 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.220289755 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.194240412 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.393519954 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.196162821 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.213716122 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.194096304 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.205984275 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.399111218 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.200752053 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.227620792 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.868832301 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.425767561 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.915779329 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.280186073 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.196958891 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.209906296 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.257181102 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.207547527 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.465930483 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.451474649 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.196776326 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.446879484 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.519903719 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.206403582 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.188407039 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.192427669 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.427998208 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.203893418 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.397912162 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.212905205 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.26435669 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.251064361 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.34589404 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.391637298 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.007329683 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.972156277 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.853390585 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.182135886 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.194284711 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.50538759 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.155165167 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.875484999 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.196659669 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.250470495 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.869540612 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.115356478 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.212311915 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.517113968 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.195627545 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.264822217 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.256842811 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.238148047 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.267328538 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.451187837 seconds)
  done (took 157.344287047 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.332685966 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.742890737 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.421189135 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.227808465 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.339843287 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.455156207 seconds)
  done (took 15.679380854 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.508566426 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.015103314 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.21882976 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.223406792 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.260480567 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.203789942 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.198385549 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.388130452 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.336830149 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.213909525 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.207029359 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.222677974 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.208093956 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.338609053 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.206428496 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.210036369 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.202080095 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.216038082 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.215136223 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.275401186 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.509691204 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.264584928 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.266558887 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.105486725 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.259104194 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.220400207 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.190016562 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.21807114 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.223811173 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.518619104 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.401902461 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.203042553 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.045158296 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.543765303 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.969913372 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.09436837 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.348280578 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.226273265 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.263601724 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.204029805 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.22975776 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.267101496 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.224063335 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.224075819 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.547378009 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 3.020216549 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.281183461 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.468294908 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.206284418 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.229601028 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.220205615 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.228843841 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.197705691 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.227527208 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.738414322 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.606623045 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.177127968 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.204090433 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.269517096 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.103715302 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.273754525 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.20677981 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.544048791 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.148834647 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.907581144 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.227576742 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.112387223 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.337653959 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.274283209 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.226121214 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.231176677 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.218609264 seconds)
  done (took 121.539124404 seconds)
done (took 461.56030733 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.594844613 seconds)
  done (took 7.740938626 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.256409023 seconds)
  done (took 7.578255283 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.154500839 seconds)
  done (took 7.315186867 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.164997984 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.190470664 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.170710621 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.174173332 seconds)
  done (took 25.887955954 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.262458428 seconds)
  done (took 7.423120513 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.150464121 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.167199509 seconds)
  done (took 13.575334915 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.18853634 seconds)
  done (took 7.356799555 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.514494098 seconds)
  done (took 7.672517964 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.175194849 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.174761075 seconds)
  done (took 13.540658732 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.14511913 seconds)
  done (took 7.307206099 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.65813724 seconds)
  done (took 8.914183807 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.161966495 seconds)
  done (took 7.349551451 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.231715393 seconds)
  done (took 7.386132928 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.277914498 seconds)
  done (took 7.440279544 seconds)
done (took 137.641830602 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.150151369 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.160983803 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.159442741 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.154421094 seconds)
  done (took 25.77192668 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.482636949 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.494451237 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.470605913 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.534116632 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.435411007 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.431856454 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.482748662 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.489794228 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.436947692 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.544328333 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.489938172 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.642902177 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.535156034 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.466962107 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.470749503 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.529037948 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.542759662 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.490780065 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.432352439 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.468119966 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.533367079 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.538116398 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.908173356 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.902272303 seconds)
  done (took 37.916465049 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.36757606 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.613110273 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.322836444 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.477772848 seconds)
  done (took 6.94142835 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.194184376 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.543053862 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.52116054 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.582626638 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.522362712 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.338063574 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.516167412 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.375577202 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.313698153 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.303905357 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.789153681 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.313406125 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.331327215 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.581814183 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.328308922 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.16739608 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.157818393 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.303217958 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.533293085 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.410561965 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.417302821 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.516024564 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.527199319 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.52165997 seconds)
  done (took 35.26410356 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.924699569 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.096826394 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.523190282 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.076843456 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.864293131 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.956647823 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.445536026 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.669129184 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.432410246 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.408885947 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.883557757 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.906542459 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.31115464 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.043409885 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.923150421 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.34544537 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.345754108 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.006421746 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.580341363 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.469834191 seconds)
  done (took 39.363448937 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.146304343 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.153518321 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.408438128 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.331889419 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.146755513 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.161270007 seconds)
  done (took 28.504341106 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.201533548 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.316368538 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.488660882 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.437064534 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.317429145 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.291756393 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.816959413 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.376331743 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.914379522 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.947717157 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.784276411 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.610267731 seconds)
  done (took 22.665585607 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.145636251 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.188974634 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.162620873 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.38072766 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.192053379 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.824368586 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.170233283 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.161900636 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.665352462 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.416433381 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 3.298586937 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.39807512 seconds)
  done (took 44.182772392 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.359287666 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.374994758 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.488089522 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.205134898 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.684003085 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.242752492 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.531614058 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 6.153666783 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.968276393 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.020701286 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.685824305 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.2192482 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.696438911 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.126326494 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.162201641 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.464850617 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.989810791 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.150568138 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.606940216 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.240868023 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.114695926 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.313481642 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.154115696 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.720014695 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.480470803 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.155529795 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.378415124 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.395814833 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.158436402 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.407693548 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.147869776 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.636583355 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.344826974 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.46274488 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.68213297 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.249886217 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.27082317 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.84709476 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.739688823 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.452891051 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.298375785 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.320807441 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.153889397 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.162829044 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.414865115 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.946579338 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.156750499 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.799051139 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.137018969 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.270193868 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.052641988 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.03349116 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.492331358 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.91162749 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.303065251 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.458735806 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.317966081 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.153714425 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.417068969 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.18248354 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.345169179 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.265322464 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.366007724 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.125546884 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.379268383 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.492559306 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.501766295 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.470011313 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.455435834 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.473179825 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.539141755 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.274025878 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.988545188 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.293060353 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.743165111 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.070030717 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.524493402 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.155917326 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.861275616 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.689704837 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.142250873 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.278215739 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.884568785 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117670863 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.154497479 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.319013314 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.022217036 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.127712154 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.24908127 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.198427534 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.556494737 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.294526964 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.304858445 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.352746972 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.864437715 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.163150878 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.153634083 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.443689337 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.125238009 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.725593585 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.154783877 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.138798654 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.215832007 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.725092429 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.556673687 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.203897165 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.908566603 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.843332838 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.487037629 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.76473401 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.331169131 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.15389679 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.552816864 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.48935753 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.148079774 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.925312605 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.164488467 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.211676616 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.506236792 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.15529066 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.131404809 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.559120914 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.337506917 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.155875077 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.395560923 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.150628588 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.311023934 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.160759437 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.697886279 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.128891303 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.405645103 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.68130951 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.25295745 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.235950347 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.125256621 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.303834569 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.679930428 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.2421294 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.486212449 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.603453152 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.387064192 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.600748429 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.151247884 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.019614873 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.637719595 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.422612963 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.494408566 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.820983544 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.340316144 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.242724277 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.154713879 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.335816803 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.163637728 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.714740069 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.172454439 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.894730132 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.929706475 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.415369586 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.151391472 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.321509971 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.162095724 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.348880962 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.813231268 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.205166009 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.322878744 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.44586745 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.379293888 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.149456956 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.131159491 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.532155807 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.42661447 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.680392156 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.413191604 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.821227564 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.516442224 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.642382081 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.373426616 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.532611843 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.945815478 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.386576326 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.495936988 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.031696406 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.176308279 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.185959568 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.22285906 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.580605304 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.37714784 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.942457527 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.036768994 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.168681146 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.200783159 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.637950788 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.129073145 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.304179497 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.635200492 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.184824499 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.72428975 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.257630404 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.40042114 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.410888052 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.189745377 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.50035572 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.000529207 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.595567857 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.512540012 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.48073171 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.13880174 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.12700667 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.631587984 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.673576709 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.293293302 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.478602583 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.157940872 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.213129279 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.15497668 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.501587177 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.051926043 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.89980083 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.417643846 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.671017243 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.126944281 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.309707515 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.539410748 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.170719346 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.136793163 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.307939203 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.199930274 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.324315185 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.713604741 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.423744376 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.477596388 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.154545108 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.163540369 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.429863093 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.472263853 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.431552225 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.684270794 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.401247227 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.852875013 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.259981489 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.837470561 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.322680205 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.197715778 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.889999639 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.495397185 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.115950727 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.332550741 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.882897817 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.285399892 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 4.849475391 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.449472115 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.158896576 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.639733456 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.778517887 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.163400196 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.179916178 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.300500329 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.155571809 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.384468805 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.056651643 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.415440527 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.898394653 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.442523172 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.390549913 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.339500456 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.559334521 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.683385262 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.925693204 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.128508477 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.326379442 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.258156256 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.485399095 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.156999252 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.449293702 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.834049565 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.833093134 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.960541221 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.706225138 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.367220292 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.916306819 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.631966444 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.409596764 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.455132934 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.113724051 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.813331495 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.136620876 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.303440289 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.117956997 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.971591274 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.477841872 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.532180363 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.638724074 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.224379344 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.689835168 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.577409172 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.184289651 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.308416126 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.419441481 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.149118539 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.407447719 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.156667186 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.718639643 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.584994286 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.158592247 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.833467396 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.34873623 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.488815882 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.325891346 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.884868745 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.191082547 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.298392262 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.605377096 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.336804026 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.290468071 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.502500923 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.040195161 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.192715574 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.223392409 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.202015938 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.801502646 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.645016617 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.77263916 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.749305471 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.491793739 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.911728869 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.155982933 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.378005474 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.32963525 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.158568925 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.329907491 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.561436937 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.192312229 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.366022269 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.486056636 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.33641889 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.695358817 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.13898198 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.8511573 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.458106543 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.670708707 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.69754928 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.932669753 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.634630833 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.197593589 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.691922045 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.147510924 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.328888709 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.484689132 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.876937986 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.231660989 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.013405273 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.962058086 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.309717893 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.582951699 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.22965621 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.899965569 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.324498705 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.394998649 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.37211042 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.300741673 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.116666466 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.7454563 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.93304983 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.435190503 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.328649751 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.329584477 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.290791747 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.318553179 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.665452684 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.474161885 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.905576227 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.640218937 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.397929314 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.120359987 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.159116408 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.863197332 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.515961707 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.249668034 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.473553684 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.574718789 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.208351233 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.203746555 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.159193022 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.411937436 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.929120719 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.881181751 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.491938375 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.684399929 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.631518577 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.187933375 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.914269199 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.372020506 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.52042711 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.563289889 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.091115339 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.542226684 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.487648042 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.323607685 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.129099878 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.343282581 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.162735924 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.257328979 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.973453875 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.451678481 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.218613757 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.29800332 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.751274401 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.163293603 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.17551425 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.863663571 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.433961782 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.354633184 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.156504645 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.740191647 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.530021252 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.311081473 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.132733402 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.920100189 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.127384943 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.379463778 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.14919416 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.342141627 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.989649467 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.227244652 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.820002901 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.702853474 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.236380796 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.338119701 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.124743273 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.964145618 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.170237743 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.835225806 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.952967809 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.403635629 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.676603146 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.339134049 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.159398061 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.485453538 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.288638326 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.488768569 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.621669883 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.638025333 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.587320119 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.523418301 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.450618866 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.883895997 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.298556506 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.40573966 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.119168632 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.155399945 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.167683572 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.533527936 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.512009817 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.157654597 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.722788737 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.407585395 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.284123945 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.335022323 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.293856539 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.703907347 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.373202321 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.285726768 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.319945715 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.409449273 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.514207691 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.209335171 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.336798511 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.155339637 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.200600755 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.38673908 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.398863171 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.544662165 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.470675064 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.751669781 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.322832067 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.65438554 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.826798248 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.691480418 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.155414581 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.994772405 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.511850897 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.152869686 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.6407936 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.813160006 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.340822595 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.431187266 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.262026617 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.211051901 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.305670881 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.673117506 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.168021932 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.810269279 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.565690382 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.156576905 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.645652041 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.238659683 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.329863741 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.939021293 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.652238128 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.1548347 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.97757084 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.304512893 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.665805055 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.431400099 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.174922617 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.168956272 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.705221749 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.140535758 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.160540452 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.249416957 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.689610664 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.177382253 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.733383222 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.283809965 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.313946667 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.165603199 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.303787585 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.149024035 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.372940451 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.348985133 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.405755312 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.421972683 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.343319487 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.149807304 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.776759591 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.860613954 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.310166761 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.328499385 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.1515561 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.566713104 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.973016804 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.188101135 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.695918824 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.383373426 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.355252084 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.586808694 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.413807102 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.197331014 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.358781486 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.194150709 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.446447631 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.311330908 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.716052667 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.422063726 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.919907163 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.296620727 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.180260219 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.704429179 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.63046655 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.040223639 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.15516795 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.474545595 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.15841267 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.976728392 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.790787214 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.34612688 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.286893136 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.144096682 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.751092205 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.487975748 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.285131889 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.155367197 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.375970429 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.660872747 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.135421259 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.975520575 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.035996587 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.369453079 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.48697 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.118928918 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.335639266 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.180554939 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.143816884 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.657283837 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.162357474 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.514294348 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.125645254 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.747984375 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.170924275 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.244942377 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.361199257 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.484349211 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.156943632 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.883035451 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.33152757 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.162012765 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.161737789 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.545339423 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.240649183 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.404030393 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.639515559 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.384509642 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.496997843 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.059316271 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.965525953 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.164764896 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.469608839 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.993339604 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.712128792 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.227721262 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.677411055 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.964498934 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.172629111 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.702999287 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.406539253 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.890963523 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.301717594 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.633938372 seconds)
  done (took 1986.817194757 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.246147633 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.248270945 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.234960616 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.204613376 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.224697209 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.227293947 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.1935263 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.185257653 seconds)
  done (took 50.926302632 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.147819966 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.101100245 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.605187087 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.335476841 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.178148069 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.363548099 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.313103599 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.663502106 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.35392956 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.178485635 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.222605445 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.202468833 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.160591502 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.192836218 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.039427309 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.239347775 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.162170948 seconds)
  done (took 91.669644483 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.207765187 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.187964728 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.186302446 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.186935738 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.250804722 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.584473321 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.174357427 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.157064704 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.508658725 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.848001447 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.166130421 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.315011379 seconds)
  done (took 81.96823969 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.19443153 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.192172251 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.193294608 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.188241145 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.199481705 seconds)
  done (took 7.127035624 seconds)
done (took 2460.299025053 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.388560411 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.637947909 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.714115235 seconds)
  done (took 4.502812616 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.224673311 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.295965121 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.357664767 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.303001746 seconds)
  done (took 6.355557001 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.449974871 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.629390745 seconds)
  done (took 4.230910269 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.55336925 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.175458378 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.703724869 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.157396819 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.160749933 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.156501079 seconds)
  done (took 19.63955515 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.18378011 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.19678337 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.184451 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.183262269 seconds)
  done (took 5.911096986 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.153526797 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.177928373 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.158814327 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.137781328 seconds)
  done (took 18.780676451 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.475258453 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.436841007 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.918961805 seconds)
  done (took 5.999436343 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.973680065 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.294032008 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.011823253 seconds)
  done (took 6.441477001 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.446166797 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.088393201 seconds)
  done (took 5.691097433 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.316958426 seconds)
  done (took 2.474164825 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.6440024 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.643778131 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.025051961 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.023502047 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.185697189 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.467928147 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.510882888 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.431437233 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.850213522 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.746784668 seconds)
  done (took 18.685998558 seconds)
done (took 110.683237638 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.093413414 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.558433174 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.326960263 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.850507369 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.257493918 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.32641274 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.772767907 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.658074555 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.456169184 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.456497839 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.363547739 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.250593078 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.18379678 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.552954833 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.193071183 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.492808052 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.31811107 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.113575053 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.706245149 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.774873301 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.786470606 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.743201334 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.076923927 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.744726071 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.329435931 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.300797617 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.996154791 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.506607341 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.946707308 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.998109075 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.311268654 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.995081889 seconds)
  done (took 153.601803496 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.155124063 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.162003658 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.167659925 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.164149157 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.126029842 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.171915997 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.166055416 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.162847125 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.850378119 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.867202194 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.166341798 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.119469399 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.163193956 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.15687916 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.168365161 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.164414402 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.955206853 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.170960413 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.164814739 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.162769662 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.175770956 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.996523235 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.170074273 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.996093672 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.960699693 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.170683762 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.162503642 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.169055248 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.164794074 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.168281332 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.170505486 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.155760137 seconds)
  done (took 189.011797161 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.154772543 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.162836177 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.161193781 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.167413412 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.170814101 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.161555584 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.158425907 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.167729737 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.166260878 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.162822153 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.163358489 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.169607685 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.166490646 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.157444309 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.171560551 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.166547252 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.168784899 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.162139673 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.166141215 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.167377984 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.16722743 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.157038616 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.169481131 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.168375871 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.163725996 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.164657872 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.165988607 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.171295437 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.160376819 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.164855608 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.16832786 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.162731806 seconds)
  done (took 198.444893649 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.467197967 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.191568565 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.098312225 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.732055904 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.044695141 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.190840997 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.726229719 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.466834018 seconds)
  done (took 14.07993707 seconds)
done (took 556.301727461 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.853992094 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.083974596 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.348156723 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.380736937 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.792334106 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.461306766 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.386518008 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.621834204 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.907998701 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.620132296 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.672804704 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.387520123 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.995556066 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.382592226 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.362265433 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.600145164 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.590556489 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.890302683 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.367782467 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.032523622 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.386652046 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.015449457 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.635406251 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.949176951 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.663698354 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.068360992 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.28269038 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.593172625 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.373778046 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.377662595 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.20100938 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.521575116 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.407293037 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.413268058 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.601567635 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.621141954 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.499815279 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.583918495 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.332020814 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.8282238 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.042935631 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.77317519 seconds)
  done (took 77.064037921 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.189103078 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.195322527 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.369053693 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.260966136 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.808821128 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.26327999 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.415989481 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.397639595 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.286883321 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.394316007 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.435726392 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.840031868 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.430549423 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.80698711 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.425920329 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.439015858 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.263201146 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.786127321 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.41882845 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.409221663 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.230901481 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.346828131 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.227604379 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.378480228 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.219092969 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.229214397 seconds)
  done (took 37.647915756 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.242494427 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.331319645 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.460879712 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.56016117 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.414666835 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.218896049 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.53065553 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.353180406 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.07030731 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.351201256 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.300602442 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.313595801 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.364745148 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.489510803 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.741326779 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.351390987 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.352394742 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.342875144 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.340656973 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.398917045 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.326114098 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.297165951 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.532376062 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.287529446 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.862727766 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.529509181 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.502362431 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.83172618 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.68646006 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.350484971 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.323409445 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.510536147 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.639365844 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.468421803 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.335981838 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.202198978 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.220896516 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.293787356 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.120652834 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.368237829 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.517622104 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.344505668 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.594771794 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.767196234 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.241977049 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.437736703 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.692948095 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.310504661 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.31870867 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.002646593 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.505521302 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.154040992 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.346042707 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.392279346 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.315977664 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.701717768 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.387813345 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.511204828 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.388763609 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.908452932 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.272212356 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.618449205 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.353778953 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.241610354 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.490500787 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.408934485 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.355892984 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.579741102 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.591187696 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.631323133 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.791932464 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.277866407 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.229793716 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.296887117 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.342936891 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.726952449 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.660480589 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.433020992 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.648186488 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.518242533 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.733798889 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.704470604 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.18619901 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.871984194 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.250401774 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.193326016 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.280742614 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.518431204 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.507533036 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.715844927 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.785598409 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.523931891 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.658902271 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.630556709 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.584576626 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.630089897 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.194061899 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.213688696 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.448975487 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.792252684 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.284520046 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.403983407 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.89759407 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.579817858 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.533603357 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.470489141 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.605391218 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.245853164 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.612679036 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.185794155 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.376591856 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.465904079 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.512268012 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.555707147 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.198328197 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.745626782 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.319167103 seconds)
  done (took 235.109247753 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.156819336 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.171231327 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.158971922 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.163798537 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.165735387 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.790645746 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.231805799 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.15785067 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.785212296 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.234877466 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.164521134 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.156691078 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.161217689 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.17199618 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.772893635 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.727145591 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.988824247 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.159449976 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.162756825 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.166096613 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.991885793 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.171118798 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.15781827 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.157850714 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.160698376 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.166325895 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.161419773 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.20592965 seconds)
  done (took 153.980803421 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.20668633 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.607907636 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.255229305 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.305995416 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.262485444 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.227862131 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.740522198 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.360947668 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.287018952 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.228384161 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.213713239 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.452145264 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.480273179 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.820575747 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.337057652 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.339643607 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.873904517 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.37194851 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.223675925 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.223930463 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.375657498 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.5869117 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.515658779 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.485655075 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.375873936 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.494378751 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.290485258 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.217514179 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.337153314 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.724798086 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.240334098 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.606294451 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.368740688 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.226925736 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.726584713 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.573655644 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.80816542 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.784625458 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.411294001 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.183518939 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.179564406 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.467503129 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.527322197 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.263238067 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.223429782 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.883404905 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.234075594 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.646361817 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.262165843 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.184993315 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.310639064 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.325510826 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.493838363 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.21135546 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.397985907 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.381714171 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.736055646 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.205912748 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.281291864 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.520639813 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.201017939 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.711608306 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.708615471 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.290144368 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.226795448 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.070581834 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.310667678 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.765115909 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.848681508 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.265629054 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.562701697 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.41443915 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.190189652 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.495839557 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.412168924 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.660635697 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.817002002 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.365581764 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.325975102 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.296177453 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.497583155 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.209977506 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.798319114 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.317303636 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.188788288 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.72366333 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.604429124 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.191804124 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.214289451 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.328638953 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.393382055 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.428757843 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.499097002 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.293701934 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.125397564 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.48088298 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.53289154 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.228526452 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.353604214 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.213005086 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.612067475 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.399055744 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.208463685 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.537306296 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.606778962 seconds)
  done (took 161.986243796 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.959879946 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.274617891 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.404167769 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.786955343 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.52876081 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.688328883 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.484368028 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.295686154 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.480419827 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.431167293 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.436050271 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.312300182 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.180351668 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.938465292 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.278332861 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.393925164 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.282793631 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.8340527 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.523435456 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.166773551 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.53922558 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.90440509 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.527918227 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.629521337 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.664307909 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.736452926 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.874514962 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.361534957 seconds)
  done (took 50.089511496 seconds)
done (took 717.031222231 seconds)
SAVING RESULT...
DONE!
