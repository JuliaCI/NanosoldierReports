cset: moving following pidspec: 696031
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.774997019 seconds)
loading group "shootout"... done (took 0.78175127 seconds)
loading group "string"... done (took 0.199498372 seconds)
loading group "linalg"... done (took 3.056996075 seconds)
loading group "parallel"... done (took 0.022232988 seconds)
loading group "find"... done (took 1.564810841 seconds)
loading group "tuple"... done (took 0.701289328 seconds)
loading group "union"... done (took 3.034498266 seconds)
loading group "dates"... done (took 0.156362323 seconds)
loading group "micro"... done (took 0.056793008 seconds)
loading group "simd"... done (took 0.365125181 seconds)
loading group "io"... done (took 1.365556259 seconds)
loading group "random"... done (took 2.255570542 seconds)
loading group "problem"... done (took 1.20386033 seconds)
loading group "array"... done (took 4.580481936 seconds)
loading group "misc"... done (took 0.928971209 seconds)
loading group "scalar"... done (took 3.47755393 seconds)
loading group "sort"... done (took 0.306491645 seconds)
loading group "sparse"... done (took 3.531093882 seconds)
loading group "collection"... done (took 6.375480633 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.415834533 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.070526027 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.080257956 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.076246789 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.158417331 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.081112484 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.086126288 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.067789472 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.242008842 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.071358532 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.070074564 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.386507175 seconds)
done (took 4.528556902 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.265343034 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.0317678 seconds)
    (2/2) benchmarking "String"...
    done (took 0.027395715 seconds)
  done (took 0.65149096 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.027132989 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.015045736 seconds)
    (3/3) benchmarking "different"...
    done (took 0.021765291 seconds)
  done (took 0.64490455 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020103107 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.095287728 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021066011 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.021640446 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.021594098 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.021052219 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.020835917 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.020785134 seconds)
  done (took 0.803910373 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.028113129 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.022224687 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020344014 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021965509 seconds)
  done (took 0.677093806 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.022120727 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.082683499 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.019686996 seconds)
    (4/4) benchmarking "different"...
    done (took 0.019573299 seconds)
  done (took 0.725120444 seconds)
done (took 4.385791651 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.098717372 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.671232127 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.718114963 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.076286301 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.241916169 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.329794763 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.074432526 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.133981621 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.043163236 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.030396936 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.077648724 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.035891386 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.358531247 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.32907338 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.026345207 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.139582099 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.572288225 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.03874504 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.068683121 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.228422287 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.036132011 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.038068364 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.042655333 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.025691192 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.132273813 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.129529314 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.57779789 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.057764466 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.02373313 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.049013407 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.02613505 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.031840385 seconds)
  done (took 8.087195712 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.04871627 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.043328216 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.022667422 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.057400534 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.048437648 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.024001001 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.029364999 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.022376503 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.041786668 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.085096592 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.04456452 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.052683187 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.020428528 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.023368717 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.0259294 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.111363769 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.036591011 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.035926318 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.021692814 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.035611271 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.048367296 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.033507668 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.032182671 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.03193057 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.066318055 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.08619876 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.044929783 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.061766142 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.021955513 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.033836939 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.051157426 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.061480662 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.022283495 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.020952284 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.06420348 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.04066986 seconds)
  done (took 2.176389343 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.982833778 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.050001657 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.037160475 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.028164965 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.062168339 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.050033282 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.076679153 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.076050803 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.054036937 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023343995 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.102747278 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.628685227 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.062421163 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.021155655 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.027856934 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074356312 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.313869393 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.834718322 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023811668 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022856259 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.024980943 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024656771 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.067846394 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.021415177 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.132378577 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.576556343 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.027310345 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024564523 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.052634536 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.039256779 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.024000046 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.101885835 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.050916142 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.028469536 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.531126549 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.021922389 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019952829 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.044939255 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.050557457 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022447766 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.023541245 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.034407191 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021693591 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.077067634 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.036262911 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.650338738 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024588933 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.586572569 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.175141032 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.026697906 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.025398081 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.056399327 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.018833838 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022257487 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.576910608 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.096855618 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.021734443 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.237295661 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.02420171 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023064351 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.023336977 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.054263488 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.02232252 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023437838 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.025377912 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.039885615 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.969165561 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.040096034 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.041434264 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.020492552 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.021704498 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.020141373 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.375310517 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.028729537 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.02435714 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.019944146 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.02567421 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021876889 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.02144116 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.061906668 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.047092534 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.04528351 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025211715 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.022429111 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.021607987 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.538306445 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.929323899 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02452793 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.023788136 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.460210025 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020054535 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021956238 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.02361408 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.042602729 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.02253496 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019410453 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.05690922 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024017129 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.023687459 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.546856295 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.023410657 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.01962101 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.483833582 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.024111549 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.057821617 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.077406986 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022307414 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.062139731 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.022848791 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.019929596 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026166184 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019672385 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.02398531 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.166692022 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021142067 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020151375 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.021915999 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.022969147 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021615071 seconds)
  done (took 16.957194422 seconds)
done (took 28.789426318 seconds)
(4/20) benchmarking "parallel"...
done (took 0.65682839 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.086047872 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.047887159 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.106717936 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.055475011 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.023038088 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.056178415 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.061629878 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.058909635 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.023092756 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.023023701 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.023035535 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.056808352 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.059331977 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.023027383 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.05245432 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.058112046 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.023006603 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.018941628 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.023007812 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.022926191 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.022999784 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.018919449 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.023036892 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.023124633 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.054141092 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.023268766 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.018954035 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.053492076 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.0231648 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.052910733 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.023190184 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.023171014 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.023081628 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.054552084 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.023215957 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.054066323 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.019085576 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.023210551 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.023790915 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.023131173 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.02315932 seconds)
  done (took 2.207703713 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.03975866 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.036437075 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.03860725 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017331137 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.02647424 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.036553351 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.01729091 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.036056501 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.039101058 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.036620282 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.036530923 seconds)
  done (took 1.015326853 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.038836606 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.037723108 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.038256419 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017393366 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.02839901 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037643161 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017280402 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.036976677 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.094128754 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.038590684 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.037785161 seconds)
  done (took 1.069325402 seconds)
done (took 4.923968959 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.044174808 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.019531306 seconds)
  done (took 0.699575524 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.456594808 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.118582705 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.025813618 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.145531658 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.021615699 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.047440857 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 5.747663193 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.04265183 seconds)
  done (took 7.292817306 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.07306038 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.025758103 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023195169 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.02170137 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.022015154 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.021893157 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.023506896 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.02214871 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.02150906 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.024075765 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.023695056 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.021892493 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022649801 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.023958 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.022053356 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022192837 seconds)
  done (took 1.171617631 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.027706078 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.024690695 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.025831363 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.016386985 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.026695333 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.02500214 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.026268508 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.02685484 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.025745681 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.025728529 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.023609319 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.026564584 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.025402956 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.024155356 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.026356745 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.016445796 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.026628201 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.026067988 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.027944663 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.027000986 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.025934017 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.023665926 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.027522723 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.024861732 seconds)
  done (took 1.253312614 seconds)
done (took 11.064759917 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.136450734 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.028862989 seconds)
  done (took 0.804394621 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.02381596 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.022967571 seconds)
  done (took 0.695547929 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.027511688 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.015416888 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.030531323 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023033198 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.015440907 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.015155371 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.029748292 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.015622095 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.015417702 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.01559286 seconds)
  done (took 0.849682699 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.018657247 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022234177 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.020230874 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.018403209 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.019979905 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.016293099 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.018351107 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.016505888 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.021955234 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.015708514 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.019260258 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.036167818 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.018787347 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.036701125 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.018726909 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.019224224 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.020700214 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.018548113 seconds)
  done (took 1.026607907 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017078076 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.016312663 seconds)
  done (took 0.684804004 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.019895789 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016293675 seconds)
    (3/7) benchmarking "month"...
    done (took 0.017925416 seconds)
    (4/7) benchmarking "year"...
    done (took 0.017776054 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.015906857 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.015356673 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.015792777 seconds)
  done (took 0.764565637 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.370061851 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.077206671 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.289718292 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.023421107 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.030748795 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.215502522 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.018925442 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.023284632 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.023177006 seconds)
  done (took 1.720385718 seconds)
done (took 7.196864512 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.039237642 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.137682215 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.042397272 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.381331866 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.032871765 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.021642547 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.051278131 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.130598293 seconds)
done (took 1.497713298 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.256837366 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.301357877 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.279876916 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.100923502 seconds)
  done (took 2.337629958 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.291036005 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.034842007 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.029362993 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.021784335 seconds)
  done (took 1.045562283 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.021372348 seconds)
    (2/2) benchmarking "read"...
    done (took 0.026147182 seconds)
  done (took 0.709794381 seconds)
done (took 5.013550207 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.026492818 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.01619845 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.020944426 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.017655087 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.017243697 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.016837183 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.016703716 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.017530931 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.01569018 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.017702464 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.017758604 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017817106 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.017518199 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017467603 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.016992943 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0178262 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.015894499 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.017444008 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017451093 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.017496862 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.015817414 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.017757415 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.017034599 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.017426457 seconds)
  done (took 1.076194469 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.034762989 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.020136663 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.020811147 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.020537216 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.021093354 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.020585537 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.020629625 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.019755322 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.020665257 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.019443566 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.021130393 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.021211547 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.019604716 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.021343692 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019690677 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.021404598 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.020864818 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020050004 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019682372 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.021299907 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.020861855 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019989957 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.021299715 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.020786972 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.021193287 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021169852 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.019691192 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.020085598 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.020878597 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.021278716 seconds)
  done (took 1.295635237 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.022240624 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.014582438 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.014850676 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024553777 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.014484664 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.014757458 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.014944 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.014261731 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.014605778 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.015467363 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.014918401 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.014424209 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.015162144 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.014400464 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.014454482 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.01490757 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019436473 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.033705172 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.014769021 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.014543245 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.019107882 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.014686005 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.01456718 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.01461252 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.014960658 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.014534815 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.014369807 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.014864733 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.014556303 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015170669 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.014499391 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.019028499 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.019822152 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.01454165 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.024570745 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.019544638 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.014524238 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.018928353 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.015459522 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.01440058 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.01439281 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.014387898 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.014538673 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.01455408 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.024868709 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.014780668 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.01543767 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015036148 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.014735468 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.014511407 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.014627695 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016237418 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020276758 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.015875109 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.014488685 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.015588623 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.014537055 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.015302156 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.014652275 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.01457651 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.014562336 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.018536096 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.01600458 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.015331421 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.034778652 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.015967324 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.024959848 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.01472284 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015398675 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.018791221 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.015317946 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.033042035 seconds)
  done (took 1.878143562 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.025918116 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.025449691 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.033084546 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.023949091 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.017888362 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015323942 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.01824159 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015288866 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024266939 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019015572 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015441407 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018449634 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024295125 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018908657 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016455052 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.024231534 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.018914176 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018127645 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.015443844 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.01880447 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.01645179 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018433871 seconds)
  done (took 1.111448501 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.093313792 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020558196 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.059996832 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.023563242 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.022285998 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.023446132 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.020564428 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020602785 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020703321 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021201831 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021232333 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020716984 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.022551736 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021255526 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021185864 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.020961266 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020785426 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.021045179 seconds)
  done (took 1.161529247 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.032236227 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.020321845 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.0436531 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.019958913 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.020083338 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.019730473 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.022951333 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.023327895 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.019704948 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.020267769 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.023648412 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019975197 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.01994337 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020330577 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019950287 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.020285039 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.019931087 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02028427 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.02358563 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.023208087 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.023147492 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.02356248 seconds)
  done (took 1.165992094 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.033501843 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.019501442 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.034827444 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.020875539 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.014864418 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014842049 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.020518096 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.01960243 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.020343861 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.019156626 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.019646997 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.014873351 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.021175195 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.01986501 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.021516835 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019797546 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019460958 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.019809924 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019377198 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.014999155 seconds)
  done (took 1.074178393 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.026665819 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017101365 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.016934949 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021283656 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.016961349 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.016895839 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021147737 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.016869401 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.016880169 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.038280831 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.01694623 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.016998328 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.021477144 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.019776323 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017026451 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021428268 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.02138055 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.021364149 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.017000565 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017012145 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.038412866 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.016972083 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.021438259 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017106707 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017186279 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017152037 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.01715881 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.0200329 seconds)
  done (took 1.230131073 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.020643975 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.018330257 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.01842162 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.018311124 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.018330745 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.018202521 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.018267873 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.018292823 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017977824 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.018286823 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.017987907 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.01795218 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017981137 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.017902196 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.017985339 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.017961768 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017976871 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.018283451 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018285861 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018347234 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.018014536 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018065036 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.018014892 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.018422227 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018412283 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018110766 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018459285 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.018413467 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018072161 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018422554 seconds)
  done (took 1.215625618 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.028854895 seconds)
    (2/2) benchmarking "in"...
    done (took 0.025663792 seconds)
  done (took 0.720342664 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.017819815 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.031902054 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.014399125 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.027183033 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.02238286 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.018474298 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.022681579 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.022269172 seconds)
  done (took 0.838826135 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.022170116 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.044291873 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.01608952 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.016447506 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.018642127 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.081144364 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.028101286 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.027428618 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.029547477 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019123129 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.016134586 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.027546439 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.015620866 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.029356195 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.017328839 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.025591961 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023236122 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.033986053 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.029052269 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.014906858 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.028664225 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016553611 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.015092622 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.016663099 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.016210766 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.02280454 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.031680872 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.028384364 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.024347958 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.014327872 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.034485901 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.015081276 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.015737233 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024229612 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.018427816 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.015038988 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.052141193 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.015276841 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.019597847 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.015022697 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.027096559 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.035959381 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.029406187 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.032892752 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.016469248 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.016866816 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.014975144 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.016731523 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.01926747 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.024399309 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.015321847 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022664439 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.014934922 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.016540668 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.025719233 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.015380998 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.019933495 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.024404748 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028895943 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.025595029 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.027544956 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.030648928 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.024096712 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.022372868 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.015960204 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.035044738 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.016833354 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.028540557 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.030100699 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.016422565 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028294521 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.015155225 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.014411134 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.015333464 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.048944765 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.016667898 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.016213339 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.015449345 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.015578116 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.016753878 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024938137 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020263412 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022752115 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018367334 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.031291029 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.024594156 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.015234661 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.021395898 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.033671864 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019549119 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.015456614 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.032444513 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020175552 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.015265153 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.033394645 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.025935358 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.016870113 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.016099169 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019429519 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028858659 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.01668705 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.014576788 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023908222 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.016849621 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.0173701 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.019499275 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023515597 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.015262967 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.025445513 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.019727129 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.016775494 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.014601119 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.020245528 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.016154393 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.014596936 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.024904708 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.015492033 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.030133506 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.022385357 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.029954382 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.030427998 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.026005722 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.032027471 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.015653519 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.014947861 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.034422971 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.02522655 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.017093109 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.034116599 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.015722761 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.026417177 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.01586132 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.017273795 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.02520025 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.015185215 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017492439 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.016000614 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.020863452 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.01734408 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017518405 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.022014565 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.024375675 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.028229069 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.016888401 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.02481218 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.016093735 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.031863093 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.025633127 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.020874962 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019177287 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.016633102 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.027984575 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.022812626 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.025140457 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.015768152 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.016617009 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.015852442 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.026932009 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025469514 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.017516092 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.023367775 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.020730366 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.016561578 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.015869847 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.016833596 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.019874832 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.01919703 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.016387312 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023806269 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.024946915 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.030398419 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.023939905 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.025181264 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.015422188 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.01588726 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.017818176 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.015914009 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020892988 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.025353268 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031762572 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.027950132 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.037543296 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.016172973 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.025751995 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.017749849 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.033167581 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.02940938 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.017001665 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020955992 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.015136718 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.017782458 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.025426347 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.027632466 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.030186124 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031323731 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.021150386 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.020984395 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.015978401 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.031410695 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.016399885 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024568983 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.025436269 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.021024883 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.016011049 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.018011355 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.025359451 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021142167 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.016373181 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.03219077 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.022834935 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.016044181 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.030766339 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.016487845 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.027187056 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.016097986 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020059046 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021743317 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.018273365 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.026274441 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.031874954 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015282569 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.016564565 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.032294576 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.018152066 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018037038 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.024317322 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.031740108 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021199528 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.024156194 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027042313 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.026763874 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.021042989 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.026437803 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.017379621 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.025700499 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.019828807 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.028359414 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.016286588 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.035074539 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.015279973 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.031826088 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.016956107 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.027649656 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.016648545 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025795625 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.017131271 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.033855932 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.01789761 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.017222764 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.028493091 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.01529589 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.025545903 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.016091174 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021623069 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.023318114 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.02568721 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.018153116 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.02582136 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.018006808 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.025003955 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.0212812 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.025337235 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.025545749 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.021134385 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.016051742 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.024459063 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027494609 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.024474301 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.017950672 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.161959317 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.015812504 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.024631471 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.016482059 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.016038208 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02339964 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020422939 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021447739 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.016414814 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.016520776 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.016423689 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023634711 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024564273 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033003963 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.023708541 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.022527805 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.02426489 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.014911872 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030533133 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.014886819 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.022520598 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.014334713 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.019816901 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.024178053 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.015105073 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033772691 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.016267663 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022749757 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026693555 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.02347337 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019188583 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.03252617 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.017671431 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.023234357 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.022827657 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.019939185 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.02197069 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.016282828 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.023317005 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.024328155 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.025354151 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.015524378 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.022347935 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023869713 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.01627018 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.021331025 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.016190446 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.023347646 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.016400591 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.014316515 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.019954766 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026011513 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020195549 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.020398169 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.015138566 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.014176396 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.015122946 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.020252729 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.019958647 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.023436034 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030172695 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.014211433 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.015579271 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.014749255 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019043545 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.032569762 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.024335974 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.022842033 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020063028 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.014356905 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.016031339 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.016225033 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.014920779 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.017486057 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.01433398 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.014667137 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025184654 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.01621229 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.019728826 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015044594 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.015736042 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.024369716 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.018564361 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.01512066 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.021824462 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.014622915 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020465669 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.014371343 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.01611535 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.019819786 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.014630993 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019125197 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.025225179 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.031359308 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.022053379 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.024065072 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.015969654 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.023141566 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.03058784 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021569806 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015971219 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.02449049 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.014846836 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.03384521 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.024501656 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023790914 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.024989954 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.016051171 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.03211902 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.02029552 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.025261806 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.030893182 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.016239216 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.021597766 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.015302849 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031121 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020394826 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.015276446 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.023953536 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023239069 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.021749017 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.027244509 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.016168333 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.023958059 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.0203385 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.019427165 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.016943811 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.016893468 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.024210816 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.031592163 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.016178504 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.019238998 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.023330477 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.023793817 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020427067 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027530188 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.023487077 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016787628 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.017458584 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.019849652 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.016555651 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.027980386 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016144271 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.02084832 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020755244 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.01565999 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.022875254 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.03247975 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.025280307 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025369232 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.015739201 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.015134025 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.034062893 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.019801478 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.019231478 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.023916413 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.025420762 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028262668 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.025182047 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.032905058 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.016251903 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.022124326 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.02804214 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.016675747 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.0156239 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.019928627 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.017425767 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.025102697 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025727632 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.023222203 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017652491 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.023080526 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.02942245 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.017287938 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.020883887 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.020714446 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.016628563 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.026400798 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.023795937 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.024452914 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.01729575 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.015691585 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.019586502 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.024643313 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.023270465 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.024851619 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016875462 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.023318927 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.030379643 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.02355324 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019581722 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.015917082 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019491737 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.025120289 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.021017951 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.015894336 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.021152609 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.019963314 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.02368815 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.025575262 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020984761 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.015955563 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.033404102 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.024693595 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.025244207 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.017810853 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.017900701 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016281436 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.015899946 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.027481534 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.015913425 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.017717913 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.02120817 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.017916221 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.034197876 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.024467847 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.032263448 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017079302 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.021005963 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.016049662 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025977799 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.021152895 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.016168887 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.026791614 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.015596168 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032002002 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.02839721 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.022419352 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.016139593 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021696325 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.024978023 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.031551769 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026023689 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.025240762 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.019896647 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026061318 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.018007014 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.027451104 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.016127481 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.015256139 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.02651488 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024824742 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028937848 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.016080549 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.026449831 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.018127037 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.024383182 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.024890936 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.017940219 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.018028621 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.017917884 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025858307 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.021180207 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.025605934 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.02129753 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.033685072 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.017151171 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.027526855 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.025226106 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.027313435 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.03011319 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.029006473 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.024935871 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.016596233 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023603399 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.024888041 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.017395316 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021536899 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.019885602 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.039238848 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.018020713 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.017940674 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031311909 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.023704574 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.161129144 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.020687792 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.020330547 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.025148366 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.015848346 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.025480387 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.018255841 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.015736481 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020217882 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020237925 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.01440115 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.014938912 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.015198761 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.024670307 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.01993565 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.015097035 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033733426 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.016138366 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.02368487 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.025700515 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.022019648 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.016184269 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.014256762 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.015628973 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.028335387 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030325546 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.019074292 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02359377 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.016310267 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.024072049 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.014300061 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.02362175 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.02284704 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023494192 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.014859666 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.015059391 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.029857893 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.030329895 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020122609 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.024714256 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.0239191 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.016256929 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.036340873 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.023711707 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.015890235 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.025550382 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.01675872 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.014529039 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.014386167 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.016259971 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.026352925 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.014796292 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.016929306 seconds)
  done (took 14.048472898 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.05521089 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.015999521 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.014793942 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.014767603 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021512597 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.015763251 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.01475325 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.015730404 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.015732789 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.016736644 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.01476393 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.014865836 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.02015554 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.027190893 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022326342 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018282616 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.014931712 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.015980853 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.014887965 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.01599152 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020627288 seconds)
  done (took 1.11880939 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020099155 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.019106447 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.01838666 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018615707 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.017886746 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.01499113 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018219765 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015031611 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018505637 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015274697 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.018658392 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015055158 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.015427907 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.015457227 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015490161 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016444488 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.018854507 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018053677 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.01528387 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018465275 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.01643215 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018476719 seconds)
  done (took 1.082688914 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.017702412 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.015662118 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.023595278 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.014530489 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.014400828 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.0171597 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.014367901 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.019290331 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019236092 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019212317 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.023407882 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.015184261 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.014380619 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.020615492 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.014292824 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.015017702 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.057404197 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.015356197 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.015373998 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.014679731 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.016834344 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.023758875 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.014753079 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.014878295 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019374921 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.017254597 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.01466 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.016895247 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.015178908 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.019441689 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.015353133 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.014486469 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.023560859 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.02287051 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019419307 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.019337053 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.015811778 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.015326117 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.014658609 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.014602379 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023027189 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.015952041 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015027565 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.015774467 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.023570887 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.014756214 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.014583406 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.023717572 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.014631332 seconds)
  done (took 1.595402138 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.025431779 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.067173334 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.020689963 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.05015373 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.026083387 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.019744646 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.02054092 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.053244956 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.01581197 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.016297216 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.027108799 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.027288195 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017266302 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.018362895 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.021779397 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017144795 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.0177561 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016516795 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.019371875 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.016828737 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.019662072 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.021906417 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.026720578 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.027127917 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018214134 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016774799 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.016916363 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.018467739 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.026828656 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.020096006 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.018743132 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019185272 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.027234428 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.022475962 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.016981094 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.017172494 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.027746555 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.017604718 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.017412289 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.015944143 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.017077906 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.018436008 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.021921226 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.027853974 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017530429 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.022288131 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017544684 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.015708264 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.027372967 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.01743045 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.020730202 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.028261261 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018500959 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.017768967 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018802476 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.02746794 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.017604659 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.016467979 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.017776411 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.02714561 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.015983596 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018294556 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.027895608 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.017078261 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.020404411 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.028106953 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.022575966 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018534346 seconds)
  done (took 2.345033146 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.024527782 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.049404837 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.028229423 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.028128461 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.023871753 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.023907792 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.023878109 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.024193564 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.024070961 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.026802381 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.024246518 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.059396159 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.021203053 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.025689683 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.024237118 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.024253253 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.024216621 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.024258826 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.024219648 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.024428136 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.024583386 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.029003917 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.024591235 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.029073953 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.026827571 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.021476094 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.024421239 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.024524485 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.029196117 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.02451876 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.026951181 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.024527598 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.024587036 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.02929418 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.026815791 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.024459086 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.015392257 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024411861 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.024589313 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.024508141 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.021429053 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.029271354 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.024424255 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.021449224 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.024721573 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.024644091 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.029631038 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.027228907 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.026552242 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.027799386 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.024927539 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.029703857 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024833007 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.024966488 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.029895895 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.032202973 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.029943119 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.029973817 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.025148123 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.029820645 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.030018164 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.032478617 seconds)
  done (took 2.377928237 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.027803099 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020436194 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.032665829 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.01451882 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.014441453 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.022911832 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.014403207 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.01447973 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020061636 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.020301855 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021654503 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023268324 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024958934 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021715943 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.02321323 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024977903 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023210862 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023203289 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020394 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.023193369 seconds)
  done (took 1.152516192 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.031543005 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.032890047 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.020202085 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.023151001 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.019795274 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.023119223 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.019459967 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019923616 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020229451 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019987172 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.024377635 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.024303548 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020518572 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023418652 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.024197057 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.023395028 seconds)
  done (took 1.079471825 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019712087 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.022344798 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.020790211 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.01573108 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.017539562 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.015202385 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.015932596 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.014572606 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.017020886 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.028793795 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.015530694 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.018000827 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.016065449 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.014856464 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.015495299 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.018078745 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.017206963 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.015774297 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.016085034 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.01991795 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.023730276 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.016560058 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.018008288 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.015790309 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.017711385 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.023697555 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.016893527 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.017698224 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.01572383 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.018044259 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.01783403 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.022328371 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.017924506 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.016357813 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.015019029 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.01585431 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.016271263 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.018339812 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.018316559 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.016334195 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.014876089 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.017954478 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.016341759 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.01665591 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.017418984 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.018303629 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.017375088 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.021675441 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016166698 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.018011016 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.01626576 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.017444788 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.016342791 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.022791814 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.017803545 seconds)
  done (took 1.687041804 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.033406699 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020120766 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.014512816 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014424694 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.019747473 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.020307695 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.019786221 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.019843611 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.02025781 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.014423485 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020290478 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019372177 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020248876 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019891621 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020486385 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020011479 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.014493339 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.020138447 seconds)
  done (took 1.06685074 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.022425851 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.02006232 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.019018271 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.016314218 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.016306491 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020049384 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.014743112 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.015918013 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015887484 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.016264024 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016370515 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.016129695 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016072365 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.01607713 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.019925303 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016451305 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016095618 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.01504889 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.016480287 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.014937514 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020320032 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.015065029 seconds)
  done (took 1.085142638 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.077529999 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.040865491 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.037333581 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.033873652 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.025931333 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.048906562 seconds)
  done (took 0.974498788 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.050685615 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.052149526 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.019859638 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019840538 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023731558 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022172039 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022083635 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022204879 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024973275 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025968593 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022610933 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02564066 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025432894 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027090824 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024020448 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024152956 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022612598 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02255906 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020042417 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029059828 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022858976 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025956404 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02293459 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022679754 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022803751 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02745551 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025946473 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026457014 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022724778 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026000298 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024365735 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022824247 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02611087 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02647286 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.020253066 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025889428 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02288826 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029767693 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02447779 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027556649 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020061754 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024473104 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025938471 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02564173 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026176409 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023171183 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.025889665 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023052649 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023111235 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031437168 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024785892 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027852765 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024715404 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026487472 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026317882 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031555461 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026836422 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02806722 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024972733 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027117789 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028200418 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024999321 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02805949 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027261404 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025059267 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028295137 seconds)
  done (took 2.413990658 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.059008617 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020308095 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022406775 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025693464 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026558609 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022235419 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022257408 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022426972 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022433892 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020341601 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.057532944 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022595877 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026970774 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027007253 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022637055 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022439457 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02251749 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026928113 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020295031 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030566076 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022789222 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027426785 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027423816 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027299023 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026523511 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024408068 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022816407 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0227736 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022729181 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022719952 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025571523 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022942786 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027446417 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020450071 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027469987 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022978707 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022739338 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025635597 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022809701 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024519117 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027456906 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029581414 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022878164 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02296229 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026791052 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023093456 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023047235 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02072465 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023071887 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020672024 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026744707 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026779401 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026787403 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027869051 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023241681 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023191075 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023126532 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023097575 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023190829 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024991547 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02821846 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023200904 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.031891592 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023282522 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023322978 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028315764 seconds)
  done (took 2.40612953 seconds)
done (took 47.860451447 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.212118138 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.178111614 seconds)
  done (took 1.090909941 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.028858682 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.026765495 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.047892325 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.022909283 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.081173178 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.175397906 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.124816566 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.025659053 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.023458948 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.025486911 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.023152434 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025208118 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025326463 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023017384 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.086374022 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.025872162 seconds)
  done (took 1.511752399 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.073544941 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.133366335 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.058092237 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.0223164 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.103496676 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.028526455 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.024264592 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.028035134 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.02804144 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.02253462 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.069940655 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.035519025 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.026989333 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.027917242 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.023950605 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.026939091 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.027920392 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.02826713 seconds)
  done (took 1.50369121 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.096072136 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.033981678 seconds)
  done (took 0.845297777 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.111725433 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.06188426 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.100526841 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.29998252 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.090930586 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.094395227 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.098045898 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.093500037 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.068415199 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.091393267 seconds)
  done (took 1.824342302 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.060169443 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.056909094 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.28075702 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.053966353 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.033905182 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.02887333 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.02872789 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.031194587 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.028934224 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.028759468 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.074090145 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.027371189 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024046963 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.075908649 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.049690907 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.0592362 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023345284 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.029541625 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.032058561 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023203109 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.027832559 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.031318313 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.130342256 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.030052763 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.051657504 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.027374726 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.029067976 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.028171258 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.028014027 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.030249424 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.030768185 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.052273529 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.029877933 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.036494413 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.028368949 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.048632511 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024088561 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.050553331 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.026908475 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024196484 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.027329357 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.030990012 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.024707603 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.030264416 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.029236359 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.029870997 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.03173055 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023359021 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.029206625 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.026968812 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.02428299 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.028357423 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.028079509 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.029149954 seconds)
  done (took 2.936593697 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.075595271 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.063544763 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023660759 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.070890791 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.062748236 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023645321 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076635446 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.057952365 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075619543 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023283899 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022975476 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.02280683 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.029753801 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.033560802 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.073312778 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.066031293 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024877654 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023459445 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.065249672 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.065472907 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022543243 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.077501038 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068573381 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.064884776 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022289484 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023752489 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022457367 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023051754 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.030613591 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.029911571 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.022838099 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.032506974 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.033567012 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.029130558 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022159459 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022547669 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022439923 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.030164019 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.031851683 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.031774002 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.028540105 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022244287 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022505146 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023040136 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023500049 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022116243 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.031409672 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.029642222 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.03129815 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.022999102 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.022993692 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022440268 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023289076 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030701337 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.028234267 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.029680234 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.032603641 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023200891 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023098498 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024160134 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033457374 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.03042586 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030171211 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023889792 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.031685523 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022756714 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.032731952 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.035422782 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022733455 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023287357 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.022923989 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022911375 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023186635 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.028918674 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.028910687 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023299371 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023492942 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022928558 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.030390043 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.029071672 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022691336 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.031228352 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022321446 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022874365 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023229133 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023477589 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.032102745 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.030203259 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023363919 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022932577 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.022941752 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02285589 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022240895 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.031761589 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.03117295 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.031069622 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.033351891 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023802074 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.033840954 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.031469251 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023906917 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.030479396 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023406172 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023755093 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023693253 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.030401614 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.02975884 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.031940146 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023421051 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023114882 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.031395262 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03436581 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023349529 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.029979075 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032420323 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.03063188 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.02284615 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.033413686 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023353183 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.033595586 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0235249 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032925759 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023564082 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.030565207 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023448113 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.02286516 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023571316 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.034459406 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024412572 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023589113 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023943902 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023559382 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.031104422 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.035744636 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024270167 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.031351801 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.031114113 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024136155 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.033800862 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023813676 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.034433651 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023911 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024116505 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023042097 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.036223312 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023678119 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024115424 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023736924 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.033475756 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023689774 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033340651 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.030594727 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023155033 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.03495123 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.033210027 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.030663139 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.033712525 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.140709433 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024253716 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023581494 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023763927 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.033658123 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.035715018 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024562444 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023783784 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.030251724 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.03434492 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023195112 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.030604967 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030484464 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.030924376 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023860326 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.02376465 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.034137706 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.036046138 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.030987458 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.033945575 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031688455 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023645692 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.030725831 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.171854687 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022856302 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034817542 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.0226894 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.031506282 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.030975275 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.02743267 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030515891 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.031849569 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.02993882 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.030222034 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.032200856 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022236508 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.022405284 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.028012616 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022450845 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022661839 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.027710246 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.022949353 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.02312741 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.034029898 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.02269073 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.031072159 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022135511 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.028708413 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022039909 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022945048 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03311411 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022482517 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.022935896 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.028171995 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022558915 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.027862902 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.030693204 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.027809476 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022420855 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022890379 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.03113139 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.030604751 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022402645 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022268744 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.022775744 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.030108998 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.029755929 seconds)
  done (took 7.674353851 seconds)
done (took 18.111592905 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.14980108 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.071303812 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.155246018 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.090150854 seconds)
  done (took 1.179632067 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.05546462 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019114635 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.032669224 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.040689617 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.018929211 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.027812685 seconds)
  done (took 0.927325716 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.211050951 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.137570087 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.140845341 seconds)
  done (took 1.21912891 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.130202095 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.268059169 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.480085202 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.124389274 seconds)
  done (took 1.743987283 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.062186452 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.052725048 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.028969844 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.062373336 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.036361937 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.015454845 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.084931598 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.021845154 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.050036219 seconds)
  done (took 1.205314873 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.09473395 seconds)
done (took 7.105129962 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.198832323 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.029853193 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.032289933 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.028663324 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.125445398 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.021247529 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.134146267 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.02839668 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.13384732 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.193096431 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.150060971 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.045232216 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.043658039 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.041867107 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.14380489 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.032581812 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.028110588 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.02357693 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.150314429 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.125631313 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.12629134 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.030214297 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.091629079 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.029595049 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.109424835 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.077205789 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.159125979 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.200891065 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.163705686 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.029957995 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.117635855 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.041540657 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.128477582 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.12348578 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.022048569 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.046074653 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.019587953 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.13858371 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.101903054 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.191924375 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.153492299 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.0278717 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.14364242 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.023987821 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.018811294 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.031798783 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.031993919 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.027781197 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.041604294 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.0275267 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.039912655 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.025724866 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.131882702 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.022798481 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.094710387 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.022508607 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.154599671 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.081210159 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.024314953 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.036716473 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.028149177 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.181449438 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.037757269 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.024264457 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.030702813 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.019149448 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.021540749 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.036083053 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.019468868 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.029043444 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.027431111 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.104950119 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.037122659 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.061971618 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.030618004 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.115791358 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.095330306 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.044379756 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.047245644 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.028564009 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.019000156 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.190838035 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.023088646 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.036746956 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.019238177 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.049645494 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.019212942 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.034746737 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.158442587 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.15406127 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.07844629 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.020378814 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.225624522 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.021699944 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.045408787 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.02061891 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.019971436 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.156417738 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.019734197 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.020031726 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.029650239 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.028127821 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.021684966 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.159277834 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.110569075 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.027772247 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.028878147 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.020870807 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.018962227 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.021154211 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.020853797 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020248933 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.08740677 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.035420617 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.019498903 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.108060231 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.1204338 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.030794305 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.038968472 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.080415235 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.022967183 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.028879726 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.027246208 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.127681778 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.027923737 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.139190573 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.021571541 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.044202332 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.119070324 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.09637511 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.106812655 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.019952442 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.184262843 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.032498301 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.019517269 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027403569 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.049118129 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.032030867 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.035304229 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.019832715 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.184524962 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.030421443 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.01895868 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.273860996 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.019145335 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.112014742 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.096983108 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.119613611 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.026622574 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.029492234 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.092009214 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.04266707 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.046157386 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.04185497 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.022277694 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.019424314 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.01913559 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.034125361 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.018548158 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.019323963 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.033320254 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.027615527 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.019148774 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.125914226 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.030338462 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023070921 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.146346132 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.031045807 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.08626805 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.039630747 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.019505421 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.108746952 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021192312 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.037296999 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.08069518 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.019717174 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.096271029 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.019624287 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.019348376 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.026675557 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.020905413 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.027862866 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.031941781 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.019508297 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.032896658 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.018084362 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.019448862 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.108033184 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.020908957 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.157402825 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.105530557 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.105705746 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.019551477 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.036310754 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.019016663 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.134227359 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.019334955 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.066634289 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.118634163 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.035367786 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.037111743 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.020606078 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.095099521 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.034099649 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.019057985 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.094697994 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.11805511 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.085632489 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.026695008 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.126388318 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.028219142 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.019573563 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.026538504 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.027615338 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020026524 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.098399576 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.019265903 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.018838601 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.019118695 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.021002918 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.01845918 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.042890214 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.018791812 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.02691802 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.019275099 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.022004791 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.021207769 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.018638348 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.027243589 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.097637197 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.119421703 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.018605019 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.036631298 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.031651757 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.030044948 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.065405689 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.025895373 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.173074161 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.018704715 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.028306886 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.040591848 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.018874481 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.022531168 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.019361979 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.036917597 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.018688545 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.020496799 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.027757625 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.019555061 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.019661658 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.033463248 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.019600889 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.027558173 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.020466409 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.018923577 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.018812744 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.01934693 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.023781861 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.022727346 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.029279109 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.036602551 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.133795504 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.020584803 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.021271833 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.019345455 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.019269806 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.019609013 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.020782483 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.019203574 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.021107534 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.019495384 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.018886032 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.047334523 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.022565884 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.019902706 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.040121692 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.019380744 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.028387558 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.117280044 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.034795516 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.022578486 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.018724275 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.146079975 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.10163185 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.040693006 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.038799471 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.019755494 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.029165187 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.019675851 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.019828077 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.018630262 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.045682326 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.022744107 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.019773267 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.018684228 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.018910152 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.065615714 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.027323239 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.01918681 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.027233866 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.019554613 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.019584899 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.046542768 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.020329764 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.019538912 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037894711 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.032756084 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.098369005 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.031115716 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.018739987 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.068849392 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.01897869 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.019567754 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020012316 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.111120388 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.032013632 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.021085008 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.019715405 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026998987 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.02818163 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.071125377 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.019251338 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.023373046 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.018809891 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.019060147 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.020160897 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.0452101 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.046212889 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.020951792 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023190545 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.01958414 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020179795 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.092625316 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.019137117 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.024108336 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.105799832 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.022006254 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.027580271 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019274583 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.133773423 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.023642349 seconds)
  done (took 18.782353061 seconds)
done (took 19.525006309 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.052705423 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.032982952 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.032507806 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.027873423 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.03165414 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.030871146 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.032710932 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.028488961 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.031320884 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.030891129 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.029239696 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.01858379 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.026211685 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.033630271 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.027786243 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.034712781 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.03123793 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.03409874 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.019819994 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.034281251 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.029357363 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.032257471 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.028012964 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.033779943 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.019771417 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.027842479 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.04199099 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.036806505 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.022751958 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.028594984 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.02678877 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.032668644 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.026819581 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.026509906 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.028484229 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.0244845 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.029022244 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.025679288 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.041992223 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.024612351 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.019879376 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.031205744 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.026440358 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027233408 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.02793037 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031192902 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.024655788 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.032753857 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.019149859 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.032345449 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.041973253 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.02374292 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.022941705 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.027910443 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.02468361 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.028706401 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.022786694 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.030863387 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.024595963 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.031525795 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.027444491 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027368021 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.0192632 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.027921454 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.026720008 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.026952008 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.01831511 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.023983257 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.019302295 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019265399 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.018644703 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.02790542 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.026178924 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024357146 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.018703549 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019309351 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.018801287 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.031579969 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.026502565 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.027960697 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.019714639 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.024649302 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.024264015 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.019821248 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023984939 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.031055902 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.018731289 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.019755897 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.018727478 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.030927412 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.025880461 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019257437 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.031100547 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023814681 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.023623485 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019338325 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.018711554 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023708398 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.027376368 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019334561 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.018335268 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.023813359 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024429945 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.027925801 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.019724927 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023783539 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023649436 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.018359384 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.027915525 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.026587963 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028198013 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.032215858 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.028012454 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.030605768 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.019854477 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.018325991 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.029133844 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.019758442 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024097051 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027390463 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.024648792 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027441446 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.019892622 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.01874397 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.02393532 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025355736 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.019769001 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.019899502 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.01974749 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.028165714 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.026762462 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.018485295 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.019441469 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.028060045 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.028024895 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.01886205 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.018712689 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.027930466 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.019835124 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025240737 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.024644797 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.02802625 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.018999739 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.024897347 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.018601932 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.019012696 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.018710487 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.024590393 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023978473 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.019871085 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.027987749 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.026529552 seconds)
done (took 4.830953548 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.033784108 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.061308281 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.057548101 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.035011865 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.032034917 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.02036965 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.023942871 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.038058631 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.02313996 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.043814394 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.044753019 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.041297636 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.047485862 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.018298388 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.019631749 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.020425136 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.018117601 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.031529603 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.035980279 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.042946604 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.054881855 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019244993 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.037307112 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.039078225 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.031069821 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.037301327 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.020933123 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.020504659 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.0225469 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.036270058 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.045633854 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.019545292 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.020803812 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.037899043 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.03508723 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.027775548 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.020502868 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.025813003 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.020643071 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.019695616 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.021677096 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.037035073 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.025874203 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.026142596 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.02087693 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.020337023 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.020237525 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.026725444 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.032755125 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.025291696 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.031485636 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.038273385 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.021569009 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.020154933 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.018414088 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.026373837 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.019999805 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.020205385 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020513531 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.019333647 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.020481608 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.022592155 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.025312407 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.025907324 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.023716624 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.026232829 seconds)
  done (took 2.712347329 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.038650548 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.046365333 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.033629132 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.033890668 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019275095 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.019927401 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.019929305 seconds)
  done (took 1.02764924 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.065061706 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.027068511 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.031284602 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.031215164 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.040458348 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.028663346 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.032009133 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.048433371 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.01923497 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.043965097 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.037739126 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.03220035 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.023307482 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.031872512 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.05018071 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.034232861 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.032181819 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.026635442 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.026801108 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.032314151 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.024095361 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.051892108 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.031748992 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.020901943 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.0328788 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.026349839 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.022871832 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.020763052 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022615909 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.019975263 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.019946669 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.041957165 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.025606923 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.026033543 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020865749 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.018982131 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.02356156 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020991321 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.023356716 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.027025375 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.022814043 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.022078765 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.022461465 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.020206113 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021286039 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.024234796 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.021104845 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.020060229 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.019743442 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.026740132 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.019382327 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.025775489 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.022402102 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.025012549 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.027084576 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026088079 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.026862501 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.020535008 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.027463457 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.029675552 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021870387 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.031807896 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.030799933 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.022833699 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.030823304 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.028631237 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.025753655 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.022899299 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.019733967 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.027761082 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.020585398 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.030929418 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.023158489 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.022430312 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.025211909 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.027233735 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.034682152 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.034680849 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.034594863 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.03332908 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.022701779 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.020175447 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.034156848 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.034497227 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.024902742 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020004221 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021024857 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.034259303 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.043984738 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.022238103 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025003036 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.020204871 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.030199881 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.022719542 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.022526199 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.027356961 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.020225046 seconds)
  done (took 3.490812807 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.02436751 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.02236161 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.02101222 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.020979104 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021250314 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.021017387 seconds)
  done (took 0.958919444 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.045055839 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.020405884 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.031772562 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.020180906 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.041687558 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.025807588 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.026258723 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.02188306 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.035838864 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.030935001 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.025724881 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.027887768 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.02858469 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.021617343 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.02579119 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.030415866 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.026034915 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.024345613 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.030034914 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022045434 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.033253853 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.021608972 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.021970851 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.030090363 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.022503105 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.03030387 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.029882974 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.03030585 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.029941802 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.021980944 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.021528975 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.022510627 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.026716173 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.022011032 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.026358506 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.026725561 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.020485381 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.024852386 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022997488 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.022724718 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.027994712 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022129798 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.023193962 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.024751342 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.022141206 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.026899628 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.024872329 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.024021285 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.025946446 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.024693986 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.024779987 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.020990364 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.022732876 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.024721038 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.026918455 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022210106 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.024748953 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.026099137 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.021738475 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.026899441 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.020527463 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.022921583 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.02215886 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.022676656 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.025219519 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.024763271 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.026946697 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022162235 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.02219844 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.020497695 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.024880929 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.020450302 seconds)
  done (took 2.648230071 seconds)
done (took 11.658819784 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.534449935 seconds)
  done (took 1.337395243 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.571229789 seconds)
  done (took 1.40466534 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.049879851 seconds)
  done (took 0.87245058 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.288039014 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.373145352 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.710070208 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.088913451 seconds)
  done (took 2.272892313 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.850791743 seconds)
  done (took 1.684999818 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.217473821 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.179414954 seconds)
  done (took 1.25937077 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.345536615 seconds)
  done (took 1.168918758 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.166735619 seconds)
  done (took 1.995524602 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.188914446 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.116182918 seconds)
  done (took 1.133898625 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.477120719 seconds)
  done (took 1.304673418 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.503870083 seconds)
  done (took 5.331193581 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.197598361 seconds)
  done (took 1.091394992 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.190097928 seconds)
  done (took 1.021588562 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.702926478 seconds)
  done (took 1.531709388 seconds)
done (took 24.23468169 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.042716832 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.038285698 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.038035948 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.033490279 seconds)
  done (took 0.972115095 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.029082974 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.023300396 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.02627268 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.026479658 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.024028683 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.025789515 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.02566257 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.022751109 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.023970483 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.022941459 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.021679172 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.022871842 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.02542452 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.022771989 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.025268868 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.026375174 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.022915019 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.023072013 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.025174787 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.022895426 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.025528173 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.022943894 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.022849106 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.02464744 seconds)
  done (took 1.417239719 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.033234503 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.025187579 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.028140779 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.023961959 seconds)
  done (took 0.945633757 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.031955826 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.029838433 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.038055804 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.042753019 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.029105236 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.029977414 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.036198721 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.036543244 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.042241449 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.039168755 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.020852537 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.020720269 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.01995832 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.038323735 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.036012488 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.01536623 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.016845227 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.030200423 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.029352775 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.032049806 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.022946509 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.018716115 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.029272909 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.029940971 seconds)
  done (took 1.548578274 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.036815804 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.018923771 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.033860521 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.043765534 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.044872518 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.018653282 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.031572242 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.044735455 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.080195963 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.018701533 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.024633867 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.018589054 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.056366352 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.018770878 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.033438812 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.062244489 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.064929824 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.022681444 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.051256575 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.018763594 seconds)
  done (took 1.583766423 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.027955257 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.023783204 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.023506558 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.018855682 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.029835781 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.025899368 seconds)
  done (took 0.990432754 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.023772267 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021679383 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.020287183 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025542068 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.02120613 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021145493 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.0205526 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.01943234 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019368644 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020072416 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020077905 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.020524197 seconds)
  done (took 1.089125526 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.113360864 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.025812369 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.023481323 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019386718 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021118545 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020061702 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.034833695 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.021953131 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.037438769 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020096087 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.020135177 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.022119899 seconds)
  done (took 1.215643188 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060013871 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06376164 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097100303 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068816887 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069743146 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048304691 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080646653 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.03125132 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.116590216 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090598869 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06950351 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047230084 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039323448 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.02291065 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053184511 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07274462 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090793477 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026040807 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067096632 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119087421 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086178147 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.089532959 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102098946 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070803841 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044880193 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101750576 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050081588 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056716898 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078524796 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.082479206 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072954914 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.051930142 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.02480731 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024205276 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105649586 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.0613417 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077271804 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.047110207 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059930345 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.04234577 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062217443 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.02295938 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.047529599 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.065386833 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038704381 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090404993 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.047370952 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072430325 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035473214 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096721779 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088081275 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056234202 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.041175139 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061795453 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098792151 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071914524 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098696716 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064621051 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038748721 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.078113314 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.066585288 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058156391 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.214515336 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03346856 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130051804 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041622058 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.064558485 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064281926 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.046537224 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.048440187 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059364357 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087928234 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077473188 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.077305996 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089322088 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047164277 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071670722 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.052288299 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.07993806 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055752611 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.025820275 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.073660202 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080888994 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.051005696 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.053034625 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08153657 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.045233301 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031051472 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.054116146 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.074038657 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033788231 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.067903928 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.033837681 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.063466683 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093330511 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05222839 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065696124 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.072348709 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.031754247 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110814953 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.062575458 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026424105 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.071541301 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068349426 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112134891 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050613813 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.029901414 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055758131 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061037475 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.107690956 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067254504 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034656332 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067974936 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102533 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050836553 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130642279 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052526853 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103005918 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071699419 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042192383 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029993127 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.045939451 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07337212 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066635672 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071719806 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051184194 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.04060912 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041949385 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.22495295 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045904762 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033979473 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.066298303 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.056260901 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.027677201 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040751941 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.029696286 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093289368 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.031058773 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086526329 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076901976 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.02833317 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058761734 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050063811 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06001979 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.049801004 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069378173 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09021637 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.131768544 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042646549 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.046626788 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059672011 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.095524186 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078626407 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044438485 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.029585501 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052774093 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063519059 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.050377858 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.079766267 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049371717 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061621934 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057244237 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096509043 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099827796 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05430642 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055436471 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062748679 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.077306338 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030336265 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112774852 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059184835 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073125494 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.037989934 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098267171 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.066159685 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044241543 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041153679 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054575203 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.059125041 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061527967 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101088285 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.050739173 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.026687988 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050309652 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106405282 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031238302 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068027466 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.046563325 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.048775178 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076501064 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.051869471 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.037060996 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022547683 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09081689 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123786671 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.024403368 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072748492 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.074821079 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.21349518 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.07413851 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.022769205 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070596045 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091246552 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068479789 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091327972 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116568448 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069817319 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.069952347 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.064899895 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.057733564 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032097084 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.077354505 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.086186278 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047801525 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043731887 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085281619 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07023339 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.08737284 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.068229051 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071291272 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.05889063 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062867527 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057407669 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.060438516 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100833838 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076289583 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.080101462 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039695572 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060811428 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074427054 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091308926 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.035648608 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097673652 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.037942994 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075390184 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.030993678 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.080065865 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.029660817 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.119482407 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033124968 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.054823557 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.023191331 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.027782152 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098204699 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.067816012 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062123441 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057710151 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.098051363 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096742416 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.031722122 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06519001 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074540847 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058402687 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076836369 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.065742568 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.044847493 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053377022 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.06617224 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.041248507 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.038203089 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075505023 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053118276 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.230160886 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037662281 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028211844 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091497831 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056878862 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047378793 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031379366 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059942576 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.076276762 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0457429 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039675057 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06662897 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057086235 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092721408 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.043615082 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.050293219 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076876495 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033166583 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.044904943 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.022623087 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.038479282 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.029061274 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078454746 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028747441 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067012894 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.021947266 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082517521 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038007775 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.045703146 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.054543503 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061507742 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079518114 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04733717 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095023625 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042846516 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.074184845 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061658482 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048616247 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042690917 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057212703 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.054576573 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077365078 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.049908542 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07877109 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099076701 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057880448 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097997916 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044844449 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077334284 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0612462 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081231113 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067098706 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123935607 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096068474 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067078911 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068999505 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029478611 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051377864 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062453403 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071337889 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139620069 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088117363 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026745038 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066424749 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.050123861 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068535584 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063616435 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038027306 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108635517 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.209023696 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.041519896 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064589 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.042972783 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056667474 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028976229 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052215545 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.056546857 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047013637 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050411861 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068661764 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079833034 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064427852 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094694749 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.053347078 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.044747879 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.070511681 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062312636 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061627194 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038273577 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038615861 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088944912 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.071916629 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.078344798 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.052715856 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060251591 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.064682582 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05210645 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076821889 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060921598 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.080225035 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033615816 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.029152046 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.021802651 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.025617829 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078668036 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062349618 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066272601 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052567867 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.025775394 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.057850892 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060836992 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025646847 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04188036 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0488444 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049458671 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.046441475 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062508146 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.065259629 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.050338152 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058665133 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053844542 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104891502 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.05563282 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043004188 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100638672 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107834895 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042691226 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04954963 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.025633462 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033688875 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071239815 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111163793 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115792373 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.03273916 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04235096 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.042466977 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043454631 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025847125 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.045630381 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.045498811 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063229635 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059003138 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.072145338 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.209606078 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028802307 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05613901 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051357543 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.045114109 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.059543966 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071385931 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077380826 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.092272106 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065506328 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059225393 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028919619 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.032836317 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.028783765 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032786034 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054109031 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.032695264 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028912114 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094458708 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.044583665 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056784677 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060192481 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040554347 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028030192 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085392425 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.022510521 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086169011 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.024303251 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034498121 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.035652823 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031599992 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045752571 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089091982 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064843612 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065642618 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060156999 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058252768 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115454027 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113788684 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03420852 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099301845 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029347087 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.029010282 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029639271 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065494347 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044073229 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.069592935 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097323641 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044545878 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057199067 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030657445 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100521667 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.054816172 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059061417 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040910047 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032819804 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100374901 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033078691 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.034433717 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044219527 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.066231518 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.026536336 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.06029025 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039391885 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03422947 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125054009 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.664876934 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046571172 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.030567429 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.052794102 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104177408 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095421882 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054411138 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06728419 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.078133351 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.201753799 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048428958 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060228064 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.143959065 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027242474 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04671015 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.056008071 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050437255 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053889352 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.051139023 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.040156461 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.044977825 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.03985127 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.032182154 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059368913 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040788264 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049389601 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.062468106 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035424634 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.039946174 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082467941 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.055136835 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.034029039 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040294439 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.055915595 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040234248 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055852714 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.022396142 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.06513693 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043238303 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070069256 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.052519386 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.060851396 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081654752 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047054433 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090615881 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.060871255 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07687733 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041017353 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.031698283 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080922596 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.042204274 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031186853 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100363249 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.049707263 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.057706848 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058462793 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.050608296 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067734547 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0727127 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067012418 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.051529337 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032498236 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055805986 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.057814635 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039799127 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032054534 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.02826257 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.030411541 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064467593 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041656515 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.037380285 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.071048177 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044792 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.059161512 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.0603581 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081153491 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041978171 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058586944 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067884181 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048420531 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06773038 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057605596 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.089536894 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141261592 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.225289758 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08250522 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086202884 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.029643191 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.028339082 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.02209063 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067932519 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032546424 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.041917518 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034468145 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085322315 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.035472564 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063819479 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.196204751 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.033643836 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.046497818 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048208339 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.022802392 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035650865 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059165258 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.039923274 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032655605 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070481763 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035486306 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080011917 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062442092 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051437349 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047053636 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033406381 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065446992 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.056039932 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.081679036 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047724135 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.02817155 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075863914 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056822158 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092729938 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.026604871 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034283654 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084843627 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0577688 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08658907 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033941073 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106242096 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09951635 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.054668623 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090982209 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.024667435 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041295674 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044158682 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.080798543 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038699204 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067424553 seconds)
  done (took 39.31301922 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.137720766 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.132836198 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.075661572 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.08710034 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.243227317 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.25111291 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.105448376 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.080684163 seconds)
  done (took 2.095096781 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.024156804 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.036562441 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.034275633 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.155471188 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.068923818 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.020308634 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.025094904 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.034798956 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.020448705 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.019775878 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.054748478 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.020242306 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.020662997 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.419633957 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.019556312 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.02533467 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.020676976 seconds)
  done (took 1.994713737 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.301644627 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.742376182 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.307189553 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.638825711 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.094056002 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.471029291 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.028184858 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.033388171 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.54522661 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.151967383 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.086188447 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.173569864 seconds)
  done (took 15.529747485 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.030887663 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.030322038 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.029847857 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.02690303 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.026736936 seconds)
  done (took 1.167352757 seconds)
done (took 70.765609853 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.04001337 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.120902809 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020203616 seconds)
  done (took 1.13130694 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.036918569 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.033433319 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.032898782 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.033514193 seconds)
  done (took 1.090738888 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.029944313 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029517959 seconds)
  done (took 1.010589431 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.180868117 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.125577981 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.042531057 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.037933691 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.033754004 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.034001971 seconds)
  done (took 1.06490541 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.026464094 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.024284188 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.024258187 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.024528198 seconds)
  done (took 1.051141077 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.025884192 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019171799 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.021667381 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.023253716 seconds)
  done (took 1.042077272 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.039999729 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.039119057 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.067523735 seconds)
  done (took 1.09909037 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.037648803 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.037759226 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.031394132 seconds)
  done (took 1.06332892 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.064446583 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.049288901 seconds)
  done (took 1.067397583 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.034927463 seconds)
  done (took 0.990669323 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.046198546 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.05030906 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.092672984 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.058331104 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.093402044 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.079000941 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.029223255 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.029915246 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.025823422 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.024957133 seconds)
  done (took 1.482010118 seconds)
done (took 13.433240001 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.03909771 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.145853759 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.268517836 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.039518146 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.778393219 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.265705752 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.675487816 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.042610449 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.051992723 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021328559 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037309177 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.758233863 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.679848649 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.097449727 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.666404187 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.089922737 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.514858563 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021661192 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.020670037 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.02136718 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.660141345 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.020929289 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021184396 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021714627 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.512985014 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.284936425 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022038817 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.088185159 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.020907382 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.024838586 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.268524369 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022042669 seconds)
  done (took 12.151037079 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.030156947 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.079015462 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026142806 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.036578416 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.02306709 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023387295 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.025007078 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.021632794 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.062504662 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021276566 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039904393 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.020761952 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.025559999 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022195684 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.040947024 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021251681 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023292408 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021958816 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021296822 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021742979 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.03986742 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.020868557 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021621245 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021745095 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.021468455 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.035037005 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022368125 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021108433 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021611727 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025287303 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026628413 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02264581 seconds)
  done (took 1.873831088 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.081995705 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.081989143 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026568754 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.061117609 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068514846 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023836546 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.10349533 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043201947 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.065983965 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021717959 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038039199 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.02140115 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.056938394 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022856411 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.041854865 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021694517 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023768085 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022109874 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021493759 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022249874 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040781151 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021329834 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022002497 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022250783 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022082319 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037274145 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022733771 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021652166 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021489976 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025346899 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027249776 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022725906 seconds)
  done (took 2.143644576 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.024762282 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.024824978 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.030693824 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.033491277 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.019796167 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.0220284 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.022879171 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.019803781 seconds)
  done (took 1.165814415 seconds)
done (took 18.298982778 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.035107886 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.021721654 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.024576812 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.041236251 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.027687142 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.022793222 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.018436201 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.028198654 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.024870421 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.02496656 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.026337565 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.019928797 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.023571162 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.018393304 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.025177287 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.01942844 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.025256228 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.023517384 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.023017733 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.025368491 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.02189126 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.025101049 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.028005187 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.023175305 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.023133847 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.023082983 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.028244568 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.025293964 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.019909294 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.022542622 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.02293475 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.022633374 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.02229548 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.024820163 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.019586474 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.019548601 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.023981011 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.02132082 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.025381712 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.028240781 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.021738982 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.028258297 seconds)
  done (took 1.971984089 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.029359768 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.033059477 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.024936948 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.031569629 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028272964 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031237709 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.02892022 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028214286 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.026850853 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.027911737 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.022332922 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027029904 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.029235055 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.020320553 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.026931491 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.0232373 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.028796094 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.021404368 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.026925401 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027144076 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.028985912 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.020486147 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.02776723 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028470881 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.02285253 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.028758147 seconds)
  done (took 1.668076915 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.029700709 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.042794555 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.045268556 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.09857986 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.063109282 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.03592235 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.036153531 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.046891632 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.054251056 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021041579 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.042657772 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.047282759 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.049172823 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.027770563 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.322708777 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.039807498 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.033562632 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022603413 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.027335247 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.055084148 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.043758471 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.039634646 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.053876275 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.040789037 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.020067414 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030137678 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.028095772 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.036948266 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.028126541 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.032722204 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.024763702 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.024239793 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.021683247 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032198085 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.024702757 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.018964873 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.04326381 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033118339 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.035419268 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.05970595 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.030744636 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022280687 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.047693012 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.085151823 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.020414046 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.02326393 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.025026907 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.033016312 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022209517 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.051164958 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035856884 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.020544601 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.039772417 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022181896 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022199354 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036188701 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.022371905 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.022814942 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.032223903 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.026786783 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.041858144 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.02594946 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.040997369 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020598096 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.031974725 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022337009 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.022495146 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019548676 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.054751556 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028172071 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.069715251 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022098849 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019132147 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.032974313 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.032405418 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.028381651 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.020963858 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.039818093 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.033190604 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.024762107 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.031750026 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.023738634 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.024083381 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.057419229 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.01991143 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.019065152 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.018953132 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.023242193 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.024069501 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021463636 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033165434 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020410707 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024057954 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.035125941 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.020866846 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.021509516 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.023350504 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.022106037 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020371824 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.030679083 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.024699394 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.02250112 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.033362101 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.021932767 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.02417661 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.035721807 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.029887224 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.020467704 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.022031401 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.023249813 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022649812 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.025413325 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024208945 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.022780842 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.028030844 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.028392735 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.026949654 seconds)
  done (took 5.00716732 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.115442302 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.103779301 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.021657352 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.098029449 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.02874675 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.024335259 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.100124524 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.100207591 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.021170319 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.02222015 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.020480246 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.047732367 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.042897708 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.054207411 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.034239228 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.023187747 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.04636999 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.052699665 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.103690579 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.097217626 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.044280437 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.028989987 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.023529029 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.022446505 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.022514252 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.030456542 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.037759733 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.029428643 seconds)
  done (took 2.384465421 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.028935158 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.064987797 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.024540641 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.045081062 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.037917394 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021345729 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023119842 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022227137 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.037872307 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.026364747 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.021059489 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025277768 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.024513477 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.023494783 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022042721 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.027682108 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.027687649 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.029602561 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.024820705 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025673378 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.031700049 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.045179083 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025239805 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021306006 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.024483167 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021277172 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.026413628 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.029467817 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021096379 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021172885 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.0184002 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.02562842 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.03570949 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.022357213 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021112394 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.021971553 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.021528662 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.021564224 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.021708562 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.019480002 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.019395969 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026340974 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020111378 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.026007927 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035480343 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.023504042 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022372194 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.023780665 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.023750258 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018323807 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.024778642 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.024403667 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.023916249 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.029544605 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.025038059 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.023703781 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.022671127 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.033416336 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.026588238 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.020738897 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.020315243 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.019838197 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.022899477 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.027628412 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.038136743 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.022799399 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.019689425 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.021486834 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.022878186 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035308766 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.020681939 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.026835016 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018462686 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.021526349 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.023624576 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024381546 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.022931558 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.019833517 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021322056 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021611293 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.021604527 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021274794 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.020964682 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.02414809 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019222186 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.019932719 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.022200871 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.022436952 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.026737929 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.020277738 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.02411901 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.026388019 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.020398651 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.024230133 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.026744443 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024229676 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.041208507 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.028964513 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.022043466 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019374801 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.036181965 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023141046 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.020688018 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.023323968 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.025770882 seconds)
  done (took 3.633995096 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.045210931 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.02339094 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.041156328 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.047174006 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.030993754 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.02700495 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.035025879 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.022508197 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.036917487 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.02069085 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.030502412 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.019842857 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.033982431 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.029929257 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.023052999 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.031018907 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.023982209 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.041636989 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.035351126 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020299458 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.030115019 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.033138915 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.033316317 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.039088379 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.038623063 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.039602503 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.033087412 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024218465 seconds)
  done (took 1.87415553 seconds)
done (took 17.501271797 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.011478358 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.234851761 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 5.997965507 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.577350186 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.065119068 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.139368194 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.212112826 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 5.970938723 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.415758867 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.097997624 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.76010171 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.693007527 seconds)
done (took 58.218001703 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.136539291 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.139394409 seconds)
    (2/2) benchmarking "String"...
    done (took 1.225914373 seconds)
  done (took 3.349117994 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.41785909 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.980386881 seconds)
    (3/3) benchmarking "different"...
    done (took 1.035490069 seconds)
  done (took 4.396018272 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.355189884 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.962774097 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.346715325 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 5.962252016 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 5.977027815 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.914073897 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.152909635 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.64642877 seconds)
  done (took 26.934951652 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.075358247 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.229666599 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.353549438 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.477754811 seconds)
  done (took 17.189920963 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.425465691 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.396378744 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.397399264 seconds)
    (4/4) benchmarking "different"...
    done (took 1.694112815 seconds)
  done (took 7.017306477 seconds)
done (took 68.354280784 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 5.962136049 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.184919121 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 5.998514423 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.165538863 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.037391016 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.044910296 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 5.981145333 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 5.996410768 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 5.974115331 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 5.979277638 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 5.818149442 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 5.973499502 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 5.982999844 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.02443463 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 5.982047952 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.009426787 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.185183461 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 5.980610808 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 5.977426333 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.855005011 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.293654936 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 5.965592674 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 5.978444813 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.056872833 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.334498195 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.012981185 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.341234098 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 5.980953102 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.576485353 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 5.975920381 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 5.982767016 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 5.970972227 seconds)
  done (took 177.546810696 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 5.961978445 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.746973946 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.761874722 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 5.982572476 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.317437726 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.3275984 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.771999046 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.335688703 seconds)
    (9/36) benchmarking "syr!"...
    done (took 5.972553933 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 5.993837443 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 2.973905838 seconds)
    (12/36) benchmarking "her!"...
    done (took 5.965745069 seconds)
    (13/36) benchmarking "trsv"...
    done (took 2.999350403 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.651614699 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.021691749 seconds)
    (16/36) benchmarking "herk!"...
    done (took 5.973127341 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.868453691 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.823870806 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.033585939 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 1.849603148 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 5.97174104 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.500459007 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.480098182 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.78109144 seconds)
    (25/36) benchmarking "symm"...
    done (took 5.974697184 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.014562287 seconds)
    (27/36) benchmarking "syrk"...
    done (took 5.982435386 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.007889246 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.337674182 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.820956084 seconds)
    (31/36) benchmarking "gemm"...
    done (took 5.970726046 seconds)
    (32/36) benchmarking "symm!"...
    done (took 5.993418656 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.163428995 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.216628588 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 5.964379044 seconds)
    (36/36) benchmarking "trmm"...
    done (took 5.979688155 seconds)
  done (took 148.467799354 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.24451509 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.971685351 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.007358571 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.082710281 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.88583789 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.754203839 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.973456425 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.962084276 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.961697428 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.969067733 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.963986178 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.029590887 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.97244454 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.343247341 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.007524112 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.963865546 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.962895051 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.345710331 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.98796714 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.962240293 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.962497113 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.06410078 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.313627585 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.074810616 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.971907941 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.970891123 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.072362716 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.979595569 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.96358803 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.961484334 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.071997873 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.972503008 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.088133233 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.08246756 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.978966797 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.019303034 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.980197414 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.121881499 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.974831495 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.961434544 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.964051858 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.00782018 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.971648962 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.83674249 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.075050595 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.975963561 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.981012282 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.420859556 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.544889019 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.97564555 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.962885797 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.96201419 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.965344576 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.963284972 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.054664858 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.97720475 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.995841859 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.126631718 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.982636225 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.962375835 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.96216344 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.961741268 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.96277104 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.970028682 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.999629379 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.556833634 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.714880568 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.323233242 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.652164435 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.972828853 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.96253098 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.962178917 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.30785771 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.03817494 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.964300449 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.96176509 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.128057461 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.972703222 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.961814256 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 2.815464063 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 2.819057947 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.973552091 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.071876964 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.973071488 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.962400409 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.126331796 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.35811427 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.987965524 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.981531496 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.018800289 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.966144773 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.962013453 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.968841928 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 2.817602837 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.974181479 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.974201401 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.182243855 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.973502833 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.962022252 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.138753443 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.315013894 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.97309381 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.04205792 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.350823879 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.856780537 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.973629069 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.962519844 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.980473546 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.963208977 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.973733558 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.974419778 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.963299461 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.962835835 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.966600035 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.962358373 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.962492569 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.96207165 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.981305796 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.963224736 seconds)
  done (took 308.834074427 seconds)
done (took 637.201153559 seconds)
(4/20) benchmarking "parallel"...
done (took 0.961635537 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.387542937 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.378879127 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.086882255 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.808391103 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.257171311 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.112219349 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.231969029 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.440576134 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.257582746 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.127918071 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.712351322 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.133079423 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.384793749 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.324213899 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.06510541 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.407748075 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.150265252 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.610317317 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.716105941 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.133001412 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.186114535 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.168051411 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.08881691 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.73333868 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.133224661 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.186809331 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.360308708 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.699054124 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.251272253 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.677003158 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.431532614 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.401751885 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.226037243 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.01910525 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.86709408 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.130060519 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.212398097 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.754437035 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.169773154 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.55002585 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.740498084 seconds)
  done (took 67.676228854 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.334279424 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.170839973 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.300768813 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.281144887 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.842920603 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.287774514 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.370401052 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.165832622 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.177309237 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.299345609 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.315582712 seconds)
  done (took 16.561608676 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.217735401 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.172989061 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.318505486 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.303050284 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.517458774 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.291263437 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.338303658 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.168662949 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.175501194 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.305970654 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.32706537 seconds)
  done (took 16.126155701 seconds)
done (took 101.325128774 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.523125958 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.045322921 seconds)
  done (took 3.530978252 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.987612538 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.983656238 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.981833705 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.981777638 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.981000336 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.98145785 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.010500611 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.985409921 seconds)
  done (took 8.855995803 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.982633596 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.982029853 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.982874844 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.981836388 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.981802686 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.981771733 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.981507865 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.981549934 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.980846014 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.982513393 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.982326322 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.980936797 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.98239053 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.981374532 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.98174341 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.981244748 seconds)
  done (took 16.67284282 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.981244414 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.982718848 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.981671899 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.981272441 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.982646983 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.981418035 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.982242015 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.990871082 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.982448483 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.982303869 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.98211643 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.982676434 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.982081142 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.9819046 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.981979585 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.982039675 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.984041242 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.981897974 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.981893167 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.98240125 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.981976023 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.982061861 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.982960095 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.984733624 seconds)
  done (took 24.546616854 seconds)
done (took 54.59527885 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.586912069 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.03370839 seconds)
  done (took 6.583265936 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.985448458 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.982586452 seconds)
  done (took 3.050895716 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.980823068 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.982189865 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.982943291 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.981227298 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.981875 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.98084787 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.982100637 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.982335998 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.982125815 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.982505335 seconds)
  done (took 10.781584076 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.981455545 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.981924027 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.983046323 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.980687484 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.981050037 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.983609667 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.98241511 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.980890275 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.982178332 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.983264498 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.981509307 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.173273196 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.981138784 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.210259567 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.982574252 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.983420761 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.983258559 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.983328445 seconds)
  done (took 19.062488866 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.982115399 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.980713314 seconds)
  done (took 2.925884484 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.983424062 seconds)
    (2/7) benchmarking "second"...
    done (took 0.983716264 seconds)
    (3/7) benchmarking "month"...
    done (took 0.983322866 seconds)
    (4/7) benchmarking "year"...
    done (took 0.983701584 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.983218756 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.983525958 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.98312302 seconds)
  done (took 7.846878427 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.580419047 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.13015849 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.180246013 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.594985809 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.943981455 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.026707574 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.942743871 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.035879795 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.851565075 seconds)
  done (took 16.250094168 seconds)
done (took 67.463004619 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.700390215 seconds)
  (2/8) benchmarking "printfd"...
  done (took 5.975414453 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.619591914 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.103071904 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.00776127 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.349987972 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 5.987660173 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.527096206 seconds)
done (took 36.263652821 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.039756815 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 5.962671409 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.013151992 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.013951352 seconds)
  done (took 18.953389936 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 5.963643894 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.65752766 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.019944878 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.08019459 seconds)
  done (took 18.796222075 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.491643814 seconds)
    (2/2) benchmarking "read"...
    done (took 1.413940146 seconds)
  done (took 3.888176755 seconds)
done (took 48.643980282 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.981016708 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.981171221 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.9820267 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.980869182 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.981842974 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.981626413 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.982050098 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.981214555 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.981668171 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.981434133 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.981327845 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.981283435 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.981544559 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.981979045 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.981915753 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.981505912 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.981296123 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.982007765 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.981787961 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.981997739 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.981584615 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.981647927 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.981849723 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.981794128 seconds)
  done (took 24.522185159 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.050467158 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.041850328 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.053039832 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.044502787 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.074551361 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.048019794 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.044572231 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.021201473 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.050692138 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.032048511 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.01569772 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.068195243 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.021113881 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.06826223 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.020852705 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.068349134 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.053231324 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.021369041 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.021104502 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.074260833 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.043377716 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.021558025 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.068428367 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.015534317 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.068028596 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.014909428 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.032881188 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.042310712 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.0155094 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.068392644 seconds)
  done (took 32.247945906 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.015948247 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.981360568 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.981671057 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.061602966 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.981544516 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.981228843 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.981466698 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.98144657 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.981667686 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.981242061 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.981078693 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.98129565 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.981749374 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.98149889 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.981616778 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.981670157 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.012093041 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.159504699 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.981545453 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.982053686 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.026313045 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.981245931 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.981960417 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.980959624 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.981721937 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.9810148 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.981228843 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.98124085 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.981784044 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.981674273 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.981451924 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.023781363 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.015009171 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.981498961 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.103439484 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.041550403 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.981607336 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.013105869 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.98160703 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.981174408 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.982264871 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.981903041 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.981273845 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.980983804 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.03850815 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.98178096 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.981702222 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.982207753 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.981764034 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.982063639 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.981450182 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.981517058 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.996575552 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.981142883 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.981237186 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.981664761 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.9814993 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.981706944 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.981481003 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.98148634 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.981923382 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.048525948 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.981784711 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.981792022 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.36163482 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.982055318 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.044712511 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.981698085 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.981179594 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.19308988 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.981480912 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.195143309 seconds)
  done (took 73.301037017 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.981827791 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.982542268 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.063202657 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.062987971 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.982617696 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.982190651 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.982613818 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.982848879 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.638732813 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.981467773 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.982146775 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.98277827 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.638552675 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.981750441 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.981714132 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.063030626 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.982333959 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.982307387 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.981728657 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.981882227 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.981948877 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.982896342 seconds)
  done (took 24.12797604 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.023474037 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.997145513 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.01849422 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.996237533 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.99735635 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.996850222 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.024058301 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.997215681 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.0293407 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.02546589 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.027773712 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.029497726 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.997972035 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.023512294 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.024485406 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.065870741 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.023839637 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.064723888 seconds)
  done (took 19.327349327 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.144161908 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.128175679 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.064049592 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.027343099 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.209314673 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.183820981 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.083793958 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.152556845 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.024116298 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.128623763 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.151996716 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.026562494 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.184225271 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.024883387 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.024348999 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.208990293 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.064145356 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.024233023 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.089746363 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.083921833 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.144857493 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.088990336 seconds)
  done (took 25.227006913 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.017717754 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.032510847 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.050952809 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.050758575 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.98214389 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.981851211 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.038339146 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.024537431 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.996983909 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.017898584 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.018866289 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.981578242 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.068433866 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.037855087 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.067714087 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.018354398 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.033250745 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.037664591 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.019449864 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.982201345 seconds)
  done (took 21.42332297 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.982057529 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.982149842 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.982206812 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.982738481 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.982020878 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.982536499 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.982963431 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.982215188 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.98229525 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.221403936 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.982641459 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.982565998 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.982177758 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.982724445 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.982424502 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.982571124 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.982525623 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.981662408 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.982658955 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.982600228 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.220506609 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.982013879 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.982630362 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.982168726 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.98197457 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.982328369 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.982946303 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.982048667 seconds)
  done (took 28.947742688 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.040900059 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.020894042 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.022166275 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.100591965 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.101037885 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.018605874 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.100338614 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.10133789 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.01564968 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.022293853 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.068426707 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.02073602 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.021418309 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.021629895 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.020945905 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.068249046 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.026689726 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.10114004 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.059998493 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.023899128 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.068465589 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.02618966 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.068839714 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.021880535 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.02445957 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.067944083 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.060250776 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.143390008 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.045266044 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.027165731 seconds)
  done (took 32.4953311 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.006081298 seconds)
    (2/2) benchmarking "in"...
    done (took 1.005534034 seconds)
  done (took 2.975391758 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.98237434 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.079089425 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.982027209 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.174192919 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.137215995 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.157083461 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.144044963 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.076019326 seconds)
  done (took 9.69560688 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.982637883 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.383340832 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.006631461 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.98280289 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.982332211 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.458980824 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.938734643 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.888483037 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.789042928 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.259093465 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.09195949 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.525981763 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.967136152 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.297662753 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.109041016 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.83391289 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.250911748 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.58330217 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.089166807 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.12000164 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.747349183 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.099006896 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.985038214 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.982462011 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.982277122 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.892449146 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.879112484 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.434981967 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.158324482 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.121938376 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.780175665 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.076965433 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.983615786 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.261728144 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.112927244 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.984271749 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.174444935 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.103251082 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.983603233 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.983393525 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.754571998 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.90022716 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.134980134 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.2470219 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.080305018 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.983447871 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.983243799 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.98280546 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.246080521 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.62369806 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.97061008 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.971896058 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.134232628 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.983319749 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.669018652 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.998506513 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.982803736 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.890596522 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.609347529 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.275990635 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.351196068 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.106893031 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.04465634 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.124381455 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.98391512 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.201672474 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.815878646 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.811477237 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.759507584 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.108705345 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.508636708 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.006719662 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.984643254 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.982870582 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.940893309 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.301408288 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.982988588 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.983846272 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.982707952 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.982817829 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.273282577 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.114465335 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.837093673 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.13481765 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.187421892 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.464974306 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.124621284 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.983377291 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.678634838 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.850538041 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.097090563 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.667054421 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.208687889 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.133396895 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.002348297 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.257424641 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.025220414 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.98308768 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.8404238 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.63630214 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.998820873 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.983825874 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.754424206 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.029184846 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.986320711 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.98314279 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.715037616 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.124994904 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.141325647 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.033874467 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.983476199 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.982931627 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.577974031 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.101777702 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.988680569 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.448256791 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.973927892 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.547188909 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.254675523 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.201781983 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.362246228 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.007732504 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.278250948 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.814978717 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.986730522 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.521922387 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.827021816 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.586753197 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.259828948 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.121949372 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.855979223 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.063611036 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.983671234 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.15634193 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.074765427 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.983927679 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.983170619 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.983672025 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.983425177 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.982952373 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.110456059 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.397659992 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.832993877 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.999399497 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.230641083 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.116083608 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.862197671 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.247577275 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.705904603 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.133782649 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.984479481 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.716809695 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.263593628 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.736670701 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.125335062 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.984076638 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.983304604 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.831683387 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.019104637 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.094176757 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.984170365 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.599046413 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.103639361 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.98650922 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.983402462 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.470117992 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.133410055 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.984208819 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.113020312 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.799245265 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.881934187 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.999409733 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.3010091 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.111313103 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.984597381 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.983320587 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.983832762 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.784978626 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.633033926 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.149661909 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.605198801 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.781541036 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.090003763 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.169820714 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.088896942 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.289826183 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.238701235 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.135288299 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.984450836 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.983407594 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.984077617 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.473353359 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.861713095 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.032113147 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.848401953 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.013352049 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.960484244 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.091278698 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.785838017 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.003586271 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.73606872 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 3.979628519 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.099898365 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.985529272 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.984327338 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.145879878 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.182552554 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.134640208 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.561611065 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.999925965 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.984446138 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.676827314 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.125336707 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.679000615 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.10377265 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.830829783 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.103351521 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.123983596 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.175156034 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.70313837 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.130807517 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.983617753 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.907372172 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.99891367 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.984343069 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.070824588 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.692204863 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.803355578 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.752575067 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.643832277 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.93882601 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.574197759 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.247668116 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.135892072 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.817906941 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.09777106 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.219495185 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.047139118 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.53469393 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.009833104 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.739306777 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.002690541 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.747490698 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.999701172 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.006666861 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.120278171 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.451988197 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.114763214 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.985439843 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.191698546 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.094111761 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.668681858 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.125177519 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.112068098 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.338511596 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 3.921207281 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.098560156 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.211737487 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.047752985 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.930291049 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.982654123 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.341691474 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 3.951783194 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.998685668 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.091620732 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.788132001 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.169912259 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.256479965 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.131947208 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.985053076 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.984175741 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.221685722 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.083822623 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.984735183 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.328000499 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.996025666 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.031721213 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.092269478 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.988066173 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.984489789 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.218596046 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.16050682 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.31218875 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.495871264 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.59911107 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.828150079 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.124876443 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.699728843 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.133077004 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.676423714 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.100940133 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.98810409 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.69175147 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.125193605 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.315550418 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.14401975 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.107441341 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.668551024 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.123568587 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.315153911 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.17052171 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.120587406 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.78410125 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.570043832 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.249029183 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.397071469 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.032212417 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.510159349 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.046581891 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.547429255 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.992549749 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.01273909 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.096294448 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.050669915 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.985041798 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.984695523 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.500148692 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.96537848 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.988897576 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.783218018 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.704348065 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.92111789 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.725027832 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.102990835 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.988649248 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.984668154 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.984376835 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.895372439 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.100303528 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.41136257 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.136520908 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.985263198 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.984535591 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.973972912 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.354805266 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.826388652 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.906889297 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.966768423 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.132693128 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.985265963 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.985355912 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.984657369 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.984317824 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.986327731 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.984703606 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.495749497 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.001412762 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.586302563 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.104219915 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.9890936 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.223675887 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.059288604 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.985218151 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.19269027 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.082196453 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.099291054 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.061591178 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.98554371 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.414577174 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.134677031 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.959510497 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.319472532 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.319206509 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.239596706 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.573794213 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.048171023 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.430470388 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.325592449 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.770835361 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.98838067 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.895876774 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.094392445 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.809600281 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.983221154 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.459142738 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.557381939 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.986673347 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.286114245 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.916468996 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.367350543 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.142534881 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.062519057 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.985859171 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.984760464 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.069582705 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.240262747 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.037052601 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.265086571 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.205115359 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.97470823 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.315314552 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.09362642 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.209562994 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.024073507 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.000217899 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.986261401 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.985625812 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.458835311 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.939334254 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.088411563 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.985027806 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.88962917 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.892931328 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.915451644 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.587627199 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 4.904351527 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.132321478 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.985661129 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.187927297 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.042670988 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.782433018 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.014838088 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.783920511 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.3263643 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.038459471 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.181976092 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.381074846 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.723853413 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.51006449 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.113689237 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.986083651 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.368964928 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.998984586 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.137241212 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.906250195 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.376681788 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.537646768 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.437011885 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.262860242 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.113104066 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.889132095 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.554739484 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.990355012 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.989301628 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.844588158 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.137962637 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.31249113 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.993082571 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.420691019 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.136218417 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.630633693 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.904213738 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.135154229 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.59778835 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.138838061 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.986639832 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.777770354 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.907728674 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.166955742 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.119540394 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.986028489 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.000563226 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.691407656 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.607055324 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.262287684 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.072686622 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.986090503 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.775850317 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.703413387 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.103607231 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.989730982 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.986095719 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.483194463 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.046904821 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.98607571 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.413734504 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.620518429 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.135962512 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.478576346 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.113037861 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.137662356 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.290281152 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.384732433 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.226416176 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.055012507 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.986168706 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.985580472 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.985982673 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.582864643 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.001999231 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.985632124 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.728516835 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.1366433 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.744624819 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.927728451 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.251473546 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.066354343 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.422328997 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.136831883 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.471117441 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.877216359 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.092510047 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.23484448 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.050959272 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.113612307 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.768918686 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.10209147 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.986725804 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.9513638 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.340549484 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.375491249 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.434858523 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.337645086 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.083991666 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.806100784 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.108891098 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.773384607 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.010396922 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.986406556 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.458976523 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.146499605 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.464180584 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.150081724 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.457936931 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.113631206 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.576420308 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.234468868 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.087315986 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.986525126 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.98583477 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.021560907 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.036179538 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.550280584 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 4.898134642 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.477210193 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.130251055 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.792628644 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.550430723 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.872990521 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.193979184 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.29793016 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.28560374 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.029664751 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.975575828 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.359476559 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.081304229 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.156484164 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.089351397 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.804702154 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.070402121 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.986655684 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.569675973 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.005476796 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.986563874 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.986536492 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.877796227 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.787522862 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.102546395 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.22336549 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.093997304 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.987308214 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.592717109 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.272242836 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.028325159 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.98679561 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.986406833 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.860975225 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.107906381 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.986781046 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.351217915 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.152446924 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.313391987 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.835670359 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.432642346 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.085870645 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.987256712 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.986466466 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.694597805 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.589876811 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.027381297 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.316617672 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.033334372 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.494232129 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.976362298 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.459000386 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.551061634 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.019153979 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.1225348 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.986993629 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.018085478 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.921041848 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.917248217 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.739735289 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.457541185 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.089289457 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.807957124 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.028431562 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.057035638 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.263534531 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.06763924 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.987088856 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.986432986 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.987164133 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.461991927 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.984847018 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.990515948 seconds)
  done (took 1368.64911574 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.25366433 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.986959483 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.986787869 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.987040062 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.986751043 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.986574831 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.98635955 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.986806406 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.986486559 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.98742895 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.986650324 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.987143846 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.987282875 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.259942479 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.987096288 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.98668619 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.987172978 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.987489683 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.986886138 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.98725166 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.987064206 seconds)
  done (took 22.234847607 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.986875344 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.98689274 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.986603703 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.986345447 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.986882723 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.98672118 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.986857501 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.986623345 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.986470824 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.987038021 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.986771758 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.986238312 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.986840247 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.987119951 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.986984883 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.986692884 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.986865725 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.987014396 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.986289234 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.986933647 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.986338263 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.986921073 seconds)
  done (took 22.676608174 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.986187713 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.986455239 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.750507909 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.123756376 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.987524385 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.987085171 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.986877376 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.191790007 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.028331788 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.888790001 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.399101483 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.0362687 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.991369814 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.174868215 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.090912573 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.987271939 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.107571938 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.986696257 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.986760166 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.988955121 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.98667242 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.227128991 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.137904618 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.988146543 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.834709075 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.139143687 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.987700689 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.987011328 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.986879364 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.962414865 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.090098475 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.991022365 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.864293993 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.783954423 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.338773992 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.152610569 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.102299715 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.990175779 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.988455727 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.986231122 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.202593212 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.773240327 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.99117206 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.986166445 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.293927589 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.115073907 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.987348319 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.771903403 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.035400277 seconds)
  done (took 83.319394471 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.986891878 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.112074545 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.047141264 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.986454461 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.105295634 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.986550507 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.049306352 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.986689541 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.987142093 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.987250303 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.1222365 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.140876626 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.987097121 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.986755102 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.076387192 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.987137195 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.987196684 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.986898946 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.987441309 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.987564308 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.987004653 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.048832278 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.101201952 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.140436865 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.986984475 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.987668584 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.987341938 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.987113319 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.138454821 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.987908562 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.987038236 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.986798198 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.115558423 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.097148741 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.986825777 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.987234491 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.110297054 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.987643776 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.986432169 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.987260297 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.987282396 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.987021795 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.043760012 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.11765718 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.987804282 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.09597881 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.987130977 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.987356376 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.136793394 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.986854397 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.987229139 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.145562402 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.98710823 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.987398728 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.986916961 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.103510101 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.987410675 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.987514577 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.986722986 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.130775842 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.987243259 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.98701855 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.138032312 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.9863944 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.986933533 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.147964823 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.091544916 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.987448808 seconds)
  done (took 70.963972408 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.986900635 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.123490057 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.16199611 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.163747104 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.123410175 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.108462214 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.126478867 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.123823905 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.123477768 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.126301229 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.125585409 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.083687612 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.093333306 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.082209318 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.127212096 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.108747443 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.110100385 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.110435589 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.126722352 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.126269441 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.109251225 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.162023811 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.124227529 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.163161348 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.343191097 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.093921674 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.12289939 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.126200096 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.165554545 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.123682646 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.341419691 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.126769056 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.126054688 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.166146015 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.340247133 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.120684652 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.987196623 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.123147666 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.12770241 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.123652528 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.093567669 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.163992449 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.120098912 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.093991013 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.110169469 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.120570139 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.163785692 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.340355078 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.082586582 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.126574431 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.124554175 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.164409829 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.120743947 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.107858665 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.163797127 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.086313806 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.161754336 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.164456282 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.126967161 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.161806826 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.163137594 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.087274393 seconds)
  done (took 71.398806082 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.987116037 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.987462838 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.069368067 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.987930184 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.986969089 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.070395282 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.987340586 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.987094646 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.987663455 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.987117488 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.986890701 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.069906262 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.343969208 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.987190627 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.07053122 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.347681729 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.069895123 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.070725261 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.987302307 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.070802769 seconds)
  done (took 24.012193931 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.038884969 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.14094334 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.024047263 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.160619613 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.02644178 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.138295725 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.029217906 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.025793201 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.025650109 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.026232767 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.152890187 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.153073496 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.025681518 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.160157385 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.140786835 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.138724853 seconds)
  done (took 18.376361905 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.987736748 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.987377432 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.987643917 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.986894495 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.98797828 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.988954717 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.987427752 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.987800262 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.987604835 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.447898063 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.987391011 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.987678216 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.987853424 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.987383907 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.98908503 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.987344964 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.98808134 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.987846597 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.987219351 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.987443589 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.558636966 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.989168574 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.987284555 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.986872736 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.988005006 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.560344752 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.987773169 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.987260194 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.987745394 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.987285736 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.98765343 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.472081473 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.98842961 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.987933803 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.987636452 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.987541934 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.986863014 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.987896654 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.987188433 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.987110331 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.987513786 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.987691625 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.987713626 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.987625805 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.987904678 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.987297003 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.988113874 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.455776793 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.989859689 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.987893018 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.987410919 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.987362234 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.987532224 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.460592923 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.987689192 seconds)
  done (took 58.32330186 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.027691889 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.041230305 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.987536998 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.987929029 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.040432114 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.030822038 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.023817678 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.00267717 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.03203378 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.98727226 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.053970014 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.002568436 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.032228504 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.041562461 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.053900468 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.030197083 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.987884496 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.05647182 seconds)
  done (took 19.389889689 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.988048164 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.987687197 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.98747735 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.987946812 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.987996871 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.987725459 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.988082934 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.987468279 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.987122635 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.987737054 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.987678904 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.987278185 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.987617503 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.987607192 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.987719593 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.98820227 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.987558573 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.9874718 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.988376882 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.987957464 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.987704202 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.987735027 seconds)
  done (took 22.699935059 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.019144518 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.034118653 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.988080753 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.989080737 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.989211884 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.010300044 seconds)
  done (took 6.998627009 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.043831334 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.050143691 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.030160655 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.038580811 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.056638196 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.066913477 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.065821733 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.068853124 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.053147684 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.286345618 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.071456513 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.055123925 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.050823276 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.118959087 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.053557402 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.056596122 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.074658862 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.07175435 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.033424708 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.074371851 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.080259724 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.053992134 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.081538022 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.065889906 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.07844225 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.117569256 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.050348319 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.288743782 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.066128108 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.055126876 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.050645462 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.080155412 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.056306348 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.279295828 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.03844968 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.053560345 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.067382343 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.073714413 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.050933228 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.113056999 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.023306238 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.050638522 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.050985547 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.075069798 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.0564653 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.078441989 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.074970359 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.081012058 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.078764854 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.283989328 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.056310114 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.111430011 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.053520774 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.056446842 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.053446399 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.277954535 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.282959736 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.110819021 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.050778123 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.286484241 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.11410764 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.051420228 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.112108136 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.288714697 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.053863755 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.114034107 seconds)
  done (took 73.143478656 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.139293976 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.030511723 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.08020201 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.291116812 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.142855109 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.073653491 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.07758998 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.080611088 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.082578458 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.051047605 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.077167539 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.080289948 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.14283446 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.139841543 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.081146073 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.07195476 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.076531248 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.142542306 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.051021213 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.279622068 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.075972077 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.139643726 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.143979487 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.139366186 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.277997223 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.056859117 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.080948674 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.071746331 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.072042824 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.072423686 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.091041749 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.084397364 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.143898277 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.0307067 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.142413221 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.078500014 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.072613324 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.090525565 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.072095994 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.056526276 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.14073963 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.074207665 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.074810644 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.071953553 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.279915608 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.0814361 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.086520187 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.051638891 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.078076449 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.051713607 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.280210593 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.27811651 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.291650119 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.139687102 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.082840118 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.079923462 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.078056977 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.081176886 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.080828105 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.055290257 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.142751159 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.072460599 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.282910113 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.073767886 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.080595605 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.143331045 seconds)
  done (took 74.392215344 seconds)
done (took 2231.833326064 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.110075812 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.09946149 seconds)
  done (took 13.178523733 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.988671828 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.988197237 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.144776525 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.988343014 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 5.984901865 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.111881009 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 5.992877391 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.99890185 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.988341039 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.079891826 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.988713401 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.129822227 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.095811311 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.988396807 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.019210782 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.99890211 seconds)
  done (took 37.47198106 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.047424728 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.580237132 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.947461628 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.804249933 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.021428998 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.76386602 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.298487345 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.745781069 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.30432361 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.44419699 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.251729831 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.867828105 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.808475494 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.118008383 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.427634916 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.524495129 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.605825997 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.674436924 seconds)
  done (took 58.206043968 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 5.981627404 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.146084177 seconds)
  done (took 8.126989595 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 5.970205101 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.000078193 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.009441941 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 5.99454371 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.003028466 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.019614266 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.025836236 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.020963518 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.021912759 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 5.996562573 seconds)
  done (took 61.050846759 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 5.983549554 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.486972153 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.341720356 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.439644015 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.606190897 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.474455631 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.154702055 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.34909385 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.078074612 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 5.970623581 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.287787766 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.42542078 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.836966223 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.258099022 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.633321884 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.253045756 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.730215002 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.384053425 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.345930764 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.426746418 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.274607561 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.33833992 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.259995541 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.863948301 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 5.992754882 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.614060942 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.276105643 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.122461952 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.065111821 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.140476477 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.373695804 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.005613765 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.322941684 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 5.993938871 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.053628632 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.671801882 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.688789691 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.191165744 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.480186297 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.341055531 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.392868551 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.661769132 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.055114525 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.661666126 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.151256504 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.37217153 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.033839619 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.246635219 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.075352149 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.103438542 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.525607748 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.167737801 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.121562859 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.10850793 seconds)
  done (took 148.198038339 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 5.970302345 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.382707225 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.128868258 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 5.972711181 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.456884851 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.195858899 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.599010461 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.480899762 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 5.993373696 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.212396921 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.160195958 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.118223309 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 5.972339912 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 5.970950966 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 5.974457079 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 5.972163857 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.171963981 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.507534139 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 5.99062251 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 5.97197495 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.18477033 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.221318222 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.116953335 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 5.973761527 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.153991157 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.232313083 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.373626385 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.119396366 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.391087442 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 5.971383075 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.424879605 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 5.990038122 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 5.973851808 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.879350393 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.362152426 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.333624706 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.432780916 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 5.979286753 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.723838424 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 5.973221247 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.667989494 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.184778482 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.317950772 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.128667867 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.134411007 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.21404599 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.583618395 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 5.970558932 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.742612524 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.157301069 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.207760928 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.215000107 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.271198543 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.97881597 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.526513018 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 5.972556483 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.971956819 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.240448816 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.130558119 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.113912974 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.974358249 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 5.972547087 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 5.971698748 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.228696094 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 5.973479023 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.10201276 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 5.972918581 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 5.974548384 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.103769974 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.113303724 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.132057976 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.22903355 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.23089325 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.927828054 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.324809179 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.220075926 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.370263954 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.221205031 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 5.974316526 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 5.971925636 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.421741104 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.439216827 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.149007855 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.229468963 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.297743114 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.268246947 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.505289708 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 5.970537042 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.202902159 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.14593208 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.207722805 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.133882417 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.342453743 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 1.87020838 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 5.971842741 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 5.971967178 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.252915066 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.114876913 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.974084934 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.498685947 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.251685489 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.071511699 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.154416948 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.469729052 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.093107829 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 5.974820122 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.539110598 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 5.970520156 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.198034598 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.303075023 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 5.98097049 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 5.974421291 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.132791245 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 1.711676677 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.970366952 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.324494456 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.390806744 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 5.988679034 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.138025119 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 5.973232045 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.233547449 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.966466887 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.215457284 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.974230495 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.256742632 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.170857345 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.134141531 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.974455224 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.328803339 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.252900221 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.388615101 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.294693743 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.855447666 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 5.972795343 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.302368932 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.973757535 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 5.971598367 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.160143312 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 4.708361826 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.159191769 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 5.97481687 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.243929357 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.146372598 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.355442019 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 5.973188742 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.253288928 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.234559724 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.382998581 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 5.981926316 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.117332188 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 5.974777071 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.045327797 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.149082478 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 5.972511001 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 5.97211442 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.838654337 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 5.972145773 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.12937704 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.211651086 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.668949581 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.39152068 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.331263773 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.971612375 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.462356687 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.188783553 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.436569918 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.587467427 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.157172782 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.691608013 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.184947085 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 5.971332417 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.228145529 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.259924627 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 5.973399503 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 5.973462838 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.681645291 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 3.945604718 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.972129335 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.147038201 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.590816599 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.227531894 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.19887521 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 5.974165622 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.343703556 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 5.975766876 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.192815382 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.489138706 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.116252697 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 5.97169403 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 5.971624666 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 5.972883306 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 5.974567805 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.192669312 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.231999326 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.638472049 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.131657254 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.282784488 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.197126533 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.306056574 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.446284743 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 5.985155596 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.303063706 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 5.973497124 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.416184922 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 5.984407749 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.138864353 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.238787423 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 5.975625377 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.29021397 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.34297498 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.175874129 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.373586296 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 5.974649929 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 5.973537082 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.587307444 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.159065874 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.426465158 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.972605472 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.136192389 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.34301781 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.112463248 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.195391238 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.040986201 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 1.966940491 seconds)
  done (took 698.257070891 seconds)
done (took 1025.45853254 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 5.971124534 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 5.975107816 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 5.978127213 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 5.977220279 seconds)
  done (took 24.872339117 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.961255705 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.063229189 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.167367942 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.989969485 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.338080586 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.047107741 seconds)
  done (took 10.545009509 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 5.97250082 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 5.974134896 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 5.979628065 seconds)
  done (took 18.896946675 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.262474309 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.455585874 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.140921953 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.075735392 seconds)
  done (took 5.914196677 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.01030133 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.020098071 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.988626443 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.012183317 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.989737473 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.988908664 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.018698889 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.00772009 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.989095171 seconds)
  done (took 10.000913604 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.532000282 seconds)
done (took 76.733167563 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.250661338 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.280153677 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.14094209 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.156897496 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.128069236 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.346699367 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.093866611 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.008218259 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.367511464 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.425162961 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.501064454 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.076905212 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.357857964 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.410223823 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.228302171 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.018870969 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.000493404 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.052918996 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.572159394 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.15531773 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.537750887 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.198031564 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.970787147 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.018780769 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 1.843894001 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.127931366 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.278115656 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.934548362 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.042226557 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.013437276 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.083999535 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.472836699 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.251484576 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.335499004 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.10020691 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.846175613 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.412169226 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.137719602 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.150163411 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.370221407 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.33989679 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.113338206 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 5.970929211 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.15828074 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.347882245 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.008796752 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 1.982437525 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.151108999 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.500685648 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.18466131 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.4205269 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.993291963 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.613770645 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.067938355 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.086108143 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 5.972840011 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 1.926970326 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.459033644 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.143154817 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.302380127 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.00081068 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 5.970623357 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.050025904 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.020201559 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 5.971340911 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 3.470114243 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.442440788 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.092211439 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.54488425 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.017328719 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.004735851 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.015015672 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.67048646 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.135604295 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 5.970768189 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.14192462 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.342496962 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.104186758 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 5.981527116 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.086286074 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.229518864 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 5.973952852 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.128119096 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.376215432 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.154723812 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.333386003 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.498537246 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.438639332 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.435492892 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.921098641 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.478810753 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 6.793290898 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.08647441 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 5.985656509 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.270553212 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 6.098460348 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.109878591 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.458226095 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.125818011 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.504409323 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.020414736 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.001179986 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.332945038 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.351081542 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.754791743 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.024960823 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.101664877 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 5.971723658 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.299570508 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.68983859 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.084086873 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.575578182 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 5.984800667 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.051228122 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.462554071 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 5.983130155 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.335981089 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.427433036 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.017943079 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 5.98216549 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.296705439 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.993111693 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.110129377 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.4981446 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.368303163 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.214415706 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 5.977014303 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.04584618 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 5.985466298 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.18512335 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 5.988098478 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.495498781 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.542379348 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.022120909 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.251881237 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.11388018 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 5.971742291 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.352560638 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.039716377 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.199201639 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.303420738 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.323037806 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.147708803 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 5.971531517 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.333841108 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.984980195 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.231864439 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.338671044 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.15473489 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.326058771 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.072897604 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.004245197 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 1.902392321 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.408872318 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.573417441 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.535276132 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.295409407 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.122200472 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.54781808 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.236455748 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.831177869 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.09359082 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.039594588 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 5.985084639 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.007253776 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.053546479 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 5.971852388 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 5.983082833 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.294350332 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.187370704 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.482896502 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.777500602 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.859654315 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.342547659 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.143299012 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.895510618 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.481490817 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 5.988553092 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.246408072 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.486500819 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.091330834 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.010701101 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 5.975310202 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.044272338 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.699608716 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.025537794 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.265605281 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.469951751 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.317347101 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.354553229 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.211937198 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.029929573 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.337402671 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.251108637 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.337049348 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.214143045 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.424452145 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.132852596 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.29412328 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.113621143 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.332424444 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 5.984701883 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.908751194 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.20948812 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.485017082 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.397080216 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.229533997 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.158002476 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.303437081 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 5.985481628 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.414725744 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.082505015 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.37971577 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.016286773 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.409432057 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.083792021 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.402554431 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 1.91655013 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.10760999 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.274938799 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.151921297 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.113411718 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.547153794 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.003535688 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.29494955 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.153323503 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.171570416 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.248260989 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.021770928 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.118732371 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.200503677 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.13295327 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.280548249 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.870076409 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.318289503 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.715130542 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.117796848 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 5.972366118 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.30483445 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.02461868 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.001008494 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.24583427 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.140811074 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.29446545 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.148368149 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.159402612 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 5.98616424 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.018711978 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.394036986 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.84968917 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.558459811 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 1.961688294 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.017183619 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 5.971932891 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.43917145 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.358595922 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.0560844 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.126264409 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.470440164 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.028367107 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.148911194 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 5.988557343 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 5.987121996 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.730354856 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.12352443 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.235836893 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.482908669 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 5.9872149 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.094042719 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 1.99704355 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.416614313 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.473067031 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.043022184 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.111116783 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.200552972 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.98584712 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.37795953 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.019295963 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.176558248 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.395219818 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.097868039 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.112252303 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 5.975386506 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.028085685 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.517952427 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.195665004 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.484534596 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.022612217 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.435847946 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.013649753 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.242130421 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.012748594 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.073718438 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.323995034 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.157744227 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.342806721 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 5.988964851 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.154810449 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.253723697 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.012140823 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.008828849 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.127791625 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.758270254 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.36657862 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.273027067 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.152561961 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 1.941420323 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.232226903 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 5.983724281 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.384906346 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.132438501 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.12789194 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.570861071 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.480718434 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 5.986710032 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.167709986 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 5.974773074 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.355058778 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.019176107 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.006310606 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.125302105 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.07404961 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 5.971679948 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.657654475 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.189568111 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.482663245 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.084832825 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.859667258 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.04224249 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.167819671 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.102259904 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.389398972 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.986222173 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.007548465 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.128718951 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.612490963 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.179193641 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.025212177 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.260389917 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 5.987293935 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.516662165 seconds)
  done (took 825.926374517 seconds)
done (took 827.079769196 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.186966422 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.422026358 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.236356526 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 1.878162019 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.799373506 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.638807479 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.252972295 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.229377449 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.071495066 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.25258891 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 1.949602242 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.797441408 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.090721655 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.121816157 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.074583515 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.092967933 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.240211302 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.239078495 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.113190519 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.801161751 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.511730685 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 1.802038939 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.414606563 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.29125523 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.421090468 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.103275474 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.246204744 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.514526793 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.513682561 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.104401748 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.207690801 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.235786269 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.832563024 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.25097498 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.074693446 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.080840663 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.867934619 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.091004158 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.193224145 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.080885915 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.373454137 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.120746878 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.705169647 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.851612652 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.775606228 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.423875215 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.882760545 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.09845582 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.110000763 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.203551338 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.192088192 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.19224132 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.513839141 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.129245236 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.887174352 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.873343145 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.513941654 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.867933202 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.740167208 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.202761069 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.518696481 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.094346581 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.202656847 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.227645003 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.118866379 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.287373716 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.411111009 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.194577866 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.236683835 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.262949687 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.240639775 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.220729934 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.114424422 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.14546702 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.126702412 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.253822191 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.612628276 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.238093134 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.786464721 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.102810748 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.95405037 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 1.949163353 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 1.951027014 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.072549933 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.18675915 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.772455988 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.810033977 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 1.953708327 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.113643478 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.235791038 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 1.947405135 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.23643297 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.454508917 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.246468422 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.186183575 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.238798136 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.818671466 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.186084888 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.087101698 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.23649884 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.779579044 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.246739881 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 1.999417412 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.083724273 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.100074016 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.195759287 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.246696116 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.427552295 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.221491052 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.14842287 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.422091014 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.127329541 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.221459278 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.123194676 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.078000104 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.776055944 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.276992525 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.867537367 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.186160633 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.671066083 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.269208346 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.08417091 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.37397799 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.292054935 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.187481578 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.091913704 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.100122149 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 1.947193381 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.099291445 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.094579502 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.178886447 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.446990502 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.203522189 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.880187748 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.222078888 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.695484945 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.233140586 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.222222083 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.078435375 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.875036597 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.090992581 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.072064826 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.29328763 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.373732434 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.237871042 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.293522797 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.114080553 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.25105395 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.186044825 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.114001355 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.222455825 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.127188886 seconds)
done (took 228.16675721 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.334206471 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 3.360521146 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.335871838 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.289117186 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.337787362 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.344058621 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.057097033 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.427540309 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.102844368 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.423342448 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.234762936 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.139333214 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 3.35057557 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.190431728 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.336378042 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.241780018 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.103330688 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.25165929 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.442677823 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.344555117 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.030189006 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.237042027 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.162623345 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.403244945 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 5.973177128 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.002424588 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.343244189 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.117772055 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.253343079 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.001461031 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.012677717 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.254105938 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.343487202 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 3.110164733 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.411733301 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.987419701 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.340548901 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.071972193 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.320719483 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.327580527 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.330841004 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 3.795295483 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.003091973 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.025933443 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.144808603 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.336790663 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.060026299 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 3.23494738 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 5.972748969 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 1.991068492 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.250580806 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.085222102 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.143654506 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.317254844 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.191630154 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 3.099202888 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.460118807 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.477301576 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.342893495 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.296026964 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.322486313 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.402798537 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.407667176 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.206748326 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.012498282 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.26957303 seconds)
  done (took 118.508168544 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.42169904 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.289888737 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.39291445 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.461063769 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.580970921 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.448371487 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.561500075 seconds)
  done (took 13.128785197 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.048742138 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.03446725 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.236778199 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.240023338 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.041955526 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.164601329 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.125493382 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.006853181 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.261204316 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.080242422 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.346788034 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.254130889 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 1.954750289 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.064378825 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.125243283 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.377946847 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.005494153 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.106527425 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.099970508 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.295947252 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.007834962 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.002447316 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.227322723 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.126666423 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.045959413 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.080564278 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.036573539 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.006617908 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.077436889 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.016814358 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.046228292 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.148837957 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.033019562 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.08421145 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.059351434 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.347910164 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.044353482 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.085206494 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.170969552 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 5.972750674 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.020307628 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.041534189 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.178138785 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.047593413 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.019405358 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.225876803 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.024649418 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.045402686 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.017030858 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.035892758 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.227711118 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.033977425 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.059400385 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 1.960612282 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.248250528 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 1.995476842 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.106626784 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.030331202 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.035808011 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.091349966 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.037465767 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.295504561 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.254864218 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.020162512 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.279823339 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.315474181 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.03124895 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.023192693 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.02018585 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.280431446 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.03132095 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.279662171 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.039600635 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.084844865 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.086196425 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.170087985 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.226269272 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.824268716 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.792861616 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 1.954489175 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.003917444 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.023581335 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.344752875 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 1.96782515 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 1.959300646 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.023789576 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.085284842 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.67804008 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 1.94520494 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.034157135 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.345342117 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.022947937 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.091025203 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.085723554 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.068163907 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.099279623 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.262321043 seconds)
  done (took 133.185150139 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.327494751 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.631767661 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.263070706 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.28512268 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.433789026 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.498221066 seconds)
  done (took 15.412484059 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.432132712 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.852287234 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.057116154 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.053180352 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.091220769 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.031002443 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.033409694 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.259347368 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.174242168 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.050884594 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.031584066 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.052907045 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.035480617 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.172996466 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.030989988 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.041255047 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.033272303 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.060532726 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.040320518 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.10181583 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.191187144 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.09205953 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.10113898 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.227776927 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.094023672 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.045804166 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.943288051 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.042052434 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.041187676 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.399444573 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.227615116 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.031436011 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.141314131 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.439031489 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.809018626 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.226949626 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.18632926 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.056658901 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.092069935 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.031147687 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.05482991 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.10188136 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.053503254 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.053028438 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.442822647 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 3.154984199 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.116610889 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.29564958 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.035752222 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.053467859 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.052525442 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.055879311 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.030709441 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.052481802 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.49188697 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.526706306 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.011228517 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.03435572 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.091640123 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.205637154 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.119372396 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.034937119 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.485788297 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.981701752 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 1.992240639 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.052781976 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.22534774 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.174703596 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.104480822 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.058313009 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.053292301 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.059634851 seconds)
  done (took 110.387430993 seconds)
done (took 391.594031518 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.315352486 seconds)
  done (took 7.287913182 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.038212811 seconds)
  done (took 7.161884737 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 5.973931146 seconds)
  done (took 6.959511819 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 5.994081315 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.003217041 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 5.997929404 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.008832545 seconds)
  done (took 25.017872308 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.186869651 seconds)
  done (took 7.163192987 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 5.974181194 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 5.997206404 seconds)
  done (took 13.058484898 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.107697707 seconds)
  done (took 7.105068858 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.205587142 seconds)
  done (took 7.199053192 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 5.974018118 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 5.983035623 seconds)
  done (took 12.969379718 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 5.973081212 seconds)
  done (took 6.946288252 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.300451223 seconds)
  done (took 8.382101007 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 5.977383034 seconds)
  done (took 6.999136427 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.053523184 seconds)
  done (took 7.029072204 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.074562012 seconds)
  done (took 7.048100312 seconds)
done (took 131.299677758 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 5.973684024 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 5.978983145 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 5.977400425 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 5.976633806 seconds)
  done (took 24.879796038 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.316044704 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.316674923 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.293768241 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.368311267 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.259845936 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.259224586 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.31493209 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.316500607 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.259857527 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.39681033 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.312016123 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.466662671 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.367073201 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.293925865 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.293836018 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.366435777 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.466063567 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.315938865 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.260036545 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.294106316 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.46726701 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.466720762 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.749251691 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.737901362 seconds)
  done (took 33.936662772 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.201910029 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.355603518 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.159222831 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.311086598 seconds)
  done (took 6.001444349 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.021858819 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.366808272 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.349023392 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.309318841 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.348937983 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.163154004 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.34936201 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.201308125 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.169875479 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.171391177 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.616520807 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.142598066 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.156139569 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.408443574 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.161798597 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.991552631 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.991277446 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.170779599 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.366047421 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.192165775 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.242706386 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.349161478 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.349045609 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.349100965 seconds)
  done (took 30.9122486 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.749899199 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 1.92194288 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.350004555 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 1.903338199 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.69815714 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.783708225 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.271210781 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.492278205 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.258246934 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.236002108 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.720940722 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.31203485 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.135619312 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.883329741 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.749790561 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.168839598 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.169127472 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.830979648 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.606853296 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.291338122 seconds)
  done (took 36.507593538 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 5.973712976 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.974553141 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.236668823 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.157045859 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 5.973625685 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 5.977348537 seconds)
  done (took 27.266494877 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.039909936 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.143759482 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.302339173 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.26702525 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.154216528 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.132355702 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.637729437 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.212853793 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.762864577 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.789673437 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.629137378 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.450611696 seconds)
  done (took 20.500923968 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 5.974249715 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.018351188 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 5.981566894 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.158457411 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.806890943 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.865812629 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.307931943 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 5.973212414 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.084297602 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.186128207 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.298412613 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.157466904 seconds)
  done (took 38.806956806 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.230498903 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.198255832 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.341284913 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.81671191 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.540900957 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.084116242 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.411069099 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.499682522 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.042797525 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.108101771 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.535943898 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.050110772 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.519701585 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.95778672 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.975075862 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.278747125 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.809451692 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.481325009 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.438981035 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.060663762 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.942352077 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.131408066 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.9759583 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.529048362 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.320089408 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.97930747 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.20852143 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.22975838 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.97391664 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.234607455 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.974860844 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.47005648 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.222634084 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.2939405 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.518030742 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.064220749 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.099951628 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.103194088 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.584323501 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.278680276 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.128040365 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.146904008 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.513434876 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.095820291 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.241853724 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.770500099 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 5.986072062 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.644891044 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.97000578 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.117629494 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.88707141 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.868774414 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.435118476 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.708094443 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.125236906 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.279567853 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.14406265 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.112893655 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.291688425 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.042715339 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.178819247 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.101514202 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.230283939 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.956046803 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.493192421 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.339155483 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.352551159 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.311591296 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.28829204 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.289040099 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.327043234 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.115045262 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.169360838 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.122270436 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.503281647 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.064781681 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.329292448 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 5.977194511 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.724319016 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.520380189 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.968565308 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.098129137 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.637908905 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.946361666 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.975139985 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.146600601 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.220993789 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.957617373 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.078731255 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.062569669 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.411586147 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.122325989 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.131944344 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.283967902 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.683666176 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.000484045 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.749287777 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.301525366 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.956261859 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.545224476 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.974936273 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.970274483 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.975277731 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.542703096 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.402731214 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.032528086 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.756997393 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.627115303 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.282075934 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.56915509 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.147260873 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.820163951 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.322259331 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.313180727 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.974452247 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.777841326 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.113655101 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.110888353 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.354736683 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.973803022 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.956212058 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.400703171 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.224926196 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.975192599 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.219161539 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.977324215 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.131436821 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.974525104 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.612832697 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.038966478 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.22679807 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.514772617 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.203120314 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.069232488 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.955907443 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.128390516 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.488507985 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.071629162 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.333039447 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.428572676 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.59258083 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.487511278 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.980088152 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.835694271 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.463343586 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.270122857 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.322418724 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.140171544 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.165972363 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.077668777 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.974368502 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.15880959 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.985837668 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.525158788 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 5.978891576 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.660477218 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.673911658 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.283467768 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.974708598 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.971596167 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.115564152 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.274642583 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.667999747 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.037131347 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.149518389 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.264519789 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.198994452 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 5.975828234 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.956426635 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.362094079 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.269045654 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.517604476 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.380982679 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.653816562 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.337087114 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.46748749 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.20755898 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.333915475 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.773673789 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.23193031 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.338012388 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.595618566 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.016931579 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.976640255 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.075457169 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.420405612 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.210798234 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.767553748 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.100908813 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.614580857 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.03531665 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.460466545 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.955813541 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13416793 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.474625696 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.028173672 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.559555329 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.18001615 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.206436069 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.26403283 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.018473804 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.333195055 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.287808417 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.398903503 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.372677177 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.297936593 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.967095209 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.546957077 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.51850748 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.524747168 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.125210681 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.410374652 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.246089094 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.052352414 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.975681616 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.330295997 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.008989925 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.684301026 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.274240047 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.657930954 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.711056218 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.212907235 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.974766434 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 5.986430437 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.19133619 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.160854423 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.042007782 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.904702034 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.529205157 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.283329548 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.312213831 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.974667171 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.979676131 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.240870185 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.294002747 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.260046718 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.491486748 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.605071616 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.690665724 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.092312294 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.639359763 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.151358503 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.024363196 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.566754606 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.34451578 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.940587736 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.212982192 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.80329154 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.148039475 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.064080464 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.254543655 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.975549907 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.465791884 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.611684327 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.978201019 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.013132473 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.136523987 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.976197426 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.235083763 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.880996406 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.223837516 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.725742193 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.455959063 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.270587643 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.212199673 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.403777433 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.522692847 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.765752342 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.958204566 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.141702499 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.089898383 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.278820649 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.975422799 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.276158046 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.718668072 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.659529202 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.81597876 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.530577954 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.235655252 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.761768059 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.458528278 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.241073919 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.328036459 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 1.939809813 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.608592405 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.969607332 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.123955932 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.954539505 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.774922297 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.3184206 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.359043841 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.467249297 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.060155886 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.520865789 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.370073483 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.062362132 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.149544417 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.257483255 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.974794895 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.3209176 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.974419944 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.065507256 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.390284028 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.983227766 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.52311054 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.187038496 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.312019217 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.140635392 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.568366931 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.02526381 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.116745982 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.550028001 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.178389006 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.122304432 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.322677795 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.062388852 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.03675263 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.98265838 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.238598623 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.976023426 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.46041364 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.590879272 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.591705016 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.322056993 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.754935889 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.976988154 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.209588372 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.148548013 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.348584592 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.180303919 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.39031921 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.027324892 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.2328227 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.314896504 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.12233402 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.526170003 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.967655108 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.587968302 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.182642516 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.502829557 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.52374841 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.767037568 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.478420522 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.814533592 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.543827349 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.002639083 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.142647639 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.414037462 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.718190428 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.445286927 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.831684542 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.774821849 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.14586349 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.430909012 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.099851033 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.763993487 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.145102183 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.223812062 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.207494658 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.120475943 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.95540739 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.552070201 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.763588101 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.260840029 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.148396919 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.212276467 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.140194159 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.947123905 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.534848917 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.295689862 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.754844359 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.464971599 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.263062978 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.957044655 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.976188066 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.260433046 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.481341643 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.079312493 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.289874549 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.432381936 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.028683074 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.008634339 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.006146655 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.552842458 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.803816135 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.709909616 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.331549161 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.533189017 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.592735652 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.749451019 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.754199818 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.209928183 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.336883903 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.400252314 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.916734755 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.415988936 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.279052947 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.138277721 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.957369572 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.214478434 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 5.979305979 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 5.913188085 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.74305244 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.304864282 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.071563193 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.848599107 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.62636225 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.748109503 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.026735033 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.040418986 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.209501274 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.190266972 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.975097158 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.549838983 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.407366098 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.146584365 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.973910332 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.746704239 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.957339634 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.20841562 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.93019417 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.192340573 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.832250315 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.084292456 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.641423247 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.530074161 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.009611145 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.201166848 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.956346474 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.763688534 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.012359936 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.670891114 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.811891314 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.233745559 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.505877343 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.212926779 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.988188175 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.311065968 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.197009177 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.311396423 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.274116161 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.468785247 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.408648198 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.362134956 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.286212755 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.679139911 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.144332283 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.226505569 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.957537036 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.976243289 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.017583592 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.362473298 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.359453708 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.97519257 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.520091164 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.232894558 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.125358382 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.156521052 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.088480689 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.540936517 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.193023359 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.140109407 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.153385849 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.229584598 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.3485376 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.976498488 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.243879159 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.981574236 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.977849123 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.21001492 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.233141237 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.333430567 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.296993884 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.88094419 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.140913367 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.93611993 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.837868827 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.51898706 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.978187754 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.823991796 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.363561585 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.97665753 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.465013093 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.655571918 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.212738309 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.688995963 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.067724456 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.954804764 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.191081683 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.477202757 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 5.978921975 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.643335673 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.39549753 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.97691528 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.465246258 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.058843218 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.147777853 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.772265313 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.484636874 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 5.977223587 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.77245448 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.12073493 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.539605223 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.673495821 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 5.977844488 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.142471092 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.643089266 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.967544045 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.007560519 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.090825225 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.521644508 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 5.986541882 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.578810847 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.167945229 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.153981764 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.985183391 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.124809741 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.977388188 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.208746419 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.176186704 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.229919735 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.25837495 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.213105352 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.975266618 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.587112384 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.698101448 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.067812484 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.202611393 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.943241283 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.389378427 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.107653468 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.93508548 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.571125924 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.201073665 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.20682451 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.423718558 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.245749191 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.019956368 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.230093379 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.975828685 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.268343085 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.289109776 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.559956379 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.246095793 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.907830842 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.276429184 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.998346411 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.540208107 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.462734098 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.875090771 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.976232057 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.293279706 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.975257005 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.778381044 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.647310073 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.1805228 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.143424491 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.968144162 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.579186144 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.33219674 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.127192176 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.977931362 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.196409657 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.494121647 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.957579512 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.7788163 seconds)
    (567/608) benchmarking "2d"...
    done (took 1.852913436 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.213923695 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.317611945 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.956010894 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.213163714 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.00535208 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.970609673 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.485135839 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.976611483 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.335045192 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.958046849 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.503123177 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.970212056 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.112620491 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.150027125 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.301327667 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.976497127 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.972614732 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.153000037 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 5.975210714 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 5.975988925 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.33536214 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.070646572 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.237092718 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.460427995 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.247536913 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.335518668 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.880535095 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.778643153 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.012033846 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.294743874 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.976088239 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.547514085 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.103503222 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.53777563 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.057675183 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.009358607 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.540349592 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.231611882 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.726388994 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.130810105 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.477328751 seconds)
  done (took 1874.083870423 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.029949499 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.02538298 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.030251471 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.035316987 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.024880729 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.023006833 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.032518004 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.014834996 seconds)
  done (took 49.191823598 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 5.975343097 seconds)
    (2/17) benchmarking "4467"...
    done (took 3.992060985 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.451899602 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.169518344 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.008493617 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.217237226 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.153039351 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.508981819 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.19236981 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.038916611 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.050288513 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.03217658 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 5.990173939 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.021205511 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 5.899022611 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.084666835 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 5.981412858 seconds)
  done (took 88.766587145 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 5.993245948 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.66660469 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.008631824 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.496136057 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.056849869 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.368437044 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 5.995845846 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 5.979329701 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.12952168 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.244473303 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.015622619 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.067788281 seconds)
  done (took 81.042362817 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.022406334 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.02105708 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.020893506 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.021230745 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.021117895 seconds)
  done (took 6.08216758 seconds)
done (took 2318.992437265 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.222485926 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.458894851 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.541792474 seconds)
  done (took 3.975897298 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.052364699 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.115233599 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.194164779 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.131774269 seconds)
  done (took 5.493239603 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.291840621 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.469216373 seconds)
  done (took 3.736426933 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.421574614 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.002707831 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.55025625 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 5.975440842 seconds)
    (2/3) benchmarking "Float64"...
    done (took 5.983790671 seconds)
    (3/3) benchmarking "Float16"...
    done (took 5.987975222 seconds)
  done (took 18.941143549 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.016580572 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.015043348 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.01703571 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.011889659 seconds)
  done (took 5.044798174 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 5.975916903 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.002926866 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 5.984950226 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 1.961652444 seconds)
  done (took 17.900897708 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.16015701 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.076351875 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.741883251 seconds)
  done (took 4.968988956 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.799253284 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.370798961 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.786448752 seconds)
  done (took 5.931871642 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 1.941011078 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 1.92073396 seconds)
  done (took 4.836997504 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.151536311 seconds)
  done (took 2.127123267 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.471069755 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.473800231 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.855476222 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.882566631 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.033065275 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.318041974 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.30590393 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.275918611 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.685682908 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.504156884 seconds)
  done (took 16.783233747 seconds)
done (took 100.912463613 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.821788392 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.396940209 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.131956719 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.672484978 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.148775905 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.133001379 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.599632471 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.443130437 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.579867477 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.578347232 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.690198751 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.14898413 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.010895725 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.382970095 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.013760068 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.347426294 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.389192698 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.825768124 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.248689495 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.030168577 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 5.990273564 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.272923256 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.38631585 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.288045135 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.40422578 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.121838287 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.102737095 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.361869226 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.502243953 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.116341944 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.136525249 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.304291826 seconds)
  done (took 147.557809733 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 5.976011982 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 5.990063562 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 5.993358707 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 5.987643315 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 4.861951075 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 5.991217219 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 5.988052508 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 5.987010646 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.857951387 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.841341463 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 5.991479759 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 4.825939611 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 5.992061508 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 5.987666873 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 5.99280603 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 5.987191495 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.960884797 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 5.991162044 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.990032201 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 5.991040905 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 5.99082271 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.602097368 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 5.991313419 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.603379183 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.95710729 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 5.990389362 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 5.987655327 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 5.991813242 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.992204179 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 5.990929983 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 5.993342121 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.987708486 seconds)
  done (took 183.255234031 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 5.976159749 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 5.990325268 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 5.990395363 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 5.988003266 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.990014756 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 5.990717505 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 5.988033535 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 5.98772399 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.990644291 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.9905596 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 5.990313422 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.991092241 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 5.994310666 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 5.987246373 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 5.991481163 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 5.988109458 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.990108972 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 5.991114719 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.989424742 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 5.989189875 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 5.989119627 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.987375887 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 5.989480805 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.990394258 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.990778803 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 5.992700055 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 5.987457129 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 5.991251039 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.990173202 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 5.990188503 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 5.992800697 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.988895874 seconds)
  done (took 192.657803577 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.292368833 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.034149071 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.028589518 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.373021434 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.025455365 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.015407739 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.352152712 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.293951638 seconds)
  done (took 14.406139391 seconds)
done (took 538.868365917 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.721915889 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 1.934663843 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.178686152 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.212950549 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.623778139 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.288720585 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.20984634 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.473393153 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.825875495 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.4573155 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.507881115 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.20529484 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.892088559 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.218218253 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.183942032 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.460026094 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.412325271 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.69748788 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.202405656 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.885090207 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.213759783 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.94657539 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.469138048 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.879225203 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.510088222 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 1.99016102 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.188054864 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.415665953 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.208946963 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.213387483 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.052659255 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.446649534 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.225959064 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.220959346 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.441840114 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.460364826 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.403760415 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.431667834 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.171382678 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.739143451 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.896572943 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.684665948 seconds)
  done (took 70.779985966 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.013637335 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.043389505 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.197658934 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.089446486 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.658824622 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.095419126 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.268747788 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.240860222 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.117685575 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.245336617 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.290316563 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.685585909 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.277402174 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.685995936 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.261144959 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.293819619 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.09679396 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.654855088 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.259463567 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.248021956 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.06128314 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.187798724 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.056745265 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.223582123 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.055857738 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.065358908 seconds)
  done (took 33.382376599 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.076940068 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.210798047 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.270227067 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.396545204 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.249020522 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.060149359 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.35663663 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.182157212 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.95936002 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.361240726 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.124376861 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.119870796 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.200339444 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.299513428 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.60650641 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.188287022 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.177616684 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.179504074 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.221474622 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.289118358 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.149857077 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.107061113 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.360708525 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.232240107 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.703958048 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.776897761 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.411598905 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.626542454 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.577441921 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.189545434 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.15315206 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.339547315 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.470868482 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.27388608 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.164459919 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.039249274 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.043790981 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.126811117 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 1.923000427 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.191265569 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.353941901 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.251817651 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.425208396 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.582273847 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.131883543 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.282726204 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.480889423 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.135217339 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.148858572 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.856072744 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.324712951 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.041538339 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.190471035 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.226306342 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.148469199 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.562144623 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.225309098 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.353427395 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.239885479 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.580824566 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.108836745 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.414127675 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.225155189 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.33259272 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.227942678 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.245578906 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.25798669 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.471870773 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.425069717 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.531826025 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.604892234 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.101829823 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.058892305 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.123771686 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.215102853 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.514656069 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.496761631 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.320854302 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.487601125 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.344398688 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.581444279 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.482465268 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.00107877 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.738079118 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.089250094 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.030782846 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.122945851 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.359327084 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.337492615 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.505557212 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.586694622 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.3713804 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.507062506 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.469740106 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.498203103 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.495003366 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.026696472 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.041966203 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.259984076 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.588544074 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.106070559 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.319323755 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.705915276 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.434578704 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.354091648 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.318646509 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.429580934 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.137594523 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.466942766 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.016884637 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.264423782 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.377015158 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.351268415 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.379032508 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.029042435 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.562224736 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.148818689 seconds)
  done (took 216.918870181 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 5.977804348 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 5.991912759 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 5.979269436 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 5.992258744 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 5.977113849 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.626470043 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.06131562 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 5.977517829 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.625936394 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.061519605 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 5.977519835 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 5.977719142 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 5.979219626 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 5.986026696 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.633903238 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.634117475 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.643358518 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 5.977849571 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 5.977376544 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 5.988849676 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.695925147 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 5.980834375 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 5.97719273 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 5.989266766 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 5.980174154 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 5.97743643 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 5.977842562 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.023203618 seconds)
  done (took 148.631389445 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.046001173 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.459445158 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.086377341 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.142456816 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.08637471 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.058313012 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.630902746 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.184913568 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.120143981 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.05932089 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.049138472 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.279888342 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.308555192 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.72073715 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.178837663 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.263343171 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.769990302 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.188225894 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.060122334 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.050777298 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.207747773 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.406853422 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.347622098 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.356049577 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.23939017 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.352791817 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.127384116 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.049322404 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.173209951 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.56188599 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.070696325 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.436138011 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.205051446 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.053308572 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.577825466 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.459892611 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.712016282 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.684919189 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.261286406 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.012683949 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.015035084 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.303021476 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.392404444 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.101608247 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.048755714 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.720267005 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.072555382 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.494437728 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.090514108 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.012629801 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.135349499 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.162857709 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.331618822 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.775386891 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.228217137 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.199110078 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.622715022 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.028588725 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.051798521 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.410385764 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.024248641 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.566080295 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.562372891 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.113122365 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.063445962 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.90177853 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.140993842 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.652851438 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.745782784 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.101320611 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.443625265 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.243100677 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.028849827 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.348703011 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.224011215 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.520776 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.706804014 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.199196233 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.15558147 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.129236064 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.362244456 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.039140276 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.640144491 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.151106799 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.028259481 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.571133605 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.494416256 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.028826372 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.04421881 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.158906379 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.221574952 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.26083562 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.361273988 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.121344238 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.051065876 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.317895923 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.365035669 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.068542404 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.182700359 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.043474962 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 3.171030307 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.272330231 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.034525108 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.489088771 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.443773752 seconds)
  done (took 147.015048687 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.764525854 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.107798193 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.293403263 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.661487996 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.427486293 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.100700091 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.269696818 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.123724691 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.372925062 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.260367151 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.253490534 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.134312374 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.757384386 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.800877183 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.104030489 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.274159159 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.114762029 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.715099588 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.371191665 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.11098363 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.335006227 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.741909712 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.403419951 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.501393926 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.482836727 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.569544952 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.770155692 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.198877564 seconds)
  done (took 47.0126312 seconds)
done (took 664.715840748 seconds)
SAVING RESULT...
DONE!
