cset: moving following pidspec: 30040
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.821488713 seconds)
loading group "shootout"... done (took 1.114028068 seconds)
loading group "string"... done (took 0.672210977 seconds)
loading group "linalg"... done (took 8.629946778 seconds)
loading group "parallel"... done (took 0.168464632 seconds)
loading group "find"... done (took 2.935830076 seconds)
loading group "tuple"... done (took 2.110194833 seconds)
loading group "union"... done (took 14.841680657 seconds)
loading group "dates"... done (took 1.440557416 seconds)
loading group "micro"... done (took 0.216491958 seconds)
loading group "simd"... done (took 4.831816854 seconds)
loading group "io"... done (took 1.095876999 seconds)
loading group "random"... done (took 9.554889294 seconds)
loading group "problem"... done (took 1.518480953 seconds)
loading group "array"... done (took 25.258500879 seconds)
loading group "misc"... done (took 1.887735304 seconds)
loading group "scalar"... done (took 43.536351149 seconds)
loading group "sort"... done (took 3.362014356 seconds)
loading group "sparse"... done (took 12.799150066 seconds)
loading group "collection"... done (took 17.883883871 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.459811476 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.131976411 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.137122947 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.122433953 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.194228049 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.126037155 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.135683843 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.088722902 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.901867702 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.141459343 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.118001504 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.438526894 seconds)
done (took 5.653515107 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.171148021 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.092014689 seconds)
    (2/2) benchmarking "String"...
    done (took 0.084712811 seconds)
  done (took 1.594148979 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072793824 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.063731726 seconds)
    (3/3) benchmarking "different"...
    done (took 0.068047879 seconds)
  done (took 1.620115676 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065748447 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.138457138 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066965758 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067933683 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.067195509 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.06697201 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067042338 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.068273659 seconds)
  done (took 1.962595954 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072886984 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067859989 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066221619 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067968797 seconds)
  done (took 1.695431607 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065603057 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122867719 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065085906 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065574836 seconds)
  done (took 1.736042372 seconds)
done (took 10.281518935 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.140694939 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.801079964 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.785297513 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.126855335 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.25166987 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.371087706 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.123397562 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.184102059 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.088426589 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074674037 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121583598 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.077993655 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.414096444 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.404826582 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.07052794 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.173154081 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.649495682 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.088975311 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.136495432 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.445347325 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.07317225 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087436426 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.083804197 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.07049554 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.333084391 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.156691352 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.676641674 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.096054322 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.06923528 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096119114 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070572728 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.07952616 seconds)
  done (took 10.876460758 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.09195949 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088965092 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067700435 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122667448 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.093185843 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070979049 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075714599 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.067589139 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.09046292 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.125976395 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090969511 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.097891164 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065920346 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069548296 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074467785 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.198109499 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.079143659 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.08069512 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.06823855 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.082120686 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.10692797 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.077289645 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.07787243 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076988292 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.131116219 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.167256658 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096217859 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096863684 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.064654141 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078089899 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.113933251 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125125567 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.065381663 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.063853849 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.118788745 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.093917009 seconds)
  done (took 4.830187343 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.889458436 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.095068773 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081976311 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.073431597 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.10502319 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.112035575 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.121508892 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.121459256 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.098660561 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.076557011 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.151158404 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.676117815 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.171197654 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070782052 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.119108793 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.358841532 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.076689849 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.06942443 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06705296 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070888522 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071083118 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.113325415 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067059901 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.179148367 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.602945619 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071930301 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068322244 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.097744077 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.067385938 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.142809794 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.094995642 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.07210524 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.549171106 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.064749265 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062706881 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088227668 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.091517523 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.17854542 seconds)
    (38/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.093182099 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066342112 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077366493 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.064738861 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107451456 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.077805436 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.514041224 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068423445 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.581873843 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.229374257 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073693808 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072642105 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102502569 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064355462 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067710127 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.835144324 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.147728855 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066866618 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.272832079 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066484192 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066779121 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067337154 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.097958469 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067145019 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.071565003 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073141124 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096708433 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.814130972 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.085422187 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.094806715 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.065361366 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.397535179 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.07228693 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068663891 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069730955 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.084601384 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.111999433 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066873953 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066572739 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.112957248 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.096685943 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089793255 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.06973638 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065722817 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064391385 seconds)
    (83/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.081896172 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.32248848 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.174648003 seconds)
    (86/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.062899203 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064334047 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.066158365 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.479638572 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062831577 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064986372 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066766514 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.209894182 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066062512 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062837099 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.063993078 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098375792 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066901065 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.377469398 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067703541 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.492936504 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069482939 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103393508 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.120330715 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066020372 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.100185195 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068318613 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065270389 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073662519 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.06563962 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064303005 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069314421 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065813933 seconds)
    (114/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.064586217 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066423038 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069254744 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067973874 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067645699 seconds)
  done (took 22.98155118 seconds)
done (took 41.002463407 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.382004858 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077084191 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.077492467 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.077745628 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.077343493 seconds)
  done (took 2.165779199 seconds)
done (took 3.73714799 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.133185502 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.073267555 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062374227 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.098605808 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.067099436 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.099918954 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.106521599 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.102712079 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.067228012 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.068539871 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.068555052 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105772565 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.106129241 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.068668566 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098864826 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.104892562 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069019939 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064195181 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.068601635 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.068848697 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.06885655 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064417293 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.068845097 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.068266235 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099437714 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.068902485 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063851063 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.099407859 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.068940677 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099150105 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.068805532 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.068343123 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.068533491 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100812759 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.068950403 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099790809 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064412006 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.06863912 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.068788921 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.068424762 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.068914358 seconds)
  done (took 4.805284511 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.069414785 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079422222 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081964485 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061025611 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070896616 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082069169 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061710163 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.08132861 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.091806897 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082371022 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.20180498 seconds)
  done (took 2.480436394 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.06821482 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081041009 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082301404 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060939196 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073280065 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083248628 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061805151 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082919371 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085790118 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083492548 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083659856 seconds)
  done (took 2.346165346 seconds)
done (took 11.12536998 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.095576686 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.063802002 seconds)
  done (took 1.640959858 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.22093758 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.494998154 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.955066646 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.091888252 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.070501418 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.084338135 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.198211756 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065834167 seconds)
  done (took 7.851474219 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.096483271 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.070826546 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.067418034 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066005346 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.066883312 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.0682721 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.069777066 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.066768664 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065892323 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.066871702 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069408065 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.069213968 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068027677 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068269419 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.067449582 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.068750373 seconds)
  done (took 2.709085649 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.101849198 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067335326 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.097445768 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060834442 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.071479225 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062018562 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.06995083 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072333974 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.069812822 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.070742159 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.071737912 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.070995309 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071065383 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.070742648 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.07324872 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.072872473 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073082762 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070225617 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.072728796 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073433413 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072170864 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073115585 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073456468 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071610708 seconds)
  done (took 3.367704093 seconds)
done (took 17.068931664 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.173223526 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.073316563 seconds)
  done (took 1.733330292 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.06638516 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.066629961 seconds)
  done (took 1.639260612 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.070942228 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.059040703 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.076254707 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068366279 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059714254 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.059531925 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.074946043 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059716426 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.05940938 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.06001188 seconds)
  done (took 2.154609579 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061238782 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.066808028 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.065312309 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.063096072 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.065359095 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060806817 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.063205506 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.060955038 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.067302297 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.060045554 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.064133714 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.081328938 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.064719894 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081947671 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063780486 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.064344198 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.066070111 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063531835 seconds)
  done (took 2.692496457 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059241988 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059886149 seconds)
  done (took 1.632091655 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.062724034 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059548859 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062562598 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062066828 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.059802823 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.059409621 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060308651 seconds)
  done (took 1.932680667 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.41867863 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.120927857 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.338501741 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.066597221 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.074466958 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.252072721 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.061749625 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.066560915 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.066636949 seconds)
  done (took 3.016522961 seconds)
done (took 16.323140502 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.080571278 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.178969463 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.085647467 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.374606713 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.089163647 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065235764 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.111008745 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.174927265 seconds)
done (took 2.695227208 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.276983705 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.224517766 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.397376676 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.123120771 seconds)
  done (took 3.268984544 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.330875898 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.077079885 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076558253 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066894049 seconds)
  done (took 2.081808922 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.063441301 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069219358 seconds)
  done (took 1.656254252 seconds)
done (took 8.821082952 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07019181 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.08984061 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.060158279 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.065389646 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.062415079 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.062295389 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.061423782 seconds)
    (8/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.061478946 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062110191 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059895702 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.062493158 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.062805277 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062314908 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061919348 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061870649 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062279845 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.062203419 seconds)
    (18/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.06138697 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06173072 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.06018288 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062156238 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062697955 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.06176245 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.062029704 seconds)
  done (took 3.072602072 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077682128 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063574175 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064608256 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.064295308 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.065479929 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064756212 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066199381 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.06540216 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066502587 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.064711933 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067276139 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067019208 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.064633354 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.06675208 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070259904 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067010865 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066612852 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065126526 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065020884 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067135855 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066313992 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065110175 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067020342 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066315574 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.066844374 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067022469 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.064841689 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.065336285 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066431768 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067186156 seconds)
  done (took 3.533638039 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.064504611 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057882989 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.05839691 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.067560101 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.057937608 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058715403 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058666098 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.058214882 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058618737 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059456839 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.058857326 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.058509549 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060121821 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.059203442 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.059446423 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.06039731 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064373714 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078918399 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.059712605 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.05946581 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.063437118 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058658024 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058354934 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.057972611 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.059171488 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.057997912 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.057844073 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060222055 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.059408663 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.060290309 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.059721681 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.063887142 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.064702527 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.059222425 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.069643096 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.064651167 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.059575433 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064081318 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.060505265 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.059671495 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.059162256 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.059487702 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.059847444 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.059117622 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069199015 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.05862972 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.05933225 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.059025108 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058705745 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.0583427 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058301826 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.06027565 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.066837378 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.059847726 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058225689 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059770412 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058689815 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.06041246 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.059230527 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.059131593 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.059314172 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.063191388 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.06136221 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060100956 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.07944048 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061577577 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.069840282 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.059633619 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.060323484 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.063261848 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059953864 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.077497142 seconds)
  done (took 5.951462646 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.069876722 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070745877 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079022773 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070220176 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063833033 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060791819 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064363273 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060868062 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070598729 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065043811 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060768037 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064689023 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070864594 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065247858 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062076716 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070370309 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.064985453 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06410595 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.060621782 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065097083 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062096004 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064972645 seconds)
  done (took 3.004323743 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136788968 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064313103 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.102607135 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.067876161 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066411327 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068376867 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064256361 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064013856 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064585153 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064692722 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064956875 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063994993 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066732556 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064813756 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064755865 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064730221 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064307849 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064447768 seconds)
  done (took 2.826110929 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.075001264 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063811359 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.08720189 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.064185515 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064122613 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063859374 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067451627 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068717777 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.063710085 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.064285928 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.068022348 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063833339 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063689314 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063920583 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063804712 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064192617 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.063825273 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06440573 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067831779 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067956678 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.067137282 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067705613 seconds)
  done (took 3.00887102 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075535465 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063077232 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078886692 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064837301 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059025047 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060204457 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.065898219 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.064793172 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.065885379 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.06395934 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064701125 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060031251 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066757581 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064445502 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.06663149 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064604058 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064443831 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064901653 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064140531 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059526563 seconds)
  done (took 2.844428648 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069740292 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061076318 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061948929 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067857713 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062291773 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.062215507 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06782206 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.062425658 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.062723605 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084627613 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062814394 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062482325 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.078537208 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066123122 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.062727904 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06804986 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068012638 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068201473 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062698993 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062408904 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.084574775 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.062491036 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068208133 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062543366 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06293014 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.062645641 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062771727 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066123072 seconds)
  done (took 3.402131878 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062504071 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061175776 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063246457 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063059729 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.062727537 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.062797955 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.06303643 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.062731692 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063083934 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.063679914 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.062393353 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.062735018 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065644779 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.062879998 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063029324 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.062766866 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062943678 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.063601246 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062985631 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062820228 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.062345896 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062596473 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.062201285 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.062795312 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062548554 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.062304172 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06295955 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062815916 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062513138 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.063290638 seconds)
  done (took 3.437062281 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.071044241 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069768076 seconds)
  done (took 1.690262594 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.060502828 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075267754 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.059335183 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.071902387 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068147014 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063152312 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068599759 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068076954 seconds)
  done (took 2.080654839 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.064637473 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090882773 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.061434547 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063256097 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.064375885 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.127181574 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074295136 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072881882 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075167446 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.063673019 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.061421455 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.073903629 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.060884474 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.074318152 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063075356 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069278939 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067103679 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.077756783 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.072602796 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.05841721 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072555095 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060796098 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059193738 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.060733971 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060010801 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.066677273 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.075802606 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.071879441 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.06882308 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.057686818 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079591192 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.058933622 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060461462 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068378529 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.062731891 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059063813 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.095832261 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059261769 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064284368 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058607164 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.070793683 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.079475747 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073571935 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.076733597 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060508238 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061183404 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058598315 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.060556946 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.062907858 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.069244673 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059315555 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066653122 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.05935217 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.061427744 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.071235314 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.060764985 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066162604 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070190142 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074182048 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071449418 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.06894898 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.074359245 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068037158 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.066419551 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.059981241 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.078312702 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.060568993 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.072484123 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073801195 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.059855952 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074301015 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.05982785 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059030401 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059833462 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094094477 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.06171382 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.061783586 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.06038557 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060384284 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062029145 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070277404 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06599499 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068341373 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064275571 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076454195 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.069829023 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060943694 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067455951 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079405141 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064052388 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060712361 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077367737 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.063949603 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.058450114 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.077177144 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.069018183 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.06094148 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.059883798 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062761994 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072741509 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.060558271 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.057977912 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067621018 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.060638143 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.061806933 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.064559019 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068356742 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060055314 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071108889 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.06570097 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061930891 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.058917895 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064470484 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061378593 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059165315 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070550461 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060604024 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075247294 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065747618 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074040609 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.075438185 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.071268296 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077397716 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.060264738 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059081873 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079275542 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.070491799 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.061780908 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.078831582 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.060064792 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.074178827 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.05981862 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.198758053 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.068929104 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059748829 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061193597 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060527059 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065516122 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.06170076 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062496081 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.066095073 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.069342 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.0733453 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.06171186 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069820177 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061053352 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076580737 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.070576754 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065296842 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063866508 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061014634 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.072636351 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066959734 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069928147 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059496288 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060790757 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060066125 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071167372 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070206247 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062270339 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067677833 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.06450599 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060926207 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060819145 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.06185216 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064374748 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063602461 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060967241 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068268038 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.06921463 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074876908 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066824264 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068287911 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.05764358 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059091581 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.06060403 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058194712 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.063288215 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.067749284 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07424364 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.070345618 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.079592674 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.05861581 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069274635 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060595397 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.07551269 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.072159671 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060071309 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063474946 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.057851956 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060507676 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.068358371 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070757541 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.072937312 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074057943 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.063722707 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.063104835 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.058893759 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.073907326 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.059429666 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069256906 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.069700454 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.06544791 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.06028549 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.061305559 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070037722 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065062507 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060166512 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.074612095 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.064968539 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.058346333 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.072926539 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.058846519 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.069538228 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.058474198 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.062612919 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.063847041 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.060765637 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.068235325 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075791094 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059159339 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061072219 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076271241 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062494035 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062402669 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.068844843 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.075600789 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.064976223 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.068334005 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071058019 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070684747 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065094998 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070402351 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061140934 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.069714159 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063667862 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072626516 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060612655 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079073809 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059189116 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.07606208 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060916534 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072101157 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061164734 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070309003 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061501797 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077677991 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061937358 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061233826 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072608237 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.05912656 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.070212341 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059938739 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065296822 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.06699359 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.07007868 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062091209 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070236279 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.061931681 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.069383613 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.065049318 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.06925255 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.070068692 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.064870441 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.060068695 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.069030969 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071763585 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.069246049 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.061783168 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.062034646 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.201604558 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.07000379 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062078075 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06160792 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068949893 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.065363801 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.066816338 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062019416 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.06297512 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062634393 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068788176 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069081734 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077042684 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071930929 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.066688698 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.068622252 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058453989 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074397156 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059091703 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069041825 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058022692 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.064619417 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.068838243 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059016248 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078215096 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.06025152 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.066941225 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071531381 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067700564 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.062593346 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078432983 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.065728276 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068925191 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068418718 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064765755 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.066924639 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062501056 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068972535 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069840691 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.070880544 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060512311 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.066502408 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068934042 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061578148 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.066254093 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.060508555 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.06764088 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.060756979 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.058019161 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.063611927 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070097045 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.06399356 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064248545 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.059251033 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.05796327 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.059510321 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.065513798 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.063644616 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.068059915 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074476621 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.057867733 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.059891579 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.058806372 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.062768792 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077587505 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070303561 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068600246 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065307227 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059397838 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.06205768 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062342615 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.060623665 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064265685 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.059120087 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.060268888 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070863174 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.062269598 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065053759 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060668166 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061625718 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070378561 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065082715 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.060900205 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.066223667 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.060008915 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.065443461 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.059339278 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.061714787 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.06505369 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.059338384 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.063965178 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.070677162 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077180196 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067670597 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.069225666 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062080631 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.068833143 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076518506 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067737318 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060790871 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.06858838 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058599037 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078713997 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.069948853 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069165215 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070687943 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061267494 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077504362 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064927217 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070695597 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076114998 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061802756 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067619607 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059861085 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076047904 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064710077 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059906538 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068646697 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068250752 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065950187 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.072316584 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.061073272 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068806563 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065519575 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063955666 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061771066 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.061894307 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068982209 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077109344 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.061161112 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065016694 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.06774169 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.06794868 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.063442777 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071447498 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.067120654 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060057811 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.060544184 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.205641067 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.060028501 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.071334285 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059654357 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.063415832 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.063757611 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.058420169 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.065999507 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075569306 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.068868478 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068965252 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.058756413 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058431359 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.077266887 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.062828633 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.062714129 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.067329015 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.0687953 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071125784 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.068609515 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.075823704 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.059551419 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.064640056 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071282342 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.059818416 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.059619854 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.063528713 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062089041 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.06978017 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070492833 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.067813853 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062381293 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.06751464 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074037405 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.061662798 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.064495295 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.064074748 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.059717572 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.069441275 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.067041967 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070175038 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.060026563 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.058477599 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062108085 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.067913407 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.066636197 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.067751197 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.05946218 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.06488974 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072467818 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.06667573 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062565204 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058400147 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062277732 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068268863 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063328407 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.059496718 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.064803765 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.063831573 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067347578 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070320329 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.064792985 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.060152722 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.077938971 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.068747234 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.06942936 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.061828829 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.061869012 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060398125 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.059767009 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071006139 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.058660195 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.060769295 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.064340702 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062279283 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078429955 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067475532 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074947018 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060106835 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.06501087 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.058966946 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069065118 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.064109159 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061017066 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071374693 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.059657954 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075606146 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.072346393 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065968863 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060084192 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065506762 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068741789 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.075799452 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070138732 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069435889 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.063737235 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070753391 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062154934 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071508037 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060203263 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.05920403 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.07077109 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069015472 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073300664 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059735743 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070418277 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062564013 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068672751 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068675367 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062584973 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062264314 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062245247 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068874209 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.063679659 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.068336189 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.063709515 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.075715795 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.05996269 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.07068611 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.068727758 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071450845 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074344489 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073457207 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068826203 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060798908 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06808279 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068547147 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061924354 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065337897 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.064221405 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082524786 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.062169847 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.062337204 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074968313 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067350301 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060700528 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067388557 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.205945259 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.069078821 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.060103254 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.06962974 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.063482578 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.0600013 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.064081659 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.063653963 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.058211369 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.058612771 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.058768381 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069238215 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.063902865 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.05947891 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078146433 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.060978542 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.068372463 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070298983 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.066090043 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.060858308 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.058157692 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060028735 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.07211805 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074394085 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062290414 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067840605 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.061100932 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068464141 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.057782131 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.068369142 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.067365067 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068134479 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058786971 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059168788 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073871601 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074592605 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063847538 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.069503247 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.07137457 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062597849 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082377467 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.069197963 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061864837 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.071561474 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061404786 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058168891 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.05795787 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.06091531 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070574433 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058281952 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.061061315 seconds)
  done (took 41.59823887 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.096274888 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059615297 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.058779381 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058518443 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066687529 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059504898 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058850276 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059880515 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059714189 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06143203 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.060126671 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062735505 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065880283 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071742637 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06682551 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062477292 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058857732 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059579877 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.059124864 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.05987484 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065223172 seconds)
  done (took 2.9665495 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.062126157 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062726655 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.062591006 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063009438 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062103812 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059274993 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062956984 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058853627 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063374962 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059370177 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063447454 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059138835 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059898849 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059232369 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059585109 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060718247 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.064631353 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064039509 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.060263495 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064920337 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061973956 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064448317 seconds)
  done (took 2.977212644 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.06050322 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059568618 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067402107 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.058300884 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.058204434 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.062060746 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058173976 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.064336373 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.064491825 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.064437657 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.069125068 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.060736331 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059667898 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.065506542 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.060037333 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.06085882 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103703645 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061126434 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.061339935 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.059791457 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.062351171 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.069655581 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.059800628 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.05963031 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.068691144 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.06368699 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.059739879 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062636153 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.060839886 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065005368 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.060974073 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059450833 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069061916 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.068929263 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.064271382 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.064035696 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062054101 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.060641846 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058804339 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058467584 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.068272863 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060874072 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058844706 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.059774257 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.067237309 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058429115 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058201844 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.067710996 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058555568 seconds)
  done (took 4.719555662 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.069273007 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.110597399 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064666193 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.092021821 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.071386535 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.064658498 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064431917 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.093708153 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059966269 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.0604167 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.072447562 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.072715013 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061850662 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.063216106 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065541424 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061278504 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061991538 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060929144 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.06446819 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061108757 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.064083129 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065604328 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071730688 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071926303 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062633166 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060818433 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061228173 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062486338 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071134372 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064694011 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062592445 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063522758 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071298677 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.064552801 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061543098 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061255699 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072369475 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061716327 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061186595 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.059696798 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061157817 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.062729865 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.06556946 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072806222 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061592918 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066017319 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061991366 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059603024 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.071459759 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061230952 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065381023 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072659244 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062342118 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.061768808 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06264691 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.071631952 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061600932 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060439735 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.061703599 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.07155954 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060665523 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063780993 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.076750925 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061899235 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064686164 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072612674 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066084919 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062305249 seconds)
  done (took 6.283973667 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067968674 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093549805 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074111791 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074239803 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069561454 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069393227 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069260789 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071672366 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.068897389 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072510102 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.0690118 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.103793414 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065686027 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070609075 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.068972946 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069308102 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.06946689 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069187926 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069221137 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068853994 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069014844 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074456021 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069559382 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074693222 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.07179553 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065881918 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069486622 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.068956026 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074106705 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.068906649 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.071661789 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.068771438 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.068591283 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074090146 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.071524569 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069003373 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.059663661 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06859056 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.068905212 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.068863898 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065312566 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073727716 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.068799479 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.065505334 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06897021 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.06898774 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074383709 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.071609375 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070643415 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072187412 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069137373 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074280788 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06887457 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069424069 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074734425 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.076784134 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074492211 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074317339 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069712035 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074304165 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074752919 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.076842478 seconds)
  done (took 6.09201223 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072266351 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064856407 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077516853 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058563101 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.05851022 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067698167 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058735857 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058990806 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065392119 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.065516048 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06711623 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068189743 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070201737 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067057771 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067821119 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070343727 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067936692 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068101662 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065402677 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067735676 seconds)
  done (took 2.984009702 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.073642182 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.07747448 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.064381356 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067793005 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.06411844 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067997937 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.063782195 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064701012 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064678792 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064379938 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069000422 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069694565 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06504063 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068201847 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068942538 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068068766 seconds)
  done (took 2.718651946 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.062190631 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066686486 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.065250129 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060405762 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061515461 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059615146 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.060656393 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058312504 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061676786 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.073971439 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.061311092 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064473702 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.061561105 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060352826 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.06061233 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064168405 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.062845533 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060826376 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.061274528 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066264118 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.069916366 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.061461288 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062116175 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.059777759 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.061944283 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.067926494 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.060803514 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.061893955 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.05976497 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062102565 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.061682828 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.066229983 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.061688419 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060588594 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.058637916 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.05933592 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.059805766 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062429157 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062606809 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.059855698 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.058251179 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.064588949 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060036887 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060545638 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06126809 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.0622579 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061127882 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.065342456 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.059798033 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062202163 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060247424 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.061877181 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.060137033 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.066804179 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062341352 seconds)
  done (took 5.061167764 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075638566 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063936238 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058197549 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058681686 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.064047829 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064023499 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064088147 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.06398485 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064356812 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058516372 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064338317 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063279804 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064418799 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063686244 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06435568 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063989321 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058389474 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.063883644 seconds)
  done (took 2.794111189 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.065506613 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064438632 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063268129 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.060517549 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060603553 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065191198 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058887879 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.060673054 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060551334 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.062209175 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062217425 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.061580286 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061434062 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.061407112 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065637336 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060695477 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.061411336 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059119452 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.060816507 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058791705 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065137115 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059351116 seconds)
  done (took 3.003640824 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.086082763 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082062898 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.125386311 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.077838618 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.086759089 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.069552237 seconds)
  done (took 2.17178276 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.091306249 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.095281471 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06362751 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063263722 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06838409 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066767661 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066578754 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06684355 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06975405 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070498738 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066814822 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070930055 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070104065 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072313098 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068421574 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068601542 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06680876 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066996576 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.063973701 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074396026 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067339001 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070227025 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066726253 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066532605 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066745765 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071980515 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070021205 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070544988 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066467345 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07058793 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068981046 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067063851 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07057909 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07040029 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.063713676 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070472679 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067031139 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074465985 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06860082 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071952718 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063665727 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068570802 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070017914 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070136811 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069839715 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067138227 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070079979 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067042071 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067166755 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075559728 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068882404 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071985146 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068552028 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070839369 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070455484 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075764155 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071165565 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07279661 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071126964 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07205398 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072769896 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068756328 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072161106 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071093168 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068887438 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072100976 seconds)
  done (took 6.273138452 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101798221 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064433402 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066912407 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070751962 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072063166 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067044241 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067257064 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067537246 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067372317 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064328035 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102570861 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06718642 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072303493 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074479974 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067091011 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067394138 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068202309 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072122835 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064195662 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075795679 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067162254 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071946857 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072127191 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071972712 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070465605 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068704749 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066598112 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066826069 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066591455 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066942539 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06990935 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066754785 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071880126 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063761577 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072121299 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0671594 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066799497 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070218188 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066783029 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068412265 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071822784 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074693853 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067032586 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066745839 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07061801 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066940138 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067200771 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064154402 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066811135 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064271143 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070786204 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070800758 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070865645 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071979976 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067101329 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066881822 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067436759 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067168481 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0673282 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068952973 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072043976 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066747813 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075566712 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067108074 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067174643 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072207583 seconds)
  done (took 6.277887332 seconds)
done (took 132.298128793 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.247849098 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.205972881 seconds)
  done (took 2.085478869 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.072009325 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.163330716 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.072718826 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072373371 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.106085239 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.10491733 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.07347703 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.069652415 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072462016 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.069863531 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.137168133 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.073663032 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.069698523 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.069567116 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.06951787 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.069557328 seconds)
  done (took 3.021150553 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.105114185 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.181317849 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.099779135 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.067674358 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.148021359 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.07400621 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.069652754 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074231055 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.073863859 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.067468587 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.104096408 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.080887615 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.072849454 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.073970979 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.069136089 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073268952 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.073968011 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.07419971 seconds)
  done (took 3.237514546 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.101155916 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089192003 seconds)
  done (took 1.847985142 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.153600783 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.102870748 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.142050586 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.342031151 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.13499928 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.137642518 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.13892583 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.134552808 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.112246817 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.13150352 seconds)
  done (took 3.182378145 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.103343232 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.1020013 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.306092499 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.100129133 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.08031449 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075338991 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.074128277 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079633091 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.074205605 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.075639087 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122122045 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.074315895 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.071360689 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124047724 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099008981 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106142703 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069716319 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.077176378 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.077349486 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.070124424 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.075253471 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079071415 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.176291596 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.075609698 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.097308754 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.072470488 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.074858913 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.071385719 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.071530014 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.075727022 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076658477 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.096656662 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.075713027 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.080546051 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074327306 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.094230203 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.068838653 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.09584258 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.071863104 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070005342 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.072692742 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.076385891 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.071322858 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.077368207 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073976703 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.076433971 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079805653 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069825933 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.074054171 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073495257 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.070968205 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.075426169 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.075429346 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.076409882 seconds)
  done (took 6.34532612 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.116732128 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.113266152 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067593974 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.118393096 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.110685821 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067785922 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.119887138 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.105343018 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.11531378 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067358496 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.0666669 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067047666 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075455461 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.078407501 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.120845874 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.113320847 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068886557 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067927103 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.115915872 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.109459645 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066636408 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.104948425 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.11098994 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107950777 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.065864096 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067230814 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067445623 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067930332 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.076220933 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.07671144 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.068103525 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077598836 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081978479 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072948318 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.065790501 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067370973 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068211839 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.077015876 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078035034 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076198849 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.072476227 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065661905 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.065982868 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066672534 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067151167 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06523377 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.073872484 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075195386 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.074322533 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066214665 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.066750571 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.065842966 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067005643 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074757968 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.07394208 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075577928 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075476729 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066097811 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066590983 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068260196 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078960872 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078190212 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075231555 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067395663 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.075328252 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066539931 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076608669 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080057263 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066622587 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066673459 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066552109 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06731607 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.06884955 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074373808 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.073093242 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066837833 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.066390244 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066422045 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.07473491 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075433426 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067969993 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.077131996 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067193221 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067055519 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066575453 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068144853 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.076071611 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075602141 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067154352 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066115452 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066063979 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066232152 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.065403788 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.07484599 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074545604 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074785502 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074779988 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066983646 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074761192 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075360914 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067324781 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.07428684 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066784919 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066794143 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066620616 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07452549 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072738219 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075884843 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067497322 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.201009613 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073297357 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076970114 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066455192 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.07397098 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074369755 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.0742878 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066131914 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076938397 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066501003 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075137418 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066628313 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077469978 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068316541 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075224518 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066615929 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065935569 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066532703 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.076567435 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068188447 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067915282 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068323739 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067872832 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075154999 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077123945 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066617691 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074589794 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074251908 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.0668003 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075719254 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066555449 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.075117656 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066865803 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066363084 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.065621344 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079028397 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.0661541 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066736487 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066113502 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074695086 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066401966 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077242963 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074508435 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066193991 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076100353 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076362249 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074139196 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077168396 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067063026 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066220195 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06603356 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.06859754 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074660453 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074864987 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06678907 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066119514 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073481105 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.074974532 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.065742815 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.073488293 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073573747 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074161836 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066336281 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066152519 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.07696235 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07836561 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.074421128 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075627425 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073310316 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066260511 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073926994 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075578565 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066252209 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080006534 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066566639 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.077845028 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074158519 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073685252 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076068297 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076535887 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074848556 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.076210859 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.078207962 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066090082 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065908053 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.073866991 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.065945347 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066254084 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.073884231 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067482445 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068608221 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.078845882 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066328356 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.076539585 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.065695262 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.074721166 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065785066 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067064466 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081655766 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068421305 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068459778 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076367893 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068144055 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.076538173 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077956678 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.074232994 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066605798 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066365262 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074391972 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075531614 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066473855 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.201778175 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067277818 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.07509734 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074771899 seconds)
  done (took 18.479793558 seconds)
done (took 39.871794565 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.165161932 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.111341703 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.205966787 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.19489419 seconds)
  done (took 2.428706867 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.097903322 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063203265 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.079145443 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.087516241 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.062900424 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.07342727 seconds)
  done (took 2.162678303 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.19739519 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.172432058 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.239909646 seconds)
  done (took 2.298927668 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.363983713 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.149372039 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.217397769 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.500014205 seconds)
  done (took 3.025775684 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.106789868 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.097640907 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.07488087 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.108642862 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.08229645 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060078258 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.130633449 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067296221 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.097439005 seconds)
  done (took 2.583799114 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.135503803 seconds)
done (took 14.321848516 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.117980512 seconds)
    (2/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.226125216 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.183903289 seconds)
    (4/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.103622017 seconds)
    (5/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.113155523 seconds)
    (6/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.218158115 seconds)
    (7/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.410819989 seconds)
    (8/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.199261733 seconds)
    (9/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.14220304 seconds)
    (10/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.119535749 seconds)
    (11/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.164735085 seconds)
    (12/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.18404384 seconds)
    (13/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.075780326 seconds)
    (14/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.177509838 seconds)
    (15/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.077098505 seconds)
    (16/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.197595398 seconds)
    (17/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.091493426 seconds)
    (18/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.077223919 seconds)
    (19/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.176750188 seconds)
    (20/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.075723156 seconds)
    (21/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.184247729 seconds)
    (22/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.197485792 seconds)
    (23/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.215703396 seconds)
    (24/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.073785772 seconds)
    (25/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.091389194 seconds)
    (26/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.068101223 seconds)
    (27/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072569102 seconds)
    (28/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.077051149 seconds)
    (29/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.067017828 seconds)
    (30/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.242796682 seconds)
    (31/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.092000608 seconds)
    (32/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.171489223 seconds)
    (33/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.064780316 seconds)
    (34/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.070701979 seconds)
    (35/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.07039335 seconds)
    (36/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.185498708 seconds)
    (37/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.172210598 seconds)
    (38/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.070326923 seconds)
    (39/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.079901738 seconds)
    (40/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.0736029 seconds)
    (41/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.076119955 seconds)
    (42/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.196947797 seconds)
    (43/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.192868879 seconds)
    (44/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.145946084 seconds)
    (45/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.063989571 seconds)
    (46/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.08877237 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.064006208 seconds)
    (48/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.064901533 seconds)
    (49/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.082226871 seconds)
    (50/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091249183 seconds)
    (51/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.200833675 seconds)
    (52/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.086513254 seconds)
    (53/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.155305484 seconds)
    (54/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.076129251 seconds)
    (55/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.065751813 seconds)
    (56/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.063354208 seconds)
    (57/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.080390599 seconds)
    (58/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.063358188 seconds)
    (59/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.071845955 seconds)
    (60/341) benchmarking ("sort", Int8, false)...
    done (took 0.148100343 seconds)
    (61/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.121712378 seconds)
    (62/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.204855891 seconds)
    (63/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.072052339 seconds)
    (64/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.074804639 seconds)
    (65/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.066824874 seconds)
    (66/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.07061798 seconds)
    (67/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.065722415 seconds)
    (68/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.137159579 seconds)
    (69/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.063072884 seconds)
    (70/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.061980827 seconds)
    (71/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.077391824 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.077970756 seconds)
    (73/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.080204393 seconds)
    (74/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.066943126 seconds)
    (75/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.092103543 seconds)
    (76/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.243381228 seconds)
    (77/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.071407008 seconds)
    (78/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.14969848 seconds)
    (79/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071109375 seconds)
    (80/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.137136829 seconds)
    (81/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071383805 seconds)
    (82/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.074639509 seconds)
    (83/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.089187879 seconds)
    (84/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.141230843 seconds)
    (85/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.318113491 seconds)
    (86/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.085450802 seconds)
    (87/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.153826263 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.064125024 seconds)
    (89/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.0640387 seconds)
    (90/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.063552574 seconds)
    (91/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.080830507 seconds)
    (92/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.161012348 seconds)
    (93/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.092142998 seconds)
    (94/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.126290829 seconds)
    (95/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.068005326 seconds)
    (96/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.070954856 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.085121001 seconds)
    (98/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.063262085 seconds)
    (99/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.196127033 seconds)
    (100/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.068150311 seconds)
    (101/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.075785734 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.087194345 seconds)
    (103/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.177685583 seconds)
    (104/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071010972 seconds)
    (105/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.231612428 seconds)
    (106/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.080910389 seconds)
    (107/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.215039496 seconds)
    (108/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.070797526 seconds)
    (109/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.071254962 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.087914645 seconds)
    (111/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.063091879 seconds)
    (112/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.063087744 seconds)
    (113/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.063256799 seconds)
    (114/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.164103733 seconds)
    (115/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.091238849 seconds)
    (116/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.195507039 seconds)
    (117/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.216526341 seconds)
    (118/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.167464737 seconds)
    (119/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.080520493 seconds)
    (120/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.066838885 seconds)
    (121/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.083692017 seconds)
    (122/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.070481981 seconds)
    (123/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.075381789 seconds)
    (124/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.067737583 seconds)
    (125/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.065533043 seconds)
    (126/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.158355132 seconds)
    (127/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.064271837 seconds)
    (128/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.063677211 seconds)
    (129/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.072010072 seconds)
    (130/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.06269507 seconds)
    (131/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.121247269 seconds)
    (132/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.063960998 seconds)
    (133/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.166727684 seconds)
    (134/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.063111548 seconds)
    (135/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.063913236 seconds)
    (136/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.074525232 seconds)
    (137/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.139751764 seconds)
    (138/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.064202777 seconds)
    (139/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071356346 seconds)
    (140/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.160283768 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.084644878 seconds)
    (142/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.071513301 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.072923102 seconds)
    (144/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.061792452 seconds)
    (145/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.065136746 seconds)
    (146/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.064297536 seconds)
    (147/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.139208853 seconds)
    (148/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.088048719 seconds)
    (149/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.072396528 seconds)
    (150/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.081947361 seconds)
    (151/341) benchmarking ("sort", Bool, false)...
    done (took 0.139917009 seconds)
    (152/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.086425959 seconds)
    (153/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.063116898 seconds)
    (154/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.086665214 seconds)
    (155/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.074238894 seconds)
    (156/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.156179759 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.120286887 seconds)
    (158/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.062990661 seconds)
    (159/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.066169918 seconds)
    (160/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.23219064 seconds)
    (161/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.166984222 seconds)
    (162/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.141345483 seconds)
    (163/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.079480021 seconds)
    (164/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.069975884 seconds)
    (165/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.063850888 seconds)
    (166/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.173225584 seconds)
    (167/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.070517688 seconds)
    (168/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.07315284 seconds)
    (169/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.063381097 seconds)
    (170/341) benchmarking ("sort", Int64, false)...
    done (took 0.064689317 seconds)
    (171/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.072016684 seconds)
    (172/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.063874905 seconds)
    (173/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.066519633 seconds)
    (174/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.075156115 seconds)
    (175/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.151969687 seconds)
    (176/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.064180773 seconds)
    (177/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.062818124 seconds)
    (178/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.06280521 seconds)
    (179/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.080307594 seconds)
    (180/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.074663828 seconds)
    (181/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.078836296 seconds)
    (182/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.06325592 seconds)
    (183/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.070317822 seconds)
    (184/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.073221295 seconds)
    (185/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.072595607 seconds)
    (186/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.065047619 seconds)
    (187/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.06566612 seconds)
    (188/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.19933118 seconds)
    (189/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.145209301 seconds)
    (190/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.062327963 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.063438524 seconds)
    (192/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.188531089 seconds)
    (193/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074011684 seconds)
    (194/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.34366202 seconds)
    (195/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.131214325 seconds)
    (196/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.064617074 seconds)
    (197/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.19528582 seconds)
    (198/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.084341022 seconds)
    (199/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067751848 seconds)
    (200/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.064097326 seconds)
    (201/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.071428111 seconds)
    (202/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.188101633 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.144555169 seconds)
    (204/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.140815488 seconds)
    (205/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.063630609 seconds)
    (206/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.064499058 seconds)
    (207/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.067769218 seconds)
    (208/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.072693496 seconds)
    (209/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.063950211 seconds)
    (210/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.216717078 seconds)
    (211/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.06471994 seconds)
    (212/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.080051568 seconds)
    (213/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.141931194 seconds)
    (214/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.153504742 seconds)
    (215/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.193640864 seconds)
    (216/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.062125141 seconds)
    (217/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.07079092 seconds)
    (218/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.149917848 seconds)
    (219/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.079599053 seconds)
    (220/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.071283164 seconds)
    (221/341) benchmarking ("sort", Float64, false)...
    done (took 0.134553703 seconds)
    (222/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.065520458 seconds)
    (223/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.118887422 seconds)
    (224/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.070855617 seconds)
    (225/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.064056692 seconds)
    (226/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.070391708 seconds)
    (227/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.063742601 seconds)
    (228/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.065201517 seconds)
    (229/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.06786828 seconds)
    (230/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.064250393 seconds)
    (231/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.196797217 seconds)
    (232/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.065753189 seconds)
    (233/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.061923185 seconds)
    (234/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.159537806 seconds)
    (235/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.063538717 seconds)
    (236/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.071947344 seconds)
    (237/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.07494765 seconds)
    (238/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.074751125 seconds)
    (239/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.079410728 seconds)
    (240/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.066712322 seconds)
    (241/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.065906155 seconds)
    (242/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072133994 seconds)
    (243/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.065062783 seconds)
    (244/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.131362145 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.065010403 seconds)
    (246/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.064875981 seconds)
    (247/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.071802065 seconds)
    (248/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069527898 seconds)
    (249/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.083964727 seconds)
    (250/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.063236234 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.089821218 seconds)
    (252/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.064709859 seconds)
    (253/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.228785726 seconds)
    (254/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.083998256 seconds)
    (255/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.071904473 seconds)
    (256/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.065861389 seconds)
    (257/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.065548929 seconds)
    (258/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.132322794 seconds)
    (259/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.071863371 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.152384885 seconds)
    (261/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.065939412 seconds)
    (262/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.065130696 seconds)
    (263/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.067207771 seconds)
    (264/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.064556289 seconds)
    (265/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.064382927 seconds)
    (266/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.063508719 seconds)
    (267/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.064904618 seconds)
    (268/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.064065545 seconds)
    (269/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.063247397 seconds)
    (270/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.066618719 seconds)
    (271/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.065528895 seconds)
    (272/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.082099167 seconds)
    (273/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.064565171 seconds)
    (274/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.065964848 seconds)
    (275/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.066497703 seconds)
    (276/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.091458781 seconds)
    (277/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.065020168 seconds)
    (278/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.085606319 seconds)
    (279/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.149184148 seconds)
    (280/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.065154018 seconds)
    (281/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.064770033 seconds)
    (282/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.142962859 seconds)
    (283/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.064170904 seconds)
    (284/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.121230835 seconds)
    (285/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.111122902 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.130949433 seconds)
    (287/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.192083029 seconds)
    (288/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.132443501 seconds)
    (289/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.072003005 seconds)
    (290/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.073074798 seconds)
    (291/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.065252531 seconds)
    (292/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.172694114 seconds)
    (293/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.065732757 seconds)
    (294/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.064896882 seconds)
    (295/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.071859495 seconds)
    (296/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.066768955 seconds)
    (297/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.065219984 seconds)
    (298/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.065755077 seconds)
    (299/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.15227011 seconds)
    (300/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.065854022 seconds)
    (301/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.069333861 seconds)
    (302/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.072108586 seconds)
    (303/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.065236213 seconds)
    (304/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.067168183 seconds)
    (305/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.065217592 seconds)
    (306/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.071565192 seconds)
    (307/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.067216362 seconds)
    (308/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.064645378 seconds)
    (309/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.0652788 seconds)
    (310/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.064929366 seconds)
    (311/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073535472 seconds)
    (312/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.077149354 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.142481335 seconds)
    (314/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.065019625 seconds)
    (315/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.066243501 seconds)
    (316/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.115726347 seconds)
    (317/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.065790824 seconds)
    (318/341) benchmarking ("sort", Float32, false)...
    done (took 0.137360517 seconds)
    (319/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.175959927 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076901058 seconds)
    (321/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.242446576 seconds)
    (322/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.06651561 seconds)
    (323/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.069563012 seconds)
    (324/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.070023844 seconds)
    (325/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.06823218 seconds)
    (326/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.066531981 seconds)
    (327/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.066652745 seconds)
    (328/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.065006069 seconds)
    (329/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.065381714 seconds)
    (330/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.065381342 seconds)
    (331/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.066562658 seconds)
    (332/341) benchmarking ("sort", BigInt, false)...
    done (took 0.264996745 seconds)
    (333/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.065570228 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.064996184 seconds)
    (335/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.067299412 seconds)
    (336/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.063914826 seconds)
    (337/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068061359 seconds)
    (338/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.09081957 seconds)
    (339/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.068068867 seconds)
    (340/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.065967511 seconds)
    (341/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.065068354 seconds)
  done (took 36.515255649 seconds)
done (took 38.230709591 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.088201228 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.077033155 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.07553373 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.071960941 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076347361 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076479929 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076795336 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076680216 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077071146 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075388895 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.076193131 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.064091575 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072667626 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080012426 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.073323698 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.08004227 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.076929558 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.080015611 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.065249677 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.07926827 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093029531 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.07673335 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072832855 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078491804 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064842664 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.073631555 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089072697 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.086473092 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.071765613 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.074428335 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.072311935 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.083020452 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071878801 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.070670564 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.074298202 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.070354823 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074500411 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.071440895 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.088792442 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.070453177 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064726438 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076928213 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071797518 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072807045 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.073185363 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.07666481 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.070022849 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079176991 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.064395243 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076462022 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.088553254 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069854986 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.071956899 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.073020065 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069645374 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.07399777 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.071355695 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.076548812 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069996222 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075805932 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.075939321 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.073199907 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064604261 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073331164 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071873644 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071811493 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063559806 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.06979408 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064441405 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.06460457 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.064059188 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073196526 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071347101 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069750057 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063599566 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064504299 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063426819 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076897054 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.070623174 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.074092124 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064784042 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069573459 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069768315 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064813472 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069497719 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076309372 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063316234 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064836167 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063481701 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.078715229 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.070828189 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064121229 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076021299 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070066809 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.07019269 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064266677 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.063409467 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069283064 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072322402 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064546183 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063733882 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070033141 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069306609 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.073558653 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.064685583 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068503491 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069675448 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.063045787 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073320182 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.07140562 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.073599466 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.077252322 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.073398118 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.076760004 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.064500859 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.063295788 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.07410645 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.06508876 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070154449 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.072289709 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.069494734 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.072337695 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.064494483 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.063415588 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069525405 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.070542428 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.064835222 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.064491305 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.064526718 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.074136335 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.071259061 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.063379146 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.064469883 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.073311635 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.073398754 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.063415409 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.063337522 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.073434038 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065040559 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.070147464 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.070228483 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.0732672 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.064304733 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.064804532 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062262008 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062428479 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062260137 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.067821553 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068285161 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063867162 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.07212107 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.211812622 seconds)
done (took 12.776260261 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.064071311 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.1057329 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.077351883 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.079546896 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.076487561 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065903187 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.069706963 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.08485043 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.069116803 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.090503959 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.093607117 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.087526557 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.096832179 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.064063871 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.065708692 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.066127626 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.063808032 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.077468502 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.082767115 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.089483003 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.102146722 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.065325801 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.081581076 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084881747 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.079639205 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083472078 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.066425624 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.066190728 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067990849 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.084453902 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.091856851 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064692846 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065926633 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083482538 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081011608 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073575193 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065657818 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071389423 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.067740913 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.065384539 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066750543 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083368474 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072070379 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072469486 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.06657378 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.066352733 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065504045 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072855881 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.083195662 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070825837 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077387358 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.084500201 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.067357219 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.065429401 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.063533085 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.07257441 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065058585 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065990596 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.066064702 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.065172893 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065343583 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067806023 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070714321 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.071567205 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.06878095 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.070245781 seconds)
  done (took 6.666281113 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.079878204 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.089741699 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078750381 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078694856 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.064798609 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.0656748 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.065410027 seconds)
  done (took 2.331439061 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.064868404 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.071967444 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076840976 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076141008 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.085628449 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.073506845 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.064440614 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.095445403 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063200479 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.07274922 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.081769749 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.07962927 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.069172452 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077916816 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065921361 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.077663843 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.066000241 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072829232 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.07340666 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.079104836 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07010022 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096154223 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.079271313 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.06654544 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.079855837 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.07327982 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.068139944 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066229738 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066048921 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.064987856 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065013282 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088194741 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.071856689 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.077683828 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064671378 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.063325883 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.068417502 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064627059 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.067952208 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.073033141 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.067183736 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.063907052 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.064648796 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.063904148 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.064985798 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.068567058 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.065215889 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.063845475 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.063663911 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.072181586 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.062923738 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.071487053 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.06818275 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070719711 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.070649978 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070319758 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072930562 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065788732 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.073424954 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.072039768 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065314288 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078832028 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.076171437 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.067609582 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075658908 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.072503148 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.070195795 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.067574312 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.063443321 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.063478387 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.064965827 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.076632876 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.067360552 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.066113112 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.06457826 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.068748142 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.067560868 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.079053795 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.078751672 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.076932171 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.066289815 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.063924168 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.06788841 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.078660852 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.06851483 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064142823 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.064983901 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.063408136 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069068448 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.06396296 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.068492222 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.063700591 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.070617182 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.066269776 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066125834 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.071685188 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064264991 seconds)
  done (took 8.62478461 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.066730544 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066218543 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065057976 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065275419 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065287304 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.06548474 seconds)
  done (took 2.23901764 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.087205021 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.064446891 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.076191278 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.064278333 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.08642671 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.070816411 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.071288452 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06658098 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.080627277 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.074988439 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.070574983 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.073389182 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073815446 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066034401 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.070338246 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.065457182 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.070339136 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.067600737 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.074904557 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067076467 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.080200088 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066119488 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066353444 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.076299498 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.067213792 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.065081269 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.06574563 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.074552052 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.073882685 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.065898957 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.065871338 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.067192635 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07291084 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.066058599 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.070500217 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.0726666 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.063961863 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.069630167 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066988409 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.067386616 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.072967645 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066269226 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.066998424 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.069467833 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.066321282 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.07257059 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070301948 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068043156 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.070034738 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.069839285 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.069593989 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.064666904 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.067291334 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.069631683 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.073221459 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066240993 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.06956691 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.070372443 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.065861892 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.07247698 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.064096393 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.066987883 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066003692 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.066800616 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.06892316 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.069471869 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.072738498 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.065917402 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066187924 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.064570666 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.069883786 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.064034437 seconds)
  done (took 6.816882807 seconds)
done (took 28.468068871 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.535922604 seconds)
  done (took 2.320834191 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.610015304 seconds)
  done (took 2.435299396 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.613785462 seconds)
  done (took 10.437252385 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.331835546 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.395274976 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.722309452 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.129385616 seconds)
  done (took 3.43718883 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.735113565 seconds)
  done (took 2.568583193 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.224726924 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.216584653 seconds)
  done (took 2.274506729 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.335629319 seconds)
  done (took 2.165208922 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.12041351 seconds)
  done (took 2.940420303 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.229127872 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159554106 seconds)
  done (took 2.223311472 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.529685191 seconds)
  done (took 2.356293974 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.213439048 seconds)
  done (took 6.045296079 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.226593618 seconds)
  done (took 2.094907174 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.226920042 seconds)
  done (took 2.055869373 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.143934052 seconds)
  done (took 3.964380396 seconds)
done (took 49.156017944 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.080971703 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.083539332 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083219841 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.07837957 seconds)
  done (took 2.131174609 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.071404623 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.067920828 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.070732033 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.070637321 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.068400238 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.069416658 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.070180231 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.066851654 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.068419422 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.066957624 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.065844201 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.067340184 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.06963115 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.066962975 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.069898802 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.070664881 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.066868433 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.067390983 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.069767308 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.066902288 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.06946339 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.067563504 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.065349117 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.066686232 seconds)
  done (took 3.470474213 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.075327013 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.069162422 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.072305593 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068517904 seconds)
  done (took 2.121711236 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.073665938 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.073392995 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.081913239 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087065307 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.072500661 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.073990993 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08038119 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.084021103 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.062531929 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.083649038 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065151863 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064088336 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.063963556 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.082370597 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.08008369 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.059228861 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061090173 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.073860001 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.072897271 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.07560143 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.065283514 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.0628267 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.072973778 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.074084076 seconds)
  done (took 3.584161635 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.079196539 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.062613593 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078139986 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.087364998 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089034825 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.062399238 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.075871989 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.089437994 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.12408432 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.062901081 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069187764 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.062905676 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.10118259 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063172541 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.07850644 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.105318037 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.108289272 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.066637083 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.095632175 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.062756114 seconds)
  done (took 3.467962655 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.073407901 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.066318525 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.067546652 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063196488 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074157032 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070419012 seconds)
  done (took 2.256348105 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.065430831 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066324918 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.066727625 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.069424236 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.06515438 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065040053 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.064967282 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064217375 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064445792 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.065261695 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.06533877 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065920563 seconds)
  done (took 2.621436172 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.150419619 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.066530254 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.066944165 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.063486522 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.068408211 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064078467 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.077949439 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066044086 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.08126048 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064083636 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.063886101 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.065833178 seconds)
  done (took 2.734657806 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101224225 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108293913 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14188312 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113611791 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112955154 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093359526 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122179743 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.091917955 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.155270015 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133245734 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11306999 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09025131 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083921686 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.066655686 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096746378 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114781877 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133232482 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.069672563 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109987098 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.160997521 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130478359 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.131447208 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144808421 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11305408 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08725416 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144696447 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094190209 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099598014 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120900391 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123135946 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115488976 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.09445659 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.068546962 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.067855261 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145010765 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.099432267 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117301567 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.089895234 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101948155 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.0850213 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104349087 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.066557442 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083708232 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.109789831 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081452708 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127472438 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.084876566 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112173167 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078285115 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.13528775 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121568272 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098235771 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085234301 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104746314 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.292059975 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110026006 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131666906 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103918411 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080210496 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.115506585 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.098953771 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096804155 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104251071 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077179578 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.172297199 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085412406 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.108312475 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108369398 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.090736692 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091683815 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105734351 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132218945 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121827901 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.123614189 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134135456 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091875562 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118886627 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.096310389 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.125317236 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103022828 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.072098143 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.120839708 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.128181218 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09884445 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10058732 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130031255 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091001732 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077121067 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.098588059 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.117945156 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079396193 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.112138892 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079989761 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.108655714 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133745159 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096626741 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111493087 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11630222 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07517179 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15144649 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106004938 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06952435 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.113738517 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111644243 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154707922 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092781814 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.073288439 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.25005517 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100927701 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.145192723 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104712803 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077277334 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107249634 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135659027 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091791823 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.164611914 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.092348863 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136427773 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109219846 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084566092 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072212524 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.086849204 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109142118 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104178236 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108822474 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087146472 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.080677067 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084590853 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108817038 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089151991 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07787547 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.109550939 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098111581 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.071986334 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085837287 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075875296 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138563351 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.075714503 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134725051 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121784222 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.075696193 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103128375 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0950138 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105090051 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.094342809 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113240573 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136794553 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.115275578 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086703934 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.090670292 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10582086 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.140256762 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.123767278 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08925456 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.073915132 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097530347 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108642325 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.094347409 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122753512 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09669751 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105452736 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099677453 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138226488 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142523978 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098826638 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098605393 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104805241 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.274752068 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074225041 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151979241 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100859276 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114690575 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081720027 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136958048 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.110980946 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086272615 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08482619 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097362784 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.100738939 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103376296 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139406578 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.092495338 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.069187275 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090081054 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140537748 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073301565 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106955772 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.087752693 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.090030754 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115119884 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.089898781 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078445894 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.065761179 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124838676 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.15484085 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.067613083 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113331687 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.109632591 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09996491 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.11834179 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.066485461 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118326471 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137833039 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117518093 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140453602 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146431358 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116358554 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11855522 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.113897542 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.105062444 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07828499 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.124730115 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131607376 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094025364 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08934763 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132587233 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114628853 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.133133824 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.114371047 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111742189 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.101970125 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.257177444 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099907498 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.098623326 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140351684 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117413146 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.121182759 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08396807 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105168125 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116496595 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134373706 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080899512 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141577843 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.083001846 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11702519 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.07638676 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123100554 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.078820497 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.114900801 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078260773 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100264871 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068427822 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.072804789 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.14016618 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.110915725 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105273303 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099575592 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137107671 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.136086943 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.080023831 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107709026 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114621096 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101047504 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116191502 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108530466 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.087939353 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094601747 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108107618 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084835489 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.080947188 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.114886129 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094349961 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126865828 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083137703 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073687272 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141492357 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104360662 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095275522 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077291407 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107531756 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.120616659 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092246857 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085328888 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114426362 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104525777 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142303058 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090499313 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.097311361 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.125171163 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079975327 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.091942046 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.068605299 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.082701591 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.227437454 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.126204361 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07564499 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116083877 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067868162 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130145951 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085925069 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.092065807 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100993058 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11061716 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126986874 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094141786 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1401538 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088842218 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117654687 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106205267 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093485166 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087378108 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102299695 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099828345 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.121897391 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.095175285 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122101105 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142462715 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103865902 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.141610965 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090735007 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121758423 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106504115 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.124170423 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112024243 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147105105 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137853278 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112130493 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111680698 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074045478 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094637742 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104992282 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.11136727 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.175348886 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126199013 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.071252573 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.106641979 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093091842 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107975199 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10349688 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081014485 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145470291 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099451558 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.085061912 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110250489 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.089161454 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10133244 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07364148 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092752059 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.248333989 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091809816 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095884377 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111671336 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12448357 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109722083 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.138880246 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.095721053 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.089405007 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.114818227 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107470198 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107785272 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083494645 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083570308 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134029895 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114833738 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.124913359 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.096747297 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105814623 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10783347 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096793529 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12139838 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107482154 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.124669015 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077360959 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.073010418 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.066565013 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.07099997 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122957129 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107743583 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111330717 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097935653 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.07157013 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104283006 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105726676 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071218871 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087978801 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093879092 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098591627 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.091222395 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106541386 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.1136263 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.089681325 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101762839 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09671648 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143147935 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.097268259 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087125108 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140436976 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147305075 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087714617 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091811294 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.069830146 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078231839 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113505906 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150499485 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.152030592 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.074743536 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083949755 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.083225539 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084326235 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.222038092 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.083051844 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.086774124 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101742148 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096101893 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.109707077 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101103658 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072773944 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100104108 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096962331 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091231511 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.103003634 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11824372 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124556192 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.140623615 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109414185 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106432654 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075340025 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.079771087 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074693534 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078376527 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.101345078 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078232373 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075573421 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141558135 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.091185015 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103815083 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10649742 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085517448 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074018808 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134746658 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.068530552 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134786404 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.07023477 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081615775 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081804482 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078066829 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093220305 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139082142 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109756255 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112621992 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106266787 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104103993 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140640413 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155322598 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077451581 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.139775433 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072955889 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072716923 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.072954005 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110287278 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08782401 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11246422 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139093332 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088470882 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101659296 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076327866 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141355858 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.096041594 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101039453 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084073138 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.075990612 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.294904347 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077534288 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.077748447 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087240498 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107749273 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.069686008 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100584124 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081609391 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076654334 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138593118 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.626866563 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086966599 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.072242461 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092697757 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.137715007 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.124116707 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091948684 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10530687 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.115144676 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096559941 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.091943758 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103891838 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.178464382 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071499054 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091055322 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.100156295 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094802654 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099473947 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.098468875 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.083517623 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090307301 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.083482412 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076751011 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104976694 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087789359 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09511945 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104134994 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080221798 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.084100645 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.127139275 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.100684682 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.079456133 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085770631 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102523086 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086209647 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098798056 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.066085472 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110348084 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088471968 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114466766 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092170478 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104395288 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124330594 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08701603 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135309355 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.104802495 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119824628 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084823716 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.075943456 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125712347 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.08629406 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076575056 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.299513546 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.092403942 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.090237434 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101115692 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.093207927 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110176357 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114193371 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108469293 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094691434 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077419724 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099662101 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.101363936 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083626431 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077441301 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.073248356 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.075288043 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106605108 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084470703 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082766393 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114051164 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086047049 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100362842 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.097340282 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.11876917 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080506696 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097761852 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106245897 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089244231 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106568013 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097451354 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125358908 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172295026 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122477535 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125500282 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131114012 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.074093496 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.073174922 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.066195614 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112485783 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.07660291 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.086039107 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077985359 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130533064 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.079683881 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108552329 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.227888221 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077456453 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.092627418 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096040284 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.068741439 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083070459 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105783381 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084701073 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077544317 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11649717 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081028478 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125284082 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108373508 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096962284 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091851287 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07854729 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111569275 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.102053551 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.125750518 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092008776 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.227454739 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112119421 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100531214 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134942894 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.070619858 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078233411 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126558485 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100196571 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129119837 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077215326 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145725066 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.139088674 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096990035 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130397643 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06817126 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080672155 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08614987 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.121602009 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081689967 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107724767 seconds)
  done (took 66.704326765 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.146175686 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.145210905 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083875533 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.109504482 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.191275506 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.20332057 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.131020954 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.114964408 seconds)
  done (took 3.107321677 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.065700988 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.080023672 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.077919894 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.201882621 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.092855337 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.06484742 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.070257807 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.078578306 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.066022588 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065862837 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.100603107 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.066356302 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.066219357 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.369793966 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065311715 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.069542495 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.064768772 seconds)
  done (took 3.637057919 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.329222076 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.466720651 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.222416945 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.794593554 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.134049216 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.481175618 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.073936976 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.079401208 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.56242837 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.365096079 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.127746023 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.085010256 seconds)
  done (took 18.69164233 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.073097358 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.075816984 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.077471311 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.073762416 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.073900673 seconds)
  done (took 2.341974987 seconds)
done (took 118.726193332 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.080442149 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.167453857 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.065055782 seconds)
  done (took 2.226100194 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.079365754 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.078132459 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.077864456 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.075293479 seconds)
  done (took 2.285582255 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.072292144 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.073810136 seconds)
  done (took 2.111360575 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.218498235 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.171700381 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.086792948 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.07901976 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.076489276 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.077734442 seconds)
  done (took 2.210590734 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.068764516 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.068381581 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.068656689 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069464028 seconds)
  done (took 2.23889882 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.065734451 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.064683773 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067586709 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.070220894 seconds)
  done (took 2.233744426 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.082070024 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083060252 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113054837 seconds)
  done (took 2.244383087 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.079867622 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.079840246 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.075221778 seconds)
  done (took 2.201605464 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.106345423 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.093745511 seconds)
  done (took 2.164268532 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.077015567 seconds)
  done (took 2.047350485 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.086707864 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.094640681 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.136688211 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.103850426 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.136911162 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.123415114 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.074231492 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076132919 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.072745117 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070632153 seconds)
  done (took 2.940773122 seconds)
done (took 27.434938864 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.075855732 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.365033893 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.356824761 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.083691442 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.668632668 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.354065772 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.980078915 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088077271 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.09791111 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.065155802 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.081927401 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.646655327 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.971258857 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.319320708 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.955979525 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.317924462 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.648586097 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066507082 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066953256 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06770171 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.963318326 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066905779 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067222761 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068011169 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.649186383 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.37432959 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068601668 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.32415517 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067117075 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07159243 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.356821384 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067668023 seconds)
  done (took 16.358202882 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.067616418 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.119777921 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.069485021 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.081098658 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.067300502 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068830997 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070576568 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.067997404 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.110573536 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067907678 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08524213 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067070551 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071006055 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068448092 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.08768386 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067357535 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070272414 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070651496 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067353558 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068596474 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086164966 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06699567 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067950116 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068519467 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.0679297 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.080736588 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068537134 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067469514 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067923693 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071663004 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072184032 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069260395 seconds)
  done (took 4.352232453 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.118316643 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.122438027 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.0704753 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.10576499 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.11429122 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.067437642 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.147204142 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088561514 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112284277 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.065804172 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08406952 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06754443 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104817785 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069421947 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.0886305 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067429561 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070191155 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068286554 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067398091 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06809999 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086848106 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065421659 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066109008 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066502095 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066300085 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.080884205 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067185579 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.065632463 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.065933936 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.069823029 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07292547 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.06949896 seconds)
  done (took 4.587950951 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.06695484 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.068326783 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.076696963 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.07787764 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.063711399 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.065968976 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.066841063 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.064100449 seconds)
  done (took 2.529552462 seconds)
done (took 29.806272965 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.076267644 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.065313046 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068348731 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.084400637 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.071280119 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.067647086 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.062278163 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.071858918 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.068768676 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.0682785 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.070533888 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.064102072 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.069181037 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.063980974 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.071010207 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064518035 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.071086396 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068684146 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.069426209 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.070471181 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066960321 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.070251526 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.073236895 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.069114352 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.069354748 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.06929464 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.074095321 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070938025 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.065004042 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.068261351 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.067604431 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081006857 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.071756527 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.071586794 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065414182 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064846542 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.068911435 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.066809913 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.071455844 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.07447598 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.067071994 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073903499 seconds)
  done (took 4.868774321 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.086135002 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.091100507 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.083993783 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.079036051 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.104153112 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.079274267 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.088188684 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076645839 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.074554114 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.089281102 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.072638186 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.077829161 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.079730185 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.074277529 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.076774033 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.073513302 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.078593624 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.072335363 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.077095624 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.076780109 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.090259513 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.070439534 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.077820707 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.078606791 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.071951428 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.078191703 seconds)
  done (took 4.072002352 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.070046002 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.085145289 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.089597212 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.138496069 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.107900322 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081182243 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080604271 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.096594613 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.099966035 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066961681 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.071143311 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.093758919 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095732346 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073905445 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.105200891 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.085030763 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.079648456 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068446724 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.07388457 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.101832115 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.089240208 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.085807475 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.098857674 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.08710841 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066232199 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075878493 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073992754 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.083049353 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.074137086 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.079614877 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.071145928 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.070789949 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067719733 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.079828386 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073952668 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064611355 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.088786372 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080127528 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.083292626 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.10527105 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.076949499 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068598666 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.096936973 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.132056008 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066263804 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069401841 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070798845 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079726186 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.06792858 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096241132 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.086046918 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066260175 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.085721137 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068092173 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.06804835 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083981868 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068191099 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.068660416 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.079099054 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.110560127 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.086829985 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.071704032 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.088417484 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066209123 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.07783012 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.067653882 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.067912057 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065203405 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.102593019 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.073398674 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.119596826 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.0677771 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.06446022 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079425128 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078275755 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07243147 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.065855397 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086388731 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077431771 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.068726536 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.076545125 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.067680198 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.068505832 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.100997259 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065494102 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064524588 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064350761 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068703769 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.069703733 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.066772161 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080242999 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066017106 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070032608 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.081976727 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.06633209 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067225071 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069261727 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.067935447 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066260049 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077294751 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.070880409 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.067978254 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.079072871 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.067137655 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.069528308 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.081119958 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076104706 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.06610974 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.067538735 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.069128733 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.068261527 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.07099781 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.069824486 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.068207196 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.073204575 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.074159857 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.07239863 seconds)
  done (took 11.158824642 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.158609559 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.149466731 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.066016334 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.144114269 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.072915555 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.069626711 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.145665327 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.084879839 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.065651432 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.066677643 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.064706491 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.09338082 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.088545298 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.1041075 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.071276948 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067221882 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.092488926 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.100733138 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.151492256 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.146755876 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.09038487 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.073748769 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069676316 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068293566 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068853463 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.07634576 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.085772227 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076520031 seconds)
  done (took 4.649975871 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.072791352 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.080476078 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.069354161 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.089599517 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.08587229 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.067305577 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069150921 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.068509489 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.084087588 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.073981685 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.067459245 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071581632 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.070873806 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067586034 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067994515 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073627532 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.074128342 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.066216433 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070652276 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071433568 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077812636 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.093377467 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071771853 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.067268351 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.06968055 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067062422 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.074244848 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.076971602 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066664006 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.097226142 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063979124 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.07148353 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081394976 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.0683765 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066485631 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067360715 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.066754312 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.066720637 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067373008 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.0651794 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064963566 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.072339609 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.065567755 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072942983 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081191182 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.074656452 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068076461 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.0720534 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069124224 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064108202 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070239267 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070198612 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070082847 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075753827 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070871568 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069380424 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068530223 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098270777 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.072959743 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066180756 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.066205143 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065321708 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068730916 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075582623 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.083951312 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.068731918 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065697101 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067160913 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.072258484 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081153296 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066606427 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072039544 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.063990005 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067104121 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069227774 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.069882851 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068558319 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065150795 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067064278 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067102501 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067443939 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066399973 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.066823439 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.069563414 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064816338 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065323724 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.067687267 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068106042 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.074227991 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.065816034 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069775938 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068193626 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.065823436 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.069824172 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.072588059 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.069859125 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.087438708 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.076126925 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.067645399 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.064844358 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.081903305 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.068522118 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066197268 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.072495382 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.071545256 seconds)
  done (took 9.519043872 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.087601178 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.067117795 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086515279 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.093177735 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.077272917 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.072217901 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080846704 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067927048 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.082948836 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.066563664 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075987884 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.065010616 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080135039 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.076222467 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.068502417 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077499835 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.069223118 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087576969 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081718218 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.065579136 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.076122835 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.079292745 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.079483428 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.084891267 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084424284 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085593082 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.079316583 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.069473679 seconds)
  done (took 4.208248544 seconds)
done (took 40.446143063 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.056525803 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.226775212 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.058636048 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.324115037 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.177496208 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.079278173 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.283507555 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.056173744 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.201710864 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.085395016 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.368426026 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.443562265 seconds)
done (took 70.420391946 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.120039003 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.207693304 seconds)
    (2/2) benchmarking "String"...
    done (took 2.279178037 seconds)
  done (took 6.46863337 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.647755009 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.047196562 seconds)
    (3/3) benchmarking "different"...
    done (took 2.098823447 seconds)
  done (took 8.774527166 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.150016694 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.681984418 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.309972308 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.049702987 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.051524616 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.459002567 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.857888906 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.5518929 seconds)
  done (took 33.948457803 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.366239383 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.302729635 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.803602514 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.822573081 seconds)
  done (took 17.325530403 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.654939941 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.308034067 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.312036502 seconds)
    (4/4) benchmarking "different"...
    done (took 2.333636992 seconds)
  done (took 11.652639746 seconds)
done (took 90.537012375 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.049830072 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.480317494 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.061055146 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.208637914 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.12217349 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.081868514 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.051934776 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.050194058 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.052414023 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.047856968 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.46051195 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.045855176 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.052099862 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.083114031 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.042234819 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.076163886 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.568385413 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.049093955 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.097322223 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.565620524 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.551981277 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.057935121 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.055919559 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.10818828 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.08177332 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.099152191 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.650664129 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.044805778 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.653027813 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.050015829 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.048420836 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.051749313 seconds)
  done (took 213.681102294 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.051496719 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.934019107 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.014033409 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.0842021 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.322827456 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.24231342 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.190616476 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.420444313 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.048750663 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.063476514 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.202344945 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.053946042 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.221883091 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.98342186 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.045884875 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.140100685 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.209678835 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.225422777 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.045349347 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.235335245 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.063046874 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.048532429 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.002234652 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.178972703 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.06233805 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.127861266 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.072737377 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.29756121 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.242386783 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.206651703 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.078651113 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.065932347 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.272231103 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.91845828 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.072931968 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.068959227 seconds)
  done (took 179.50058592 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.228027188 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.072446038 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.116011129 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.191318517 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.819615238 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.786051985 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.0611096 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.051932202 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.05002835 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.059815892 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.050709362 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.120521733 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.668341787 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.074049368 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.045551732 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.052178544 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.467778073 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.051566582 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.054569794 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.051388785 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.112989615 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.426815092 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.198966047 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.058063343 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.060192685 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.19329501 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.056131279 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.046608903 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.188361971 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.052356101 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.127322039 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.187041601 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.058307785 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.134759597 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.060252904 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.551799278 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.054097843 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.049532569 seconds)
    (38/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.054473382 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.052467123 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.120795191 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.049793661 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.157672503 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.149643386 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.049914751 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.067542124 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.132020498 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.728142414 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.051911387 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.050184552 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.053748225 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.056196862 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.060364714 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.615385599 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.05630461 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.073863164 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.675454759 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.06060933 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.053170658 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.049475647 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.053664266 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.057729535 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.06425954 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.091900961 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.857230453 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.440611256 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.442384463 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.862342885 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.053474533 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.625895034 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.107873142 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.06065223 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.13372213 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.057500648 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.056672413 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.054749052 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.05642676 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.174188211 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.163292074 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.057452935 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.187325066 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.057601765 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.055320059 seconds)
    (83/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.055127547 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.614276611 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.71132707 seconds)
    (86/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.050094907 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.057042105 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.06747935 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.110263886 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.059053048 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.058335912 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.055712529 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.187341322 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.059896382 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.057216639 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.058330399 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.153276247 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.058223895 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.303375161 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.284168635 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.126319128 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.30083514 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.286604363 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.058533812 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.05496216 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.068053238 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.061585338 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.05442957 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.064452082 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.06043445 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.054715409 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.056619608 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.061226029 seconds)
    (114/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.055396801 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.058640756 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.056874421 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.068512734 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.055601778 seconds)
  done (took 442.265616856 seconds)
done (took 839.711568874 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.761707605 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.780460035 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.679124545 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.717388327 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.68245115 seconds)
  done (took 15.611953633 seconds)
done (took 17.603765441 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.089176934 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.080387734 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.065405413 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.12475056 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.088690648 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.071954213 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.104591468 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.109464927 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.089161411 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.070192732 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.118603875 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.074471161 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.094660786 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.094731075 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.1509029 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.101817981 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.074831555 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.068964605 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.146254578 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.076228908 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.074616848 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.071622373 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.073179537 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.121823356 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.152069222 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.084872834 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.072689633 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.114784396 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.086929549 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.120199572 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.129905314 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.094157784 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.10571842 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.14371834 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.138314259 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.157991108 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.082297066 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.137352056 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.082265264 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.161384836 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.126844201 seconds)
  done (took 88.22250367 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.070646425 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.205700398 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.289144766 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.102941782 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.066857875 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.29193601 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.129941962 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.192351249 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.209397317 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.295046395 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.297610983 seconds)
  done (took 26.144999341 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.069372721 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.207743875 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.299788059 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.105084812 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.070140062 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.292581065 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.134908418 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.212548348 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.217110373 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.29812735 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.30664718 seconds)
  done (took 26.213507498 seconds)
done (took 142.576086699 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.44220817 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.090297186 seconds)
  done (took 6.530405104 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.060618475 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.086100139 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.218095986 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.067811192 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.066904699 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.063500047 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.067153792 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.064056963 seconds)
  done (took 18.690354379 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.061300652 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.064085128 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.063637868 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.061551465 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.066738757 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.06324037 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.065791208 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.065518144 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.068352531 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.060246014 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.067108542 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.064421067 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.065605006 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.06397752 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.068331644 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.067237561 seconds)
  done (took 35.03698481 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.066715603 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.067301217 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.066099486 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.068591972 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.06924313 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.067167842 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.066706362 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.068610595 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.06512305 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.067750891 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.066119234 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.065134652 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.067072197 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.066556994 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.062824952 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.065122223 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.064774487 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.066450268 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.069715004 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.066836161 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.067807549 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.06572618 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.069150029 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.065093651 seconds)
  done (took 51.600089596 seconds)
done (took 113.8659534 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.236673599 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.577546018 seconds)
  done (took 8.811742566 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.072126725 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.06775732 seconds)
  done (took 6.19608233 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.065771473 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.070370797 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.066876855 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.07376827 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.072665698 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.069204798 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.061693587 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.068603024 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.070765179 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.067554366 seconds)
  done (took 22.684195075 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.070020143 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.067994182 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.068729111 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.068253596 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.067134119 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.071421645 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.072631154 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.071671993 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.070395109 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.071660952 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.071287166 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.072603372 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.073261615 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.068813899 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.068826104 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.064982324 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.070812947 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.067586919 seconds)
  done (took 39.261021872 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.070172133 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.075165354 seconds)
  done (took 6.145336076 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.068848385 seconds)
    (2/7) benchmarking "second"...
    done (took 2.074632642 seconds)
    (3/7) benchmarking "month"...
    done (took 2.068039787 seconds)
    (4/7) benchmarking "year"...
    done (took 2.069703307 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.071549255 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.066431983 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.072949974 seconds)
  done (took 16.490199972 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.070608992 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.224348235 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.280047783 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.664729672 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.067480682 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.070667451 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.917936343 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.074054045 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.073827223 seconds)
  done (took 22.442515817 seconds)
done (took 124.033417777 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.876268207 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.066733754 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.350708152 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.121056424 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.087161345 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.361727974 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.10196584 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.60911388 seconds)
done (took 44.577755392 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.175255675 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.066203495 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.094714774 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.093541445 seconds)
  done (took 23.252966688 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.067642562 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.382550769 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.087955841 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.081789577 seconds)
  done (took 23.629969824 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.446732356 seconds)
    (2/2) benchmarking "read"...
    done (took 2.412018489 seconds)
  done (took 6.868122965 seconds)
done (took 62.928765344 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.076086403 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.072287486 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.071423441 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.073167343 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.066332961 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.070827088 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.074241091 seconds)
    (8/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.07235394 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.07072471 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.072812148 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.071354699 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.069593524 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.075204531 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.075748817 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.073771352 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.07137405 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.073322231 seconds)
    (18/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.070903956 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.07626422 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.068295602 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.064962189 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.075716696 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.072727205 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.072579657 seconds)
  done (took 51.733568973 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.073263328 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.075466287 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.073675586 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.07279161 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.072561826 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.072292349 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.071158166 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.074143557 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.071383027 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.070790135 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.066881839 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.073776099 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.070957674 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.072735892 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.072043806 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.075179207 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.070613347 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.072490792 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.073081014 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.072591496 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.074758279 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.069963747 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.072011014 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.071398989 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.07269684 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.070583789 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.069800532 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.077734684 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.075940479 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.074458005 seconds)
  done (took 64.17985433 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.077775152 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.075437382 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.07523971 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.07245026 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.07614374 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.075597357 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.078469831 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.075574682 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.072070657 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.076036858 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.077225569 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.076051106 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.073944348 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.076735769 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.076094254 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.075411232 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.07766071 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.075677279 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.074985313 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.072519043 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.075585273 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.077323659 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.073638789 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.073764745 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.077711668 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.076207053 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.078655348 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.078325972 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.077273894 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.079672819 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.07462909 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.079135575 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.071534008 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.074425534 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.076070831 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.077424831 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.073224616 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.079265233 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.075550576 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.074234056 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.080979579 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.078150157 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.07540191 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.078743006 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.079886881 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.076655997 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.078089097 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.078589796 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.079394816 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.079516775 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.07681018 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.077439817 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.077353891 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.080640973 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.076663453 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.078438156 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.082121623 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.079552195 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.077532338 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.081083756 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.078373199 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.077840019 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.077873498 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.074380087 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.076004204 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.079371427 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.077553631 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.079907807 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.07450675 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.08199587 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.078869586 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.078989239 seconds)
  done (took 151.54721717 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.078223979 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.080718532 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.076620504 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.078241017 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.076664661 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.080826411 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.080727528 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.078553243 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.079477372 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.078463752 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.077298061 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.074384181 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.077286725 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.077399072 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.078002211 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.079343287 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.078960168 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.07749994 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.080110911 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.079448134 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.075940296 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.078260646 seconds)
  done (took 47.732786475 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.077777381 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.078383851 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.079131576 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.078279421 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.078775352 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.079904661 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.074999847 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.076283851 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.07943407 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.078169502 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.080849187 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.079130222 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.076708946 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.081128748 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.081391529 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.077033205 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.080801224 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.075849727 seconds)
  done (took 39.423101424 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.07739092 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.080513481 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.078118487 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.077610086 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.07967165 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.078274922 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.082471325 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.079022919 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.080974801 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.078454738 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.083672519 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.077757011 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.079117706 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.080074855 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.077531975 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.074801824 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.081387455 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.083020848 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.080135609 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.081787703 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.079492559 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.076699272 seconds)
  done (took 47.759813191 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.078923135 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.083846514 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.080106089 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.082436423 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.075219353 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.078746381 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.082268535 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.082183552 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.077424725 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.079550494 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.082943734 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.075264836 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.079195568 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.082359832 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.078460945 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.083252568 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.074054567 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.077391361 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.077743553 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.074834201 seconds)
  done (took 43.594411836 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.078001055 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.082543273 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.079624549 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.077900839 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.079546878 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.081780854 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.079138523 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.078493206 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.078335352 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.078309678 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.079384079 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.08389451 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.082223575 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.077434999 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.080702316 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.082576158 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.079580949 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.079144763 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.083170429 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.08062895 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.079958204 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.078491382 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.082374231 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.07908459 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.079325118 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.076129638 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.080478174 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.084848466 seconds)
  done (took 60.257896025 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.08131333 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.078421371 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.080002889 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.08176937 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.08315332 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.07995618 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.081195232 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.07963486 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.086692441 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.083012727 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.086263822 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.077923523 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.08207776 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.081852287 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.084213112 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.084067747 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.083318749 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.081472022 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.081158875 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.084371009 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.084079394 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.083741561 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.082426545 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.08351025 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.0847737 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.084439678 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.085783432 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.08828174 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.078514931 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.084331645 seconds)
  done (took 64.496073063 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.099623471 seconds)
    (2/2) benchmarking "in"...
    done (took 2.103015482 seconds)
  done (took 6.219118397 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.087043493 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.081529452 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.079173921 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.086385364 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.078598296 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.08209761 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.08488711 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.075255153 seconds)
  done (took 18.666561643 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.083191465 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.085403938 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.087025291 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.078125044 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.080754793 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.089999733 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.08643749 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.08017303 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.08595022 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.083752549 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.090135652 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.085422729 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.091804395 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.090690689 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.086667813 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.08451302 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.085052002 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.084617961 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.083432751 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.086139808 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.085944818 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.084867538 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.084349221 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.083154084 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.081794383 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.085631657 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.090603856 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.085892758 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.086427969 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.083072663 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.081667691 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.090701671 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.081269171 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.077557288 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.089038301 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.085505042 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.093355436 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.084524451 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.078775079 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.085009057 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.087977308 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.080435697 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.088347006 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.091750475 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.087181684 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.086777485 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.08908866 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.089861753 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.083455846 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.086767914 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.09255676 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.081504043 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.088536768 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.087776213 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.086420098 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.086115065 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.085163795 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.084308663 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.087858175 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.091424783 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.092142884 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.104568687 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.096308472 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.082078061 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.088752902 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.095653994 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.10564555 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.091512911 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.081518475 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.081752694 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.093086473 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.085274093 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.085467767 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.088242446 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.097736344 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.091251048 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.084597025 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.090552432 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.088046073 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.087669424 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.083387644 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.082846369 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.084676788 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.08584733 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.096226715 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.110402627 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.086364707 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.085971852 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.087368784 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.085658631 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.090808515 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.08801244 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.090329209 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.089005601 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.086617875 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.086502652 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.087854543 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.085795903 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.086349321 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.097277489 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.082476393 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.087911038 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.089639089 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.098562619 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.090714347 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.086964034 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.080231961 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.08825582 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.091168223 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.077989145 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.08408179 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.085881593 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.086478584 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.087838327 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.087814396 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.086766792 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.095339858 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.092714899 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.084692324 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.085976087 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.087978771 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.090856147 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.093595352 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.110726677 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.080648597 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.085555933 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.092532874 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.098792421 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.090003044 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.08501987 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.080707883 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.089454022 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.08802721 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.089340918 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.086025247 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.083977005 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.084503906 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.082921731 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.08123862 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.088941055 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.089907127 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.085630898 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.089339489 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.084011945 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.089533412 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.084480768 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.088799672 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.091316057 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.087324018 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.088086937 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.088659881 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.087082396 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.087340191 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.086554697 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.092627456 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.084204559 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.088189169 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.086567847 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.092777755 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.080683272 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.088978777 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.091216695 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.088156054 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.090275001 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.09102114 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.089886735 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.082864582 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.088347414 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.086635335 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.086636312 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.090377336 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.092098312 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.091086916 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.084245435 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.091843206 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.087605504 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.081851575 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.090891352 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.092764233 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.093908974 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.094848712 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.099080799 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.088635046 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.090191183 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.093572596 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.092984681 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.087696423 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.087954944 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.08750461 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.08376581 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.088962947 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.092152885 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.109178846 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.100775811 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.090563911 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.086103903 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.085214248 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.095419724 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.09230043 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.09222186 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.084407 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.092952016 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.088132272 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.084472996 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.095318597 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.088638219 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.092804612 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.084390347 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.094751847 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.087667777 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.09329062 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.091890875 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.084463215 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.088010931 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.08416515 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.087673742 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.093072731 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.094953883 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.097523467 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.09008532 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.090741733 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.090455481 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.090316683 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.090599505 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.093364231 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.089848901 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.094358147 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.088856506 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.089863893 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.094506997 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.097322518 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.088513611 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.091652921 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.088800146 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.09003895 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.088457606 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.094342195 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.101582045 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.090654635 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.088974143 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.092448665 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.092992328 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.088028823 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.088878616 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.087090407 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.092111883 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.09468942 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.087306992 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.087294612 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.094372983 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.097680925 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.091804075 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.089967147 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.098115105 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.088378277 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.092835721 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.095254854 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.097171935 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.103162703 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.097297926 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.092257534 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.092947077 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.091812869 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.093335236 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.095296592 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.088553538 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.097925441 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.101266688 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.08824927 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.089101153 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.091097391 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.093156679 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.093676675 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.089129531 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.095367133 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.086619467 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.088230648 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.097316844 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.096587815 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.096548127 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.097804261 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.092872284 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.093669555 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.090274 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.090756002 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.091696577 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.09321774 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.094155456 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.089136873 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.096742532 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.094775265 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.094022205 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.089461951 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.091637928 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.093431231 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.096281091 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.095189997 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.099607257 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.096325683 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.09267633 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.095586692 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.088866076 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.093236189 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.091114263 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.091736874 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.096227584 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.091052996 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.098491689 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.111047851 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.094923099 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.10245463 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.095180389 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.095116736 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.096915045 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.089949049 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.087801419 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.087403712 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.100442146 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.092906297 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.094100218 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.093859497 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.09233779 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.085176318 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.095251815 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.091206187 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.091757424 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.092964533 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.089782908 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.094289178 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.089100587 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.094666352 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.094677179 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.095284463 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.089961867 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.094217776 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.093836999 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.09585908 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.099006269 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.094260148 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.0929192 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.084602109 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.098641897 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.08425088 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.095915434 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.093663289 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.104776776 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.098430209 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.095314431 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.10081185 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.095293598 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.099787621 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.09617727 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.10129825 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.10154608 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.094360803 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.099699562 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.101145437 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.098456234 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.097638639 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.099173232 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.095027888 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.104885724 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.106286411 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.101874956 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.094655984 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.095007916 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.104623764 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.101071025 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.117347508 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.098578181 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.100021018 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.098015908 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.103774891 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.102912244 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.103301859 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.096916475 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.100958293 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.10039936 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.090224457 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.097815809 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.108640546 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.092137938 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.092726386 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.093756087 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.098758258 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.095752441 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.097297917 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.097221547 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.096169405 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.096669736 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.097860884 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.094625007 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.096032867 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.090269071 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.098105601 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.097044458 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.097626952 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.104017976 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.097353742 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.087538828 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.09413685 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.098318898 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.104773562 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.09183103 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.09837805 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.106045858 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.095306517 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.094242882 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.096826139 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.097392761 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.092398405 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.086164258 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.094430255 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.095577021 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.091936933 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.095736042 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.098502668 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.110602486 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.092456768 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.090932016 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.090419844 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.090857503 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.091145639 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.090952014 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.100528662 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.106432891 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.096239997 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.102503921 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.10106067 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.089951918 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.102259362 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.102220291 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.104194896 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.093511206 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.095147016 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.096963462 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.096944603 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.095287949 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.092532213 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.100855033 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.093752582 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.102189496 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.098202376 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.095999804 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.092514785 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.095487606 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.096995532 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.095728379 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.099625295 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.094493536 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.096760262 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.092016934 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.093442582 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.096185302 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.101784234 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.097990055 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.098101771 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.094828282 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.096528849 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.106053335 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.098823232 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.096367816 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.099645993 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.098372502 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.098204104 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.097369584 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.094966535 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.098363493 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.097736757 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.107362383 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.095132764 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.102674287 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.096440282 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.101265336 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.096753519 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.09689827 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.094009711 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.097857785 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.103895832 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.101286277 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.091846972 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.10178239 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.093941875 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.097495069 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.096919648 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.102720142 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.106839939 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.098904011 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.096616522 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.099194819 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.108179243 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.099166953 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.097715322 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.101755757 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.102212419 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.103270053 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.104303355 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.101612163 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.100515496 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.107103304 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.09779746 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.096182606 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.099396642 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.098969464 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.101517252 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.096115142 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.102999287 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.102158288 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.095111098 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.10733847 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.110407552 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.10307084 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.105758498 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.103326314 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.098059185 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.104915919 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.111067206 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.096839131 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.096798626 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.104206075 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.098421025 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.098730488 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.107980926 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.109773915 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.097976269 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.106592444 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.09937297 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.119470241 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.101034779 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.111907346 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.128051469 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.102247635 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.099704747 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.094444863 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.09720923 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.099978663 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.102547822 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.102264583 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.106492545 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.097983903 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.102205802 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.105072283 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.104839309 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.10128761 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.097740843 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.106744592 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.109474676 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.097006422 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.106838283 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.105473828 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.099184627 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.106245422 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.104583087 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.101292914 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.100941746 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.102847715 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.103459581 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.102488422 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.099289084 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.109046747 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.101312294 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.10330827 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.106525153 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.113109034 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.101755311 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.104917418 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.098115345 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.10350366 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.111452797 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.10003303 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.103122722 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.120354111 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.104735052 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.108744997 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.098991004 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.104479018 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.102433739 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.103871636 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.102033387 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.110491402 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.115661638 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.103743931 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.099735497 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.106950279 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.102415957 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.103011405 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.110970428 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.106818429 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.101618624 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.102784265 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.099290371 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.103659552 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.10000458 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.106053933 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.106604805 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.100122264 seconds)
  done (took 1250.273323865 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.10466767 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.108060892 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.104470947 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.099989631 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.105598023 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.100288445 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.100909309 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.103830829 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.10990289 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.101039752 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.109936888 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.105933256 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.10014128 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.110051083 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.099919027 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.100438529 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.100098994 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.10223871 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.103855175 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.103436249 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.098167517 seconds)
  done (took 46.198583903 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.100597522 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.096573994 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.098515659 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.099397604 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.105226197 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.109179585 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.1006868 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.100631124 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.100997847 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.108770293 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.105086579 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.10143977 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.099569495 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.0991393 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.100578168 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.1016134 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.105152763 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.100722722 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.100741441 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.098629905 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.099781245 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.099738271 seconds)
  done (took 48.262429385 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.099756298 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.09990795 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.098387468 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.101533135 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.103942282 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.104446279 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.097281548 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.102176601 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.10471003 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.104547289 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.107174474 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.109193425 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.104684316 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.107139924 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.098358473 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.100359694 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.247292855 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.096813585 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.097222007 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.103646086 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.099214612 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.103112134 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.105431057 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.09974148 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.108604015 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.104064496 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.099884299 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.100398985 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.099803218 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.104415759 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.107935071 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.101599859 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.099619843 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.103292151 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.108783276 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.102307867 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.106114094 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.100987412 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.108896388 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.102281208 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.115572331 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.127179577 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.104610572 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.105966521 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.110584618 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.104711128 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.105227593 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.108606578 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.113702635 seconds)
  done (took 105.278230912 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.105295416 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.106015444 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.107105364 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.10435988 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.100930755 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.104275415 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.105489038 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.104281326 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.1078045 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.101943049 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.105783853 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.102933823 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.10828582 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.104663571 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.103352985 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.105467679 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.107544576 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.107346016 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.107105315 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.103227729 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.107471571 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.105054198 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.104203953 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.108263029 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.103341157 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.102362245 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.107610199 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.110163328 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.101209398 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.103778197 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.105510474 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.103046863 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.10553245 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.11007644 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.105989028 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.10369062 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.107593035 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.104966829 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.106734326 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.107673761 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.106763311 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.10424728 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.108508147 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.105872024 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.102347408 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.104519293 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.107439006 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.105491857 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.104645015 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.106422961 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.107147753 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.102409762 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.107150672 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.103595875 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.106823853 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.107061462 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.106646953 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.10629475 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.106231835 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.108922239 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.110165401 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.104064783 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.11154838 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.10541691 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.107710449 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.105288686 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.107972903 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.105776034 seconds)
  done (took 145.2256084 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.105199416 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.103517238 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.10914007 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.102259314 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.103488232 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.106648971 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.109877027 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.106269349 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.106152882 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.11029765 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.104990408 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.107019299 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.105276336 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.106779911 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.104827167 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.104759419 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.105839407 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.106370179 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.108215074 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.105281936 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.106210055 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.111742422 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.107272014 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.10682217 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.107887697 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.106199332 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.106931138 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.106496517 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.106384256 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.106848954 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.108139355 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.105292835 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.105838792 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.107932365 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.108744239 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.108091164 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.110723429 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.107854413 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.112720326 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.105688913 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.109465369 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.108407408 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.108837443 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.102979012 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.110236423 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.11231707 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.107375359 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.110310322 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.109679835 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.106643789 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.106344776 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.109192304 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.110022899 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.107688066 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.106967867 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.109875595 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.107273116 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.10743064 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.108658809 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.108580983 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.11056128 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.107494101 seconds)
  done (took 132.696050132 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.111000221 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.109279379 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.113612289 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.113917274 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.109310303 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.110527343 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.110667188 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.109281179 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.109717278 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.109350566 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.109634666 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.111995594 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.11106384 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.114871047 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.108966012 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.110431718 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.109146795 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.111098625 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.109856944 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.110986652 seconds)
  done (took 44.248955461 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.108633247 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.111914686 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.110440183 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.114258033 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.11133606 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.110477551 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.1160617 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.110279624 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.110053736 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.113863173 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.109231688 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.112454498 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.112996651 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.115037545 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.108768499 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.111270687 seconds)
  done (took 35.822553137 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.109722008 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.110794552 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.114160728 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.106721699 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.110441193 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.109531764 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.113708027 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.11224116 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.112997382 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.106130189 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.110669988 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.113391561 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.109727616 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.108935871 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.113017067 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.108875212 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.112158842 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.113870295 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.109571191 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.113288931 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.110808629 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.112778782 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.109849441 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.111273661 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.112891268 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.111691464 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.117149459 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.112084201 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.116610729 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.109522454 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.114473291 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.113859165 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.114587406 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.109165214 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.113172816 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.109381124 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.110646549 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.112161979 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.111972366 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.112783643 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.111698535 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.111643194 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.114204961 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.111234259 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.11219452 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.109361525 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.109405291 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.1130602 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.109998853 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.113223134 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.112739306 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.110654984 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.113127459 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.112126186 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.11143329 seconds)
  done (took 118.178590723 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.114136745 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.11400214 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.111075968 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.113190075 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.113361078 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.113136705 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.114333135 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.115705627 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.113845763 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.114402965 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.115102502 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.113394046 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.114729203 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.112778566 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.116901857 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.112959216 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.114233798 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.112236185 seconds)
  done (took 40.086783449 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.113929931 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.114855867 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.113203895 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.112589493 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.116858578 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.115970181 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.113845155 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.111559204 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.113434492 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.113617092 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.11379745 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.11362866 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.113904252 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.11307108 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.114843531 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.114424649 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.112244729 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.113153917 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.112678719 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.11576233 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.114409058 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.116502314 seconds)
  done (took 48.546609242 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.113286507 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.116106362 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.126489983 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.141825494 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.134042689 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.153232275 seconds)
  done (took 14.824849006 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.117817155 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.118639793 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.117858985 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.11469627 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.113460132 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.113910733 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.113628822 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.11441971 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.112955053 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.12186536 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.116203434 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.117168683 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.116876329 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.117982757 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.112666267 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.115687922 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.118114369 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.114551082 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.114025813 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.11415388 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.116749196 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.114876165 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.118341065 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.113987194 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.11573453 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.113865969 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.115249475 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.117540586 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.120179537 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.11354585 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.116360323 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.117579414 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.113254229 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.117160762 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.119174305 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.116640668 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.116355368 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.115735711 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.115650241 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.115522032 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.117481278 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.119784695 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.116562128 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.11499752 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.115967476 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.119661301 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.114776909 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.120853574 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.117003063 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.116271461 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.116919122 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.116374833 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.116377996 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.118876547 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.116183573 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.116194208 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.116530779 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.116056517 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.11664617 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.116731144 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.115641083 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.11588169 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.116669171 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.116317233 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.116047031 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.117085519 seconds)
  done (took 141.721730229 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.120492959 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.117292478 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.117149799 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.11971087 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.117255001 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.118184654 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.116138316 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.117420637 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.118917083 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.11763245 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.118047168 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.118070027 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.118283097 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.115815364 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.1175741 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.120271159 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.120497679 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.116593073 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.117119781 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.117939275 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.117746286 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.119538061 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.11963105 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.118131539 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.117172669 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.117432289 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.126543664 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.117730812 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.116787106 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.11966551 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.117957655 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.11771617 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.117833657 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.118369778 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.118974928 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.118761723 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.120134333 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.116639614 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.120310128 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.120998758 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.117096796 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.118026878 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.119806245 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.121107975 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.121147402 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.117834218 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.118982721 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.121741398 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.118990534 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.121131951 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.119908026 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.11955512 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.121852144 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.122817112 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.120153737 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.119925784 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.119698926 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.124209076 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.119506097 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.120540543 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.122756228 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.123231545 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.119436638 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.121284557 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.123519149 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.120008598 seconds)
  done (took 141.916681927 seconds)
done (took 2910.899283283 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.136711823 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.123458314 seconds)
  done (took 16.303124727 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.283360675 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.164277599 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.304383948 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.238033512 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.145189846 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.149106755 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.119569623 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.122614944 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.218387603 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.12081188 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.133399168 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.11895904 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.123525903 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.121235184 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.120901559 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.12539896 seconds)
  done (took 56.663911627 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.124682058 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.128671164 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.122615722 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.121748243 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.140098158 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.196496388 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.144756662 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.125621778 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.136197352 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.156778251 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.145488914 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.126512068 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.131036244 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.128139072 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.209817499 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.168736948 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.179303226 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.197386811 seconds)
  done (took 40.72988275 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.20248503 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.13761534 seconds)
  done (took 11.396356742 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.123033553 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.150792193 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.145074836 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.135874123 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.137537545 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.156674782 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.152828341 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.125849 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.159960388 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.149830169 seconds)
  done (took 73.505187626 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.126491631 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.132642379 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.3744506 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.134435702 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.129089591 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.14844998 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.12279966 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.156226345 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.127537852 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.120022884 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.132912935 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.380081088 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.134737424 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.126926898 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.543957758 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.13902916 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.1282871 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.15745779 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.154514222 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.127805346 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.132998545 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.129383881 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.290987762 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.818345422 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.124203387 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.133380022 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.132511189 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.125624844 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.128454648 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.128911785 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.127803351 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.131246581 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.127935252 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.129320944 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.135828643 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.134344431 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.627389858 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.143608084 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.134721025 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.218036937 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.169854536 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.136975651 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.963347548 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.132800466 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.128567065 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.133738614 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.817174334 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.189731542 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.129779096 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.283069316 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.468391981 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.14135727 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.297335296 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.297035229 seconds)
  done (took 146.994425522 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.13113514 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.610276776 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.284158002 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.127890323 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.400600554 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.356289876 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.79402616 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.175246137 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.13554476 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.35125907 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.276494199 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.245448982 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.126473814 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.127730282 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.131681146 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.126583948 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.351411742 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.197511807 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.125542034 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.129742248 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.153623383 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.407484411 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.238714451 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.134911172 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.143688884 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.355325749 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.180291828 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.247730318 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.626996807 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.126469459 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.198612432 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.129799137 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.131323116 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.125560604 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.168498615 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.239075157 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.230595883 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.136330163 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.124411921 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.130335866 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.890529526 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.339413431 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.238493933 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.271954656 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.330621264 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.352979151 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 3.566663068 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.129463978 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 3.957136111 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.306337908 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.353225127 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.3570656 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.263017932 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.131610918 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.482979037 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.127822408 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.126632649 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.374352405 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.274104505 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.24779293 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.136327211 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.133362923 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.135515657 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.419329997 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.1361814 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.23844441 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.130439721 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.131195548 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.240605731 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.24205852 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.268553989 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.364193964 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.186349406 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.084203072 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.663824127 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.411993775 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.194141827 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.366874937 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.134874318 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.134771067 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.224254572 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.73255156 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.258264996 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.414566088 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.366877388 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.216085005 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.715989035 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.12734798 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.344517497 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.307384346 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.377581465 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.363465214 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.187557576 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.023365744 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.128247949 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.136374332 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.133574324 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.257155375 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.131489302 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.483060864 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.380511375 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.838989793 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.150433201 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.432566771 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.294235312 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.134671142 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.783448784 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.131376554 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.352498012 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.175150373 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.131207441 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.129447453 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.300074878 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.048605257 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.136003219 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.875988332 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.191464107 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.13371306 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.310754427 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.136282736 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.388547648 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.049469688 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.373884069 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.524692011 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.16579859 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.323636548 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.364777069 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.131951053 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.391713179 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.379355372 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.308066186 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.370021083 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.914298718 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.135786159 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.40803892 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.135940793 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.13419194 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.302899301 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.050763616 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.286692282 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.139120842 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.407265685 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.189190387 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.193052892 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.13744218 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.384664883 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.172091229 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.181869891 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.141363005 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.266101679 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.13667876 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.200829402 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.305798937 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.132333018 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.135080156 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.767119979 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.133565604 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.282610248 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.361139829 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.148806893 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.208545471 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.627952356 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.13324315 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.226451482 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.158020588 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.655276056 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.849387511 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.268799206 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.593853631 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.634786379 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.130672871 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.426952729 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.33369205 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.135238252 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.132902516 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.005357968 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.761926819 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.131951397 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.28785845 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.517091922 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.513348703 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.344439617 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.1394178 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.184469875 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.136572256 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 6.320161116 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.476184746 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.131762172 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.13114596 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.134421096 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.139512253 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.131288878 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.359110032 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.161867707 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.781057386 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.275193681 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.399618008 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.440591748 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.363997748 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.207337024 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.135124215 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.378015574 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.140567992 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.195912725 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.135747674 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.144872496 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.371286343 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.136318954 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.351750874 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.4246535 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.236569091 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.182505365 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.136446515 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.132521094 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.134464239 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.271129726 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.231129409 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.136622492 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.137605515 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.175228462 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.239145191 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.324936857 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.42041006 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.133632842 seconds)
  done (took 959.621460997 seconds)
done (took 1307.262077333 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.137374637 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.136784056 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.140370094 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.137888587 seconds)
  done (took 30.612974662 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.137489097 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.134813011 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.134844167 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.138286967 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.136863713 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.140153623 seconds)
  done (took 14.885980114 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.137909945 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.137483083 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.137459462 seconds)
  done (took 23.473864674 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.569557519 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.545721498 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.211664533 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.277114196 seconds)
  done (took 11.669772252 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.141210637 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.136765812 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.140673248 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.140085181 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.134259217 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.137868151 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.139329709 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.138324629 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.139101713 seconds)
  done (took 21.320265551 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.244974899 seconds)
done (took 108.276538272 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.229495884 seconds)
    (2/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.080882295 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.273333643 seconds)
    (4/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.814994945 seconds)
    (5/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.850248099 seconds)
    (6/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.465264257 seconds)
    (7/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.634370234 seconds)
    (8/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.053900146 seconds)
    (9/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.270665212 seconds)
    (10/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.538271501 seconds)
    (11/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.21651713 seconds)
    (12/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.272245996 seconds)
    (13/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.154555398 seconds)
    (14/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.270856016 seconds)
    (15/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.164346222 seconds)
    (16/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.492515087 seconds)
    (17/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.231497876 seconds)
    (18/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.16627707 seconds)
    (19/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.240103654 seconds)
    (20/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.227204505 seconds)
    (21/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.165015146 seconds)
    (22/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.001088911 seconds)
    (23/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.420705753 seconds)
    (24/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.155985988 seconds)
    (25/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.4621029 seconds)
    (26/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.204255596 seconds)
    (27/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.149411073 seconds)
    (28/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.147608399 seconds)
    (29/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.417619507 seconds)
    (30/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.153662213 seconds)
    (31/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.85681393 seconds)
    (32/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.237290256 seconds)
    (33/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.957181959 seconds)
    (34/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.467338978 seconds)
    (35/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.227307974 seconds)
    (36/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.228668625 seconds)
    (37/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.225251561 seconds)
    (38/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.556451352 seconds)
    (39/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.411386081 seconds)
    (40/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.346531509 seconds)
    (41/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.562268425 seconds)
    (42/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.310494192 seconds)
    (43/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.541731458 seconds)
    (44/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.164432392 seconds)
    (45/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.348358265 seconds)
    (46/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.058505364 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.262322423 seconds)
    (48/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.85098282 seconds)
    (49/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.361490747 seconds)
    (50/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.009231284 seconds)
    (51/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.464285282 seconds)
    (52/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.481266306 seconds)
    (53/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.144044121 seconds)
    (54/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.14285078 seconds)
    (55/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.852155087 seconds)
    (56/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.464724991 seconds)
    (57/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.226143203 seconds)
    (58/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.225166477 seconds)
    (59/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.158610843 seconds)
    (60/341) benchmarking ("sort", Int8, false)...
    done (took 5.061922963 seconds)
    (61/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.183620636 seconds)
    (62/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.548270973 seconds)
    (63/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.153823304 seconds)
    (64/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.663333267 seconds)
    (65/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.473994904 seconds)
    (66/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.227685261 seconds)
    (67/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.856154927 seconds)
    (68/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.304802324 seconds)
    (69/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.424103603 seconds)
    (70/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.27764457 seconds)
    (71/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.8261143 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.478766131 seconds)
    (73/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.139956772 seconds)
    (74/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.234027304 seconds)
    (75/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.251052204 seconds)
    (76/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.441759764 seconds)
    (77/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.15754961 seconds)
    (78/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.139286027 seconds)
    (79/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.15608893 seconds)
    (80/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.603822337 seconds)
    (81/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.26983712 seconds)
    (82/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.144400094 seconds)
    (83/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.915744416 seconds)
    (84/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.261838358 seconds)
    (85/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.441817479 seconds)
    (86/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.954171049 seconds)
    (87/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.248243908 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.491978879 seconds)
    (89/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.458551292 seconds)
    (90/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.464244428 seconds)
    (91/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.747128512 seconds)
    (92/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.346758117 seconds)
    (93/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.854847456 seconds)
    (94/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.985924142 seconds)
    (95/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.233317053 seconds)
    (96/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.201092213 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.340328032 seconds)
    (98/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.266302092 seconds)
    (99/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.537050712 seconds)
    (100/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.157944602 seconds)
    (101/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.145775884 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.139569669 seconds)
    (103/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.148257232 seconds)
    (104/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.157904283 seconds)
    (105/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.144565921 seconds)
    (106/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.031841585 seconds)
    (107/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.464032498 seconds)
    (108/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.233158585 seconds)
    (109/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.255336273 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.031218303 seconds)
    (111/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.415665634 seconds)
    (112/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.368343585 seconds)
    (113/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.463989394 seconds)
    (114/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.582115492 seconds)
    (115/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.148708874 seconds)
    (116/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.653896065 seconds)
    (117/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.945612184 seconds)
    (118/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.616454933 seconds)
    (119/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.441744142 seconds)
    (120/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.42382552 seconds)
    (121/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.15698179 seconds)
    (122/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.289043031 seconds)
    (123/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.243807555 seconds)
    (124/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.2550838 seconds)
    (125/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.108509132 seconds)
    (126/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.268026989 seconds)
    (127/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.396189465 seconds)
    (128/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.464971094 seconds)
    (129/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.173642715 seconds)
    (130/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.326840714 seconds)
    (131/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.155290574 seconds)
    (132/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.866224808 seconds)
    (133/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.77877809 seconds)
    (134/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.146099647 seconds)
    (135/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.518107566 seconds)
    (136/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.149257507 seconds)
    (137/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.453905026 seconds)
    (138/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.150482215 seconds)
    (139/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.263734386 seconds)
    (140/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.343635717 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.357342748 seconds)
    (142/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.277930262 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.396471739 seconds)
    (144/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.225282372 seconds)
    (145/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.226742347 seconds)
    (146/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.893395939 seconds)
    (147/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.271102627 seconds)
    (148/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.865067483 seconds)
    (149/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.397472653 seconds)
    (150/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.521378829 seconds)
    (151/341) benchmarking ("sort", Bool, false)...
    done (took 2.364517459 seconds)
    (152/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.1521222 seconds)
    (153/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 4.218808886 seconds)
    (154/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.168481323 seconds)
    (155/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.159083713 seconds)
    (156/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.336774201 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.95934646 seconds)
    (158/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.709778672 seconds)
    (159/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.213454351 seconds)
    (160/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.097506789 seconds)
    (161/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.225463024 seconds)
    (162/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.440788285 seconds)
    (163/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.723661738 seconds)
    (164/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.153471936 seconds)
    (165/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.364220657 seconds)
    (166/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.152449039 seconds)
    (167/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.216447602 seconds)
    (168/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.164180853 seconds)
    (169/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.39277643 seconds)
    (170/341) benchmarking ("sort", Int64, false)...
    done (took 5.783850911 seconds)
    (171/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.157049171 seconds)
    (172/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.255861973 seconds)
    (173/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.526394798 seconds)
    (174/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.924751018 seconds)
    (175/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.060509098 seconds)
    (176/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.953221763 seconds)
    (177/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.552291509 seconds)
    (178/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.367131898 seconds)
    (179/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.283361435 seconds)
    (180/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.96528526 seconds)
    (181/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.503263819 seconds)
    (182/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.547364264 seconds)
    (183/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.453964784 seconds)
    (184/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.280249092 seconds)
    (185/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.170323296 seconds)
    (186/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.347988433 seconds)
    (187/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.476213986 seconds)
    (188/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.490598968 seconds)
    (189/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.153906279 seconds)
    (190/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.236281806 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.302424044 seconds)
    (192/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.148940957 seconds)
    (193/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.184629215 seconds)
    (194/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.360845317 seconds)
    (195/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.278884689 seconds)
    (196/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.535754651 seconds)
    (197/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.571916874 seconds)
    (198/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.149474733 seconds)
    (199/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.224415792 seconds)
    (200/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.411267885 seconds)
    (201/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.158168008 seconds)
    (202/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.150358697 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.150276803 seconds)
    (204/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.329831175 seconds)
    (205/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.561117178 seconds)
    (206/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.147035807 seconds)
    (207/341) benchmarking ("perf_sum", Float64, true)...
    done (took 3.880970282 seconds)
    (208/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.920507717 seconds)
    (209/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.50676191 seconds)
    (210/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.150173353 seconds)
    (211/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 8.884113125 seconds)
    (212/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.468638934 seconds)
    (213/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.535495822 seconds)
    (214/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.133849445 seconds)
    (215/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.112241076 seconds)
    (216/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.179859216 seconds)
    (217/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.23001211 seconds)
    (218/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.150876894 seconds)
    (219/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.240409192 seconds)
    (220/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.175086273 seconds)
    (221/341) benchmarking ("sort", Float64, false)...
    done (took 5.838592751 seconds)
    (222/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.515110707 seconds)
    (223/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.161375427 seconds)
    (224/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.346291176 seconds)
    (225/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.376349246 seconds)
    (226/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.176782364 seconds)
    (227/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.342402879 seconds)
    (228/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.154926761 seconds)
    (229/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 4.229435562 seconds)
    (230/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.164743505 seconds)
    (231/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 4.072398001 seconds)
    (232/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.478323716 seconds)
    (233/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.259103475 seconds)
    (234/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.439584844 seconds)
    (235/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.305780615 seconds)
    (236/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.170307257 seconds)
    (237/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.793348383 seconds)
    (238/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.448282422 seconds)
    (239/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.994952627 seconds)
    (240/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.158762844 seconds)
    (241/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 4.170531305 seconds)
    (242/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.167661904 seconds)
    (243/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.571736533 seconds)
    (244/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.154139529 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.488989109 seconds)
    (246/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.363584813 seconds)
    (247/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.177903059 seconds)
    (248/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.228539094 seconds)
    (249/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.374026135 seconds)
    (250/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.227066633 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.86455198 seconds)
    (252/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.458396166 seconds)
    (253/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.469480603 seconds)
    (254/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.152809901 seconds)
    (255/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.970188525 seconds)
    (256/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.96377487 seconds)
    (257/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.471083618 seconds)
    (258/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.288278666 seconds)
    (259/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.166054057 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.173795427 seconds)
    (261/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.240346763 seconds)
    (262/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.49104377 seconds)
    (263/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.242563147 seconds)
    (264/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.265268608 seconds)
    (265/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.29842149 seconds)
    (266/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.162250326 seconds)
    (267/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.313506151 seconds)
    (268/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.285562626 seconds)
    (269/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.172265008 seconds)
    (270/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.270758311 seconds)
    (271/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.57179193 seconds)
    (272/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.54445008 seconds)
    (273/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.297804203 seconds)
    (274/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.155243889 seconds)
    (275/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.170553082 seconds)
    (276/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 8.561148116 seconds)
    (277/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.436123629 seconds)
    (278/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.60362848 seconds)
    (279/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.158375121 seconds)
    (280/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.288776171 seconds)
    (281/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.169032041 seconds)
    (282/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.50814494 seconds)
    (283/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.38542459 seconds)
    (284/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.287515323 seconds)
    (285/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.275479888 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.275105376 seconds)
    (287/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.155121107 seconds)
    (288/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.256556262 seconds)
    (289/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.172498532 seconds)
    (290/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.231766989 seconds)
    (291/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.258570929 seconds)
    (292/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.156709597 seconds)
    (293/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.566593891 seconds)
    (294/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.308988129 seconds)
    (295/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.173251685 seconds)
    (296/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.195784794 seconds)
    (297/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.255485388 seconds)
    (298/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.567362124 seconds)
    (299/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.156844103 seconds)
    (300/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.182930967 seconds)
    (301/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.415367437 seconds)
    (302/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.426282452 seconds)
    (303/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.429912427 seconds)
    (304/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.926204652 seconds)
    (305/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.553060151 seconds)
    (306/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.159169691 seconds)
    (307/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.931456643 seconds)
    (308/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.429096958 seconds)
    (309/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.276327971 seconds)
    (310/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.042269161 seconds)
    (311/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.284907999 seconds)
    (312/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.284500602 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.288650376 seconds)
    (314/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.155836317 seconds)
    (315/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.455570281 seconds)
    (316/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.286002504 seconds)
    (317/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.965831956 seconds)
    (318/341) benchmarking ("sort", Float32, false)...
    done (took 5.820641315 seconds)
    (319/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.157331334 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.009584298 seconds)
    (321/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.151795048 seconds)
    (322/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.288451491 seconds)
    (323/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.308358314 seconds)
    (324/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.659617506 seconds)
    (325/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.267793429 seconds)
    (326/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.157482533 seconds)
    (327/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.059557806 seconds)
    (328/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.570435962 seconds)
    (329/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.268879939 seconds)
    (330/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.37110536 seconds)
    (331/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.664387598 seconds)
    (332/341) benchmarking ("sort", BigInt, false)...
    done (took 7.266845468 seconds)
    (333/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.588922876 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.557615157 seconds)
    (335/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.076076601 seconds)
    (336/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.272974068 seconds)
    (337/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.216642886 seconds)
    (338/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.170338923 seconds)
    (339/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.420540847 seconds)
    (340/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.15704103 seconds)
    (341/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.315468909 seconds)
  done (took 1189.424162575 seconds)
done (took 1191.860940905 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.176838839 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.154891104 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.662960441 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.166204947 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.157841656 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.160835912 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.66731587 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.18945249 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.173200635 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.670208859 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.165518369 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.157644748 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.172567111 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.191775733 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.167938654 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.170901268 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.165456457 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.188095452 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.192469083 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.163724558 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.211448519 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.162091947 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.158370037 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.209348539 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.158296811 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.173375764 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.176405074 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.211441513 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.209743205 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.162554781 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.162247306 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.514311428 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.214174404 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.163202453 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.170087756 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.171731704 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.163908468 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.173184093 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.176795974 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.174358654 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.158580617 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.16717684 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.161619259 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.161015191 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.156405698 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.15591173 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.158592794 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.284594957 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.172973751 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.493623113 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.221137826 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.17718761 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.212013042 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.159204692 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.161688483 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.162774147 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.213578483 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.166692029 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.162119726 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.49429948 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.255924418 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.172690324 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.492947337 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.225094145 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.167387772 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.175382914 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.15875237 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.176553193 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.512867592 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.711235266 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.190999526 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.180123146 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.159194515 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.163227318 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.175426557 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.668125631 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.177156507 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.739787521 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.186007072 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.177168998 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.166907829 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.163562948 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.160715184 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.177777696 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.178400515 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.159562149 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.167282188 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.166025586 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.172989382 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.515172176 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.206928947 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.660685019 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.166177021 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.178040827 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.17684334 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.738278412 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.190869449 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.177480757 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.165362098 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.514915309 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.203273817 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.183619934 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.163551268 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.173847439 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.274917825 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.178279779 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.178620529 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.16032375 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.18131121 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.166607743 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.159894868 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.173815071 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.18123912 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.191385133 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.177971169 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.162840845 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.172620579 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.165612276 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.178343069 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.172048074 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.171566654 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.173652961 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.165102977 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.214208166 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.184466251 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.175506005 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.276530883 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.168450187 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.286650855 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.177071126 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.169607066 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.163185065 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.49745193 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.209685722 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.184125884 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.169808488 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.188544368 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.189502244 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.1800023 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.166371548 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.177806025 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.165816811 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.220880865 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.16463823 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.187703294 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.216513963 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.179051468 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.168200362 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.180120431 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.198268818 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.183785085 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.168504616 seconds)
done (took 340.112969864 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.213174376 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.166246543 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.248269781 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.164985574 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.23515339 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.218490683 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.164701661 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.16889684 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.165336397 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.56497569 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.166961513 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.169292489 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.165895001 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.164754737 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.221151015 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.166372825 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.164656038 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.40209845 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.16683324 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.228664775 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.164227195 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.167283494 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.170049873 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.578169192 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.165886525 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.164278457 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.226125377 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.164972311 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.408582763 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.16330061 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.164613707 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.410349459 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.224793073 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.177794651 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.177351297 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.1715464 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.236557076 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.178192426 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.215574887 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.214767254 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.245992667 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.199026202 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.166772868 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.169705726 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.167030292 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.165895591 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.166318265 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.200612158 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.164657488 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.173457881 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.405092985 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.176045225 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.17161204 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.169477557 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.167239961 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.181087709 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.168503616 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.167961046 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.228257542 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.166554975 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.216655565 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.565176124 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.591839702 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.169521361 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.168070832 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.168429753 seconds)
  done (took 203.660982158 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.234647257 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.254106366 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.23778008 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.175696878 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.22246129 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.237144049 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.175966676 seconds)
  done (took 17.627161632 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.175668397 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.167869084 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.189632984 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.19265098 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.164922149 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.308641947 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.18006098 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.173987914 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.194775583 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.16828082 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.517515491 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.191948132 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.178217334 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.169914156 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.180953713 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.199302733 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.171980165 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.167753217 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.267542637 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.246533422 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.175637155 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.174361652 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.199219059 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.179467896 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.168424858 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.167625947 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.167003627 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.176647752 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.169420597 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.169271566 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.169436352 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.182017704 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.167570209 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.168915307 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.169416418 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.170769048 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.166043839 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.169938317 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.172145185 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.169319964 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.169684272 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.16933618 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.17026996 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.170377529 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.168914126 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.192640768 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.169190235 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.169451332 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.168799356 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.169719906 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.19887175 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.168301524 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.169665598 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.175979679 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.211401425 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.177984484 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.171542972 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.169976641 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.171511896 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.170047465 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.171191869 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.250606574 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.192950717 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.171535472 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.194863658 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.209316421 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.171583942 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.170588363 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.173121836 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.195642388 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.170590951 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.196047242 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.172754561 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.279146856 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.171811215 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.311704085 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.194239611 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.173698204 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.17382455 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.171208401 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.178342231 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.172327194 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.173341464 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.181103776 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.177142411 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.171660101 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.172909806 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.174101452 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.178994888 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.171468176 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.217412282 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.174906612 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.171522192 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.274605623 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.172497392 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.270271386 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.197334367 seconds)
  done (took 234.404230781 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.178243094 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.17478999 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.186451804 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.174088782 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.173604617 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.179087724 seconds)
  done (took 15.160791 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.175389996 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.176836591 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.172678015 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.173643539 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.171851975 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.171509883 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.172826001 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.176580788 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.177126929 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.172782652 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.172722953 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.17358508 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.172412534 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.17219417 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.172489437 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.172133907 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.173863724 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.173016677 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.172856784 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.170685674 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.423510381 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.171415187 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.173580132 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.175631923 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.176118764 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.176364379 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.182877412 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.175496329 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.173140897 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.179989811 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.177280632 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.173575618 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.175993091 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.181833878 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.180003297 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.177428773 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.179342133 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.173656225 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.173558436 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.172951392 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.17491194 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.171051863 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.174469186 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.17401402 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.177514507 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.181204104 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.178019487 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.182752643 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.174291948 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.172809818 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.172262645 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.176046926 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.172695796 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.176322729 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.179340113 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.184517285 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.179266554 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.175670324 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.17311369 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.176972033 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.179018696 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.174799406 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.177831246 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.180538362 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.183601761 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.174643694 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.176084194 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.178317816 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.172744329 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.174876231 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.175428369 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.176217501 seconds)
  done (took 159.988761782 seconds)
done (took 632.929667514 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.215510855 seconds)
  done (took 9.311611774 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.343973721 seconds)
  done (took 9.519279204 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.511911509 seconds)
  done (took 12.612269606 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.202275544 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.192807124 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.187987771 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.177892635 seconds)
  done (took 30.877984836 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.319133501 seconds)
  done (took 9.417422311 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.188072166 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.170482385 seconds)
  done (took 16.511708331 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.220374235 seconds)
  done (took 9.320549374 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.659446086 seconds)
  done (took 9.792284133 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.184371068 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.187900954 seconds)
  done (took 16.491560709 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.177624806 seconds)
  done (took 9.276518089 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.913767531 seconds)
  done (took 10.086309897 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.187012217 seconds)
  done (took 9.303013352 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.222214236 seconds)
  done (took 9.321959425 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.114228685 seconds)
  done (took 10.213259869 seconds)
done (took 174.15536663 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.186088464 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.173324846 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.173300597 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.173007238 seconds)
  done (took 30.804354065 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.213054353 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.213183036 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.220813408 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.211958508 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.202685998 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.201511858 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.212854075 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.212507472 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.203074229 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.2094272 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.21237491 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.210466494 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.214755621 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.22298345 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.222809588 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.210865638 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.212628929 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.213383085 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.203740977 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.223629942 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.209852616 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.213333528 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.177945455 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.179189795 seconds)
  done (took 55.129418971 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.369479417 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.248614493 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.323592534 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.202415556 seconds)
  done (took 11.245021939 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.180010408 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.242307906 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.232328533 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.228602629 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.230579911 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.282711132 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.229963691 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.316292533 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.307517396 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.308621943 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.188085619 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.20172632 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.204288951 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.226331611 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.283109637 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.180438702 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.178401618 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.293707016 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.241857564 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.4394707 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.179980196 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.234335378 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.230760703 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.231714583 seconds)
  done (took 55.973891625 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.18011517 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.186202297 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.187243566 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.180491427 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.181634664 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.181148094 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.1885942 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.182983246 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.204125772 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.183333588 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.182277279 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.181140035 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.188551376 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.181649466 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.181417029 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.194432073 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.1961911 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.181283682 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.185867299 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.189428584 seconds)
  done (took 45.819099346 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.178210815 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.028043717 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.527667805 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.432096081 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.181009186 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.182020988 seconds)
  done (took 33.631577396 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.193525373 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.198084511 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.188129129 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.207155102 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.230396905 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.188716465 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.24040355 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.344507429 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.190960671 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.24049892 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.200721213 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.189578676 seconds)
  done (took 28.715420056 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.181327622 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.181026847 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.180290358 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.192182724 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.191827482 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.192452354 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.187928232 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.180841272 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.194073643 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.200784165 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.191140429 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.194434159 seconds)
  done (took 48.372725911 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.395830141 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.406720025 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.379942935 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.771102301 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.501201356 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.1588162 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.46797607 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.392698051 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.889910739 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.930950725 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.478446629 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.156653882 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.128899726 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.105194656 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.100890279 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.426046747 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.182241821 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.039453607 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.440439818 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.221339104 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.183112204 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.183787038 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.180852555 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.468411834 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.502255961 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.187114467 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.396250632 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.197713414 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.234956731 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.394056446 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.763928641 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.239495928 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.383780811 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.439002005 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.526036625 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.225085178 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.183027037 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.365662131 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.229600074 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.218702119 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.193405879 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.193591235 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.725151829 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.195726056 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.455590622 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.184352405 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.186729471 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.178317799 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.107782047 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.428670234 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.283760172 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.184763449 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.220448387 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.618828861 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.30416233 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.42758667 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.188607117 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.362985296 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.243145065 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.368397741 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.281724701 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.1849403 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.397741862 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.108078185 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.518890329 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.296057045 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.186293697 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.18989183 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.885831184 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.42901662 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.263846714 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.431637633 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.938459701 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.186421189 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.188059018 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.228170879 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.279018266 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.181725008 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.482717739 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.161971364 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.109036781 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.282201087 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.582965353 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.190888996 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.18296825 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.192834993 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.031299058 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.111519928 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.282707854 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.37132658 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.49697712 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.184924069 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.186350914 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.208694596 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.18952038 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.134880539 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.752113394 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.251315895 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.113714461 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.75061745 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.784632429 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.152341876 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.658066976 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.230145386 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.449828527 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.316221318 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.590524733 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.396345482 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.432451335 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.715833854 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.191362186 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.80309119 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.26852442 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.262437374 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.185690407 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.74481356 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.372432113 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.419316603 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.29076342 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.188734007 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.112825835 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.197981961 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.38953288 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.777719218 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.243622766 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.186390667 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.193461274 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.186767769 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.191702401 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.294893696 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.20548916 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.478320625 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.251943832 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.188670091 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.124190986 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.190264922 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.466067684 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.831038059 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.247215529 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.445326582 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.44932175 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.888286684 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.78373556 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.135577824 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.457121569 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.255136329 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.263253507 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.739890915 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.308313034 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.286383199 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.189157033 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.318406756 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.18986127 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.191325345 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.581510169 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.6044986 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.620181631 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.233319771 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.191387192 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.139620905 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.373866698 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.430363739 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.219137756 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.211501403 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.195121029 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.274782082 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.418270784 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.188681423 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.115591416 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.420202013 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.424556126 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.474250856 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.595314359 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.229569897 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.259494736 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.200992265 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.403334113 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.271342278 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.879031782 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.750497722 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.3916265 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.74201504 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.154660648 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.835533293 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.379570045 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.560385861 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.208373167 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.641198675 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.369076835 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.8694467 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.225429125 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.718263464 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.117993481 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.195593786 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.5471722 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.137382776 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.502954153 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.236984009 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.203933584 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.192680545 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.192526635 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.199001747 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.074021884 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.299171589 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.26082204 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.266937201 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.118445139 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.83054548 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.231988796 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.196820243 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.192540947 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.509052668 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.004475665 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.14610951 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.194120313 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.270373978 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.947627479 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.748297996 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.194123949 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.194400143 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.811624998 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.19445217 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.103993471 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.199731707 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.922722401 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.217361116 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.37851827 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.884817325 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.480567129 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.261527231 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.270381227 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.194132727 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.195548156 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.8962918 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.202249117 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.894829283 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.481629422 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.466615218 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.635305942 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.246529567 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.406347655 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.206362755 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.195543541 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.655660201 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.218866447 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.195390346 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.400411639 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.718490985 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.451502875 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.825000141 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.281556858 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.19503193 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.462179286 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.196354199 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.783017972 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.879946332 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.185038198 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.195362029 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.45741448 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.888459197 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.198094266 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.170669094 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.20178539 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.409853796 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.402758282 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.464583125 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.48572075 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.644877825 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.125099299 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.203201833 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.221343607 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.445206146 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.200792033 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.233883359 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.644734514 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.233155349 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.627702951 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.483575251 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.504742239 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.822930254 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.466230217 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.260109268 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.210616618 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.846372442 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.313408697 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.131812551 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.320259803 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.125278308 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.926619795 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.491749045 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.215568149 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.464235908 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.177289773 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.537148816 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.495281455 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.391285174 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.235899313 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.225710537 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.199169552 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.244281662 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.200019038 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.397357412 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.316756736 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.206538615 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.737896933 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.239268592 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.246135675 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.206606762 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.685462145 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.221648366 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.198946244 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.896152139 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.224590978 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.318611849 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.272537177 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.925044475 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.833521991 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.31055051 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.074110306 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.852211643 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.471258058 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.25350943 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.630820592 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.231735571 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.604573353 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.201162156 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.415259851 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.208674826 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.784597324 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.248994855 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.456184988 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.147108965 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.409598552 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.388308185 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.224122846 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.206572036 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.127896324 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.36055084 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.086640827 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.180688218 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.20485946 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.885338003 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.57660038 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.419692845 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.621967521 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.017554742 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.204645632 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.484518515 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.587258229 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.827399462 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.237004922 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.206073852 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.459060276 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.323486426 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.444438008 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.488218305 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.211924097 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.227574999 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.416980128 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.331523345 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.123080308 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.685159973 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.786966916 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.902604208 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.215719675 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.406266857 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.460119223 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.492524508 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.23870953 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.274623592 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.609466452 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.47136465 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.268087452 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.127835107 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.203054205 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.599886577 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.604098789 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.299274537 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.443012126 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.493430458 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.812343645 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.799542038 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.636630118 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.5874278 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.638207949 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.604978487 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.400488132 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.545889294 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.520634947 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.800167085 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.618245264 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.414820519 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.300408444 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.465242077 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.066699279 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.913978259 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.448358427 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.207114415 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.134389459 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.41090698 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.296080762 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.600981231 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.732200049 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.453027026 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.396711255 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.668565022 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.743337388 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.404297758 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.228835977 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.170560031 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.234758458 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.228003727 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.207985266 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.691229766 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.491507294 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.220447972 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.147468267 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.875015967 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.135630829 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.420038246 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.408118203 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.242086738 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.76058554 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.404615276 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.301378749 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.496961798 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.455168284 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.24333402 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.134628045 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.929455388 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.149723121 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.240195727 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.628334222 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.22168138 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.208787931 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.410127391 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.137520392 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.25281405 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.214447778 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.391634967 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.788930859 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.472663837 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.325895928 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.43790754 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.499275113 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.031550132 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.227304934 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.479667789 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.132963292 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.834012068 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.888414524 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.248375846 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.276991231 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.206220629 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.208344991 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.479584459 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.468830082 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.37220947 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.811349705 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.239242079 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.232669973 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.472860889 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.291985451 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.210574163 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.212368521 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.689131099 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.44130051 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.207816504 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.186957014 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.421745515 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.281060872 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.405161289 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.283897918 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.721669653 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.215584407 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.033117952 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.30215919 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.16542048 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.206529156 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.886483378 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.266278623 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.205416746 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.480154435 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.859607212 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.411687739 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.604673106 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.108494221 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.415144395 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.251407354 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.212807373 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.2655007 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.493315621 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.504265605 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.2061025 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.476551111 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.249559277 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.212751356 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.869786985 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.175208339 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.207627331 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.937505557 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.13511085 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.936823734 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.60614565 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.214987708 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.209907123 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.213196432 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.136711945 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.209476611 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.383603069 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.213818797 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.281777216 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.478286693 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.44874842 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.297994186 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.215102812 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.21220809 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.218259217 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.423447237 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.723206747 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.223864561 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.910580997 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.413197161 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.209404027 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.693357721 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.653122909 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.471647532 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.255556396 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.412995964 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.439289089 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.7451492 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.418643082 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.187598237 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.435475571 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.210434119 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.483571402 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.484627106 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.212982031 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.424154494 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.816173749 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.499405555 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.566282652 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.523415514 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.268894676 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.424640919 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.147968569 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.220114254 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.216137085 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.475713766 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.262241242 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.209531527 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.21918924 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.766869831 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.952651261 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.662102 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.358286184 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.458126071 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.95736304 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.966057764 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.215525601 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.139445628 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.209850071 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.236638473 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.215831057 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.139906666 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.886176329 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.936615765 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.42715957 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.522131049 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.14132344 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.417287659 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.793477036 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.136674305 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.180237059 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.21500989 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.462817611 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.136950006 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.217245197 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.166721125 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.414499797 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.927500594 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.485668426 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.215181583 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.15714343 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.216757242 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.217483215 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.214140847 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.300818301 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.21655489 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.335599008 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.479730472 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.507456234 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.310569489 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.859774109 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.941707934 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.153524188 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.259769803 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.77359274 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.785335406 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.473701125 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.335211637 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.935998508 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.164431272 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.217879534 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.231364948 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.479840944 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.220049521 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.219176684 seconds)
  done (took 2276.709434463 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.235932614 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.249491056 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.25325243 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.288049539 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.27566454 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.298765431 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.252666504 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.290631618 seconds)
  done (took 60.282538167 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.220514391 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.127048594 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.221838921 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.216722597 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.215335979 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.245516986 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.402516834 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.244809106 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.214258489 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.218692228 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.216584761 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.216091474 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.21822171 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.213018775 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.219117467 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.507081358 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.246581063 seconds)
  done (took 82.304081756 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.269759969 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.030679745 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.21818861 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.898381383 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.220907791 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.582739923 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.212890958 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.218321505 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.353843663 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.507080525 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.259097852 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.226825673 seconds)
  done (took 94.160941611 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.218946664 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.217775614 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.21927838 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.217466601 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.217419892 seconds)
  done (took 13.226798003 seconds)
done (took 2838.539740209 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.455424135 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.313187766 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.287794708 seconds)
  done (took 6.738615445 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.365046259 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.411756138 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.523918893 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.544751464 seconds)
  done (took 11.988228649 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.506662174 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.58809199 seconds)
  done (took 7.231317103 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.586523402 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.22047999 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.606828862 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.221078763 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.218073632 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.222192325 seconds)
  done (took 23.804336766 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.219189991 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.219273988 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.220262135 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.218906676 seconds)
  done (took 11.016163914 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.216628439 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.994518091 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.213760946 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.222036557 seconds)
  done (took 22.784196006 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.357091332 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.353254344 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.982058006 seconds)
  done (took 10.830742396 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.835491576 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.675143421 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.824342904 seconds)
  done (took 10.47237532 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.045253012 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.229939445 seconds)
  done (took 8.413077784 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.366102003 seconds)
  done (took 4.5042041 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.058048069 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.531651648 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.694564308 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.71364745 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.787858387 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.430198035 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.540012105 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.488623068 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.607431449 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.60773746 seconds)
  done (took 28.599699078 seconds)
done (took 163.389638122 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.668479094 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.246821789 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.433546145 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.59274556 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.460372531 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.434766974 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.516865211 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.583029155 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.268199986 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.253154859 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.591248979 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.460920198 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.467777043 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.248919468 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.469472705 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.247777457 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.51750342 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.695184359 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.276688699 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.48969154 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.523509483 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.241044388 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.432690133 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.255805828 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.461842319 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.383150253 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.850422143 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.243296591 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.426245 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.8652501 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.381488714 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.638142487 seconds)
  done (took 180.764972713 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.221741413 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.217405005 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.220387575 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.218597966 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.579570083 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.218930796 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.219534601 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.217849042 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.431826136 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.413772849 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.220033037 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.56362588 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.221663755 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.219622564 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.220425485 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.219239004 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.539113466 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.218545246 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.219442736 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.220487333 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.220075634 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.444304448 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.220322263 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.458581607 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.525031793 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.220049464 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.220344506 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.219934645 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.22102996 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.220607917 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.221626736 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.220539746 seconds)
  done (took 219.378074795 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.223590051 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.221473604 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.221229893 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.223172561 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.222019928 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.222481663 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.224402691 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.220887432 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.884900558 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.871283351 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.221976924 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.220801879 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.222566004 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.221662567 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.223024874 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.220887694 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.22042096 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.220829419 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.221934732 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.224358484 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.223217172 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.004407542 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.222241102 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.032072139 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.222337914 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.222246852 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.222136208 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.222342487 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.220651978 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.222229276 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.2240246 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.222663139 seconds)
  done (took 232.159755554 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.463808449 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.224741218 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.226854052 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.239706308 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.226120448 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.224858432 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.233862683 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.471961914 seconds)
  done (took 22.457805075 seconds)
done (took 656.912409513 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.602370988 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.938768787 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.355915905 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.247991832 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.537416343 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.290673783 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.243861055 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.307380495 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.901546229 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.319001458 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.65792488 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.249973671 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.9577227 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.271439214 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.360335794 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.30048928 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.616783973 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.863708885 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.379672641 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.914465636 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.452518028 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.165702332 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.327515313 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.930061413 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.665976602 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.183029289 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.252040028 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.615579799 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.2485332 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.483496248 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.912930734 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.499657835 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.2578333 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.243628362 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.303026685 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.287891906 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.43877703 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.253466995 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.355724861 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.960958465 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.912732206 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.776089766 seconds)
  done (took 114.989169534 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.234088447 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.230679886 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.232098572 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.232848998 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.240613253 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.232158149 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.232854669 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.233508386 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.231333313 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.232184261 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.233044646 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.240099016 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.232995662 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.240807651 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.233268669 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.233226705 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.232451224 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.241372646 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.232995524 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.232596816 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.234694131 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.233157598 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.229867574 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.234380015 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.234158511 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.232891815 seconds)
  done (took 60.241200937 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.229568244 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.407095946 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.520274632 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.259172445 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.228895605 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.232909505 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.258286184 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.238243375 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.232878414 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.231166937 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.342890347 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.236945016 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.242301617 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.517330388 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.256826447 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.229352095 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.230784099 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.231661181 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.415179601 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.246248085 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.261886066 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.237632822 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.260270794 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.24634893 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.233451934 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.23131561 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.233385322 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.654467826 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.238660776 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.344358041 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.276500996 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.260430365 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.567667141 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.528593465 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.296515202 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.239542885 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.230459317 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.39541881 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.243489236 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.230368921 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.25945849 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.235830124 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.522113828 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.743866224 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.243201491 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.232715858 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.650131968 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.406233403 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.278147545 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.24400524 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.527639658 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.260254058 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.23278162 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.232376259 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.269711697 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.241245849 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.230660431 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.479698207 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.24725291 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.260047405 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.241075866 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.231237031 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.421293813 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.239285472 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.410930093 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.239358928 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.241638765 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.233343595 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.526529069 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.260015555 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.740108638 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.246037595 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.232954522 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.346999544 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.413758356 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.676307855 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.246531398 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.421653985 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.585884358 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.267697011 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.243447871 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.641966812 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.271235133 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.241288026 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.233407896 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.234204961 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.23375227 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.27591406 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.261300795 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.651677733 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.7444726 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.497159654 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.270812956 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.244072097 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.237636618 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.477550168 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.242501448 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.234877796 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.518987713 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.76362789 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.247578448 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.240164814 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.725113358 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.251858976 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.262337132 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.243406482 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.534934795 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.265015365 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.276775329 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.233903199 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.241277641 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.239170272 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.263901225 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.242434062 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.233388916 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.713560722 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.417602711 seconds)
  done (took 275.322399975 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.238491893 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.231228792 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.236015234 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.231273746 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.23421654 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.234033862 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.23230588 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.23133168 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.234886001 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.232256503 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.232127447 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.233762865 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.234984865 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.23863501 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.270700386 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.235475378 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.727553339 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.233982155 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.233190103 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.233611748 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.808256603 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.23921655 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.234745078 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.233394521 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.233932239 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.236951832 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.244120623 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.270351858 seconds)
  done (took 177.871845923 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.235585302 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.283012124 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.244683661 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.281405872 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.246544694 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.236726355 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.256230539 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.249093446 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.241788057 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.233914596 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.236650017 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.262394519 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.240587904 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.31138352 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.260830554 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.262427596 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.31124643 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.240026509 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.236821364 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.236367049 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.284760818 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.250229306 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.264480469 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.288228045 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.246999547 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.28401879 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.247015191 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.237002927 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.238018493 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.325569806 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.252967502 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.264921386 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.268322084 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.252956668 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.331182294 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.327818338 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.315202699 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.262611702 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.237625755 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.24061483 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.235021783 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.24041387 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.285637594 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.248663964 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.238867329 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.327466954 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.253608812 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.237159229 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.257871804 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.236980174 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.247725661 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.257617535 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.271324701 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.337468111 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.282576188 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.259627808 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.2607959 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.251842316 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.236911673 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.312661263 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.245239089 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.325196943 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.257027823 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.238787102 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.237991043 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.240916224 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.284973879 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.271550154 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.315469106 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.24419503 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.311554141 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.291754585 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.251191614 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.237478317 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.239916269 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.287800882 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.324608932 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.291838019 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.299465997 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.272945629 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.248162872 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.240258993 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.239021425 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.26585084 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.243827454 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.327533875 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.32921274 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.24306594 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.241497797 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.239799675 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.240949828 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.263163752 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.294088935 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.277511842 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.319872159 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.271320714 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.271332758 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.245456735 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.254671659 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.246388856 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.272865028 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.245970959 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.253189397 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.57917042 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.272494681 seconds)
  done (took 240.363807839 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.602558677 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.284788639 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.30967985 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.518024372 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.627893833 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.342539376 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.27593 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.292833101 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.301150776 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.409718695 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.34312329 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.33011756 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.274543722 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.263060711 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.286619132 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.298569752 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.320124682 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.589979971 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.382286634 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.94658336 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.273476811 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.551519667 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.572533981 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.619594937 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.326833953 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.686505379 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.897841642 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.375526617 seconds)
  done (took 72.468659785 seconds)
done (took 943.403496678 seconds)
SAVING RESULT...
DONE!
